/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _reactDom = __webpack_require__(1);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _router = __webpack_require__(17);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	_reactDom2.default.render(_router.router, document.getElementById("root"));

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
	  ) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // This branch is unreachable because this function is only called
	    // in production, but the condition is true only in development.
	    // Therefore if the branch is still here, dead code elimination wasn't
	    // properly applied.
	    // Don't change the message. React DevTools relies on it. Also make sure
	    // this message doesn't occur elsewhere in this function, or it will cause
	    // a false positive.
	    throw new Error('^_^');
	  }
	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}

	if (process.env.NODE_ENV === 'production') {
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  module.exports = __webpack_require__(3);
	} else {
	  module.exports = __webpack_require__(13);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/** @license React v16.8.3
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/*
	 Modernizr 3.0.0pre (Custom Build) | MIT
	*/
	'use strict';var aa=__webpack_require__(4),n=__webpack_require__(6),r=__webpack_require__(10);function ba(a,b,c,d,e,f,g,h){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[c,d,e,f,g,h],k=0;a=Error(b.replace(/%s/g,function(){return l[k++]}));a.name="Invariant Violation"}a.framesToPop=1;throw a;}}
	function x(a){for(var b=arguments.length-1,c="https://reactjs.org/docs/error-decoder.html?invariant="+a,d=0;d<b;d++)c+="&args[]="+encodeURIComponent(arguments[d+1]);ba(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",c)}aa?void 0:x("227");function ca(a,b,c,d,e,f,g,h,l){var k=Array.prototype.slice.call(arguments,3);try{b.apply(c,k)}catch(m){this.onError(m)}}
	var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a}};function ja(a,b,c,d,e,f,g,h,l){da=!1;ea=null;ca.apply(ia,arguments)}function ka(a,b,c,d,e,f,g,h,l){ja.apply(this,arguments);if(da){if(da){var k=ea;da=!1;ea=null}else x("198"),k=void 0;fa||(fa=!0,ha=k)}}var la=null,ma={};
	function na(){if(la)for(var a in ma){var b=ma[a],c=la.indexOf(a);-1<c?void 0:x("96",a);if(!oa[c]){b.extractEvents?void 0:x("97",a);oa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;pa.hasOwnProperty(h)?x("99",h):void 0;pa[h]=f;var l=f.phasedRegistrationNames;if(l){for(e in l)l.hasOwnProperty(e)&&qa(l[e],g,h);e=!0}else f.registrationName?(qa(f.registrationName,g,h),e=!0):e=!1;e?void 0:x("98",d,a)}}}}
	function qa(a,b,c){ra[a]?x("100",a):void 0;ra[a]=b;sa[a]=b.eventTypes[c].dependencies}var oa=[],pa={},ra={},sa={},ta=null,ua=null,va=null;function wa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=va(c);ka(d,b,void 0,a);a.currentTarget=null}function xa(a,b){null==b?x("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}
	function ya(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var za=null;function Aa(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)wa(a,b[d],c[d]);else b&&wa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}
	var Ba={injectEventPluginOrder:function(a){la?x("101"):void 0;la=Array.prototype.slice.call(a);na()},injectEventPluginsByName:function(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];ma.hasOwnProperty(c)&&ma[c]===d||(ma[c]?x("102",c):void 0,ma[c]=d,b=!0)}b&&na()}};
	function Ca(a,b){var c=a.stateNode;if(!c)return null;var d=ta(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;c&&"function"!==typeof c?x("231",b,typeof c):void 0;
	return c}function Da(a){null!==a&&(za=xa(za,a));a=za;za=null;if(a&&(ya(a,Aa),za?x("95"):void 0,fa))throw a=ha,fa=!1,ha=null,a;}var Ea=Math.random().toString(36).slice(2),Fa="__reactInternalInstance$"+Ea,Ga="__reactEventHandlers$"+Ea;function Ha(a){if(a[Fa])return a[Fa];for(;!a[Fa];)if(a.parentNode)a=a.parentNode;else return null;a=a[Fa];return 5===a.tag||6===a.tag?a:null}function Ia(a){a=a[Fa];return!a||5!==a.tag&&6!==a.tag?null:a}
	function Ja(a){if(5===a.tag||6===a.tag)return a.stateNode;x("33")}function Ka(a){return a[Ga]||null}function La(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}function Ma(a,b,c){if(b=Ca(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=xa(c._dispatchListeners,b),c._dispatchInstances=xa(c._dispatchInstances,a)}
	function Na(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=La(b);for(b=c.length;0<b--;)Ma(c[b],"captured",a);for(b=0;b<c.length;b++)Ma(c[b],"bubbled",a)}}function Oa(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Ca(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=xa(c._dispatchListeners,b),c._dispatchInstances=xa(c._dispatchInstances,a))}function Pa(a){a&&a.dispatchConfig.registrationName&&Oa(a._targetInst,null,a)}
	function Qa(a){ya(a,Na)}var Ra=!("undefined"===typeof window||!window.document||!window.document.createElement);function Sa(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ta={animationend:Sa("Animation","AnimationEnd"),animationiteration:Sa("Animation","AnimationIteration"),animationstart:Sa("Animation","AnimationStart"),transitionend:Sa("Transition","TransitionEnd")},Ua={},Va={};
	Ra&&(Va=document.createElement("div").style,"AnimationEvent"in window||(delete Ta.animationend.animation,delete Ta.animationiteration.animation,delete Ta.animationstart.animation),"TransitionEvent"in window||delete Ta.transitionend.transition);function Wa(a){if(Ua[a])return Ua[a];if(!Ta[a])return a;var b=Ta[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Va)return Ua[a]=b[c];return a}
	var Xa=Wa("animationend"),Ya=Wa("animationiteration"),Za=Wa("animationstart"),$a=Wa("transitionend"),ab="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bb=null,cb=null,db=null;
	function eb(){if(db)return db;var a,b=cb,c=b.length,d,e="value"in bb?bb.value:bb.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return db=e.slice(a,1<d?1-d:void 0)}function fb(){return!0}function gb(){return!1}
	function y(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?fb:gb;this.isPropagationStopped=gb;return this}
	n(y.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=fb)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=fb)},persist:function(){this.isPersistent=fb},isPersistent:gb,destructor:function(){var a=this.constructor.Interface,
	b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=gb;this._dispatchInstances=this._dispatchListeners=null}});y.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
	y.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;hb(c);return c};hb(y);function ib(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}function jb(a){a instanceof this?void 0:x("279");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}
	function hb(a){a.eventPool=[];a.getPooled=ib;a.release=jb}var kb=y.extend({data:null}),lb=y.extend({data:null}),mb=[9,13,27,32],nb=Ra&&"CompositionEvent"in window,ob=null;Ra&&"documentMode"in document&&(ob=document.documentMode);
	var pb=Ra&&"TextEvent"in window&&!ob,qb=Ra&&(!nb||ob&&8<ob&&11>=ob),rb=String.fromCharCode(32),sb={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
	captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},tb=!1;
	function ub(a,b){switch(a){case "keyup":return-1!==mb.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function vb(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var wb=!1;function xb(a,b){switch(a){case "compositionend":return vb(b);case "keypress":if(32!==b.which)return null;tb=!0;return rb;case "textInput":return a=b.data,a===rb&&tb?null:a;default:return null}}
	function yb(a,b){if(wb)return"compositionend"===a||!nb&&ub(a,b)?(a=eb(),db=cb=bb=null,wb=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return qb&&"ko"!==b.locale?null:b.data;default:return null}}
	var zb={eventTypes:sb,extractEvents:function(a,b,c,d){var e=void 0;var f=void 0;if(nb)b:{switch(a){case "compositionstart":e=sb.compositionStart;break b;case "compositionend":e=sb.compositionEnd;break b;case "compositionupdate":e=sb.compositionUpdate;break b}e=void 0}else wb?ub(a,c)&&(e=sb.compositionEnd):"keydown"===a&&229===c.keyCode&&(e=sb.compositionStart);e?(qb&&"ko"!==c.locale&&(wb||e!==sb.compositionStart?e===sb.compositionEnd&&wb&&(f=eb()):(bb=d,cb="value"in bb?bb.value:bb.textContent,wb=
	!0)),e=kb.getPooled(e,b,c,d),f?e.data=f:(f=vb(c),null!==f&&(e.data=f)),Qa(e),f=e):f=null;(a=pb?xb(a,c):yb(a,c))?(b=lb.getPooled(sb.beforeInput,b,c,d),b.data=a,Qa(b)):b=null;return null===f?b:null===b?f:[f,b]}},Ab=null,Bb=null,Cb=null;function Db(a){if(a=ua(a)){"function"!==typeof Ab?x("280"):void 0;var b=ta(a.stateNode);Ab(a.stateNode,a.type,b)}}function Eb(a){Bb?Cb?Cb.push(a):Cb=[a]:Bb=a}function Fb(){if(Bb){var a=Bb,b=Cb;Cb=Bb=null;Db(a);if(b)for(a=0;a<b.length;a++)Db(b[a])}}
	function Gb(a,b){return a(b)}function Hb(a,b,c){return a(b,c)}function Ib(){}var Jb=!1;function Kb(a,b){if(Jb)return a(b);Jb=!0;try{return Gb(a,b)}finally{if(Jb=!1,null!==Bb||null!==Cb)Ib(),Fb()}}var Lb={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Mb(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!Lb[a.type]:"textarea"===b?!0:!1}
	function Nb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function Ob(a){if(!Ra)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}function Pb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
	function Qb(a){var b=Pb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
	null;delete a[b]}}}}function Rb(a){a._valueTracker||(a._valueTracker=Qb(a))}function Sb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=Pb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}var Tb=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Tb.hasOwnProperty("ReactCurrentDispatcher")||(Tb.ReactCurrentDispatcher={current:null});
	var Ub=/^(.*)[\\\/]/,z="function"===typeof Symbol&&Symbol.for,Vb=z?Symbol.for("react.element"):60103,Wb=z?Symbol.for("react.portal"):60106,Xb=z?Symbol.for("react.fragment"):60107,Yb=z?Symbol.for("react.strict_mode"):60108,Zb=z?Symbol.for("react.profiler"):60114,$b=z?Symbol.for("react.provider"):60109,ac=z?Symbol.for("react.context"):60110,bc=z?Symbol.for("react.concurrent_mode"):60111,cc=z?Symbol.for("react.forward_ref"):60112,dc=z?Symbol.for("react.suspense"):60113,ec=z?Symbol.for("react.memo"):
	60115,fc=z?Symbol.for("react.lazy"):60116,gc="function"===typeof Symbol&&Symbol.iterator;function hc(a){if(null===a||"object"!==typeof a)return null;a=gc&&a[gc]||a["@@iterator"];return"function"===typeof a?a:null}
	function ic(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case bc:return"ConcurrentMode";case Xb:return"Fragment";case Wb:return"Portal";case Zb:return"Profiler";case Yb:return"StrictMode";case dc:return"Suspense"}if("object"===typeof a)switch(a.$$typeof){case ac:return"Context.Consumer";case $b:return"Context.Provider";case cc:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+
	")":"ForwardRef");case ec:return ic(a.type);case fc:if(a=1===a._status?a._result:null)return ic(a)}return null}function jc(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=ic(a.type);c=null;d&&(c=ic(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Ub,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}
	var kc=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,lc=Object.prototype.hasOwnProperty,mc={},nc={};
	function oc(a){if(lc.call(nc,a))return!0;if(lc.call(mc,a))return!1;if(kc.test(a))return nc[a]=!0;mc[a]=!0;return!1}function pc(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
	function qc(a,b,c,d){if(null===b||"undefined"===typeof b||pc(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function C(a,b,c,d,e){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b}var D={};
	"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){D[a]=new C(a,0,!1,a,null)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];D[b]=new C(b,1,!1,a[1],null)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){D[a]=new C(a,2,!1,a.toLowerCase(),null)});
	["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){D[a]=new C(a,2,!1,a,null)});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){D[a]=new C(a,3,!1,a.toLowerCase(),null)});["checked","multiple","muted","selected"].forEach(function(a){D[a]=new C(a,3,!0,a,null)});
	["capture","download"].forEach(function(a){D[a]=new C(a,4,!1,a,null)});["cols","rows","size","span"].forEach(function(a){D[a]=new C(a,6,!1,a,null)});["rowSpan","start"].forEach(function(a){D[a]=new C(a,5,!1,a.toLowerCase(),null)});var rc=/[\-:]([a-z])/g;function sc(a){return a[1].toUpperCase()}
	"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(rc,
	sc);D[b]=new C(b,1,!1,a,null)});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(rc,sc);D[b]=new C(b,1,!1,a,"http://www.w3.org/1999/xlink")});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(rc,sc);D[b]=new C(b,1,!1,a,"http://www.w3.org/XML/1998/namespace")});["tabIndex","crossOrigin"].forEach(function(a){D[a]=new C(a,1,!1,a.toLowerCase(),null)});
	function tc(a,b,c,d){var e=D.hasOwnProperty(b)?D[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(qc(b,c,e,d)&&(c=null),d||null===e?oc(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
	function uc(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function vc(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
	function wc(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=uc(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function xc(a,b){b=b.checked;null!=b&&tc(a,"checked",b,!1)}
	function yc(a,b){xc(a,b);var c=uc(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?zc(a,b.type,c):b.hasOwnProperty("defaultValue")&&zc(a,b.type,uc(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
	function Ac(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
	function zc(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}var Bc={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Cc(a,b,c){a=y.getPooled(Bc.change,a,b,c);a.type="change";Eb(c);Qa(a);return a}var Dc=null,Ec=null;function Fc(a){Da(a)}
	function Gc(a){var b=Ja(a);if(Sb(b))return a}function Hc(a,b){if("change"===a)return b}var Ic=!1;Ra&&(Ic=Ob("input")&&(!document.documentMode||9<document.documentMode));function Jc(){Dc&&(Dc.detachEvent("onpropertychange",Kc),Ec=Dc=null)}function Kc(a){"value"===a.propertyName&&Gc(Ec)&&(a=Cc(Ec,a,Nb(a)),Kb(Fc,a))}function Lc(a,b,c){"focus"===a?(Jc(),Dc=b,Ec=c,Dc.attachEvent("onpropertychange",Kc)):"blur"===a&&Jc()}function Mc(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return Gc(Ec)}
	function Nc(a,b){if("click"===a)return Gc(b)}function Oc(a,b){if("input"===a||"change"===a)return Gc(b)}
	var Pc={eventTypes:Bc,_isInputEventSupported:Ic,extractEvents:function(a,b,c,d){var e=b?Ja(b):window,f=void 0,g=void 0,h=e.nodeName&&e.nodeName.toLowerCase();"select"===h||"input"===h&&"file"===e.type?f=Hc:Mb(e)?Ic?f=Oc:(f=Mc,g=Lc):(h=e.nodeName)&&"input"===h.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(f=Nc);if(f&&(f=f(a,b)))return Cc(f,c,d);g&&g(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&zc(e,"number",e.value)}},Qc=y.extend({view:null,detail:null}),Rc={Alt:"altKey",
	Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sc(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Rc[a])?!!b[a]:!1}function Tc(){return Sc}
	var Uc=0,Vc=0,Wc=!1,Xc=!1,Yc=Qc.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Tc,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Uc;Uc=a.screenX;return Wc?"mousemove"===a.type?a.screenX-b:0:(Wc=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
	var b=Vc;Vc=a.screenY;return Xc?"mousemove"===a.type?a.screenY-b:0:(Xc=!0,0)}}),Zc=Yc.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),$c={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
	dependencies:["pointerout","pointerover"]}},ad={eventTypes:$c,extractEvents:function(a,b,c,d){var e="mouseover"===a||"pointerover"===a,f="mouseout"===a||"pointerout"===a;if(e&&(c.relatedTarget||c.fromElement)||!f&&!e)return null;e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;f?(f=b,b=(b=c.relatedTarget||c.toElement)?Ha(b):null):f=null;if(f===b)return null;var g=void 0,h=void 0,l=void 0,k=void 0;if("mouseout"===a||"mouseover"===a)g=Yc,h=$c.mouseLeave,l=$c.mouseEnter,k="mouse";
	else if("pointerout"===a||"pointerover"===a)g=Zc,h=$c.pointerLeave,l=$c.pointerEnter,k="pointer";var m=null==f?e:Ja(f);e=null==b?e:Ja(b);a=g.getPooled(h,f,c,d);a.type=k+"leave";a.target=m;a.relatedTarget=e;c=g.getPooled(l,b,c,d);c.type=k+"enter";c.target=e;c.relatedTarget=m;d=b;if(f&&d)a:{b=f;e=d;k=0;for(g=b;g;g=La(g))k++;g=0;for(l=e;l;l=La(l))g++;for(;0<k-g;)b=La(b),k--;for(;0<g-k;)e=La(e),g--;for(;k--;){if(b===e||b===e.alternate)break a;b=La(b);e=La(e)}b=null}else b=null;e=b;for(b=[];f&&f!==e;){k=
	f.alternate;if(null!==k&&k===e)break;b.push(f);f=La(f)}for(f=[];d&&d!==e;){k=d.alternate;if(null!==k&&k===e)break;f.push(d);d=La(d)}for(d=0;d<b.length;d++)Oa(b[d],"bubbled",a);for(d=f.length;0<d--;)Oa(f[d],"captured",c);return[a,c]}};function bd(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var cd=Object.prototype.hasOwnProperty;
	function dd(a,b){if(bd(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!cd.call(b,c[d])||!bd(a[c[d]],b[c[d]]))return!1;return!0}function ed(a){var b=a;if(a.alternate)for(;b.return;)b=b.return;else{if(0!==(b.effectTag&2))return 1;for(;b.return;)if(b=b.return,0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function fd(a){2!==ed(a)?x("188"):void 0}
	function gd(a){var b=a.alternate;if(!b)return b=ed(a),3===b?x("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c.return,f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return fd(e),a;if(g===d)return fd(e),b;g=g.sibling}x("188")}if(c.return!==d.return)c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}g?
	void 0:x("189")}}c.alternate!==d?x("190"):void 0}3!==c.tag?x("188"):void 0;return c.stateNode.current===c?a:b}function hd(a){a=gd(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
	var id=y.extend({animationName:null,elapsedTime:null,pseudoElement:null}),jd=y.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),kd=Qc.extend({relatedTarget:null});function ld(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
	var md={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
	116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},od=Qc.extend({key:function(a){if(a.key){var b=md[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=ld(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?nd[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Tc,charCode:function(a){return"keypress"===
	a.type?ld(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?ld(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),pd=Yc.extend({dataTransfer:null}),qd=Qc.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Tc}),rd=y.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),sd=Yc.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
	a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),td=[["abort","abort"],[Xa,"animationEnd"],[Ya,"animationIteration"],[Za,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],
	["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],
	["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[$a,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],ud={},vd={};function wd(a,b){var c=a[0];a=a[1];var d="on"+(a[0].toUpperCase()+a.slice(1));b={phasedRegistrationNames:{bubbled:d,captured:d+"Capture"},dependencies:[c],isInteractive:b};ud[a]=b;vd[c]=b}
	[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],
	["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(a){wd(a,!0)});td.forEach(function(a){wd(a,!1)});
	var xd={eventTypes:ud,isInteractiveTopLevelEventType:function(a){a=vd[a];return void 0!==a&&!0===a.isInteractive},extractEvents:function(a,b,c,d){var e=vd[a];if(!e)return null;switch(a){case "keypress":if(0===ld(c))return null;case "keydown":case "keyup":a=od;break;case "blur":case "focus":a=kd;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=Yc;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=
	pd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=qd;break;case Xa:case Ya:case Za:a=id;break;case $a:a=rd;break;case "scroll":a=Qc;break;case "wheel":a=sd;break;case "copy":case "cut":case "paste":a=jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=Zc;break;default:a=y}b=a.getPooled(e,b,c,d);Qa(b);return b}},yd=xd.isInteractiveTopLevelEventType,
	zd=[];function Ad(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d;for(d=c;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo;if(!d)break;a.ancestors.push(c);c=Ha(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=Nb(a.nativeEvent);d=a.topLevelType;for(var f=a.nativeEvent,g=null,h=0;h<oa.length;h++){var l=oa[h];l&&(l=l.extractEvents(d,b,f,e))&&(g=xa(g,l))}Da(g)}}var Bd=!0;
	function E(a,b){if(!b)return null;var c=(yd(a)?Cd:Dd).bind(null,a);b.addEventListener(a,c,!1)}function Ed(a,b){if(!b)return null;var c=(yd(a)?Cd:Dd).bind(null,a);b.addEventListener(a,c,!0)}function Cd(a,b){Hb(Dd,a,b)}
	function Dd(a,b){if(Bd){var c=Nb(b);c=Ha(c);null===c||"number"!==typeof c.tag||2===ed(c)||(c=null);if(zd.length){var d=zd.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{Kb(Ad,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>zd.length&&zd.push(a)}}}var Fd={},Gd=0,Hd="_reactListenersID"+(""+Math.random()).slice(2);
	function Id(a){Object.prototype.hasOwnProperty.call(a,Hd)||(a[Hd]=Gd++,Fd[a[Hd]]={});return Fd[a[Hd]]}function Jd(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function Kd(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
	function Ld(a,b){var c=Kd(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Kd(c)}}function Md(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Md(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
	function Nd(){for(var a=window,b=Jd();b instanceof a.HTMLIFrameElement;){try{a=b.contentDocument.defaultView}catch(c){break}b=Jd(a.document)}return b}function Od(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
	function Pd(){var a=Nd();if(Od(a)){if("selectionStart"in a)var b={start:a.selectionStart,end:a.selectionEnd};else a:{b=(b=a.ownerDocument)&&b.defaultView||window;var c=b.getSelection&&b.getSelection();if(c&&0!==c.rangeCount){b=c.anchorNode;var d=c.anchorOffset,e=c.focusNode;c=c.focusOffset;try{b.nodeType,e.nodeType}catch(A){b=null;break a}var f=0,g=-1,h=-1,l=0,k=0,m=a,p=null;b:for(;;){for(var t;;){m!==b||0!==d&&3!==m.nodeType||(g=f+d);m!==e||0!==c&&3!==m.nodeType||(h=f+c);3===m.nodeType&&(f+=m.nodeValue.length);
	if(null===(t=m.firstChild))break;p=m;m=t}for(;;){if(m===a)break b;p===b&&++l===d&&(g=f);p===e&&++k===c&&(h=f);if(null!==(t=m.nextSibling))break;m=p;p=m.parentNode}m=t}b=-1===g||-1===h?null:{start:g,end:h}}else b=null}b=b||{start:0,end:0}}else b=null;return{focusedElem:a,selectionRange:b}}
	function Qd(a){var b=Nd(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Md(c.ownerDocument.documentElement,c)){if(null!==d&&Od(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ld(c,f);var g=Ld(c,
	d);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});"function"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}
	var Rd=Ra&&"documentMode"in document&&11>=document.documentMode,Sd={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Td=null,Ud=null,Vd=null,Wd=!1;
	function Xd(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(Wd||null==Td||Td!==Jd(c))return null;c=Td;"selectionStart"in c&&Od(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return Vd&&dd(Vd,c)?null:(Vd=c,a=y.getPooled(Sd.select,Ud,a,b),a.type="select",a.target=Td,Qa(a),a)}
	var Yd={eventTypes:Sd,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Id(e);f=sa.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0}f=!e}if(f)return null;e=b?Ja(b):window;switch(a){case "focus":if(Mb(e)||"true"===e.contentEditable)Td=e,Ud=b,Vd=null;break;case "blur":Vd=Ud=Td=null;break;case "mousedown":Wd=!0;break;case "contextmenu":case "mouseup":case "dragend":return Wd=!1,Xd(c,d);case "selectionchange":if(Rd)break;
	case "keydown":case "keyup":return Xd(c,d)}return null}};Ba.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ta=Ka;ua=Ia;va=Ja;Ba.injectEventPluginsByName({SimpleEventPlugin:xd,EnterLeaveEventPlugin:ad,ChangeEventPlugin:Pc,SelectEventPlugin:Yd,BeforeInputEventPlugin:zb});function Zd(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}
	function $d(a,b){a=n({children:void 0},b);if(b=Zd(b.children))a.children=b;return a}function ae(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+uc(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
	function be(a,b){null!=b.dangerouslySetInnerHTML?x("91"):void 0;return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function ce(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?x("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:x("93"),b=b[0]),c=b),null==c&&(c=""));a._wrapperState={initialValue:uc(c)}}
	function de(a,b){var c=uc(b.value),d=uc(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function ee(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)}var fe={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
	function ge(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?ge(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
	var ie=void 0,je=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==fe.svg||"innerHTML"in a)a.innerHTML=b;else{ie=ie||document.createElement("div");ie.innerHTML="<svg>"+b+"</svg>";for(b=ie.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
	function ke(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}
	var le={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
	floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];Object.keys(le).forEach(function(a){me.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);le[b]=le[a]})});function ne(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||le.hasOwnProperty(a)&&le[a]?(""+b).trim():b+"px"}
	function oe(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=ne(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var pe=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
	function qe(a,b){b&&(pe[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?x("137",a,""):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?x("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:x("61")),null!=b.style&&"object"!==typeof b.style?x("62",""):void 0)}
	function re(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}
	function se(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Id(a);b=sa[b];for(var d=0;d<b.length;d++){var e=b[d];if(!c.hasOwnProperty(e)||!c[e]){switch(e){case "scroll":Ed("scroll",a);break;case "focus":case "blur":Ed("focus",a);Ed("blur",a);c.blur=!0;c.focus=!0;break;case "cancel":case "close":Ob(e)&&Ed(e,a);break;case "invalid":case "submit":case "reset":break;default:-1===ab.indexOf(e)&&E(e,a)}c[e]=!0}}}function te(){}var ue=null,ve=null;
	function we(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}function xe(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}
	var ye="function"===typeof setTimeout?setTimeout:void 0,ze="function"===typeof clearTimeout?clearTimeout:void 0,Ae=r.unstable_scheduleCallback,Be=r.unstable_cancelCallback;
	function Ce(a,b,c,d,e){a[Ga]=e;"input"===c&&"radio"===e.type&&null!=e.name&&xc(a,e);re(c,d);d=re(c,e);for(var f=0;f<b.length;f+=2){var g=b[f],h=b[f+1];"style"===g?oe(a,h):"dangerouslySetInnerHTML"===g?je(a,h):"children"===g?ke(a,h):tc(a,g,h,d)}switch(c){case "input":yc(a,e);break;case "textarea":de(a,e);break;case "select":b=a._wrapperState.wasMultiple,a._wrapperState.wasMultiple=!!e.multiple,c=e.value,null!=c?ae(a,!!e.multiple,c,!1):b!==!!e.multiple&&(null!=e.defaultValue?ae(a,!!e.multiple,e.defaultValue,
	!0):ae(a,!!e.multiple,e.multiple?[]:"",!1))}}function De(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}function Ee(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}new Set;var Fe=[],Ge=-1;function F(a){0>Ge||(a.current=Fe[Ge],Fe[Ge]=null,Ge--)}function G(a,b){Ge++;Fe[Ge]=a.current;a.current=b}var He={},H={current:He},I={current:!1},Ie=He;
	function Je(a,b){var c=a.type.contextTypes;if(!c)return He;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function J(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Ke(a){F(I,a);F(H,a)}function Le(a){F(I,a);F(H,a)}
	function Me(a,b,c){H.current!==He?x("168"):void 0;G(H,b,a);G(I,c,a)}function Ne(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)e in a?void 0:x("108",ic(b)||"Unknown",e);return n({},c,d)}function Oe(a){var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||He;Ie=H.current;G(H,b,a);G(I,I.current,a);return!0}
	function Pe(a,b,c){var d=a.stateNode;d?void 0:x("169");c?(b=Ne(a,b,Ie),d.__reactInternalMemoizedMergedChildContext=b,F(I,a),F(H,a),G(H,b,a)):F(I,a);G(I,c,a)}var Qe=null,Re=null;function Se(a){return function(b){try{return a(b)}catch(c){}}}
	function Te(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Qe=Se(function(a){return b.onCommitFiberRoot(c,a)});Re=Se(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0}
	function Ue(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function K(a,b,c,d){return new Ue(a,b,c,d)}
	function Ve(a){a=a.prototype;return!(!a||!a.isReactComponent)}function We(a){if("function"===typeof a)return Ve(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===cc)return 11;if(a===ec)return 14}return 2}
	function Xe(a,b){var c=a.alternate;null===c?(c=K(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;c.contextDependencies=a.contextDependencies;c.sibling=a.sibling;
	c.index=a.index;c.ref=a.ref;return c}
	function Ye(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)Ve(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case Xb:return Ze(c.children,e,f,b);case bc:return $e(c,e|3,f,b);case Yb:return $e(c,e|2,f,b);case Zb:return a=K(12,c,b,e|4),a.elementType=Zb,a.type=Zb,a.expirationTime=f,a;case dc:return a=K(13,c,b,e),a.elementType=dc,a.type=dc,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case $b:g=10;break a;case ac:g=9;break a;case cc:g=11;break a;case ec:g=
	14;break a;case fc:g=16;d=null;break a}x("130",null==a?a:typeof a,"")}b=K(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Ze(a,b,c,d){a=K(7,a,d,b);a.expirationTime=c;return a}function $e(a,b,c,d){a=K(8,a,d,b);b=0===(b&1)?Yb:bc;a.elementType=b;a.type=b;a.expirationTime=c;return a}function af(a,b,c){a=K(6,a,null,b);a.expirationTime=c;return a}
	function bf(a,b,c){b=K(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}function cf(a,b){a.didError=!1;var c=a.earliestPendingTime;0===c?a.earliestPendingTime=a.latestPendingTime=b:c<b?a.earliestPendingTime=b:a.latestPendingTime>b&&(a.latestPendingTime=b);df(b,a)}
	function ef(a,b){a.didError=!1;if(0===b)a.earliestPendingTime=0,a.latestPendingTime=0,a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=0;else{b<a.latestPingedTime&&(a.latestPingedTime=0);var c=a.latestPendingTime;0!==c&&(c>b?a.earliestPendingTime=a.latestPendingTime=0:a.earliestPendingTime>b&&(a.earliestPendingTime=a.latestPendingTime));c=a.earliestSuspendedTime;0===c?cf(a,b):b<a.latestSuspendedTime?(a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=0,cf(a,b)):
	b>c&&cf(a,b)}df(0,a)}function ff(a,b){a.didError=!1;a.latestPingedTime>=b&&(a.latestPingedTime=0);var c=a.earliestPendingTime,d=a.latestPendingTime;c===b?a.earliestPendingTime=d===b?a.latestPendingTime=0:d:d===b&&(a.latestPendingTime=c);c=a.earliestSuspendedTime;d=a.latestSuspendedTime;0===c?a.earliestSuspendedTime=a.latestSuspendedTime=b:c<b?a.earliestSuspendedTime=b:d>b&&(a.latestSuspendedTime=b);df(b,a)}
	function gf(a,b){var c=a.earliestPendingTime;a=a.earliestSuspendedTime;c>b&&(b=c);a>b&&(b=a);return b}function df(a,b){var c=b.earliestSuspendedTime,d=b.latestSuspendedTime,e=b.earliestPendingTime,f=b.latestPingedTime;e=0!==e?e:f;0===e&&(0===a||d<a)&&(e=d);a=e;0!==a&&c>a&&(a=c);b.nextExpirationTimeToWorkOn=e;b.expirationTime=a}function L(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}
	function hf(a){var b=a._result;switch(a._status){case 1:return b;case 2:throw b;case 0:throw b;default:a._status=0;b=a._ctor;b=b();b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)});switch(a._status){case 1:return a._result;case 2:throw a._result;}a._result=b;throw b;}}var jf=(new aa.Component).refs;
	function kf(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;d=a.updateQueue;null!==d&&0===a.expirationTime&&(d.baseState=c)}
	var tf={isMounted:function(a){return(a=a._reactInternalFiber)?2===ed(a):!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=lf();d=mf(d,a);var e=nf(d);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);of();pf(a,e);qf(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=lf();d=mf(d,a);var e=nf(d);e.tag=rf;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);of();pf(a,e);qf(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=lf();c=mf(c,a);var d=nf(c);d.tag=
	sf;void 0!==b&&null!==b&&(d.callback=b);of();pf(a,d);qf(a,c)}};function uf(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!dd(c,d)||!dd(e,f):!0}
	function vf(a,b,c){var d=!1,e=He;var f=b.contextType;"object"===typeof f&&null!==f?f=M(f):(e=J(b)?Ie:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Je(a,e):He);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=tf;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
	function wf(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&tf.enqueueReplaceState(b,b.state,null)}
	function xf(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jf;var f=b.contextType;"object"===typeof f&&null!==f?e.context=M(f):(f=J(b)?Ie:H.current,e.context=Je(a,f));f=a.updateQueue;null!==f&&(yf(a,f,c,e,d),e.state=a.memoizedState);f=b.getDerivedStateFromProps;"function"===typeof f&&(kf(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==
	typeof e.componentWillMount||(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&tf.enqueueReplaceState(e,e.state,null),f=a.updateQueue,null!==f&&(yf(a,f,c,e,d),e.state=a.memoizedState));"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var zf=Array.isArray;
	function Af(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(1!==c.tag?x("309"):void 0,d=c.stateNode);d?void 0:x("147",a);var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===jf&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}"string"!==typeof a?x("284"):void 0;c._owner?void 0:x("290",a)}return a}
	function Bf(a,b){"textarea"!==a.type&&x("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"")}
	function Cf(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=Xe(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
	2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=af(c,a.mode,d),b.return=a,b;b=e(b,c,d);b.return=a;return b}function l(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props,d),d.ref=Af(a,b,c),d.return=a,d;d=Ye(c.type,c.key,c.props,null,a.mode,d);d.ref=Af(a,b,c);d.return=a;return d}function k(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
	c.implementation)return b=bf(c,a.mode,d),b.return=a,b;b=e(b,c.children||[],d);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ze(c,a.mode,d,f),b.return=a,b;b=e(b,c,d);b.return=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=af(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Vb:return c=Ye(b.type,b.key,b.props,null,a.mode,c),c.ref=Af(a,null,b),c.return=a,c;case Wb:return b=bf(b,a.mode,c),b.return=a,b}if(zf(b)||
	hc(b))return b=Ze(b,a.mode,c,null),b.return=a,b;Bf(a,b)}return null}function t(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Vb:return c.key===e?c.type===Xb?m(a,b,c.props.children,d,e):l(a,b,c,d):null;case Wb:return c.key===e?k(a,b,c,d):null}if(zf(c)||hc(c))return null!==e?null:m(a,b,c,d,null);Bf(a,c)}return null}function A(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
	a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Vb:return a=a.get(null===d.key?c:d.key)||null,d.type===Xb?m(b,a,d.props.children,e,d.key):l(b,a,d,e);case Wb:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e)}if(zf(d)||hc(d))return a=a.get(c)||null,m(b,a,d,e,null);Bf(b,d)}return null}function v(e,g,h,k){for(var l=null,m=null,q=g,u=g=0,B=null;null!==q&&u<h.length;u++){q.index>u?(B=q,q=null):B=q.sibling;var w=t(e,q,h[u],k);if(null===w){null===q&&(q=B);break}a&&
	q&&null===w.alternate&&b(e,q);g=f(w,g,u);null===m?l=w:m.sibling=w;m=w;q=B}if(u===h.length)return c(e,q),l;if(null===q){for(;u<h.length;u++)if(q=p(e,h[u],k))g=f(q,g,u),null===m?l=q:m.sibling=q,m=q;return l}for(q=d(e,q);u<h.length;u++)if(B=A(q,e,u,h[u],k))a&&null!==B.alternate&&q.delete(null===B.key?u:B.key),g=f(B,g,u),null===m?l=B:m.sibling=B,m=B;a&&q.forEach(function(a){return b(e,a)});return l}function R(e,g,h,k){var l=hc(h);"function"!==typeof l?x("150"):void 0;h=l.call(h);null==h?x("151"):void 0;
	for(var m=l=null,q=g,u=g=0,B=null,w=h.next();null!==q&&!w.done;u++,w=h.next()){q.index>u?(B=q,q=null):B=q.sibling;var v=t(e,q,w.value,k);if(null===v){q||(q=B);break}a&&q&&null===v.alternate&&b(e,q);g=f(v,g,u);null===m?l=v:m.sibling=v;m=v;q=B}if(w.done)return c(e,q),l;if(null===q){for(;!w.done;u++,w=h.next())w=p(e,w.value,k),null!==w&&(g=f(w,g,u),null===m?l=w:m.sibling=w,m=w);return l}for(q=d(e,q);!w.done;u++,w=h.next())w=A(q,e,u,w.value,k),null!==w&&(a&&null!==w.alternate&&q.delete(null===w.key?u:
	w.key),g=f(w,g,u),null===m?l=w:m.sibling=w,m=w);a&&q.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===Xb&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Vb:a:{l=f.key;for(k=d;null!==k;){if(k.key===l)if(7===k.tag?f.type===Xb:k.elementType===f.type){c(a,k.sibling);d=e(k,f.type===Xb?f.props.children:f.props,h);d.ref=Af(a,k,f);d.return=a;a=d;break a}else{c(a,k);break}else b(a,k);k=
	k.sibling}f.type===Xb?(d=Ze(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ye(f.type,f.key,f.props,null,a.mode,h),h.ref=Af(a,d,f),h.return=a,a=h)}return g(a);case Wb:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=bf(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=
	""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h),d.return=a,a=d):(c(a,d),d=af(f,a.mode,h),d.return=a,a=d),g(a);if(zf(f))return v(a,d,f,h);if(hc(f))return R(a,d,f,h);l&&Bf(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:h=a.type,x("152",h.displayName||h.name||"Component")}return c(a,d)}}var Df=Cf(!0),Ef=Cf(!1),Ff={},N={current:Ff},Gf={current:Ff},Hf={current:Ff};function If(a){a===Ff?x("174"):void 0;return a}
	function Jf(a,b){G(Hf,b,a);G(Gf,a,a);G(N,Ff,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:he(null,"");break;default:c=8===c?b.parentNode:b,b=c.namespaceURI||null,c=c.tagName,b=he(b,c)}F(N,a);G(N,b,a)}function Kf(a){F(N,a);F(Gf,a);F(Hf,a)}function Lf(a){If(Hf.current);var b=If(N.current);var c=he(b,a.type);b!==c&&(G(Gf,a,a),G(N,c,a))}function Mf(a){Gf.current===a&&(F(N,a),F(Gf,a))}
	var Nf=0,Of=2,Pf=4,Qf=8,Rf=16,Sf=32,Tf=64,Uf=128,Vf=Tb.ReactCurrentDispatcher,Wf=0,Xf=null,O=null,P=null,Yf=null,Q=null,Zf=null,$f=0,ag=null,bg=0,cg=!1,dg=null,eg=0;function fg(){x("307")}function gg(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!bd(a[c],b[c]))return!1;return!0}
	function hg(a,b,c,d,e,f){Wf=f;Xf=b;P=null!==a?a.memoizedState:null;Vf.current=null===P?ig:jg;b=c(d,e);if(cg){do cg=!1,eg+=1,P=null!==a?a.memoizedState:null,Zf=Yf,ag=Q=O=null,Vf.current=jg,b=c(d,e);while(cg);dg=null;eg=0}Vf.current=kg;a=Xf;a.memoizedState=Yf;a.expirationTime=$f;a.updateQueue=ag;a.effectTag|=bg;a=null!==O&&null!==O.next;Wf=0;Zf=Q=Yf=P=O=Xf=null;$f=0;ag=null;bg=0;a?x("300"):void 0;return b}function lg(){Vf.current=kg;Wf=0;Zf=Q=Yf=P=O=Xf=null;$f=0;ag=null;bg=0;cg=!1;dg=null;eg=0}
	function mg(){var a={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};null===Q?Yf=Q=a:Q=Q.next=a;return Q}function ng(){if(null!==Zf)Q=Zf,Zf=Q.next,O=P,P=null!==O?O.next:null;else{null===P?x("310"):void 0;O=P;var a={memoizedState:O.memoizedState,baseState:O.baseState,queue:O.queue,baseUpdate:O.baseUpdate,next:null};Q=null===Q?Yf=a:Q.next=a;P=O.next}return Q}function og(a,b){return"function"===typeof b?b(a):b}
	function pg(a){var b=ng(),c=b.queue;null===c?x("311"):void 0;if(0<eg){var d=c.dispatch;if(null!==dg){var e=dg.get(c);if(void 0!==e){dg.delete(c);var f=b.memoizedState;do f=a(f,e.action),e=e.next;while(null!==e);bd(f,b.memoizedState)||(qg=!0);b.memoizedState=f;b.baseUpdate===c.last&&(b.baseState=f);c.eagerReducer=a;c.eagerState=f;return[f,d]}}return[b.memoizedState,d]}d=c.last;var g=b.baseUpdate;f=b.baseState;null!==g?(null!==d&&(d.next=null),d=g.next):d=null!==d?d.next:null;if(null!==d){var h=e=null,
	l=d,k=!1;do{var m=l.expirationTime;m<Wf?(k||(k=!0,h=g,e=f),m>$f&&($f=m)):f=l.eagerReducer===a?l.eagerState:a(f,l.action);g=l;l=l.next}while(null!==l&&l!==d);k||(h=g,e=f);bd(f,b.memoizedState)||(qg=!0);b.memoizedState=f;b.baseUpdate=h;b.baseState=e;c.eagerReducer=a;c.eagerState=f}return[b.memoizedState,c.dispatch]}
	function rg(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};null===ag?(ag={lastEffect:null},ag.lastEffect=a.next=a):(b=ag.lastEffect,null===b?ag.lastEffect=a.next=a:(c=b.next,b.next=a,a.next=c,ag.lastEffect=a));return a}function sg(a,b,c,d){var e=mg();bg|=a;e.memoizedState=rg(b,c,void 0,void 0===d?null:d)}
	function tg(a,b,c,d){var e=ng();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&gg(d,g.deps)){rg(Nf,c,f,d);return}}bg|=a;e.memoizedState=rg(b,c,f,d)}function ug(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function vg(){}
	function wg(a,b,c){25>eg?void 0:x("301");var d=a.alternate;if(a===Xf||null!==d&&d===Xf)if(cg=!0,a={expirationTime:Wf,action:c,eagerReducer:null,eagerState:null,next:null},null===dg&&(dg=new Map),c=dg.get(b),void 0===c)dg.set(b,a);else{for(b=c;null!==b.next;)b=b.next;b.next=a}else{of();var e=lf();e=mf(e,a);var f={expirationTime:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.last;if(null===g)f.next=f;else{var h=g.next;null!==h&&(f.next=h);g.next=f}b.last=f;if(0===a.expirationTime&&(null===
	d||0===d.expirationTime)&&(d=b.eagerReducer,null!==d))try{var l=b.eagerState,k=d(l,c);f.eagerReducer=d;f.eagerState=k;if(bd(k,l))return}catch(m){}finally{}qf(a,e)}}
	var kg={readContext:M,useCallback:fg,useContext:fg,useEffect:fg,useImperativeHandle:fg,useLayoutEffect:fg,useMemo:fg,useReducer:fg,useRef:fg,useState:fg,useDebugValue:fg},ig={readContext:M,useCallback:function(a,b){mg().memoizedState=[a,void 0===b?null:b];return a},useContext:M,useEffect:function(a,b){return sg(516,Uf|Tf,a,b)},useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return sg(4,Pf|Sf,ug.bind(null,b,a),c)},useLayoutEffect:function(a,b){return sg(4,Pf|Sf,a,b)},
	useMemo:function(a,b){var c=mg();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=mg();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={last:null,dispatch:null,eagerReducer:a,eagerState:b};a=a.dispatch=wg.bind(null,Xf,a);return[d.memoizedState,a]},useRef:function(a){var b=mg();a={current:a};return b.memoizedState=a},useState:function(a){var b=mg();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={last:null,dispatch:null,eagerReducer:og,
	eagerState:a};a=a.dispatch=wg.bind(null,Xf,a);return[b.memoizedState,a]},useDebugValue:vg},jg={readContext:M,useCallback:function(a,b){var c=ng();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&gg(b,d[1]))return d[0];c.memoizedState=[a,b];return a},useContext:M,useEffect:function(a,b){return tg(516,Uf|Tf,a,b)},useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return tg(4,Pf|Sf,ug.bind(null,b,a),c)},useLayoutEffect:function(a,b){return tg(4,Pf|Sf,a,b)},
	useMemo:function(a,b){var c=ng();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&gg(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a},useReducer:pg,useRef:function(){return ng().memoizedState},useState:function(a){return pg(og,a)},useDebugValue:vg},xg=null,yg=null,zg=!1;
	function Ag(a,b){var c=K(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function Bg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}
	function Cg(a){if(zg){var b=yg;if(b){var c=b;if(!Bg(a,b)){b=De(c);if(!b||!Bg(a,b)){a.effectTag|=2;zg=!1;xg=a;return}Ag(xg,c)}xg=a;yg=Ee(b)}else a.effectTag|=2,zg=!1,xg=a}}function Dg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&18!==a.tag;)a=a.return;xg=a}function Eg(a){if(a!==xg)return!1;if(!zg)return Dg(a),zg=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!xe(b,a.memoizedProps))for(b=yg;b;)Ag(a,b),b=De(b);Dg(a);yg=xg?De(a.stateNode):null;return!0}function Fg(){yg=xg=null;zg=!1}
	var Gg=Tb.ReactCurrentOwner,qg=!1;function S(a,b,c,d){b.child=null===a?Ef(b,null,c,d):Df(b,a.child,c,d)}function Hg(a,b,c,d,e){c=c.render;var f=b.ref;Ig(b,e);d=hg(a,b,c,d,f,e);if(null!==a&&!qg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),Jg(a,b,e);b.effectTag|=1;S(a,b,d,e);return b.child}
	function Kg(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!Ve(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,Lg(a,b,g,d,e,f);a=Ye(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:dd,c(e,d)&&a.ref===b.ref))return Jg(a,b,f);b.effectTag|=1;a=Xe(g,d,f);a.ref=b.ref;a.return=b;return b.child=a}
	function Lg(a,b,c,d,e,f){return null!==a&&dd(a.memoizedProps,d)&&a.ref===b.ref&&(qg=!1,e<f)?Jg(a,b,f):Mg(a,b,c,d,f)}function Ng(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function Mg(a,b,c,d,e){var f=J(c)?Ie:H.current;f=Je(b,f);Ig(b,e);c=hg(a,b,c,d,f,e);if(null!==a&&!qg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),Jg(a,b,e);b.effectTag|=1;S(a,b,c,e);return b.child}
	function Og(a,b,c,d,e){if(J(c)){var f=!0;Oe(b)}else f=!1;Ig(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),vf(b,c,d,e),xf(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var l=g.context,k=c.contextType;"object"===typeof k&&null!==k?k=M(k):(k=J(c)?Ie:H.current,k=Je(b,k));var m=c.getDerivedStateFromProps,p="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;p||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
	"function"!==typeof g.componentWillReceiveProps||(h!==d||l!==k)&&wf(b,g,d,k);Pg=!1;var t=b.memoizedState;l=g.state=t;var A=b.updateQueue;null!==A&&(yf(b,A,d,g,e),l=b.memoizedState);h!==d||t!==l||I.current||Pg?("function"===typeof m&&(kf(b,c,m,d),l=b.memoizedState),(h=Pg||uf(b,c,h,d,t,l,k))?(p||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&
	g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=l),g.props=d,g.state=l,g.context=k,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,h=b.memoizedProps,g.props=b.type===b.elementType?h:L(b.type,h),l=g.context,k=c.contextType,"object"===typeof k&&null!==k?k=M(k):(k=J(c)?Ie:H.current,k=Je(b,k)),m=c.getDerivedStateFromProps,(p="function"===
	typeof m||"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||l!==k)&&wf(b,g,d,k),Pg=!1,l=b.memoizedState,t=g.state=l,A=b.updateQueue,null!==A&&(yf(b,A,d,g,e),t=b.memoizedState),h!==d||l!==t||I.current||Pg?("function"===typeof m&&(kf(b,c,m,d),t=b.memoizedState),(m=Pg||uf(b,c,h,d,l,t,k))?(p||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===
	typeof g.componentWillUpdate&&g.componentWillUpdate(d,t,k),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,t,k)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&l===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&l===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=
	t),g.props=d,g.state=t,g.context=k,d=m):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&l===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&l===a.memoizedState||(b.effectTag|=256),d=!1);return Qg(a,b,c,d,f,e)}
	function Qg(a,b,c,d,e,f){Ng(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Pe(b,c,!1),Jg(a,b,f);d=b.stateNode;Gg.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Df(b,a.child,null,f),b.child=Df(b,null,h,f)):S(a,b,h,f);b.memoizedState=d.state;e&&Pe(b,c,!0);return b.child}function Rg(a){var b=a.stateNode;b.pendingContext?Me(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Me(a,b.context,!1);Jf(a,b.containerInfo)}
	function Sg(a,b,c){var d=b.mode,e=b.pendingProps,f=b.memoizedState;if(0===(b.effectTag&64)){f=null;var g=!1}else f={timedOutAt:null!==f?f.timedOutAt:0},g=!0,b.effectTag&=-65;if(null===a)if(g){var h=e.fallback;a=Ze(null,d,0,null);0===(b.mode&1)&&(a.child=null!==b.memoizedState?b.child.child:b.child);d=Ze(h,d,c,null);a.sibling=d;c=a;c.return=d.return=b}else c=d=Ef(b,null,e.children,c);else null!==a.memoizedState?(d=a.child,h=d.sibling,g?(c=e.fallback,e=Xe(d,d.pendingProps,0),0===(b.mode&1)&&(g=null!==
	b.memoizedState?b.child.child:b.child,g!==d.child&&(e.child=g)),d=e.sibling=Xe(h,c,h.expirationTime),c=e,e.childExpirationTime=0,c.return=d.return=b):c=d=Df(b,d.child,e.children,c)):(h=a.child,g?(g=e.fallback,e=Ze(null,d,0,null),e.child=h,0===(b.mode&1)&&(e.child=null!==b.memoizedState?b.child.child:b.child),d=e.sibling=Ze(g,d,c,null),d.effectTag|=2,c=e,e.childExpirationTime=0,c.return=d.return=b):d=c=Df(b,h,e.children,c)),b.stateNode=a.stateNode;b.memoizedState=f;b.child=c;return d}
	function Jg(a,b,c){null!==a&&(b.contextDependencies=a.contextDependencies);if(b.childExpirationTime<c)return null;null!==a&&b.child!==a.child?x("153"):void 0;if(null!==b.child){a=b.child;c=Xe(a,a.pendingProps,a.expirationTime);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Xe(a,a.pendingProps,a.expirationTime),c.return=b;c.sibling=null}return b.child}
	function Tg(a,b,c){var d=b.expirationTime;if(null!==a)if(a.memoizedProps!==b.pendingProps||I.current)qg=!0;else{if(d<c){qg=!1;switch(b.tag){case 3:Rg(b);Fg();break;case 5:Lf(b);break;case 1:J(b.type)&&Oe(b);break;case 4:Jf(b,b.stateNode.containerInfo);break;case 10:Ug(b,b.memoizedProps.value);break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;if(0!==d&&d>=c)return Sg(a,b,c);b=Jg(a,b,c);return null!==b?b.sibling:null}}return Jg(a,b,c)}}else qg=!1;b.expirationTime=0;switch(b.tag){case 2:d=
	b.elementType;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;var e=Je(b,H.current);Ig(b,c);e=hg(null,b,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;lg();if(J(d)){var f=!0;Oe(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;var g=d.getDerivedStateFromProps;"function"===typeof g&&kf(b,d,g,a);e.updater=tf;b.stateNode=e;e._reactInternalFiber=b;xf(b,d,a,c);b=Qg(null,b,d,!0,f,
	c)}else b.tag=0,S(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);f=b.pendingProps;a=hf(e);b.type=a;e=b.tag=We(a);f=L(a,f);g=void 0;switch(e){case 0:g=Mg(null,b,a,f,c);break;case 1:g=Og(null,b,a,f,c);break;case 11:g=Hg(null,b,a,f,c);break;case 14:g=Kg(null,b,a,L(a.type,f),d,c);break;default:x("306",a,"")}return g;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:L(d,e),Mg(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,
	e=b.elementType===d?e:L(d,e),Og(a,b,d,e,c);case 3:Rg(b);d=b.updateQueue;null===d?x("282"):void 0;e=b.memoizedState;e=null!==e?e.element:null;yf(b,d,b.pendingProps,null,c);d=b.memoizedState.element;if(d===e)Fg(),b=Jg(a,b,c);else{e=b.stateNode;if(e=(null===a||null===a.child)&&e.hydrate)yg=Ee(b.stateNode.containerInfo),xg=b,e=zg=!0;e?(b.effectTag|=2,b.child=Ef(b,null,d,c)):(S(a,b,d,c),Fg());b=b.child}return b;case 5:return Lf(b),null===a&&Cg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,
	g=e.children,xe(d,e)?g=null:null!==f&&xe(d,f)&&(b.effectTag|=16),Ng(a,b),1!==c&&b.mode&1&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(S(a,b,g,c),b=b.child),b;case 6:return null===a&&Cg(b),null;case 13:return Sg(a,b,c);case 4:return Jf(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Df(b,null,d,c):S(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:L(d,e),Hg(a,b,d,e,c);case 7:return S(a,b,b.pendingProps,c),b.child;case 8:return S(a,b,b.pendingProps.children,
	c),b.child;case 12:return S(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;Ug(b,f);if(null!==g){var h=g.value;f=bd(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0;if(0===f){if(g.children===e.children&&!I.current){b=Jg(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var l=h.contextDependencies;if(null!==l){g=h.child;for(var k=l.first;null!==k;){if(k.context===d&&0!==
	(k.observedBits&f)){1===h.tag&&(k=nf(c),k.tag=sf,pf(h,k));h.expirationTime<c&&(h.expirationTime=c);k=h.alternate;null!==k&&k.expirationTime<c&&(k.expirationTime=c);k=c;for(var m=h.return;null!==m;){var p=m.alternate;if(m.childExpirationTime<k)m.childExpirationTime=k,null!==p&&p.childExpirationTime<k&&(p.childExpirationTime=k);else if(null!==p&&p.childExpirationTime<k)p.childExpirationTime=k;else break;m=m.return}l.expirationTime<c&&(l.expirationTime=c);break}k=k.next}}else g=10===h.tag?h.type===b.type?
	null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=g}}S(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,Ig(b,c),e=M(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,S(a,b,d,c),b.child;case 14:return e=b.type,f=L(e,b.pendingProps),f=L(e.type,f),Kg(a,b,e,f,d,c);case 15:return Lg(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===
	d?e:L(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,J(d)?(a=!0,Oe(b)):a=!1,Ig(b,c),vf(b,d,e,c),xf(b,d,e,c),Qg(null,b,d,!0,a,c)}x("156")}var Vg={current:null},Wg=null,Xg=null,Yg=null;function Ug(a,b){var c=a.type._context;G(Vg,c._currentValue,a);c._currentValue=b}function Zg(a){var b=Vg.current;F(Vg,a);a.type._context._currentValue=b}function Ig(a,b){Wg=a;Yg=Xg=null;var c=a.contextDependencies;null!==c&&c.expirationTime>=b&&(qg=!0);a.contextDependencies=null}
	function M(a,b){if(Yg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)Yg=a,b=1073741823;b={context:a,observedBits:b,next:null};null===Xg?(null===Wg?x("308"):void 0,Xg=b,Wg.contextDependencies={first:b,expirationTime:0}):Xg=Xg.next=b}return a._currentValue}var $g=0,rf=1,sf=2,ah=3,Pg=!1;function bh(a){return{baseState:a,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}
	function ch(a){return{baseState:a.baseState,firstUpdate:a.firstUpdate,lastUpdate:a.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function nf(a){return{expirationTime:a,tag:$g,payload:null,callback:null,next:null,nextEffect:null}}function dh(a,b){null===a.lastUpdate?a.firstUpdate=a.lastUpdate=b:(a.lastUpdate.next=b,a.lastUpdate=b)}
	function pf(a,b){var c=a.alternate;if(null===c){var d=a.updateQueue;var e=null;null===d&&(d=a.updateQueue=bh(a.memoizedState))}else d=a.updateQueue,e=c.updateQueue,null===d?null===e?(d=a.updateQueue=bh(a.memoizedState),e=c.updateQueue=bh(c.memoizedState)):d=a.updateQueue=ch(e):null===e&&(e=c.updateQueue=ch(d));null===e||d===e?dh(d,b):null===d.lastUpdate||null===e.lastUpdate?(dh(d,b),dh(e,b)):(dh(d,b),e.lastUpdate=b)}
	function eh(a,b){var c=a.updateQueue;c=null===c?a.updateQueue=bh(a.memoizedState):fh(a,c);null===c.lastCapturedUpdate?c.firstCapturedUpdate=c.lastCapturedUpdate=b:(c.lastCapturedUpdate.next=b,c.lastCapturedUpdate=b)}function fh(a,b){var c=a.alternate;null!==c&&b===c.updateQueue&&(b=a.updateQueue=ch(b));return b}
	function gh(a,b,c,d,e,f){switch(c.tag){case rf:return a=c.payload,"function"===typeof a?a.call(f,d,e):a;case ah:a.effectTag=a.effectTag&-2049|64;case $g:a=c.payload;e="function"===typeof a?a.call(f,d,e):a;if(null===e||void 0===e)break;return n({},d,e);case sf:Pg=!0}return d}
	function yf(a,b,c,d,e){Pg=!1;b=fh(a,b);for(var f=b.baseState,g=null,h=0,l=b.firstUpdate,k=f;null!==l;){var m=l.expirationTime;m<e?(null===g&&(g=l,f=k),h<m&&(h=m)):(k=gh(a,b,l,k,c,d),null!==l.callback&&(a.effectTag|=32,l.nextEffect=null,null===b.lastEffect?b.firstEffect=b.lastEffect=l:(b.lastEffect.nextEffect=l,b.lastEffect=l)));l=l.next}m=null;for(l=b.firstCapturedUpdate;null!==l;){var p=l.expirationTime;p<e?(null===m&&(m=l,null===g&&(f=k)),h<p&&(h=p)):(k=gh(a,b,l,k,c,d),null!==l.callback&&(a.effectTag|=
	32,l.nextEffect=null,null===b.lastCapturedEffect?b.firstCapturedEffect=b.lastCapturedEffect=l:(b.lastCapturedEffect.nextEffect=l,b.lastCapturedEffect=l)));l=l.next}null===g&&(b.lastUpdate=null);null===m?b.lastCapturedUpdate=null:a.effectTag|=32;null===g&&null===m&&(f=k);b.baseState=f;b.firstUpdate=g;b.firstCapturedUpdate=m;a.expirationTime=h;a.memoizedState=k}
	function hh(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedUpdate),b.firstCapturedUpdate=b.lastCapturedUpdate=null);ih(b.firstEffect,c);b.firstEffect=b.lastEffect=null;ih(b.firstCapturedEffect,c);b.firstCapturedEffect=b.lastCapturedEffect=null}function ih(a,b){for(;null!==a;){var c=a.callback;if(null!==c){a.callback=null;var d=b;"function"!==typeof c?x("191",c):void 0;c.call(d)}a=a.nextEffect}}
	function jh(a,b){return{value:a,source:b,stack:jc(b)}}function kh(a){a.effectTag|=4}var lh=void 0,mh=void 0,nh=void 0,oh=void 0;lh=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};mh=function(){};
	nh=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;If(N.current);a=null;switch(c){case "input":f=vc(g,f);d=vc(g,d);a=[];break;case "option":f=$d(g,f);d=$d(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=be(g,f);d=be(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=te)}qe(c,d);g=c=void 0;var h=null;for(c in f)if(!d.hasOwnProperty(c)&&f.hasOwnProperty(c)&&null!=f[c])if("style"===
	c){var l=f[c];for(g in l)l.hasOwnProperty(g)&&(h||(h={}),h[g]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(ra.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in d){var k=d[c];l=null!=f?f[c]:void 0;if(d.hasOwnProperty(c)&&k!==l&&(null!=k||null!=l))if("style"===c)if(l){for(g in l)!l.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(h||(h={}),h[g]="");for(g in k)k.hasOwnProperty(g)&&l[g]!==k[g]&&(h||
	(h={}),h[g]=k[g])}else h||(a||(a=[]),a.push(c,h)),h=k;else"dangerouslySetInnerHTML"===c?(k=k?k.__html:void 0,l=l?l.__html:void 0,null!=k&&l!==k&&(a=a||[]).push(c,""+k)):"children"===c?l===k||"string"!==typeof k&&"number"!==typeof k||(a=a||[]).push(c,""+k):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(ra.hasOwnProperty(c)?(null!=k&&se(e,c),a||l===k||(a=[])):(a=a||[]).push(c,k))}h&&(a=a||[]).push("style",h);e=a;(b.updateQueue=e)&&kh(b)}};oh=function(a,b,c,d){c!==d&&kh(b)};
	var ph="function"===typeof WeakSet?WeakSet:Set;function qh(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=jc(c));null!==c&&ic(c.type);b=b.value;null!==a&&1===a.tag&&ic(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function rh(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){sh(a,c)}else b.current=null}
	function th(a,b,c){c=c.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do{if((d.tag&a)!==Nf){var e=d.destroy;d.destroy=void 0;void 0!==e&&e()}(d.tag&b)!==Nf&&(e=d.create,d.destroy=e());d=d.next}while(d!==c)}}
	function uh(a,b){for(var c=a;;){if(5===c.tag){var d=c.stateNode;if(b)d.style.display="none";else{d=c.stateNode;var e=c.memoizedProps.style;e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null;d.style.display=ne("display",e)}}else if(6===c.tag)c.stateNode.nodeValue=b?"":c.memoizedProps;else if(13===c.tag&&null!==c.memoizedState){d=c.child.sibling;d.return=c;c=d;continue}else if(null!==c.child){c.child.return=c;c=c.child;continue}if(c===a)break;for(;null===c.sibling;){if(null===c.return||
	c.return===a)return;c=c.return}c.sibling.return=c.return;c=c.sibling}}
	function vh(a){"function"===typeof Re&&Re(a);switch(a.tag){case 0:case 11:case 14:case 15:var b=a.updateQueue;if(null!==b&&(b=b.lastEffect,null!==b)){var c=b=b.next;do{var d=c.destroy;if(void 0!==d){var e=a;try{d()}catch(f){sh(e,f)}}c=c.next}while(c!==b)}break;case 1:rh(a);b=a.stateNode;if("function"===typeof b.componentWillUnmount)try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(f){sh(a,f)}break;case 5:rh(a);break;case 4:wh(a)}}
	function xh(a){return 5===a.tag||3===a.tag||4===a.tag}
	function yh(a){a:{for(var b=a.return;null!==b;){if(xh(b)){var c=b;break a}b=b.return}x("160");c=void 0}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:x("161")}c.effectTag&16&&(ke(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||xh(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&
	2)continue b;if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)if(c)if(d){var f=b,g=e.stateNode,h=c;8===f.nodeType?f.parentNode.insertBefore(g,h):f.insertBefore(g,h)}else b.insertBefore(e.stateNode,c);else d?(g=b,h=e.stateNode,8===g.nodeType?(f=g.parentNode,f.insertBefore(h,g)):(f=g,f.appendChild(h)),g=g._reactRootContainer,null!==g&&void 0!==g||null!==f.onclick||(f.onclick=te)):b.appendChild(e.stateNode);
	else if(4!==e.tag&&null!==e.child){e.child.return=e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e.return||e.return===a)return;e=e.return}e.sibling.return=e.return;e=e.sibling}}
	function wh(a){for(var b=a,c=!1,d=void 0,e=void 0;;){if(!c){c=b.return;a:for(;;){null===c?x("160"):void 0;switch(c.tag){case 5:d=c.stateNode;e=!1;break a;case 3:d=c.stateNode.containerInfo;e=!0;break a;case 4:d=c.stateNode.containerInfo;e=!0;break a}c=c.return}c=!0}if(5===b.tag||6===b.tag){a:for(var f=b,g=f;;)if(vh(g),null!==g.child&&4!==g.tag)g.child.return=g,g=g.child;else{if(g===f)break;for(;null===g.sibling;){if(null===g.return||g.return===f)break a;g=g.return}g.sibling.return=g.return;g=g.sibling}e?
	(f=d,g=b.stateNode,8===f.nodeType?f.parentNode.removeChild(g):f.removeChild(g)):d.removeChild(b.stateNode)}else if(4===b.tag){if(null!==b.child){d=b.stateNode.containerInfo;e=!0;b.child.return=b;b=b.child;continue}}else if(vh(b),null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return;b=b.return;4===b.tag&&(c=!1)}b.sibling.return=b.return;b=b.sibling}}
	function zh(a,b){switch(b.tag){case 0:case 11:case 14:case 15:th(Pf,Qf,b);break;case 1:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps;a=null!==a?a.memoizedProps:d;var e=b.type,f=b.updateQueue;b.updateQueue=null;null!==f&&Ce(c,f,e,a,d,b)}break;case 6:null===b.stateNode?x("162"):void 0;b.stateNode.nodeValue=b.memoizedProps;break;case 3:break;case 12:break;case 13:c=b.memoizedState;d=void 0;a=b;null===c?d=!1:(d=!0,a=b.child,0===c.timedOutAt&&(c.timedOutAt=lf()));null!==a&&uh(a,d);c=
	b.updateQueue;if(null!==c){b.updateQueue=null;var g=b.stateNode;null===g&&(g=b.stateNode=new ph);c.forEach(function(a){var c=Ah.bind(null,b,a);g.has(a)||(g.add(a),a.then(c,c))})}break;case 17:break;default:x("163")}}var Bh="function"===typeof WeakMap?WeakMap:Map;function Ch(a,b,c){c=nf(c);c.tag=ah;c.payload={element:null};var d=b.value;c.callback=function(){Dh(d);qh(a,b)};return c}
	function Eh(a,b,c){c=nf(c);c.tag=ah;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Fh?Fh=new Set([this]):Fh.add(this));var c=b.value,e=b.stack;qh(a,b);this.componentDidCatch(c,{componentStack:null!==e?e:""})});return c}
	function Gh(a){switch(a.tag){case 1:J(a.type)&&Ke(a);var b=a.effectTag;return b&2048?(a.effectTag=b&-2049|64,a):null;case 3:return Kf(a),Le(a),b=a.effectTag,0!==(b&64)?x("285"):void 0,a.effectTag=b&-2049|64,a;case 5:return Mf(a),null;case 13:return b=a.effectTag,b&2048?(a.effectTag=b&-2049|64,a):null;case 18:return null;case 4:return Kf(a),null;case 10:return Zg(a),null;default:return null}}
	var Hh=Tb.ReactCurrentDispatcher,Ih=Tb.ReactCurrentOwner,Jh=1073741822,Kh=!1,T=null,Lh=null,U=0,Mh=-1,Nh=!1,V=null,Oh=!1,Ph=null,Qh=null,Rh=null,Fh=null;function Sh(){if(null!==T)for(var a=T.return;null!==a;){var b=a;switch(b.tag){case 1:var c=b.type.childContextTypes;null!==c&&void 0!==c&&Ke(b);break;case 3:Kf(b);Le(b);break;case 5:Mf(b);break;case 4:Kf(b);break;case 10:Zg(b)}a=a.return}Lh=null;U=0;Mh=-1;Nh=!1;T=null}
	function Th(){for(;null!==V;){var a=V.effectTag;a&16&&ke(V.stateNode,"");if(a&128){var b=V.alternate;null!==b&&(b=b.ref,null!==b&&("function"===typeof b?b(null):b.current=null))}switch(a&14){case 2:yh(V);V.effectTag&=-3;break;case 6:yh(V);V.effectTag&=-3;zh(V.alternate,V);break;case 4:zh(V.alternate,V);break;case 8:a=V,wh(a),a.return=null,a.child=null,a.memoizedState=null,a.updateQueue=null,a=a.alternate,null!==a&&(a.return=null,a.child=null,a.memoizedState=null,a.updateQueue=null)}V=V.nextEffect}}
	function Uh(){for(;null!==V;){if(V.effectTag&256)a:{var a=V.alternate,b=V;switch(b.tag){case 0:case 11:case 15:th(Of,Nf,b);break a;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:L(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}break a;case 3:case 5:case 6:case 4:case 17:break a;default:x("163")}}V=V.nextEffect}}
	function Vh(a,b){for(;null!==V;){var c=V.effectTag;if(c&36){var d=V.alternate,e=V,f=b;switch(e.tag){case 0:case 11:case 15:th(Rf,Sf,e);break;case 1:var g=e.stateNode;if(e.effectTag&4)if(null===d)g.componentDidMount();else{var h=e.elementType===e.type?d.memoizedProps:L(e.type,d.memoizedProps);g.componentDidUpdate(h,d.memoizedState,g.__reactInternalSnapshotBeforeUpdate)}d=e.updateQueue;null!==d&&hh(e,d,g,f);break;case 3:d=e.updateQueue;if(null!==d){g=null;if(null!==e.child)switch(e.child.tag){case 5:g=
	e.child.stateNode;break;case 1:g=e.child.stateNode}hh(e,d,g,f)}break;case 5:f=e.stateNode;null===d&&e.effectTag&4&&we(e.type,e.memoizedProps)&&f.focus();break;case 6:break;case 4:break;case 12:break;case 13:break;case 17:break;default:x("163")}}c&128&&(e=V.ref,null!==e&&(f=V.stateNode,"function"===typeof e?e(f):e.current=f));c&512&&(Ph=a);V=V.nextEffect}}
	function Wh(a,b){Rh=Qh=Ph=null;var c=W;W=!0;do{if(b.effectTag&512){var d=!1,e=void 0;try{var f=b;th(Uf,Nf,f);th(Nf,Tf,f)}catch(g){d=!0,e=g}d&&sh(b,e)}b=b.nextEffect}while(null!==b);W=c;c=a.expirationTime;0!==c&&Xh(a,c);X||W||Yh(1073741823,!1)}function of(){null!==Qh&&Be(Qh);null!==Rh&&Rh()}
	function Zh(a,b){Oh=Kh=!0;a.current===b?x("177"):void 0;var c=a.pendingCommitExpirationTime;0===c?x("261"):void 0;a.pendingCommitExpirationTime=0;var d=b.expirationTime,e=b.childExpirationTime;ef(a,e>d?e:d);Ih.current=null;d=void 0;1<b.effectTag?null!==b.lastEffect?(b.lastEffect.nextEffect=b,d=b.firstEffect):d=b:d=b.firstEffect;ue=Bd;ve=Pd();Bd=!1;for(V=d;null!==V;){e=!1;var f=void 0;try{Uh()}catch(h){e=!0,f=h}e&&(null===V?x("178"):void 0,sh(V,f),null!==V&&(V=V.nextEffect))}for(V=d;null!==V;){e=!1;
	f=void 0;try{Th()}catch(h){e=!0,f=h}e&&(null===V?x("178"):void 0,sh(V,f),null!==V&&(V=V.nextEffect))}Qd(ve);ve=null;Bd=!!ue;ue=null;a.current=b;for(V=d;null!==V;){e=!1;f=void 0;try{Vh(a,c)}catch(h){e=!0,f=h}e&&(null===V?x("178"):void 0,sh(V,f),null!==V&&(V=V.nextEffect))}if(null!==d&&null!==Ph){var g=Wh.bind(null,a,d);Qh=r.unstable_runWithPriority(r.unstable_NormalPriority,function(){return Ae(g)});Rh=g}Kh=Oh=!1;"function"===typeof Qe&&Qe(b.stateNode);c=b.expirationTime;b=b.childExpirationTime;b=
	b>c?b:c;0===b&&(Fh=null);$h(a,b)}
	function ai(a){for(;;){var b=a.alternate,c=a.return,d=a.sibling;if(0===(a.effectTag&1024)){T=a;a:{var e=b;b=a;var f=U;var g=b.pendingProps;switch(b.tag){case 2:break;case 16:break;case 15:case 0:break;case 1:J(b.type)&&Ke(b);break;case 3:Kf(b);Le(b);g=b.stateNode;g.pendingContext&&(g.context=g.pendingContext,g.pendingContext=null);if(null===e||null===e.child)Eg(b),b.effectTag&=-3;mh(b);break;case 5:Mf(b);var h=If(Hf.current);f=b.type;if(null!==e&&null!=b.stateNode)nh(e,b,f,g,h),e.ref!==b.ref&&(b.effectTag|=
	128);else if(g){var l=If(N.current);if(Eg(b)){g=b;e=g.stateNode;var k=g.type,m=g.memoizedProps,p=h;e[Fa]=g;e[Ga]=m;f=void 0;h=k;switch(h){case "iframe":case "object":E("load",e);break;case "video":case "audio":for(k=0;k<ab.length;k++)E(ab[k],e);break;case "source":E("error",e);break;case "img":case "image":case "link":E("error",e);E("load",e);break;case "form":E("reset",e);E("submit",e);break;case "details":E("toggle",e);break;case "input":wc(e,m);E("invalid",e);se(p,"onChange");break;case "select":e._wrapperState=
	{wasMultiple:!!m.multiple};E("invalid",e);se(p,"onChange");break;case "textarea":ce(e,m),E("invalid",e),se(p,"onChange")}qe(h,m);k=null;for(f in m)m.hasOwnProperty(f)&&(l=m[f],"children"===f?"string"===typeof l?e.textContent!==l&&(k=["children",l]):"number"===typeof l&&e.textContent!==""+l&&(k=["children",""+l]):ra.hasOwnProperty(f)&&null!=l&&se(p,f));switch(h){case "input":Rb(e);Ac(e,m,!0);break;case "textarea":Rb(e);ee(e,m);break;case "select":case "option":break;default:"function"===typeof m.onClick&&
	(e.onclick=te)}f=k;g.updateQueue=f;g=null!==f?!0:!1;g&&kh(b)}else{m=b;e=f;p=g;k=9===h.nodeType?h:h.ownerDocument;l===fe.html&&(l=ge(e));l===fe.html?"script"===e?(e=k.createElement("div"),e.innerHTML="<script>\x3c/script>",k=e.removeChild(e.firstChild)):"string"===typeof p.is?k=k.createElement(e,{is:p.is}):(k=k.createElement(e),"select"===e&&p.multiple&&(k.multiple=!0)):k=k.createElementNS(l,e);e=k;e[Fa]=m;e[Ga]=g;lh(e,b,!1,!1);p=e;k=f;m=g;var t=h,A=re(k,m);switch(k){case "iframe":case "object":E("load",
	p);h=m;break;case "video":case "audio":for(h=0;h<ab.length;h++)E(ab[h],p);h=m;break;case "source":E("error",p);h=m;break;case "img":case "image":case "link":E("error",p);E("load",p);h=m;break;case "form":E("reset",p);E("submit",p);h=m;break;case "details":E("toggle",p);h=m;break;case "input":wc(p,m);h=vc(p,m);E("invalid",p);se(t,"onChange");break;case "option":h=$d(p,m);break;case "select":p._wrapperState={wasMultiple:!!m.multiple};h=n({},m,{value:void 0});E("invalid",p);se(t,"onChange");break;case "textarea":ce(p,
	m);h=be(p,m);E("invalid",p);se(t,"onChange");break;default:h=m}qe(k,h);l=void 0;var v=k,R=p,u=h;for(l in u)if(u.hasOwnProperty(l)){var q=u[l];"style"===l?oe(R,q):"dangerouslySetInnerHTML"===l?(q=q?q.__html:void 0,null!=q&&je(R,q)):"children"===l?"string"===typeof q?("textarea"!==v||""!==q)&&ke(R,q):"number"===typeof q&&ke(R,""+q):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ra.hasOwnProperty(l)?null!=q&&se(t,l):null!=q&&tc(R,l,q,A))}switch(k){case "input":Rb(p);
	Ac(p,m,!1);break;case "textarea":Rb(p);ee(p,m);break;case "option":null!=m.value&&p.setAttribute("value",""+uc(m.value));break;case "select":h=p;h.multiple=!!m.multiple;p=m.value;null!=p?ae(h,!!m.multiple,p,!1):null!=m.defaultValue&&ae(h,!!m.multiple,m.defaultValue,!0);break;default:"function"===typeof h.onClick&&(p.onclick=te)}(g=we(f,g))&&kh(b);b.stateNode=e}null!==b.ref&&(b.effectTag|=128)}else null===b.stateNode?x("166"):void 0;break;case 6:e&&null!=b.stateNode?oh(e,b,e.memoizedProps,g):("string"!==
	typeof g&&(null===b.stateNode?x("166"):void 0),e=If(Hf.current),If(N.current),Eg(b)?(g=b,f=g.stateNode,e=g.memoizedProps,f[Fa]=g,(g=f.nodeValue!==e)&&kh(b)):(f=b,g=(9===e.nodeType?e:e.ownerDocument).createTextNode(g),g[Fa]=b,f.stateNode=g));break;case 11:break;case 13:g=b.memoizedState;if(0!==(b.effectTag&64)){b.expirationTime=f;T=b;break a}g=null!==g;f=null!==e&&null!==e.memoizedState;null!==e&&!g&&f&&(e=e.child.sibling,null!==e&&(h=b.firstEffect,null!==h?(b.firstEffect=e,e.nextEffect=h):(b.firstEffect=
	b.lastEffect=e,e.nextEffect=null),e.effectTag=8));if(g||f)b.effectTag|=4;break;case 7:break;case 8:break;case 12:break;case 4:Kf(b);mh(b);break;case 10:Zg(b);break;case 9:break;case 14:break;case 17:J(b.type)&&Ke(b);break;case 18:break;default:x("156")}T=null}b=a;if(1===U||1!==b.childExpirationTime){g=0;for(f=b.child;null!==f;)e=f.expirationTime,h=f.childExpirationTime,e>g&&(g=e),h>g&&(g=h),f=f.sibling;b.childExpirationTime=g}if(null!==T)return T;null!==c&&0===(c.effectTag&1024)&&(null===c.firstEffect&&
	(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a))}else{a=Gh(a,U);if(null!==a)return a.effectTag&=1023,a;null!==c&&(c.firstEffect=c.lastEffect=null,c.effectTag|=1024)}if(null!==d)return d;if(null!==c)a=c;else break}return null}
	function bi(a){var b=Tg(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=ai(a));Ih.current=null;return b}
	function ci(a,b){Kh?x("243"):void 0;of();Kh=!0;var c=Hh.current;Hh.current=kg;var d=a.nextExpirationTimeToWorkOn;if(d!==U||a!==Lh||null===T)Sh(),Lh=a,U=d,T=Xe(Lh.current,null,U),a.pendingCommitExpirationTime=0;var e=!1;do{try{if(b)for(;null!==T&&!di();)T=bi(T);else for(;null!==T;)T=bi(T)}catch(u){if(Yg=Xg=Wg=null,lg(),null===T)e=!0,Dh(u);else{null===T?x("271"):void 0;var f=T,g=f.return;if(null===g)e=!0,Dh(u);else{a:{var h=a,l=g,k=f,m=u;g=U;k.effectTag|=1024;k.firstEffect=k.lastEffect=null;if(null!==
	m&&"object"===typeof m&&"function"===typeof m.then){var p=m;m=l;var t=-1,A=-1;do{if(13===m.tag){var v=m.alternate;if(null!==v&&(v=v.memoizedState,null!==v)){A=10*(1073741822-v.timedOutAt);break}v=m.pendingProps.maxDuration;if("number"===typeof v)if(0>=v)t=0;else if(-1===t||v<t)t=v}m=m.return}while(null!==m);m=l;do{if(v=13===m.tag)v=void 0===m.memoizedProps.fallback?!1:null===m.memoizedState;if(v){l=m.updateQueue;null===l?(l=new Set,l.add(p),m.updateQueue=l):l.add(p);if(0===(m.mode&1)){m.effectTag|=
	64;k.effectTag&=-1957;1===k.tag&&(null===k.alternate?k.tag=17:(g=nf(1073741823),g.tag=sf,pf(k,g)));k.expirationTime=1073741823;break a}k=h;l=g;var R=k.pingCache;null===R?(R=k.pingCache=new Bh,v=new Set,R.set(p,v)):(v=R.get(p),void 0===v&&(v=new Set,R.set(p,v)));v.has(l)||(v.add(l),k=ei.bind(null,k,p,l),p.then(k,k));-1===t?h=1073741823:(-1===A&&(A=10*(1073741822-gf(h,g))-5E3),h=A+t);0<=h&&Mh<h&&(Mh=h);m.effectTag|=2048;m.expirationTime=g;break a}m=m.return}while(null!==m);m=Error((ic(k.type)||"A React component")+
	" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+jc(k))}Nh=!0;m=jh(m,k);h=l;do{switch(h.tag){case 3:h.effectTag|=2048;h.expirationTime=g;g=Ch(h,m,g);eh(h,g);break a;case 1:if(t=m,A=h.type,k=h.stateNode,0===(h.effectTag&64)&&("function"===typeof A.getDerivedStateFromError||null!==k&&"function"===typeof k.componentDidCatch&&(null===Fh||!Fh.has(k)))){h.effectTag|=2048;
	h.expirationTime=g;g=Eh(h,t,g);eh(h,g);break a}}h=h.return}while(null!==h)}T=ai(f);continue}}}break}while(1);Kh=!1;Hh.current=c;Yg=Xg=Wg=null;lg();if(e)Lh=null,a.finishedWork=null;else if(null!==T)a.finishedWork=null;else{c=a.current.alternate;null===c?x("281"):void 0;Lh=null;if(Nh){e=a.latestPendingTime;f=a.latestSuspendedTime;g=a.latestPingedTime;if(0!==e&&e<d||0!==f&&f<d||0!==g&&g<d){ff(a,d);fi(a,c,d,a.expirationTime,-1);return}if(!a.didError&&b){a.didError=!0;d=a.nextExpirationTimeToWorkOn=d;
	b=a.expirationTime=1073741823;fi(a,c,d,b,-1);return}}b&&-1!==Mh?(ff(a,d),b=10*(1073741822-gf(a,d)),b<Mh&&(Mh=b),b=10*(1073741822-lf()),b=Mh-b,fi(a,c,d,a.expirationTime,0>b?0:b)):(a.pendingCommitExpirationTime=d,a.finishedWork=c)}}
	function sh(a,b){for(var c=a.return;null!==c;){switch(c.tag){case 1:var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Fh||!Fh.has(d))){a=jh(b,a);a=Eh(c,a,1073741823);pf(c,a);qf(c,1073741823);return}break;case 3:a=jh(b,a);a=Ch(c,a,1073741823);pf(c,a);qf(c,1073741823);return}c=c.return}3===a.tag&&(c=jh(b,a),c=Ch(a,c,1073741823),pf(a,c),qf(a,1073741823))}
	function mf(a,b){var c=r.unstable_getCurrentPriorityLevel(),d=void 0;if(0===(b.mode&1))d=1073741823;else if(Kh&&!Oh)d=U;else{switch(c){case r.unstable_ImmediatePriority:d=1073741823;break;case r.unstable_UserBlockingPriority:d=1073741822-10*(((1073741822-a+15)/10|0)+1);break;case r.unstable_NormalPriority:d=1073741822-25*(((1073741822-a+500)/25|0)+1);break;case r.unstable_LowPriority:case r.unstable_IdlePriority:d=1;break;default:x("313")}null!==Lh&&d===U&&--d}c===r.unstable_UserBlockingPriority&&
	(0===gi||d<gi)&&(gi=d);return d}function ei(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);if(null!==Lh&&U===c)Lh=null;else if(b=a.earliestSuspendedTime,d=a.latestSuspendedTime,0!==b&&c<=b&&c>=d){a.didError=!1;b=a.latestPingedTime;if(0===b||b>c)a.latestPingedTime=c;df(c,a);c=a.expirationTime;0!==c&&Xh(a,c)}}function Ah(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=lf();b=mf(b,a);a=hi(a,b);null!==a&&(cf(a,b),b=a.expirationTime,0!==b&&Xh(a,b))}
	function hi(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}return e}
	function qf(a,b){a=hi(a,b);null!==a&&(!Kh&&0!==U&&b>U&&Sh(),cf(a,b),Kh&&!Oh&&Lh===a||Xh(a,a.expirationTime),ii>ji&&(ii=0,x("185")))}function ki(a,b,c,d,e){return r.unstable_runWithPriority(r.unstable_ImmediatePriority,function(){return a(b,c,d,e)})}var li=null,Y=null,mi=0,ni=void 0,W=!1,oi=null,Z=0,gi=0,pi=!1,qi=null,X=!1,ri=!1,si=null,ti=r.unstable_now(),ui=1073741822-(ti/10|0),vi=ui,ji=50,ii=0,wi=null;function xi(){ui=1073741822-((r.unstable_now()-ti)/10|0)}
	function yi(a,b){if(0!==mi){if(b<mi)return;null!==ni&&r.unstable_cancelCallback(ni)}mi=b;a=r.unstable_now()-ti;ni=r.unstable_scheduleCallback(zi,{timeout:10*(1073741822-b)-a})}function fi(a,b,c,d,e){a.expirationTime=d;0!==e||di()?0<e&&(a.timeoutHandle=ye(Ai.bind(null,a,b,c),e)):(a.pendingCommitExpirationTime=c,a.finishedWork=b)}function Ai(a,b,c){a.pendingCommitExpirationTime=c;a.finishedWork=b;xi();vi=ui;Bi(a,c)}function $h(a,b){a.expirationTime=b;a.finishedWork=null}
	function lf(){if(W)return vi;Ci();if(0===Z||1===Z)xi(),vi=ui;return vi}function Xh(a,b){null===a.nextScheduledRoot?(a.expirationTime=b,null===Y?(li=Y=a,a.nextScheduledRoot=a):(Y=Y.nextScheduledRoot=a,Y.nextScheduledRoot=li)):b>a.expirationTime&&(a.expirationTime=b);W||(X?ri&&(oi=a,Z=1073741823,Di(a,1073741823,!1)):1073741823===b?Yh(1073741823,!1):yi(a,b))}
	function Ci(){var a=0,b=null;if(null!==Y)for(var c=Y,d=li;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===Y?x("244"):void 0;if(d===d.nextScheduledRoot){li=Y=d.nextScheduledRoot=null;break}else if(d===li)li=e=d.nextScheduledRoot,Y.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===Y){Y=c;Y.nextScheduledRoot=li;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot}else{e>a&&(a=e,b=d);if(d===Y)break;if(1073741823===
	a)break;c=d;d=d.nextScheduledRoot}}oi=b;Z=a}var Ei=!1;function di(){return Ei?!0:r.unstable_shouldYield()?Ei=!0:!1}function zi(){try{if(!di()&&null!==li){xi();var a=li;do{var b=a.expirationTime;0!==b&&ui<=b&&(a.nextExpirationTimeToWorkOn=ui);a=a.nextScheduledRoot}while(a!==li)}Yh(0,!0)}finally{Ei=!1}}
	function Yh(a,b){Ci();if(b)for(xi(),vi=ui;null!==oi&&0!==Z&&a<=Z&&!(Ei&&ui>Z);)Di(oi,Z,ui>Z),Ci(),xi(),vi=ui;else for(;null!==oi&&0!==Z&&a<=Z;)Di(oi,Z,!1),Ci();b&&(mi=0,ni=null);0!==Z&&yi(oi,Z);ii=0;wi=null;if(null!==si)for(a=si,si=null,b=0;b<a.length;b++){var c=a[b];try{c._onComplete()}catch(d){pi||(pi=!0,qi=d)}}if(pi)throw a=qi,qi=null,pi=!1,a;}function Bi(a,b){W?x("253"):void 0;oi=a;Z=b;Di(a,b,!1);Yh(1073741823,!1)}
	function Di(a,b,c){W?x("245"):void 0;W=!0;if(c){var d=a.finishedWork;null!==d?Fi(a,d,b):(a.finishedWork=null,d=a.timeoutHandle,-1!==d&&(a.timeoutHandle=-1,ze(d)),ci(a,c),d=a.finishedWork,null!==d&&(di()?a.finishedWork=d:Fi(a,d,b)))}else d=a.finishedWork,null!==d?Fi(a,d,b):(a.finishedWork=null,d=a.timeoutHandle,-1!==d&&(a.timeoutHandle=-1,ze(d)),ci(a,c),d=a.finishedWork,null!==d&&Fi(a,d,b));W=!1}
	function Fi(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime>=c&&(null===si?si=[d]:si.push(d),d._defer)){a.finishedWork=b;a.expirationTime=0;return}a.finishedWork=null;a===wi?ii++:(wi=a,ii=0);r.unstable_runWithPriority(r.unstable_ImmediatePriority,function(){Zh(a,b)})}function Dh(a){null===oi?x("246"):void 0;oi.expirationTime=0;pi||(pi=!0,qi=a)}function Gi(a,b){var c=X;X=!0;try{return a(b)}finally{(X=c)||W||Yh(1073741823,!1)}}
	function Hi(a,b){if(X&&!ri){ri=!0;try{return a(b)}finally{ri=!1}}return a(b)}function Ii(a,b,c){X||W||0===gi||(Yh(gi,!1),gi=0);var d=X;X=!0;try{return r.unstable_runWithPriority(r.unstable_UserBlockingPriority,function(){return a(b,c)})}finally{(X=d)||W||Yh(1073741823,!1)}}
	function Ji(a,b,c,d,e){var f=b.current;a:if(c){c=c._reactInternalFiber;b:{2===ed(c)&&1===c.tag?void 0:x("170");var g=c;do{switch(g.tag){case 3:g=g.stateNode.context;break b;case 1:if(J(g.type)){g=g.stateNode.__reactInternalMemoizedMergedChildContext;break b}}g=g.return}while(null!==g);x("171");g=void 0}if(1===c.tag){var h=c.type;if(J(h)){c=Ne(c,h,g);break a}}c=g}else c=He;null===b.context?b.context=c:b.pendingContext=c;b=e;e=nf(d);e.payload={element:a};b=void 0===b?null:b;null!==b&&(e.callback=b);
	of();pf(f,e);qf(f,d);return d}function Ki(a,b,c,d){var e=b.current,f=lf();e=mf(f,e);return Ji(a,b,c,e,d)}function Li(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function Mi(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Wb,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
	Ab=function(a,b,c){switch(b){case "input":yc(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Ka(d);e?void 0:x("90");Sb(d);yc(d,e)}}}break;case "textarea":de(a,c);break;case "select":b=c.value,null!=b&&ae(a,!!c.multiple,b,!1)}};
	function Ni(a){var b=1073741822-25*(((1073741822-lf()+500)/25|0)+1);b>=Jh&&(b=Jh-1);this._expirationTime=Jh=b;this._root=a;this._callbacks=this._next=null;this._hasChildren=this._didComplete=!1;this._children=null;this._defer=!0}Ni.prototype.render=function(a){this._defer?void 0:x("250");this._hasChildren=!0;this._children=a;var b=this._root._internalRoot,c=this._expirationTime,d=new Oi;Ji(a,b,null,c,d._onCommit);return d};
	Ni.prototype.then=function(a){if(this._didComplete)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};
	Ni.prototype.commit=function(){var a=this._root._internalRoot,b=a.firstBatch;this._defer&&null!==b?void 0:x("251");if(this._hasChildren){var c=this._expirationTime;if(b!==this){this._hasChildren&&(c=this._expirationTime=b._expirationTime,this.render(this._children));for(var d=null,e=b;e!==this;)d=e,e=e._next;null===d?x("251"):void 0;d._next=e._next;this._next=b;a.firstBatch=this}this._defer=!1;Bi(a,c);b=this._next;this._next=null;b=a.firstBatch=b;null!==b&&b._hasChildren&&b.render(b._children)}else this._next=
	null,this._defer=!1};Ni.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++)(0,a[b])()}};function Oi(){this._callbacks=null;this._didCommit=!1;this._onCommit=this._onCommit.bind(this)}Oi.prototype.then=function(a){if(this._didCommit)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};
	Oi.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++){var c=a[b];"function"!==typeof c?x("191",c):void 0;c()}}};
	function Pi(a,b,c){b=K(3,null,null,b?3:0);a={current:b,containerInfo:a,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:c,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null};this._internalRoot=b.stateNode=a}
	Pi.prototype.render=function(a,b){var c=this._internalRoot,d=new Oi;b=void 0===b?null:b;null!==b&&d.then(b);Ki(a,c,null,d._onCommit);return d};Pi.prototype.unmount=function(a){var b=this._internalRoot,c=new Oi;a=void 0===a?null:a;null!==a&&c.then(a);Ki(null,b,null,c._onCommit);return c};Pi.prototype.legacy_renderSubtreeIntoContainer=function(a,b,c){var d=this._internalRoot,e=new Oi;c=void 0===c?null:c;null!==c&&e.then(c);Ki(b,d,a,e._onCommit);return e};
	Pi.prototype.createBatch=function(){var a=new Ni(this),b=a._expirationTime,c=this._internalRoot,d=c.firstBatch;if(null===d)c.firstBatch=a,a._next=null;else{for(c=null;null!==d&&d._expirationTime>=b;)c=d,d=d._next;a._next=d;null!==c&&(c._next=a)}return a};function Qi(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}Gb=Gi;Hb=Ii;Ib=function(){W||0===gi||(Yh(gi,!1),gi=0)};
	function Ri(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new Pi(a,!1,b)}
	function Si(a,b,c,d,e){var f=c._reactRootContainer;if(f){if("function"===typeof e){var g=e;e=function(){var a=Li(f._internalRoot);g.call(a)}}null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)}else{f=c._reactRootContainer=Ri(c,d);if("function"===typeof e){var h=e;e=function(){var a=Li(f._internalRoot);h.call(a)}}Hi(function(){null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)})}return Li(f._internalRoot)}
	function Ti(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;Qi(b)?void 0:x("200");return Mi(a,b,null,c)}
	var Vi={createPortal:Ti,findDOMNode:function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;void 0===b&&("function"===typeof a.render?x("188"):x("268",Object.keys(a)));a=hd(b);a=null===a?null:a.stateNode;return a},hydrate:function(a,b,c){Qi(b)?void 0:x("200");return Si(null,a,b,!0,c)},render:function(a,b,c){Qi(b)?void 0:x("200");return Si(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){Qi(c)?void 0:x("200");null==a||void 0===a._reactInternalFiber?
	x("38"):void 0;return Si(a,b,c,!1,d)},unmountComponentAtNode:function(a){Qi(a)?void 0:x("40");return a._reactRootContainer?(Hi(function(){Si(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},unstable_createPortal:function(){return Ti.apply(void 0,arguments)},unstable_batchedUpdates:Gi,unstable_interactiveUpdates:Ii,flushSync:function(a,b){W?x("187"):void 0;var c=X;X=!0;try{return ki(a,b)}finally{X=c,Yh(1073741823,!1)}},unstable_createRoot:Ui,unstable_flushControlled:function(a){var b=
	X;X=!0;try{ki(a)}finally{(X=b)||W||Yh(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[Ia,Ja,Ka,Ba.injectEventPluginsByName,pa,Qa,function(a){ya(a,Pa)},Eb,Fb,Dd,Da]}};function Ui(a,b){Qi(a)?void 0:x("299","unstable_createRoot");return new Pi(a,!0,null!=b&&!0===b.hydrate)}
	(function(a){var b=a.findFiberByHostInstance;return Te(n({},a,{overrideProps:null,currentDispatcherRef:Tb.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hd(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null}}))})({findFiberByHostInstance:Ha,bundleType:0,version:"16.8.3",rendererPackageName:"react-dom"});var Wi={default:Vi},Xi=Wi&&Vi||Wi;module.exports=Xi.default||Xi;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (process.env.NODE_ENV === 'production') {
	  module.exports = __webpack_require__(5);
	} else {
	  module.exports = __webpack_require__(7);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/** @license React v16.8.3
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';var k=__webpack_require__(6),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.concurrent_mode"):60111,y=n?Symbol.for("react.forward_ref"):60112,z=n?Symbol.for("react.suspense"):60113,aa=n?Symbol.for("react.memo"):
	60115,ba=n?Symbol.for("react.lazy"):60116,A="function"===typeof Symbol&&Symbol.iterator;function ca(a,b,d,c,e,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[d,c,e,g,h,f],m=0;a=Error(b.replace(/%s/g,function(){return l[m++]}));a.name="Invariant Violation"}a.framesToPop=1;throw a;}}
	function B(a){for(var b=arguments.length-1,d="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=0;c<b;c++)d+="&args[]="+encodeURIComponent(arguments[c+1]);ca(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",d)}var C={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},D={};
	function E(a,b,d){this.props=a;this.context=b;this.refs=D;this.updater=d||C}E.prototype.isReactComponent={};E.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?B("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};function F(){}F.prototype=E.prototype;function G(a,b,d){this.props=a;this.context=b;this.refs=D;this.updater=d||C}var H=G.prototype=new F;
	H.constructor=G;k(H,E.prototype);H.isPureReactComponent=!0;var I={current:null},J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
	function M(a,b,d){var c=void 0,e={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,c)&&!L.hasOwnProperty(c)&&(e[c]=b[c]);var f=arguments.length-2;if(1===f)e.children=d;else if(1<f){for(var l=Array(f),m=0;m<f;m++)l[m]=arguments[m+2];e.children=l}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===e[c]&&(e[c]=f[c]);return{$$typeof:p,type:a,key:g,ref:h,props:e,_owner:J.current}}
	function da(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function N(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var O=/\/+/g,P=[];function Q(a,b,d,c){if(P.length){var e=P.pop();e.result=a;e.keyPrefix=b;e.func=d;e.context=c;e.count=0;return e}return{result:a,keyPrefix:b,func:d,context:c,count:0}}
	function R(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>P.length&&P.push(a)}
	function S(a,b,d,c){var e=typeof a;if("undefined"===e||"boolean"===e)a=null;var g=!1;if(null===a)g=!0;else switch(e){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return d(c,a,""===b?"."+T(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var h=0;h<a.length;h++){e=a[h];var f=b+T(e,h);g+=S(e,f,d,c)}else if(null===a||"object"!==typeof a?f=null:(f=A&&a[A]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),h=
	0;!(e=a.next()).done;)e=e.value,f=b+T(e,h++),g+=S(e,f,d,c);else"object"===e&&(d=""+a,B("31","[object Object]"===d?"object with keys {"+Object.keys(a).join(", ")+"}":d,""));return g}function U(a,b,d){return null==a?0:S(a,"",b,d)}function T(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function ea(a,b){a.func.call(a.context,b,a.count++)}
	function fa(a,b,d){var c=a.result,e=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?V(a,c,d,function(a){return a}):null!=a&&(N(a)&&(a=da(a,e+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+d)),c.push(a))}function V(a,b,d,c,e){var g="";null!=d&&(g=(""+d).replace(O,"$&/")+"/");b=Q(b,g,c,e);U(a,fa,b);R(b)}function W(){var a=I.current;null===a?B("307"):void 0;return a}
	var X={Children:{map:function(a,b,d){if(null==a)return a;var c=[];V(a,c,null,b,d);return c},forEach:function(a,b,d){if(null==a)return a;b=Q(null,null,b,d);U(a,ea,b);R(b)},count:function(a){return U(a,function(){return null},null)},toArray:function(a){var b=[];V(a,b,null,function(a){return a});return b},only:function(a){N(a)?void 0:B("143");return a}},createRef:function(){return{current:null}},Component:E,PureComponent:G,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,
	_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a},forwardRef:function(a){return{$$typeof:y,render:a}},lazy:function(a){return{$$typeof:ba,_ctor:a,_status:-1,_result:null}},memo:function(a,b){return{$$typeof:aa,type:a,compare:void 0===b?null:b}},useCallback:function(a,b){return W().useCallback(a,b)},useContext:function(a,b){return W().useContext(a,b)},useEffect:function(a,b){return W().useEffect(a,b)},useImperativeHandle:function(a,
	b,d){return W().useImperativeHandle(a,b,d)},useDebugValue:function(){},useLayoutEffect:function(a,b){return W().useLayoutEffect(a,b)},useMemo:function(a,b){return W().useMemo(a,b)},useReducer:function(a,b,d){return W().useReducer(a,b,d)},useRef:function(a){return W().useRef(a)},useState:function(a){return W().useState(a)},Fragment:r,StrictMode:t,Suspense:z,createElement:M,cloneElement:function(a,b,d){null===a||void 0===a?B("267",a):void 0;var c=void 0,e=k({},a.props),g=a.key,h=a.ref,f=a._owner;if(null!=
	b){void 0!==b.ref&&(h=b.ref,f=J.current);void 0!==b.key&&(g=""+b.key);var l=void 0;a.type&&a.type.defaultProps&&(l=a.type.defaultProps);for(c in b)K.call(b,c)&&!L.hasOwnProperty(c)&&(e[c]=void 0===b[c]&&void 0!==l?l[c]:b[c])}c=arguments.length-2;if(1===c)e.children=d;else if(1<c){l=Array(c);for(var m=0;m<c;m++)l[m]=arguments[m+2];e.children=l}return{$$typeof:p,type:a.type,key:g,ref:h,props:e,_owner:f}},createFactory:function(a){var b=M.bind(null,a);b.type=a;return b},isValidElement:N,version:"16.8.3",
	unstable_ConcurrentMode:x,unstable_Profiler:u,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:I,ReactCurrentOwner:J,assign:k}},Y={default:X},Z=Y&&X||Y;module.exports=Z.default||Z;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.8.3
	 * react.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';

	var _assign = __webpack_require__(6);
	var checkPropTypes = __webpack_require__(8);

	// TODO: this is special because it gets imported during build.

	var ReactVersion = '16.8.3';

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';

	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }
	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }
	  return null;
	}

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function () {};

	{
	  validateFormat = function (format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error = void 0;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	// Relying on the `invariant()` implementation lets us
	// preserve the format and params in the www builds.

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warningWithoutStack = function () {};

	{
	  warningWithoutStack = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (args.length > 8) {
	      // Check before the condition to catch violations early.
	      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
	    }
	    if (condition) {
	      return;
	    }
	    if (typeof console !== 'undefined') {
	      var argsWithFormat = args.map(function (item) {
	        return '' + item;
	      });
	      argsWithFormat.unshift('Warning: ' + format);

	      // We intentionally don't use spread (or .apply) directly because it
	      // breaks IE9: https://github.com/facebook/react/issues/13610
	      Function.prototype.apply.call(console.error, console, argsWithFormat);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	var warningWithoutStack$1 = warningWithoutStack;

	var didWarnStateUpdateForUnmountedComponent = {};

	function warnNoop(publicInstance, callerName) {
	  {
	    var _constructor = publicInstance.constructor;
	    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
	    var warningKey = componentName + '.' + callerName;
	    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	      return;
	    }
	    warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
	    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance, callback, callerName) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	var emptyObject = {};
	{
	  Object.freeze(emptyObject);
	}

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  // If a component has string refs, we will assign a different object later.
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	Component.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	Component.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
	  this.updater.enqueueSetState(this, partialState, callback, 'setState');
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	{
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    Object.defineProperty(Component.prototype, methodName, {
	      get: function () {
	        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	        return undefined;
	      }
	    });
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = Component.prototype;

	/**
	 * Convenience component with default shallow equality check for sCU.
	 */
	function PureComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  // If a component has string refs, we will assign a different object later.
	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	pureComponentPrototype.constructor = PureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(pureComponentPrototype, Component.prototype);
	pureComponentPrototype.isPureReactComponent = true;

	// an immutable object with a single mutable value
	function createRef() {
	  var refObject = {
	    current: null
	  };
	  {
	    Object.seal(refObject);
	  }
	  return refObject;
	}

	/**
	 * Keeps track of the current dispatcher.
	 */
	var ReactCurrentDispatcher = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

	var describeComponentFrame = function (name, source, ownerName) {
	  var sourceInfo = '';
	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');
	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);
	        if (match) {
	          var pathBeforeSlash = match[1];
	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }
	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }
	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	};

	var Resolved = 1;


	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }
	  {
	    if (typeof type.tag === 'number') {
	      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }
	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }
	  if (typeof type === 'string') {
	    return type;
	  }
	  switch (type) {
	    case REACT_CONCURRENT_MODE_TYPE:
	      return 'ConcurrentMode';
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';
	    case REACT_PORTAL_TYPE:
	      return 'Portal';
	    case REACT_PROFILER_TYPE:
	      return 'Profiler';
	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';
	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';
	  }
	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';
	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';
	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');
	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);
	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);
	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }
	        }
	    }
	  }
	  return null;
	}

	var ReactDebugCurrentFrame = {};

	var currentlyValidatingElement = null;

	function setCurrentlyValidatingElement(element) {
	  {
	    currentlyValidatingElement = element;
	  }
	}

	{
	  // Stack implementation injected by the current renderer.
	  ReactDebugCurrentFrame.getCurrentStack = null;

	  ReactDebugCurrentFrame.getStackAddendum = function () {
	    var stack = '';

	    // Add an extra top frame while an element is being validated
	    if (currentlyValidatingElement) {
	      var name = getComponentName(currentlyValidatingElement.type);
	      var owner = currentlyValidatingElement._owner;
	      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
	    }

	    // Delegate to the injected renderer-specific implementation
	    var impl = ReactDebugCurrentFrame.getCurrentStack;
	    if (impl) {
	      stack += impl() || '';
	    }

	    return stack;
	  };
	}

	var ReactSharedInternals = {
	  ReactCurrentDispatcher: ReactCurrentDispatcher,
	  ReactCurrentOwner: ReactCurrentOwner,
	  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
	  assign: _assign
	};

	{
	  _assign(ReactSharedInternals, {
	    // These should not be included in production.
	    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
	    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
	    // TODO: remove in React 17.0.
	    ReactComponentTreeHook: {}
	  });
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = warningWithoutStack$1;

	{
	  warning = function (condition, format) {
	    if (condition) {
	      return;
	    }
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();
	    // eslint-disable-next-line react-internal/warning-and-invariant-args

	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
	  };
	}

	var warning$1 = warning;

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown = void 0;
	var specialPropRefWarningShown = void 0;

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    });
	    // self and source are DEV only properties.
	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    });
	    // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.
	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://reactjs.org/docs/react-api.html#createelement
	 */
	function createElement(type, config, children) {
	  var propName = void 0;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  {
	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }
	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	}

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://reactjs.org/docs/react-api.html#createfactory
	 */


	function cloneAndReplaceKey(oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	}

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://reactjs.org/docs/react-api.html#cloneelement
	 */
	function cloneElement(element, config, children) {
	  !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;

	  var propName = void 0;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps = void 0;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	}

	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */
	function isValidElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	var POOL_SIZE = 10;
	var traverseContextPool = [];
	function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
	  if (traverseContextPool.length) {
	    var traverseContext = traverseContextPool.pop();
	    traverseContext.result = mapResult;
	    traverseContext.keyPrefix = keyPrefix;
	    traverseContext.func = mapFunction;
	    traverseContext.context = mapContext;
	    traverseContext.count = 0;
	    return traverseContext;
	  } else {
	    return {
	      result: mapResult,
	      keyPrefix: keyPrefix,
	      func: mapFunction,
	      context: mapContext,
	      count: 0
	    };
	  }
	}

	function releaseTraverseContext(traverseContext) {
	  traverseContext.result = null;
	  traverseContext.keyPrefix = null;
	  traverseContext.func = null;
	  traverseContext.context = null;
	  traverseContext.count = 0;
	  if (traverseContextPool.length < POOL_SIZE) {
	    traverseContextPool.push(traverseContext);
	  }
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  var invokeCallback = false;

	  if (children === null) {
	    invokeCallback = true;
	  } else {
	    switch (type) {
	      case 'string':
	      case 'number':
	        invokeCallback = true;
	        break;
	      case 'object':
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	        }
	    }
	  }

	  if (invokeCallback) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child = void 0;
	  var nextName = void 0;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (typeof iteratorFn === 'function') {
	      {
	        // Warn about using Maps as children
	        if (iteratorFn === children.entries) {
	          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
	          didWarnAboutMaps = true;
	        }
	      }

	      var iterator = iteratorFn.call(children);
	      var step = void 0;
	      var ii = 0;
	      while (!(step = iterator.next()).done) {
	        child = step.value;
	        nextName = nextNamePrefix + getComponentKey(child, ii++);
	        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
	      }
	      var childrenString = '' + children;
	      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (typeof component === 'object' && component !== null && component.key != null) {
	    // Explicit key
	    return escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
	      return c;
	    });
	  } else if (mappedChild != null) {
	    if (isValidElement(mappedChild)) {
	      mappedChild = cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrencount
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children) {
	  return traverseAllChildren(children, function () {
	    return null;
	  }, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
	    return child;
	  });
	  return result;
	}

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
	  return children;
	}

	function createContext(defaultValue, calculateChangedBits) {
	  if (calculateChangedBits === undefined) {
	    calculateChangedBits = null;
	  } else {
	    {
	      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
	    }
	  }

	  var context = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    _calculateChangedBits: calculateChangedBits,
	    // As a workaround to support multiple concurrent renderers, we categorize
	    // some renderers as primary and others as secondary. We only expect
	    // there to be two concurrent renderers at most: React Native (primary) and
	    // Fabric (secondary); React DOM (primary) and React ART (secondary).
	    // Secondary renderers store their context values on separate fields.
	    _currentValue: defaultValue,
	    _currentValue2: defaultValue,
	    // Used to track how many concurrent renderers this context currently
	    // supports within in a single renderer. Such as parallel server rendering.
	    _threadCount: 0,
	    // These are circular
	    Provider: null,
	    Consumer: null
	  };

	  context.Provider = {
	    $$typeof: REACT_PROVIDER_TYPE,
	    _context: context
	  };

	  var hasWarnedAboutUsingNestedContextConsumers = false;
	  var hasWarnedAboutUsingConsumerProvider = false;

	  {
	    // A separate object, but proxies back to the original context object for
	    // backwards compatibility. It has a different $$typeof, so we can properly
	    // warn for the incorrect usage of Context as a Consumer.
	    var Consumer = {
	      $$typeof: REACT_CONTEXT_TYPE,
	      _context: context,
	      _calculateChangedBits: context._calculateChangedBits
	    };
	    // $FlowFixMe: Flow complains about not setting a value, which is intentional here
	    Object.defineProperties(Consumer, {
	      Provider: {
	        get: function () {
	          if (!hasWarnedAboutUsingConsumerProvider) {
	            hasWarnedAboutUsingConsumerProvider = true;
	            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
	          }
	          return context.Provider;
	        },
	        set: function (_Provider) {
	          context.Provider = _Provider;
	        }
	      },
	      _currentValue: {
	        get: function () {
	          return context._currentValue;
	        },
	        set: function (_currentValue) {
	          context._currentValue = _currentValue;
	        }
	      },
	      _currentValue2: {
	        get: function () {
	          return context._currentValue2;
	        },
	        set: function (_currentValue2) {
	          context._currentValue2 = _currentValue2;
	        }
	      },
	      _threadCount: {
	        get: function () {
	          return context._threadCount;
	        },
	        set: function (_threadCount) {
	          context._threadCount = _threadCount;
	        }
	      },
	      Consumer: {
	        get: function () {
	          if (!hasWarnedAboutUsingNestedContextConsumers) {
	            hasWarnedAboutUsingNestedContextConsumers = true;
	            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	          }
	          return context.Consumer;
	        }
	      }
	    });
	    // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
	    context.Consumer = Consumer;
	  }

	  {
	    context._currentRenderer = null;
	    context._currentRenderer2 = null;
	  }

	  return context;
	}

	function lazy(ctor) {
	  var lazyType = {
	    $$typeof: REACT_LAZY_TYPE,
	    _ctor: ctor,
	    // React uses these fields to store the result.
	    _status: -1,
	    _result: null
	  };

	  {
	    // In production, this would just set it on the object.
	    var defaultProps = void 0;
	    var propTypes = void 0;
	    Object.defineProperties(lazyType, {
	      defaultProps: {
	        configurable: true,
	        get: function () {
	          return defaultProps;
	        },
	        set: function (newDefaultProps) {
	          warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
	          defaultProps = newDefaultProps;
	          // Match production behavior more closely:
	          Object.defineProperty(lazyType, 'defaultProps', {
	            enumerable: true
	          });
	        }
	      },
	      propTypes: {
	        configurable: true,
	        get: function () {
	          return propTypes;
	        },
	        set: function (newPropTypes) {
	          warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
	          propTypes = newPropTypes;
	          // Match production behavior more closely:
	          Object.defineProperty(lazyType, 'propTypes', {
	            enumerable: true
	          });
	        }
	      }
	    });
	  }

	  return lazyType;
	}

	function forwardRef(render) {
	  {
	    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	      warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
	    } else if (typeof render !== 'function') {
	      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
	    } else {
	      !(
	      // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
	      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
	    }

	    if (render != null) {
	      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
	    }
	  }

	  return {
	    $$typeof: REACT_FORWARD_REF_TYPE,
	    render: render
	  };
	}

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' ||
	  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
	}

	function memo(type, compare) {
	  {
	    if (!isValidElementType(type)) {
	      warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
	    }
	  }
	  return {
	    $$typeof: REACT_MEMO_TYPE,
	    type: type,
	    compare: compare === undefined ? null : compare
	  };
	}

	function resolveDispatcher() {
	  var dispatcher = ReactCurrentDispatcher.current;
	  !(dispatcher !== null) ? invariant(false, 'Hooks can only be called inside the body of a function component. (https://fb.me/react-invalid-hook-call)') : void 0;
	  return dispatcher;
	}

	function useContext(Context, unstable_observedBits) {
	  var dispatcher = resolveDispatcher();
	  {
	    !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0;

	    // TODO: add a more generic warning for invalid values.
	    if (Context._context !== undefined) {
	      var realContext = Context._context;
	      // Don't deduplicate because this legitimately causes bugs
	      // and nobody should be using this in existing code.
	      if (realContext.Consumer === Context) {
	        warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
	      } else if (realContext.Provider === Context) {
	        warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
	      }
	    }
	  }
	  return dispatcher.useContext(Context, unstable_observedBits);
	}

	function useState(initialState) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useState(initialState);
	}

	function useReducer(reducer, initialArg, init) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useReducer(reducer, initialArg, init);
	}

	function useRef(initialValue) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useRef(initialValue);
	}

	function useEffect(create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useEffect(create, inputs);
	}

	function useLayoutEffect(create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useLayoutEffect(create, inputs);
	}

	function useCallback(callback, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useCallback(callback, inputs);
	}

	function useMemo(create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useMemo(create, inputs);
	}

	function useImperativeHandle(ref, create, inputs) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useImperativeHandle(ref, create, inputs);
	}

	function useDebugValue(value, formatterFn) {
	  {
	    var dispatcher = resolveDispatcher();
	    return dispatcher.useDebugValue(value, formatterFn);
	  }
	}

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	var propTypesMisspellWarningShown = void 0;

	{
	  propTypesMisspellWarningShown = false;
	}

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = getComponentName(ReactCurrentOwner.current.type);
	    if (name) {
	      return '\n\nCheck the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	    return;
	  }
	  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
	  }

	  setCurrentlyValidatingElement(element);
	  {
	    warning$1(false, 'Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
	  }
	  setCurrentlyValidatingElement(null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    if (typeof iteratorFn === 'function') {
	      // Entry iterators used to provide implicit keys,
	      // but now we print a separate warning for them later.
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step = void 0;
	        while (!(step = iterator.next()).done) {
	          if (isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var type = element.type;
	  if (type === null || type === undefined || typeof type === 'string') {
	    return;
	  }
	  var name = getComponentName(type);
	  var propTypes = void 0;
	  if (typeof type === 'function') {
	    propTypes = type.propTypes;
	  } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
	  // Note: Memo only checks outer props here.
	  // Inner props are checked in the reconciler.
	  type.$$typeof === REACT_MEMO_TYPE)) {
	    propTypes = type.propTypes;
	  } else {
	    return;
	  }
	  if (propTypes) {
	    setCurrentlyValidatingElement(element);
	    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
	    setCurrentlyValidatingElement(null);
	  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	    propTypesMisspellWarningShown = true;
	    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
	  }
	  if (typeof type.getDefaultProps === 'function') {
	    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */
	function validateFragmentProps(fragment) {
	  setCurrentlyValidatingElement(fragment);

	  var keys = Object.keys(fragment.props);
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (key !== 'children' && key !== 'key') {
	      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
	      break;
	    }
	  }

	  if (fragment.ref !== null) {
	    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
	  }

	  setCurrentlyValidatingElement(null);
	}

	function createElementWithValidation(type, props, children) {
	  var validType = isValidElementType(type);

	  // We warn in this case but don't throw. We expect the element creation to
	  // succeed and there will likely be errors in render.
	  if (!validType) {
	    var info = '';
	    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	    }

	    var sourceInfo = getSourceInfoErrorAddendum(props);
	    if (sourceInfo) {
	      info += sourceInfo;
	    } else {
	      info += getDeclarationErrorAddendum();
	    }

	    var typeString = void 0;
	    if (type === null) {
	      typeString = 'null';
	    } else if (Array.isArray(type)) {
	      typeString = 'array';
	    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	      typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
	      info = ' Did you accidentally export a JSX literal instead of a component?';
	    } else {
	      typeString = typeof type;
	    }

	    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	  }

	  var element = createElement.apply(this, arguments);

	  // The result can be nullish if a mock or a custom function is used.
	  // TODO: Drop this when these are no longer allowed as the type argument.
	  if (element == null) {
	    return element;
	  }

	  // Skip key warning if the type isn't valid since our key validation logic
	  // doesn't expect a non-string/function type and can throw confusing errors.
	  // We don't want exception behavior to differ between dev and prod.
	  // (Rendering will throw with a helpful message and as soon as the type is
	  // fixed, the key warnings will appear.)
	  if (validType) {
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	  }

	  if (type === REACT_FRAGMENT_TYPE) {
	    validateFragmentProps(element);
	  } else {
	    validatePropTypes(element);
	  }

	  return element;
	}

	function createFactoryWithValidation(type) {
	  var validatedFactory = createElementWithValidation.bind(null, type);
	  validatedFactory.type = type;
	  // Legacy hook: remove it
	  {
	    Object.defineProperty(validatedFactory, 'type', {
	      enumerable: false,
	      get: function () {
	        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	        Object.defineProperty(this, 'type', {
	          value: type
	        });
	        return type;
	      }
	    });
	  }

	  return validatedFactory;
	}

	function cloneElementWithValidation(element, props, children) {
	  var newElement = cloneElement.apply(this, arguments);
	  for (var i = 2; i < arguments.length; i++) {
	    validateChildKeys(arguments[i], newElement.type);
	  }
	  validatePropTypes(newElement);
	  return newElement;
	}

	// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


	// In some cases, StrictMode should also double-render lifecycles.
	// This can be confusing for tests though,
	// And it can be bad for performance in production.
	// This feature flag can be used to control the behavior:


	// To preserve the "Pause on caught exceptions" behavior of the debugger, we
	// replay the begin phase of a failed component inside invokeGuardedCallback.


	// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


	// Gather advanced timing metrics for Profiler subtrees.


	// Trace which interactions trigger each commit.


	// Only used in www builds.
	 // TODO: true? Here it might just be false.

	// Only used in www builds.


	// Only used in www builds.


	// React Fire: prevent the value and checked attributes from syncing
	// with their related DOM properties


	// These APIs will no longer be "unstable" in the upcoming 16.7 release,
	// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
	var enableStableConcurrentModeAPIs = false;

	var React = {
	  Children: {
	    map: mapChildren,
	    forEach: forEachChildren,
	    count: countChildren,
	    toArray: toArray,
	    only: onlyChild
	  },

	  createRef: createRef,
	  Component: Component,
	  PureComponent: PureComponent,

	  createContext: createContext,
	  forwardRef: forwardRef,
	  lazy: lazy,
	  memo: memo,

	  useCallback: useCallback,
	  useContext: useContext,
	  useEffect: useEffect,
	  useImperativeHandle: useImperativeHandle,
	  useDebugValue: useDebugValue,
	  useLayoutEffect: useLayoutEffect,
	  useMemo: useMemo,
	  useReducer: useReducer,
	  useRef: useRef,
	  useState: useState,

	  Fragment: REACT_FRAGMENT_TYPE,
	  StrictMode: REACT_STRICT_MODE_TYPE,
	  Suspense: REACT_SUSPENSE_TYPE,

	  createElement: createElementWithValidation,
	  cloneElement: cloneElementWithValidation,
	  createFactory: createFactoryWithValidation,
	  isValidElement: isValidElement,

	  version: ReactVersion,

	  unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,
	  unstable_Profiler: REACT_PROFILER_TYPE,

	  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
	};

	// Note: some APIs are added with feature flags.
	// Make sure that stable builds for open source
	// don't modify the React object to avoid deopts.
	// Also let's not expose their names in stable builds.

	if (enableStableConcurrentModeAPIs) {
	  React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	  React.Profiler = REACT_PROFILER_TYPE;
	  React.unstable_ConcurrentMode = undefined;
	  React.unstable_Profiler = undefined;
	}



	var React$2 = Object.freeze({
		default: React
	});

	var React$3 = ( React$2 && React ) || React$2;

	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.
	var react = React$3.default || React$3;

	module.exports = react;
	  })();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = __webpack_require__(9);
	  var loggedTypeFailures = {};
	  var has = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	}

	module.exports = checkPropTypes;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (process.env.NODE_ENV === 'production') {
	  module.exports = __webpack_require__(11);
	} else {
	  module.exports = __webpack_require__(12);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 11 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** @license React v0.13.3
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';Object.defineProperty(exports,"__esModule",{value:!0});var d=null,e=!1,g=3,k=-1,l=-1,m=!1,n=!1;function p(){if(!m){var a=d.expirationTime;n?q():n=!0;r(t,a)}}
	function u(){var a=d,b=d.next;if(d===b)d=null;else{var c=d.previous;d=c.next=b;b.previous=c}a.next=a.previous=null;c=a.callback;b=a.expirationTime;a=a.priorityLevel;var f=g,Q=l;g=a;l=b;try{var h=c()}finally{g=f,l=Q}if("function"===typeof h)if(h={callback:h,priorityLevel:a,expirationTime:b,next:null,previous:null},null===d)d=h.next=h.previous=h;else{c=null;a=d;do{if(a.expirationTime>=b){c=a;break}a=a.next}while(a!==d);null===c?c=d:c===d&&(d=h,p());b=c.previous;b.next=c.previous=h;h.next=c;h.previous=
	b}}function v(){if(-1===k&&null!==d&&1===d.priorityLevel){m=!0;try{do u();while(null!==d&&1===d.priorityLevel)}finally{m=!1,null!==d?p():n=!1}}}function t(a){m=!0;var b=e;e=a;try{if(a)for(;null!==d;){var c=exports.unstable_now();if(d.expirationTime<=c){do u();while(null!==d&&d.expirationTime<=c)}else break}else if(null!==d){do u();while(null!==d&&!w())}}finally{m=!1,e=b,null!==d?p():n=!1,v()}}
	var x=Date,y="function"===typeof setTimeout?setTimeout:void 0,z="function"===typeof clearTimeout?clearTimeout:void 0,A="function"===typeof requestAnimationFrame?requestAnimationFrame:void 0,B="function"===typeof cancelAnimationFrame?cancelAnimationFrame:void 0,C,D;function E(a){C=A(function(b){z(D);a(b)});D=y(function(){B(C);a(exports.unstable_now())},100)}
	if("object"===typeof performance&&"function"===typeof performance.now){var F=performance;exports.unstable_now=function(){return F.now()}}else exports.unstable_now=function(){return x.now()};var r,q,w,G=null;"undefined"!==typeof window?G=window:"undefined"!==typeof global&&(G=global);
	if(G&&G._schedMock){var H=G._schedMock;r=H[0];q=H[1];w=H[2];exports.unstable_now=H[3]}else if("undefined"===typeof window||"function"!==typeof MessageChannel){var I=null,J=function(a){if(null!==I)try{I(a)}finally{I=null}};r=function(a){null!==I?setTimeout(r,0,a):(I=a,setTimeout(J,0,!1))};q=function(){I=null};w=function(){return!1}}else{"undefined"!==typeof console&&("function"!==typeof A&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),
	"function"!==typeof B&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var K=null,L=!1,M=-1,N=!1,O=!1,P=0,R=33,S=33;w=function(){return P<=exports.unstable_now()};var T=new MessageChannel,U=T.port2;T.port1.onmessage=function(){L=!1;var a=K,b=M;K=null;M=-1;var c=exports.unstable_now(),f=!1;if(0>=P-c)if(-1!==b&&b<=c)f=!0;else{N||(N=!0,E(V));K=a;M=b;return}if(null!==a){O=!0;try{a(f)}finally{O=!1}}};
	var V=function(a){if(null!==K){E(V);var b=a-P+S;b<S&&R<S?(8>b&&(b=8),S=b<R?R:b):R=b;P=a+S;L||(L=!0,U.postMessage(void 0))}else N=!1};r=function(a,b){K=a;M=b;O||0>b?U.postMessage(void 0):N||(N=!0,E(V))};q=function(){K=null;L=!1;M=-1}}exports.unstable_ImmediatePriority=1;exports.unstable_UserBlockingPriority=2;exports.unstable_NormalPriority=3;exports.unstable_IdlePriority=5;exports.unstable_LowPriority=4;
	exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=g,f=k;g=a;k=exports.unstable_now();try{return b()}finally{g=c,k=f,v()}};exports.unstable_next=function(a){switch(g){case 1:case 2:case 3:var b=3;break;default:b=g}var c=g,f=k;g=b;k=exports.unstable_now();try{return a()}finally{g=c,k=f,v()}};
	exports.unstable_scheduleCallback=function(a,b){var c=-1!==k?k:exports.unstable_now();if("object"===typeof b&&null!==b&&"number"===typeof b.timeout)b=c+b.timeout;else switch(g){case 1:b=c+-1;break;case 2:b=c+250;break;case 5:b=c+1073741823;break;case 4:b=c+1E4;break;default:b=c+5E3}a={callback:a,priorityLevel:g,expirationTime:b,next:null,previous:null};if(null===d)d=a.next=a.previous=a,p();else{c=null;var f=d;do{if(f.expirationTime>b){c=f;break}f=f.next}while(f!==d);null===c?c=d:c===d&&(d=a,p());
	b=c.previous;b.next=c.previous=a;a.next=c;a.previous=b}return a};exports.unstable_cancelCallback=function(a){var b=a.next;if(null!==b){if(b===a)d=null;else{a===d&&(d=b);var c=a.previous;c.next=b;b.previous=c}a.next=a.previous=null}};exports.unstable_wrapCallback=function(a){var b=g;return function(){var c=g,f=k;g=b;k=exports.unstable_now();try{return a.apply(this,arguments)}finally{g=c,k=f,v()}}};exports.unstable_getCurrentPriorityLevel=function(){return g};
	exports.unstable_shouldYield=function(){return!e&&(null!==d&&d.expirationTime<l||w())};exports.unstable_continueExecution=function(){null!==d&&p()};exports.unstable_pauseExecution=function(){};exports.unstable_getFirstCallbackNode=function(){return d};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {/** @license React v0.13.3
	 * scheduler.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	var enableSchedulerDebugging = false;

	/* eslint-disable no-var */

	// TODO: Use symbols?
	var ImmediatePriority = 1;
	var UserBlockingPriority = 2;
	var NormalPriority = 3;
	var LowPriority = 4;
	var IdlePriority = 5;

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var maxSigned31BitInt = 1073741823;

	// Times out immediately
	var IMMEDIATE_PRIORITY_TIMEOUT = -1;
	// Eventually times out
	var USER_BLOCKING_PRIORITY = 250;
	var NORMAL_PRIORITY_TIMEOUT = 5000;
	var LOW_PRIORITY_TIMEOUT = 10000;
	// Never times out
	var IDLE_PRIORITY = maxSigned31BitInt;

	// Callbacks are stored as a circular, doubly linked list.
	var firstCallbackNode = null;

	var currentDidTimeout = false;
	// Pausing the scheduler is useful for debugging.
	var isSchedulerPaused = false;

	var currentPriorityLevel = NormalPriority;
	var currentEventStartTime = -1;
	var currentExpirationTime = -1;

	// This is set when a callback is being executed, to prevent re-entrancy.
	var isExecutingCallback = false;

	var isHostCallbackScheduled = false;

	var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

	function ensureHostCallbackIsScheduled() {
	  if (isExecutingCallback) {
	    // Don't schedule work yet; wait until the next time we yield.
	    return;
	  }
	  // Schedule the host callback using the earliest expiration in the list.
	  var expirationTime = firstCallbackNode.expirationTime;
	  if (!isHostCallbackScheduled) {
	    isHostCallbackScheduled = true;
	  } else {
	    // Cancel the existing host callback.
	    cancelHostCallback();
	  }
	  requestHostCallback(flushWork, expirationTime);
	}

	function flushFirstCallback() {
	  var flushedNode = firstCallbackNode;

	  // Remove the node from the list before calling the callback. That way the
	  // list is in a consistent state even if the callback throws.
	  var next = firstCallbackNode.next;
	  if (firstCallbackNode === next) {
	    // This is the last callback in the list.
	    firstCallbackNode = null;
	    next = null;
	  } else {
	    var lastCallbackNode = firstCallbackNode.previous;
	    firstCallbackNode = lastCallbackNode.next = next;
	    next.previous = lastCallbackNode;
	  }

	  flushedNode.next = flushedNode.previous = null;

	  // Now it's safe to call the callback.
	  var callback = flushedNode.callback;
	  var expirationTime = flushedNode.expirationTime;
	  var priorityLevel = flushedNode.priorityLevel;
	  var previousPriorityLevel = currentPriorityLevel;
	  var previousExpirationTime = currentExpirationTime;
	  currentPriorityLevel = priorityLevel;
	  currentExpirationTime = expirationTime;
	  var continuationCallback;
	  try {
	    continuationCallback = callback();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	    currentExpirationTime = previousExpirationTime;
	  }

	  // A callback may return a continuation. The continuation should be scheduled
	  // with the same priority and expiration as the just-finished callback.
	  if (typeof continuationCallback === 'function') {
	    var continuationNode = {
	      callback: continuationCallback,
	      priorityLevel: priorityLevel,
	      expirationTime: expirationTime,
	      next: null,
	      previous: null
	    };

	    // Insert the new callback into the list, sorted by its expiration. This is
	    // almost the same as the code in `scheduleCallback`, except the callback
	    // is inserted into the list *before* callbacks of equal expiration instead
	    // of after.
	    if (firstCallbackNode === null) {
	      // This is the first callback in the list.
	      firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
	    } else {
	      var nextAfterContinuation = null;
	      var node = firstCallbackNode;
	      do {
	        if (node.expirationTime >= expirationTime) {
	          // This callback expires at or after the continuation. We will insert
	          // the continuation *before* this callback.
	          nextAfterContinuation = node;
	          break;
	        }
	        node = node.next;
	      } while (node !== firstCallbackNode);

	      if (nextAfterContinuation === null) {
	        // No equal or lower priority callback was found, which means the new
	        // callback is the lowest priority callback in the list.
	        nextAfterContinuation = firstCallbackNode;
	      } else if (nextAfterContinuation === firstCallbackNode) {
	        // The new callback is the highest priority callback in the list.
	        firstCallbackNode = continuationNode;
	        ensureHostCallbackIsScheduled();
	      }

	      var previous = nextAfterContinuation.previous;
	      previous.next = nextAfterContinuation.previous = continuationNode;
	      continuationNode.next = nextAfterContinuation;
	      continuationNode.previous = previous;
	    }
	  }
	}

	function flushImmediateWork() {
	  if (
	  // Confirm we've exited the outer most event handler
	  currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
	    isExecutingCallback = true;
	    try {
	      do {
	        flushFirstCallback();
	      } while (
	      // Keep flushing until there are no more immediate callbacks
	      firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
	    } finally {
	      isExecutingCallback = false;
	      if (firstCallbackNode !== null) {
	        // There's still work remaining. Request another callback.
	        ensureHostCallbackIsScheduled();
	      } else {
	        isHostCallbackScheduled = false;
	      }
	    }
	  }
	}

	function flushWork(didTimeout) {
	  // Exit right away if we're currently paused

	  if (enableSchedulerDebugging && isSchedulerPaused) {
	    return;
	  }

	  isExecutingCallback = true;
	  var previousDidTimeout = currentDidTimeout;
	  currentDidTimeout = didTimeout;
	  try {
	    if (didTimeout) {
	      // Flush all the expired callbacks without yielding.
	      while (firstCallbackNode !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
	        // TODO Wrap in feature flag
	        // Read the current time. Flush all the callbacks that expire at or
	        // earlier than that time. Then read the current time again and repeat.
	        // This optimizes for as few performance.now calls as possible.
	        var currentTime = exports.unstable_now();
	        if (firstCallbackNode.expirationTime <= currentTime) {
	          do {
	            flushFirstCallback();
	          } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused));
	          continue;
	        }
	        break;
	      }
	    } else {
	      // Keep flushing callbacks until we run out of time in the frame.
	      if (firstCallbackNode !== null) {
	        do {
	          if (enableSchedulerDebugging && isSchedulerPaused) {
	            break;
	          }
	          flushFirstCallback();
	        } while (firstCallbackNode !== null && !shouldYieldToHost());
	      }
	    }
	  } finally {
	    isExecutingCallback = false;
	    currentDidTimeout = previousDidTimeout;
	    if (firstCallbackNode !== null) {
	      // There's still work remaining. Request another callback.
	      ensureHostCallbackIsScheduled();
	    } else {
	      isHostCallbackScheduled = false;
	    }
	    // Before exiting, flush all the immediate work that was scheduled.
	    flushImmediateWork();
	  }
	}

	function unstable_runWithPriority(priorityLevel, eventHandler) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	    case LowPriority:
	    case IdlePriority:
	      break;
	    default:
	      priorityLevel = NormalPriority;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  var previousEventStartTime = currentEventStartTime;
	  currentPriorityLevel = priorityLevel;
	  currentEventStartTime = exports.unstable_now();

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	    currentEventStartTime = previousEventStartTime;

	    // Before exiting, flush all the immediate work that was scheduled.
	    flushImmediateWork();
	  }
	}

	function unstable_next(eventHandler) {
	  var priorityLevel = void 0;
	  switch (currentPriorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	      // Shift down to normal priority
	      priorityLevel = NormalPriority;
	      break;
	    default:
	      // Anything lower than normal priority should remain at the current level.
	      priorityLevel = currentPriorityLevel;
	      break;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  var previousEventStartTime = currentEventStartTime;
	  currentPriorityLevel = priorityLevel;
	  currentEventStartTime = exports.unstable_now();

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	    currentEventStartTime = previousEventStartTime;

	    // Before exiting, flush all the immediate work that was scheduled.
	    flushImmediateWork();
	  }
	}

	function unstable_wrapCallback(callback) {
	  var parentPriorityLevel = currentPriorityLevel;
	  return function () {
	    // This is a fork of runWithPriority, inlined for performance.
	    var previousPriorityLevel = currentPriorityLevel;
	    var previousEventStartTime = currentEventStartTime;
	    currentPriorityLevel = parentPriorityLevel;
	    currentEventStartTime = exports.unstable_now();

	    try {
	      return callback.apply(this, arguments);
	    } finally {
	      currentPriorityLevel = previousPriorityLevel;
	      currentEventStartTime = previousEventStartTime;
	      flushImmediateWork();
	    }
	  };
	}

	function unstable_scheduleCallback(callback, deprecated_options) {
	  var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();

	  var expirationTime;
	  if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
	    // FIXME: Remove this branch once we lift expiration times out of React.
	    expirationTime = startTime + deprecated_options.timeout;
	  } else {
	    switch (currentPriorityLevel) {
	      case ImmediatePriority:
	        expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
	        break;
	      case UserBlockingPriority:
	        expirationTime = startTime + USER_BLOCKING_PRIORITY;
	        break;
	      case IdlePriority:
	        expirationTime = startTime + IDLE_PRIORITY;
	        break;
	      case LowPriority:
	        expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
	        break;
	      case NormalPriority:
	      default:
	        expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
	    }
	  }

	  var newNode = {
	    callback: callback,
	    priorityLevel: currentPriorityLevel,
	    expirationTime: expirationTime,
	    next: null,
	    previous: null
	  };

	  // Insert the new callback into the list, ordered first by expiration, then
	  // by insertion. So the new callback is inserted any other callback with
	  // equal expiration.
	  if (firstCallbackNode === null) {
	    // This is the first callback in the list.
	    firstCallbackNode = newNode.next = newNode.previous = newNode;
	    ensureHostCallbackIsScheduled();
	  } else {
	    var next = null;
	    var node = firstCallbackNode;
	    do {
	      if (node.expirationTime > expirationTime) {
	        // The new callback expires before this one.
	        next = node;
	        break;
	      }
	      node = node.next;
	    } while (node !== firstCallbackNode);

	    if (next === null) {
	      // No callback with a later expiration was found, which means the new
	      // callback has the latest expiration in the list.
	      next = firstCallbackNode;
	    } else if (next === firstCallbackNode) {
	      // The new callback has the earliest expiration in the entire list.
	      firstCallbackNode = newNode;
	      ensureHostCallbackIsScheduled();
	    }

	    var previous = next.previous;
	    previous.next = next.previous = newNode;
	    newNode.next = next;
	    newNode.previous = previous;
	  }

	  return newNode;
	}

	function unstable_pauseExecution() {
	  isSchedulerPaused = true;
	}

	function unstable_continueExecution() {
	  isSchedulerPaused = false;
	  if (firstCallbackNode !== null) {
	    ensureHostCallbackIsScheduled();
	  }
	}

	function unstable_getFirstCallbackNode() {
	  return firstCallbackNode;
	}

	function unstable_cancelCallback(callbackNode) {
	  var next = callbackNode.next;
	  if (next === null) {
	    // Already cancelled.
	    return;
	  }

	  if (next === callbackNode) {
	    // This is the only scheduled callback. Clear the list.
	    firstCallbackNode = null;
	  } else {
	    // Remove the callback from its position in the list.
	    if (callbackNode === firstCallbackNode) {
	      firstCallbackNode = next;
	    }
	    var previous = callbackNode.previous;
	    previous.next = next;
	    next.previous = previous;
	  }

	  callbackNode.next = callbackNode.previous = null;
	}

	function unstable_getCurrentPriorityLevel() {
	  return currentPriorityLevel;
	}

	function unstable_shouldYield() {
	  return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());
	}

	// The remaining code is essentially a polyfill for requestIdleCallback. It
	// works by scheduling a requestAnimationFrame, storing the time for the start
	// of the frame, then scheduling a postMessage which gets scheduled after paint.
	// Within the postMessage handler do as much work as possible until time + frame
	// rate. By separating the idle call into a separate event tick we ensure that
	// layout, paint and other browser work is counted against the available time.
	// The frame rate is dynamically adjusted.

	// We capture a local reference to any global, in case it gets polyfilled after
	// this module is initially evaluated. We want to be using a
	// consistent implementation.
	var localDate = Date;

	// This initialization code may run even on server environments if a component
	// just imports ReactDOM (e.g. for findDOMNode). Some environments might not
	// have setTimeout or clearTimeout. However, we always expect them to be defined
	// on the client. https://github.com/facebook/react/pull/13088
	var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;

	// We don't expect either of these to necessarily be defined, but we will error
	// later if they are missing on the client.
	var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
	var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;

	// requestAnimationFrame does not run when the tab is in the background. If
	// we're backgrounded we prefer for that work to happen so that the page
	// continues to load in the background. So we also schedule a 'setTimeout' as
	// a fallback.
	// TODO: Need a better heuristic for backgrounded work.
	var ANIMATION_FRAME_TIMEOUT = 100;
	var rAFID;
	var rAFTimeoutID;
	var requestAnimationFrameWithTimeout = function (callback) {
	  // schedule rAF and also a setTimeout
	  rAFID = localRequestAnimationFrame(function (timestamp) {
	    // cancel the setTimeout
	    localClearTimeout(rAFTimeoutID);
	    callback(timestamp);
	  });
	  rAFTimeoutID = localSetTimeout(function () {
	    // cancel the requestAnimationFrame
	    localCancelAnimationFrame(rAFID);
	    callback(exports.unstable_now());
	  }, ANIMATION_FRAME_TIMEOUT);
	};

	if (hasNativePerformanceNow) {
	  var Performance = performance;
	  exports.unstable_now = function () {
	    return Performance.now();
	  };
	} else {
	  exports.unstable_now = function () {
	    return localDate.now();
	  };
	}

	var requestHostCallback;
	var cancelHostCallback;
	var shouldYieldToHost;

	var globalValue = null;
	if (typeof window !== 'undefined') {
	  globalValue = window;
	} else if (typeof global !== 'undefined') {
	  globalValue = global;
	}

	if (globalValue && globalValue._schedMock) {
	  // Dynamic injection, only for testing purposes.
	  var globalImpl = globalValue._schedMock;
	  requestHostCallback = globalImpl[0];
	  cancelHostCallback = globalImpl[1];
	  shouldYieldToHost = globalImpl[2];
	  exports.unstable_now = globalImpl[3];
	} else if (
	// If Scheduler runs in a non-DOM environment, it falls back to a naive
	// implementation using setTimeout.
	typeof window === 'undefined' ||
	// Check if MessageChannel is supported, too.
	typeof MessageChannel !== 'function') {
	  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
	  // fallback to a naive implementation.
	  var _callback = null;
	  var _flushCallback = function (didTimeout) {
	    if (_callback !== null) {
	      try {
	        _callback(didTimeout);
	      } finally {
	        _callback = null;
	      }
	    }
	  };
	  requestHostCallback = function (cb, ms) {
	    if (_callback !== null) {
	      // Protect against re-entrancy.
	      setTimeout(requestHostCallback, 0, cb);
	    } else {
	      _callback = cb;
	      setTimeout(_flushCallback, 0, false);
	    }
	  };
	  cancelHostCallback = function () {
	    _callback = null;
	  };
	  shouldYieldToHost = function () {
	    return false;
	  };
	} else {
	  if (typeof console !== 'undefined') {
	    // TODO: Remove fb.me link
	    if (typeof localRequestAnimationFrame !== 'function') {
	      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }
	    if (typeof localCancelAnimationFrame !== 'function') {
	      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }
	  }

	  var scheduledHostCallback = null;
	  var isMessageEventScheduled = false;
	  var timeoutTime = -1;

	  var isAnimationFrameScheduled = false;

	  var isFlushingHostCallback = false;

	  var frameDeadline = 0;
	  // We start out assuming that we run at 30fps but then the heuristic tracking
	  // will adjust this value to a faster fps if we get more frequent animation
	  // frames.
	  var previousFrameTime = 33;
	  var activeFrameTime = 33;

	  shouldYieldToHost = function () {
	    return frameDeadline <= exports.unstable_now();
	  };

	  // We use the postMessage trick to defer idle work until after the repaint.
	  var channel = new MessageChannel();
	  var port = channel.port2;
	  channel.port1.onmessage = function (event) {
	    isMessageEventScheduled = false;

	    var prevScheduledCallback = scheduledHostCallback;
	    var prevTimeoutTime = timeoutTime;
	    scheduledHostCallback = null;
	    timeoutTime = -1;

	    var currentTime = exports.unstable_now();

	    var didTimeout = false;
	    if (frameDeadline - currentTime <= 0) {
	      // There's no time left in this idle period. Check if the callback has
	      // a timeout and whether it's been exceeded.
	      if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
	        // Exceeded the timeout. Invoke the callback even though there's no
	        // time left.
	        didTimeout = true;
	      } else {
	        // No timeout.
	        if (!isAnimationFrameScheduled) {
	          // Schedule another animation callback so we retry later.
	          isAnimationFrameScheduled = true;
	          requestAnimationFrameWithTimeout(animationTick);
	        }
	        // Exit without invoking the callback.
	        scheduledHostCallback = prevScheduledCallback;
	        timeoutTime = prevTimeoutTime;
	        return;
	      }
	    }

	    if (prevScheduledCallback !== null) {
	      isFlushingHostCallback = true;
	      try {
	        prevScheduledCallback(didTimeout);
	      } finally {
	        isFlushingHostCallback = false;
	      }
	    }
	  };

	  var animationTick = function (rafTime) {
	    if (scheduledHostCallback !== null) {
	      // Eagerly schedule the next animation callback at the beginning of the
	      // frame. If the scheduler queue is not empty at the end of the frame, it
	      // will continue flushing inside that callback. If the queue *is* empty,
	      // then it will exit immediately. Posting the callback at the start of the
	      // frame ensures it's fired within the earliest possible frame. If we
	      // waited until the end of the frame to post the callback, we risk the
	      // browser skipping a frame and not firing the callback until the frame
	      // after that.
	      requestAnimationFrameWithTimeout(animationTick);
	    } else {
	      // No pending work. Exit.
	      isAnimationFrameScheduled = false;
	      return;
	    }

	    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
	    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
	      if (nextFrameTime < 8) {
	        // Defensive coding. We don't support higher frame rates than 120hz.
	        // If the calculated frame time gets lower than 8, it is probably a bug.
	        nextFrameTime = 8;
	      }
	      // If one frame goes long, then the next one can be short to catch up.
	      // If two frames are short in a row, then that's an indication that we
	      // actually have a higher frame rate than what we're currently optimizing.
	      // We adjust our heuristic dynamically accordingly. For example, if we're
	      // running on 120hz display or 90hz VR display.
	      // Take the max of the two in case one of them was an anomaly due to
	      // missed frame deadlines.
	      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
	    } else {
	      previousFrameTime = nextFrameTime;
	    }
	    frameDeadline = rafTime + activeFrameTime;
	    if (!isMessageEventScheduled) {
	      isMessageEventScheduled = true;
	      port.postMessage(undefined);
	    }
	  };

	  requestHostCallback = function (callback, absoluteTimeout) {
	    scheduledHostCallback = callback;
	    timeoutTime = absoluteTimeout;
	    if (isFlushingHostCallback || absoluteTimeout < 0) {
	      // Don't wait for the next frame. Continue working ASAP, in a new event.
	      port.postMessage(undefined);
	    } else if (!isAnimationFrameScheduled) {
	      // If rAF didn't already schedule one, we need to schedule a frame.
	      // TODO: If this rAF doesn't materialize because the browser throttles, we
	      // might want to still have setTimeout trigger rIC as a backup to ensure
	      // that we keep performing work.
	      isAnimationFrameScheduled = true;
	      requestAnimationFrameWithTimeout(animationTick);
	    }
	  };

	  cancelHostCallback = function () {
	    scheduledHostCallback = null;
	    isMessageEventScheduled = false;
	    timeoutTime = -1;
	  };
	}

	exports.unstable_ImmediatePriority = ImmediatePriority;
	exports.unstable_UserBlockingPriority = UserBlockingPriority;
	exports.unstable_NormalPriority = NormalPriority;
	exports.unstable_IdlePriority = IdlePriority;
	exports.unstable_LowPriority = LowPriority;
	exports.unstable_runWithPriority = unstable_runWithPriority;
	exports.unstable_next = unstable_next;
	exports.unstable_scheduleCallback = unstable_scheduleCallback;
	exports.unstable_cancelCallback = unstable_cancelCallback;
	exports.unstable_wrapCallback = unstable_wrapCallback;
	exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
	exports.unstable_shouldYield = unstable_shouldYield;
	exports.unstable_continueExecution = unstable_continueExecution;
	exports.unstable_pauseExecution = unstable_pauseExecution;
	exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
	  })();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), (function() { return this; }())))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.8.3
	 * react-dom.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';

	var React = __webpack_require__(4);
	var _assign = __webpack_require__(6);
	var checkPropTypes = __webpack_require__(8);
	var scheduler = __webpack_require__(10);
	var tracing = __webpack_require__(14);

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function () {};

	{
	  validateFormat = function (format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error = void 0;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	// Relying on the `invariant()` implementation lets us
	// preserve the format and params in the www builds.

	!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

	var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);
	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	};

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // unintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!

	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
	      var evt = document.createEvent('Event');

	      // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.
	      var didError = true;

	      // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.
	      var windowEvent = window.event;

	      // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688
	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

	      // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.
	      var funcArgs = Array.prototype.slice.call(arguments, 3);
	      function callCallback() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false);

	        // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.
	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }

	        func.apply(context, funcArgs);
	        didError = false;
	      }

	      // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.
	      var error = void 0;
	      // Use this to track whether the error event is ever called.
	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;
	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }
	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {
	              // Ignore.
	            }
	          }
	        }
	      }

	      // Create a fake event type.
	      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

	      // Attach our event handlers
	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false);

	      // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
	        }
	        this.onError(error);
	      }

	      // Remove our event listeners
	      window.removeEventListener('error', handleWindowError);
	    };

	    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	// Used by Fiber to simulate a try-catch.
	var hasError = false;
	var caughtError = null;

	// Used by event system to capture/rethrow the first error.
	var hasRethrowError = false;
	var rethrowError = null;

	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};

	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */
	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}

	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */
	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);
	  if (hasError) {
	    var error = clearCaughtError();
	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}

	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */
	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}

	function hasCaughtError() {
	  return hasError;
	}

	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
	  }
	}

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
	    if (plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
	    plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
	  eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
	  registrationNameModules[registrationName] = pluginModule;
	  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */

	/**
	 * Ordered list of injected plugins.
	 */
	var plugins = [];

	/**
	 * Mapping from event name to dispatch config
	 */
	var eventNameDispatchConfigs = {};

	/**
	 * Mapping from registration name to plugin module
	 */
	var registrationNameModules = {};

	/**
	 * Mapping from registration name to event name
	 */
	var registrationNameDependencies = {};

	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */
	var possibleRegistrationNames = {};
	// Trust the developer to only use possibleRegistrationNames in true

	/**
	 * Injects an ordering of plugins (by plugin name). This allows the ordering
	 * to be decoupled from injection of the actual plugins so that ordering is
	 * always deterministic regardless of packaging, on-the-fly injection, etc.
	 *
	 * @param {array} InjectedEventPluginOrder
	 * @internal
	 * @see {EventPluginHub.injection.injectEventPluginOrder}
	 */
	function injectEventPluginOrder(injectedEventPluginOrder) {
	  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
	  // Clone the ordering so it cannot be dynamically mutated.
	  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	  recomputePluginOrdering();
	}

	/**
	 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	 * in the ordering injected by `injectEventPluginOrder`.
	 *
	 * Plugins can be injected as part of page initialization or on-the-fly.
	 *
	 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	 * @internal
	 * @see {EventPluginHub.injection.injectEventPluginsByName}
	 */
	function injectEventPluginsByName(injectedNamesToPlugins) {
	  var isOrderingDirty = false;
	  for (var pluginName in injectedNamesToPlugins) {
	    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	      continue;
	    }
	    var pluginModule = injectedNamesToPlugins[pluginName];
	    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
	      namesToPlugins[pluginName] = pluginModule;
	      isOrderingDirty = true;
	    }
	  }
	  if (isOrderingDirty) {
	    recomputePluginOrdering();
	  }
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warningWithoutStack = function () {};

	{
	  warningWithoutStack = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (args.length > 8) {
	      // Check before the condition to catch violations early.
	      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
	    }
	    if (condition) {
	      return;
	    }
	    if (typeof console !== 'undefined') {
	      var argsWithFormat = args.map(function (item) {
	        return '' + item;
	      });
	      argsWithFormat.unshift('Warning: ' + format);

	      // We intentionally don't use spread (or .apply) directly because it
	      // breaks IE9: https://github.com/facebook/react/issues/13610
	      Function.prototype.apply.call(console.error, console, argsWithFormat);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	var warningWithoutStack$1 = warningWithoutStack;

	var getFiberCurrentPropsFromNode = null;
	var getInstanceFromNode = null;
	var getNodeFromInstance = null;

	function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
	  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
	  getInstanceFromNode = getInstanceFromNodeImpl;
	  getNodeFromInstance = getNodeFromInstanceImpl;
	  {
	    !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	  }
	}

	var validateEventDispatches = void 0;
	{
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = getNodeFromInstance(inst);
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */


	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */


	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 * @param {function} cb Callback invoked with each element or a collection.
	 * @param {?} [scope] Scope used as `this` in a callback.
	 */
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function (event) {
	  if (event) {
	    executeDispatchesInOrder(event);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e);
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */

	/**
	 * Methods for injecting dependencies.
	 */
	var injection = {
	  /**
	   * @param {array} InjectedEventPluginOrder
	   * @public
	   */
	  injectEventPluginOrder: injectEventPluginOrder,

	  /**
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   */
	  injectEventPluginsByName: injectEventPluginsByName
	};

	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */
	function getListener(inst, registrationName) {
	  var listener = void 0;

	  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	  // live here; needs to be moved to a better place soon
	  var stateNode = inst.stateNode;
	  if (!stateNode) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }
	  var props = getFiberCurrentPropsFromNode(stateNode);
	  if (!props) {
	    // Work in progress.
	    return null;
	  }
	  listener = props[registrationName];
	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }
	  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
	  return listener;
	}

	/**
	 * Allows registered plugins an opportunity to extract events from top-level
	 * native browser events.
	 *
	 * @return {*} An accumulation of synthetic events.
	 * @internal
	 */
	function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var events = null;
	  for (var i = 0; i < plugins.length; i++) {
	    // Not every plugin in the ordering may be loaded at runtime.
	    var possiblePlugin = plugins[i];
	    if (possiblePlugin) {
	      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	      if (extractedEvents) {
	        events = accumulateInto(events, extractedEvents);
	      }
	    }
	  }
	  return events;
	}

	function runEventsInBatch(events) {
	  if (events !== null) {
	    eventQueue = accumulateInto(eventQueue, events);
	  }

	  // Set `eventQueue` to null before processing it so that we can tell if more
	  // events get enqueued while processing.
	  var processingEventQueue = eventQueue;
	  eventQueue = null;

	  if (!processingEventQueue) {
	    return;
	  }

	  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
	  // This would be a good time to rethrow if any of the event handlers threw.
	  rethrowCaughtError();
	}

	function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	  runEventsInBatch(events);
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class
	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;
	var DehydratedSuspenseComponent = 18;

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactInternalInstance$' + randomKey;
	var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  while (!node[internalInstanceKey]) {
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var inst = node[internalInstanceKey];
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber, this will always be the deepest root.
	    return inst;
	  }

	  return null;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode$1(node) {
	  var inst = node[internalInstanceKey];
	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText) {
	      return inst;
	    } else {
	      return null;
	    }
	  }
	  return null;
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance$1(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  }

	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  invariant(false, 'getNodeFromInstance: Invalid argument.');
	}

	function getFiberCurrentPropsFromNode$1(node) {
	  return node[internalEventHandlersKey] || null;
	}

	function updateFiberProps(node, props) {
	  node[internalEventHandlersKey] = props;
	}

	function getParent(inst) {
	  do {
	    inst = inst.return;
	    // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);
	  if (inst) {
	    return inst;
	  }
	  return null;
	}

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = getParent(instA);
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = getParent(instB);
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB || instA === instB.alternate) {
	      return instA;
	    }
	    instA = getParent(instA);
	    instB = getParent(instB);
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */


	/**
	 * Return the parent instance of the passed-in instance.
	 */


	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = getParent(inst);
	  }
	  var i = void 0;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (true) {
	    if (!from) {
	      break;
	    }
	    if (from === common) {
	      break;
	    }
	    var alternate = from.alternate;
	    if (alternate !== null && alternate === common) {
	      break;
	    }
	    pathFrom.push(from);
	    from = getParent(from);
	  }
	  var pathTo = [];
	  while (true) {
	    if (!to) {
	      break;
	    }
	    if (to === common) {
	      break;
	    }
	    var _alternate = to.alternate;
	    if (_alternate !== null && _alternate === common) {
	      break;
	    }
	    pathTo.push(to);
	    to = getParent(to);
	  }
	  for (var i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (var _i = pathTo.length; _i-- > 0;) {
	    fn(pathTo[_i], 'captured', argTo);
	  }
	}

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing even a
	 * single one.
	 */

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  {
	    !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (inst && event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}



	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	// Do not uses the below two methods directly!
	// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
	// (It is the only module that is allowed to access these methods.)

	function unsafeCastStringToDOMTopLevelType(topLevelType) {
	  return topLevelType;
	}

	function unsafeCastDOMTopLevelTypeToString(topLevelType) {
	  return topLevelType;
	}

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	/**
	 * To identify top level events in ReactDOM, we use constants defined by this
	 * module. This is the only module that uses the unsafe* methods to express
	 * that the constants actually correspond to the browser event names. This lets
	 * us save some bundle size by avoiding a top level type -> event name map.
	 * The rest of ReactDOM code should import top level types from this file.
	 */
	var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
	var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
	var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
	var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
	var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
	var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
	var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
	var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
	var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
	var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
	var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
	var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
	var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
	var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
	var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
	var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
	var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
	var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
	var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
	var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
	var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
	var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
	var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
	var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
	var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
	var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
	var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
	var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
	var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
	var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
	var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
	var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
	var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
	var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
	var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
	var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
	var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
	var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
	var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
	var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
	var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
	var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
	var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
	var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
	var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
	var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
	var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
	var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
	var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
	var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
	var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
	var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
	var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
	var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
	var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


	var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
	var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
	var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
	var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
	var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
	var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
	var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
	var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
	var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
	var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
	var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
	var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
	var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
	var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
	var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
	var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
	var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
	var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
	var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
	var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
	var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
	var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
	var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
	var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
	var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');

	// List of events that need to be individually attached to media elements.
	// Note that events in this list will *not* be listened to at the top level
	// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
	var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

	function getRawEventName(topLevelType) {
	  return unsafeCastDOMTopLevelTypeToString(topLevelType);
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */

	var root = null;
	var startText = null;
	var fallbackText = null;

	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}

	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}

	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start = void 0;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end = void 0;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;
	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}

	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }
	  return root.textContent;
	}

	/* eslint valid-typeof: 0 */

	var EVENT_POOL_SIZE = 10;

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: function () {
	    return null;
	  },
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	}

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	    delete this.isDefaultPrevented;
	    delete this.isPropagationStopped;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = functionThatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = functionThatReturnsFalse;
	  }
	  this.isPropagationStopped = functionThatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = functionThatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = functionThatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = functionThatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: functionThatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      }
	    }
	    this.dispatchConfig = null;
	    this._targetInst = null;
	    this.nativeEvent = null;
	    this.isDefaultPrevented = functionThatReturnsFalse;
	    this.isPropagationStopped = functionThatReturnsFalse;
	    this._dispatchListeners = null;
	    this._dispatchInstances = null;
	    {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
	      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 */
	SyntheticEvent.extend = function (Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  function Class() {
	    return Super.apply(this, arguments);
	  }
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.extend = Super.extend;
	  addEventPoolingTo(Class);

	  return Class;
	};

	addEventPoolingTo(SyntheticEvent);

	/**
	 * Helper to nullify syntheticEvent instance properties when destructing
	 *
	 * @param {String} propName
	 * @param {?object} getVal
	 * @return {object} defineProperty object
	 */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}

	function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
	  var EventConstructor = this;
	  if (EventConstructor.eventPool.length) {
	    var instance = EventConstructor.eventPool.pop();
	    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
	    return instance;
	  }
	  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
	}

	function releasePooledEvent(event) {
	  var EventConstructor = this;
	  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
	  event.destructor();
	  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
	    EventConstructor.eventPool.push(event);
	  }
	}

	function addEventPoolingTo(EventConstructor) {
	  EventConstructor.eventPool = [];
	  EventConstructor.getPooled = getPooledEvent;
	  EventConstructor.release = releasePooledEvent;
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var SyntheticCompositionEvent = SyntheticEvent.extend({
	  data: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var SyntheticInputEvent = SyntheticEvent.extend({
	  data: null
	});

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_START:
	      return eventTypes.compositionStart;
	    case TOP_COMPOSITION_END:
	      return eventTypes.compositionEnd;
	    case TOP_COMPOSITION_UPDATE:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_KEY_UP:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case TOP_KEY_DOWN:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case TOP_KEY_PRESS:
	    case TOP_MOUSE_DOWN:
	    case TOP_BLUR:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	}

	// Track the current IME composition status, if any.
	var isComposing = false;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType = void 0;
	  var fallbackData = void 0;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === eventTypes.compositionStart) {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_END:
	      return getDataFromCustomEvent(nativeEvent);
	    case TOP_KEY_PRESS:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case TOP_TEXT_INPUT:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case TOP_PASTE:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case TOP_KEY_PRESS:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }
	      return null;
	    case TOP_COMPOSITION_END:
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars = void 0;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

	    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

	    if (composition === null) {
	      return beforeInput;
	    }

	    if (beforeInput === null) {
	      return composition;
	    }

	    return [composition, beforeInput];
	  }
	};

	// Use to restore controlled state after a change event has fired.

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);
	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }
	  !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
	  restoreImpl(internalInstance.stateNode, internalInstance.type, props);
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}

	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}

	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}

	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }
	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;

	  restoreStateOfTarget(target);
	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	// Used as a way to call batchedUpdates when we don't have a reference to
	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.

	// Defaults
	var _batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};
	var _interactiveUpdatesImpl = function (fn, a, b) {
	  return fn(a, b);
	};
	var _flushInteractiveUpdatesImpl = function () {};

	var isBatching = false;
	function batchedUpdates(fn, bookkeeping) {
	  if (isBatching) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(bookkeeping);
	  }
	  isBatching = true;
	  try {
	    return _batchedUpdatesImpl(fn, bookkeeping);
	  } finally {
	    // Here we wait until all updates have propagated, which is important
	    // when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    // Then we restore state of any controlled component.
	    isBatching = false;
	    var controlledComponentsHavePendingUpdates = needsStateRestore();
	    if (controlledComponentsHavePendingUpdates) {
	      // If a controlled event was fired, we may need to restore the state of
	      // the DOM node back to the controlled value. This is necessary when React
	      // bails out of the update without touching the DOM.
	      _flushInteractiveUpdatesImpl();
	      restoreStateIfNeeded();
	    }
	  }
	}

	function interactiveUpdates(fn, a, b) {
	  return _interactiveUpdatesImpl(fn, a, b);
	}



	function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
	  _batchedUpdatesImpl = batchedUpdatesImpl;
	  _interactiveUpdatesImpl = interactiveUpdatesImpl;
	  _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
	}

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	/**
	 * HTML nodeType values that represent the type of the node
	 */

	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';
	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

	  var currentValue = '' + node[valueField];

	  // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)
	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }
	  var get = descriptor.get,
	      set = descriptor.set;

	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  });
	  // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768
	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });

	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  }

	  // TODO: Once it's just Fiber we can move this to node._wrapperState
	  node._valueTracker = trackValueOnNode(node);
	}

	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node);
	  // if there is no tracker at this point it's unlikely
	  // that trying again will succeed
	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);
	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }
	  return false;
	}

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	// Prevent newer renderers from RTE when used with older react package versions.
	// Current owner and dispatcher used to share the same ref,
	// but PR #14548 split them out to better support the react-debug-tools package.
	if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
	  ReactSharedInternals.ReactCurrentDispatcher = {
	    current: null
	  };
	}

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

	var describeComponentFrame = function (name, source, ownerName) {
	  var sourceInfo = '';
	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');
	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);
	        if (match) {
	          var pathBeforeSlash = match[1];
	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }
	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }
	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	};

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';

	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }
	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }
	  return null;
	}

	var Pending = 0;
	var Resolved = 1;
	var Rejected = 2;

	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }
	  {
	    if (typeof type.tag === 'number') {
	      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }
	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }
	  if (typeof type === 'string') {
	    return type;
	  }
	  switch (type) {
	    case REACT_CONCURRENT_MODE_TYPE:
	      return 'ConcurrentMode';
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';
	    case REACT_PORTAL_TYPE:
	      return 'Portal';
	    case REACT_PROFILER_TYPE:
	      return 'Profiler';
	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';
	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';
	  }
	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';
	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';
	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');
	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);
	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);
	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }
	        }
	    }
	  }
	  return null;
	}

	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

	function describeFiber(fiber) {
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostPortal:
	    case HostText:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	      return '';
	    default:
	      var owner = fiber._debugOwner;
	      var source = fiber._debugSource;
	      var name = getComponentName(fiber.type);
	      var ownerName = null;
	      if (owner) {
	        ownerName = getComponentName(owner.type);
	      }
	      return describeComponentFrame(name, source, ownerName);
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  var info = '';
	  var node = workInProgress;
	  do {
	    info += describeFiber(node);
	    node = node.return;
	  } while (node);
	  return info;
	}

	var current = null;
	var phase = null;

	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }
	    var owner = current._debugOwner;
	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentName(owner.type);
	    }
	  }
	  return null;
	}

	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    }
	    // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.
	    return getStackByFiberInDevAndProd(current);
	  }
	  return '';
	}

	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = null;
	    current = null;
	    phase = null;
	  }
	}

	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
	    current = fiber;
	    phase = null;
	  }
	}

	function setCurrentPhase(lifeCyclePhase) {
	  {
	    phase = lifeCyclePhase;
	  }
	}

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = warningWithoutStack$1;

	{
	  warning = function (condition, format) {
	    if (condition) {
	      return;
	    }
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();
	    // eslint-disable-next-line react-internal/warning-and-invariant-args

	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
	  };
	}

	var warning$1 = warning;

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0;

	// A simple string attribute.
	// Attributes that aren't in the whitelist are presumed to have this type.
	var STRING = 1;

	// A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.
	var BOOLEANISH_STRING = 2;

	// A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	var BOOLEAN = 3;

	// An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.
	var OVERLOADED_BOOLEAN = 4;

	// An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.
	var NUMERIC = 5;

	// An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.
	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';


	var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }
	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  {
	    warning$1(false, 'Invalid attribute name: `%s`', attributeName);
	  }
	  return false;
	}

	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }
	  if (isCustomComponentTag) {
	    return false;
	  }
	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }
	  return false;
	}

	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }
	  switch (typeof value) {
	    case 'function':
	    // $FlowIssue symbol is perfectly valid here
	    case 'symbol':
	      // eslint-disable-line
	      return true;
	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }
	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }
	    default:
	      return false;
	  }
	}

	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }
	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }
	  if (isCustomComponentTag) {
	    return false;
	  }
	  if (propertyInfo !== null) {
	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;
	      case OVERLOADED_BOOLEAN:
	        return value === false;
	      case NUMERIC:
	        return isNaN(value);
	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }
	  return false;
	}

	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	}

	// When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.
	var properties = {};

	// These props are reserved by React. They shouldn't be written to the DOM.
	['children', 'dangerouslySetInnerHTML',
	// TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.
	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];

	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null);
	} // attributeNamespace
	);

	// These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.
	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML boolean attributes.
	['allowFullScreen', 'async',
	// Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
	// Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null);
	} // attributeNamespace
	);

	// These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.
	['checked',
	// Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.
	['capture', 'download'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML attributes that must be positive numbers.
	['cols', 'rows', 'size', 'span'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null);
	} // attributeNamespace
	);

	// These are HTML attributes that must be numbers.
	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null);
	} // attributeNamespace
	);

	var CAMELIZE = /[\-\:]([a-z])/g;
	var capitalize = function (token) {
	  return token[1].toUpperCase();
	};

	// This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML whitelist.
	// Some of these attributes can be hard to find. This list was created by
	// scrapping the MDN documentation.
	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null);
	} // attributeNamespace
	);

	// String SVG attributes with the xlink namespace.
	['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink');
	});

	// String SVG attributes with the xml namespace.
	['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace');
	});

	// These attribute exists both in HTML and SVG.
	// The attribute name is case-sensitive in SVG so we can't just use
	// the React name like we do for attributes that exist only in HTML.
	['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null);
	} // attributeNamespace
	);

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;

	      return node[propertyName];
	    } else {
	      var attributeName = propertyInfo.attributeName;

	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);
	          if (value === '') {
	            return true;
	          }
	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          }
	          if (value === '' + expected) {
	            return expected;
	          }
	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }
	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        }
	        // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.
	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue;
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}

	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */
	function getValueForAttribute(node, name, expected) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }
	    var value = node.getAttribute(name);
	    if (value === '' + expected) {
	      return expected;
	    }
	    return value;
	  }
	}

	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */
	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);
	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }
	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  }
	  // If the prop isn't in the special list, treat it as a simple attribute.
	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;
	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        node.setAttribute(_attributeName, '' + value);
	      }
	    }
	    return;
	  }
	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;

	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }
	    return;
	  }
	  // The rest are treated as attributes with special cases.
	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;

	    var attributeValue = void 0;
	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      attributeValue = '' + value;
	    }
	    if (attributeNamespace) {
	      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	    } else {
	      node.setAttribute(attributeName, attributeValue);
	    }
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  return '' + value;
	}

	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'object':
	    case 'string':
	    case 'undefined':
	      return value;
	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}

	var ReactDebugCurrentFrame$1 = null;

	var ReactControlledValuePropTypes = {
	  checkPropTypes: null
	};

	{
	  ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	  var hasReadOnlyValue = {
	    button: true,
	    checkbox: true,
	    image: true,
	    hidden: true,
	    radio: true,
	    reset: true,
	    submit: true
	  };

	  var propTypes = {
	    value: function (props, propName, componentName) {
	      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
	        return null;
	      }
	      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    },
	    checked: function (props, propName, componentName) {
	      if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
	        return null;
	      }
	      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  };

	  /**
	   * Provide a linked `value` attribute for controlled forms. You should not use
	   * this outside of the ReactDOM controlled form components.
	   */
	  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
	    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
	  };
	}

	var enableUserTimingAPI = true;

	// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
	var debugRenderPhaseSideEffects = false;

	// In some cases, StrictMode should also double-render lifecycles.
	// This can be confusing for tests though,
	// And it can be bad for performance in production.
	// This feature flag can be used to control the behavior:
	var debugRenderPhaseSideEffectsForStrictMode = true;

	// To preserve the "Pause on caught exceptions" behavior of the debugger, we
	// replay the begin phase of a failed component inside invokeGuardedCallback.
	var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;

	// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
	var warnAboutDeprecatedLifecycles = false;

	// Gather advanced timing metrics for Profiler subtrees.
	var enableProfilerTimer = true;

	// Trace which interactions trigger each commit.
	var enableSchedulerTracing = true;

	// Only used in www builds.
	var enableSuspenseServerRenderer = false; // TODO: true? Here it might just be false.

	// Only used in www builds.


	// Only used in www builds.


	// React Fire: prevent the value and checked attributes from syncing
	// with their related DOM properties
	var disableInputAttributeSyncing = false;

	// These APIs will no longer be "unstable" in the upcoming 16.7 release,
	// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.
	var enableStableConcurrentModeAPIs = false;

	var warnAboutShorthandPropertyCollision = false;

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */

	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;

	  var hostProps = _assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });

	  return hostProps;
	}

	function initWrapperState(element, props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
	      didWarnCheckedDefaultChecked = true;
	    }
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;

	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}

	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;
	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}

	function updateWrapper(element, props) {
	  var node = element;
	  {
	    var _controlled = isControlled(props);

	    if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
	      warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
	      didWarnUncontrolledToControlled = true;
	    }
	    if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
	      warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);

	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' ||
	      // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  if (disableInputAttributeSyncing) {
	    // When not syncing the value attribute, React only assigns a new value
	    // whenever the defaultValue React prop has changed. When not present,
	    // React does nothing
	    if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  } else {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  if (disableInputAttributeSyncing) {
	    // When not syncing the checked attribute, the attribute is directly
	    // controllable from the defaultValue React property. It needs to be
	    // updated as new props come in.
	    if (props.defaultChecked == null) {
	      node.removeAttribute('checked');
	    } else {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  } else {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}

	function postMountWrapper(element, props, isHydrating) {
	  var node = element;

	  // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.
	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset';

	    // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872
	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var _initialValue = toString(node._wrapperState.initialValue);

	    // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.
	    if (!isHydrating) {
	      if (disableInputAttributeSyncing) {
	        var value = getToStringValue(props.value);

	        // When not syncing the value attribute, the value property points
	        // directly to the React prop. Only assign it if it exists.
	        if (value != null) {
	          // Always assign on buttons so that it is possible to assign an
	          // empty string to clear button text.
	          //
	          // Otherwise, do not re-assign the value property if is empty. This
	          // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
	          // prematurely marking required inputs as invalid. Equality is compared
	          // to the current value in case the browser provided value is not an
	          // empty string.
	          if (isButton || value !== node.value) {
	            node.value = toString(value);
	          }
	        }
	      } else {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (_initialValue !== node.value) {
	          node.value = _initialValue;
	        }
	      }
	    }

	    if (disableInputAttributeSyncing) {
	      // When not syncing the value attribute, assign the value attribute
	      // directly from the defaultValue React property (when present)
	      var defaultValue = getToStringValue(props.defaultValue);
	      if (defaultValue != null) {
	        node.defaultValue = toString(defaultValue);
	      }
	    } else {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = _initialValue;
	    }
	  }

	  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.
	  var name = node.name;
	  if (name !== '') {
	    node.name = '';
	  }

	  if (disableInputAttributeSyncing) {
	    // When not syncing the checked attribute, the checked property
	    // never gets assigned. It must be manually set. We don't want
	    // to do this when hydrating so that existing user input isn't
	    // modified
	    if (!isHydrating) {
	      updateChecked(element, props);
	    }

	    // Only assign the checked attribute if it is defined. This saves
	    // a DOM write when controlling the checked attribute isn't needed
	    // (text inputs, submit/reset)
	    if (props.hasOwnProperty('defaultChecked')) {
	      node.defaultChecked = !node.defaultChecked;
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  } else {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}

	function restoreControlledState(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
	      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

	      // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set
	      updateValueIfChanged(otherNode);

	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      updateWrapper(otherNode, otherProps);
	    }
	  }
	}

	// In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253
	function setDefaultValue(node, type, value) {
	  if (
	  // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || node.ownerDocument.activeElement !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var eventTypes$1 = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
	  event.type = 'change';
	  // Flag this event loop as needing state restore.
	  enqueueStateRestore(target);
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  runEventsInBatch(event);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance$1(targetInst);
	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CHANGE) {
	    return targetInst;
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}

	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}

	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === TOP_FOCUS) {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === TOP_BLUR) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
	  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CLICK) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  if (!disableInputAttributeSyncing) {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	  eventTypes: eventTypes$1,

	  _isInputEventSupported: isInputEventSupported,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    var getTargetInstFunc = void 0,
	        handleEventFunc = void 0;
	    if (shouldUseChangeEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForChangeEvent;
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }

	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === TOP_BLUR) {
	      handleControlledInputBlur(targetNode);
	    }
	  }
	};

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	var SyntheticUIEvent = SyntheticEvent.extend({
	  view: null,
	  detail: null
	});

	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	};

	// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	var previousScreenX = 0;
	var previousScreenY = 0;
	// Use flags to signal movementX/Y has already been set
	var isMovementXSet = false;
	var isMovementYSet = false;

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticMouseEvent = SyntheticUIEvent.extend({
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  pageX: null,
	  pageY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: null,
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    var screenX = previousScreenX;
	    previousScreenX = event.screenX;

	    if (!isMovementXSet) {
	      isMovementXSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenX - screenX : 0;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    }

	    var screenY = previousScreenY;
	    previousScreenY = event.screenY;

	    if (!isMovementYSet) {
	      isMovementYSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenY - screenY : 0;
	  }
	});

	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */
	var SyntheticPointerEvent = SyntheticMouseEvent.extend({
	  pointerId: null,
	  width: null,
	  height: null,
	  pressure: null,
	  tangentialPressure: null,
	  tiltX: null,
	  tiltY: null,
	  twist: null,
	  pointerType: null,
	  isPrimary: null
	});

	var eventTypes$2 = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  pointerEnter: {
	    registrationName: 'onPointerEnter',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  },
	  pointerLeave: {
	    registrationName: 'onPointerLeave',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  }
	};

	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes$2,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
	    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

	    if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }

	    if (!isOutEvent && !isOverEvent) {
	      // Must not be a mouse or pointer in or out - ignoring.
	      return null;
	    }

	    var win = void 0;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from = void 0;
	    var to = void 0;
	    if (isOutEvent) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var eventInterface = void 0,
	        leaveEventType = void 0,
	        enterEventType = void 0,
	        eventTypePrefix = void 0;

	    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
	      eventInterface = SyntheticMouseEvent;
	      leaveEventType = eventTypes$2.mouseLeave;
	      enterEventType = eventTypes$2.mouseEnter;
	      eventTypePrefix = 'mouse';
	    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
	      eventInterface = SyntheticPointerEvent;
	      leaveEventType = eventTypes$2.pointerLeave;
	      enterEventType = eventTypes$2.pointerEnter;
	      eventTypePrefix = 'pointer';
	    }

	    var fromNode = from == null ? win : getNodeFromInstance$1(from);
	    var toNode = to == null ? win : getNodeFromInstance$1(to);

	    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
	    leave.type = eventTypePrefix + 'leave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
	    enter.type = eventTypePrefix + 'enter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */

	/**
	 * This API should be called `delete` but we'd have to make sure to always
	 * transform these to strings for IE support. When this transform is fully
	 * supported we can rename it.
	 */


	function get(key) {
	  return key._reactInternalFiber;
	}

	function has(key) {
	  return key._reactInternalFiber !== undefined;
	}

	function set(key, value) {
	  key._reactInternalFiber = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoEffect = /*              */0;
	var PerformedWork = /*         */1;

	// You can change the rest (and add more).
	var Placement = /*             */2;
	var Update = /*                */4;
	var PlacementAndUpdate = /*    */6;
	var Deletion = /*              */8;
	var ContentReset = /*          */16;
	var Callback = /*              */32;
	var DidCapture = /*            */64;
	var Ref = /*                   */128;
	var Snapshot = /*              */256;
	var Passive = /*               */512;

	// Passive & Update & Callback & Ref & Snapshot
	var LifecycleEffectMask = /*   */932;

	// Union of all host effects
	var HostEffectMask = /*        */1023;

	var Incomplete = /*            */1024;
	var ShouldCapture = /*         */2048;

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;

	var MOUNTING = 1;
	var MOUNTED = 2;
	var UNMOUNTED = 3;

	function isFiberMountedImpl(fiber) {
	  var node = fiber;
	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    if ((node.effectTag & Placement) !== NoEffect) {
	      return MOUNTING;
	    }
	    while (node.return) {
	      node = node.return;
	      if ((node.effectTag & Placement) !== NoEffect) {
	        return MOUNTING;
	      }
	    }
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }
	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return MOUNTED;
	  }
	  // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.
	  return UNMOUNTED;
	}

	function isFiberMounted(fiber) {
	  return isFiberMountedImpl(fiber) === MOUNTED;
	}

	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner$1.current;
	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;
	      !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);
	  if (!fiber) {
	    return false;
	  }
	  return isFiberMountedImpl(fiber) === MOUNTED;
	}

	function assertIsMounted(fiber) {
	  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;
	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var state = isFiberMountedImpl(fiber);
	    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	    if (state === MOUNTING) {
	      return null;
	    }
	    return fiber;
	  }
	  // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.
	  var a = fiber;
	  var b = alternate;
	  while (true) {
	    var parentA = a.return;
	    var parentB = parentA ? parentA.alternate : null;
	    if (!parentA || !parentB) {
	      // We're at the root.
	      break;
	    }

	    // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.
	    if (parentA.child === parentB.child) {
	      var child = parentA.child;
	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }
	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }
	        child = child.sibling;
	      }
	      // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.
	      invariant(false, 'Unable to find node on an unmounted component.');
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;
	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }
	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }
	        _child = _child.sibling;
	      }
	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;
	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }
	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }
	          _child = _child.sibling;
	        }
	        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
	      }
	    }

	    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  }
	  // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.
	  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  }
	  // Otherwise B has to be current branch.
	  return alternate;
	}

	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  if (!currentParent) {
	    return null;
	  }

	  // Next we'll drill down this component to find the first HostComponent/Text.
	  var node = currentParent;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === currentParent) {
	      return null;
	    }
	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	  // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  if (!currentParent) {
	    return null;
	  }

	  // Next we'll drill down this component to find the first HostComponent/Text.
	  var node = currentParent;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child && node.tag !== HostPortal) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === currentParent) {
	      return null;
	    }
	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	  // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	function addEventBubbleListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, false);
	}

	function addEventCaptureListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, true);
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var SyntheticAnimationEvent = SyntheticEvent.extend({
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var SyntheticClipboardEvent = SyntheticEvent.extend({
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticFocusEvent = SyntheticUIEvent.extend({
	  relatedTarget: null
	});

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode = void 0;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.
	  if (charCode === 10) {
	    charCode = 13;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	});

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticDragEvent = SyntheticMouseEvent.extend({
	  dataTransfer: null
	});

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var SyntheticTouchEvent = SyntheticUIEvent.extend({
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var SyntheticTransitionEvent = SyntheticEvent.extend({
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var SyntheticWheelEvent = SyntheticMouseEvent.extend({
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },

	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	});

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: [TOP_ABORT],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = new Map([
	 *   [TOP_ABORT, { sameConfig }],
	 * ]);
	 */

	var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
	var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];

	var eventTypes$4 = {};
	var topLevelEventsToDispatchConfig = {};

	function addEventTypeNameToConfig(_ref, isInteractive) {
	  var topEvent = _ref[0],
	      event = _ref[1];

	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent],
	    isInteractive: isInteractive
	  };
	  eventTypes$4[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	}

	interactiveEventTypeNames.forEach(function (eventTuple) {
	  addEventTypeNameToConfig(eventTuple, true);
	});
	nonInteractiveEventTypeNames.forEach(function (eventTuple) {
	  addEventTypeNameToConfig(eventTuple, false);
	});

	// Only used in DEV for exhaustiveness validation.
	var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];

	var SimpleEventPlugin = {
	  eventTypes: eventTypes$4,

	  isInteractiveTopLevelEventType: function (topLevelType) {
	    var config = topLevelEventsToDispatchConfig[topLevelType];
	    return config !== undefined && config.isInteractive === true;
	  },


	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor = void 0;
	    switch (topLevelType) {
	      case TOP_KEY_PRESS:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case TOP_BLUR:
	      case TOP_FOCUS:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case TOP_CLICK:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case TOP_AUX_CLICK:
	      case TOP_DOUBLE_CLICK:
	      case TOP_MOUSE_DOWN:
	      case TOP_MOUSE_MOVE:
	      case TOP_MOUSE_UP:
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case TOP_MOUSE_OUT:
	      case TOP_MOUSE_OVER:
	      case TOP_CONTEXT_MENU:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case TOP_DRAG:
	      case TOP_DRAG_END:
	      case TOP_DRAG_ENTER:
	      case TOP_DRAG_EXIT:
	      case TOP_DRAG_LEAVE:
	      case TOP_DRAG_OVER:
	      case TOP_DRAG_START:
	      case TOP_DROP:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case TOP_TOUCH_CANCEL:
	      case TOP_TOUCH_END:
	      case TOP_TOUCH_MOVE:
	      case TOP_TOUCH_START:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case TOP_ANIMATION_END:
	      case TOP_ANIMATION_ITERATION:
	      case TOP_ANIMATION_START:
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case TOP_TRANSITION_END:
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case TOP_SCROLL:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case TOP_WHEEL:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case TOP_COPY:
	      case TOP_CUT:
	      case TOP_PASTE:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	      case TOP_GOT_POINTER_CAPTURE:
	      case TOP_LOST_POINTER_CAPTURE:
	      case TOP_POINTER_CANCEL:
	      case TOP_POINTER_DOWN:
	      case TOP_POINTER_MOVE:
	      case TOP_POINTER_OUT:
	      case TOP_POINTER_OVER:
	      case TOP_POINTER_UP:
	        EventConstructor = SyntheticPointerEvent;
	        break;
	      default:
	        {
	          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
	            warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
	          }
	        }
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	    }
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};

	var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;


	var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
	var callbackBookkeepingPool = [];

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findRootContainerNode(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst.return) {
	    inst = inst.return;
	  }
	  if (inst.tag !== HostRoot) {
	    // This can happen if we're in a detached tree.
	    return null;
	  }
	  return inst.stateNode.containerInfo;
	}

	// Used to store ancestor hierarchy in top level callback
	function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
	  if (callbackBookkeepingPool.length) {
	    var instance = callbackBookkeepingPool.pop();
	    instance.topLevelType = topLevelType;
	    instance.nativeEvent = nativeEvent;
	    instance.targetInst = targetInst;
	    return instance;
	  }
	  return {
	    topLevelType: topLevelType,
	    nativeEvent: nativeEvent,
	    targetInst: targetInst,
	    ancestors: []
	  };
	}

	function releaseTopLevelCallbackBookKeeping(instance) {
	  instance.topLevelType = null;
	  instance.nativeEvent = null;
	  instance.targetInst = null;
	  instance.ancestors.length = 0;
	  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
	    callbackBookkeepingPool.push(instance);
	  }
	}

	function handleTopLevel(bookKeeping) {
	  var targetInst = bookKeeping.targetInst;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    if (!ancestor) {
	      bookKeeping.ancestors.push(ancestor);
	      break;
	    }
	    var root = findRootContainerNode(ancestor);
	    if (!root) {
	      break;
	    }
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = getClosestInstanceFromNode(root);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// TODO: can we stop exporting these?
	var _enabled = true;

	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}

	function isEnabled() {
	  return _enabled;
	}

	/**
	 * Traps top-level events by using event bubbling.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} element Element on which to attach listener.
	 * @return {?object} An object with a remove function which will forcefully
	 *                  remove the listener.
	 * @internal
	 */
	function trapBubbledEvent(topLevelType, element) {
	  if (!element) {
	    return null;
	  }
	  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

	  addEventBubbleListener(element, getRawEventName(topLevelType),
	  // Check if interactive and wrap in interactiveUpdates
	  dispatch.bind(null, topLevelType));
	}

	/**
	 * Traps a top-level event by using event capturing.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} element Element on which to attach listener.
	 * @return {?object} An object with a remove function which will forcefully
	 *                  remove the listener.
	 * @internal
	 */
	function trapCapturedEvent(topLevelType, element) {
	  if (!element) {
	    return null;
	  }
	  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

	  addEventCaptureListener(element, getRawEventName(topLevelType),
	  // Check if interactive and wrap in interactiveUpdates
	  dispatch.bind(null, topLevelType));
	}

	function dispatchInteractiveEvent(topLevelType, nativeEvent) {
	  interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
	}

	function dispatchEvent(topLevelType, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
	  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
	    // If we get an event (ex: img onload) before committing that
	    // component's mount, ignore it for now (that is, treat it as if it was an
	    // event on a non-React tree). We might also consider queueing events and
	    // dispatching them after the mount.
	    targetInst = null;
	  }

	  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

	  try {
	    // Event queue being processed in the same cycle allows
	    // `preventDefault`.
	    batchedUpdates(handleTopLevel, bookKeeping);
	  } finally {
	    releaseTopLevelCallbackBookKeeping(bookKeeping);
	  }
	}

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactDOMEventListener, which is injected and can therefore support
	 *    pluggable event sources. This is the only work that occurs in the main
	 *    thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var reactTopListenersCounter = 0;

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * We listen for bubbled touch events on the document object.
	 *
	 * Firefox v8.01 (and possibly others) exhibited strange behavior when
	 * mounting `onmousemove` events at some node that was not the document
	 * element. The symptoms were that if your mouse is not moving over something
	 * contained within that mount point (for example on the background) the
	 * top-level listeners for `onmousemove` won't be called. However, if you
	 * register the `mousemove` on the document object, then it will of course
	 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	 * top-level listeners to the document object only, at least for these
	 * movement types of events and possibly all events.
	 *
	 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	 *
	 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	 * they bubble to document.
	 *
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @param {object} mountAt Container where to mount the listener
	 */
	function listenTo(registrationName, mountAt) {
	  var isListening = getListeningForDocument(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	      switch (dependency) {
	        case TOP_SCROLL:
	          trapCapturedEvent(TOP_SCROLL, mountAt);
	          break;
	        case TOP_FOCUS:
	        case TOP_BLUR:
	          trapCapturedEvent(TOP_FOCUS, mountAt);
	          trapCapturedEvent(TOP_BLUR, mountAt);
	          // We set the flag for a single dependency later in this function,
	          // but this ensures we mark both as attached rather than just one.
	          isListening[TOP_BLUR] = true;
	          isListening[TOP_FOCUS] = true;
	          break;
	        case TOP_CANCEL:
	        case TOP_CLOSE:
	          if (isEventSupported(getRawEventName(dependency))) {
	            trapCapturedEvent(dependency, mountAt);
	          }
	          break;
	        case TOP_INVALID:
	        case TOP_SUBMIT:
	        case TOP_RESET:
	          // We listen to them on the target DOM elements.
	          // Some of them bubble so we don't want them to fire twice.
	          break;
	        default:
	          // By default, listen on the top level to all non-media events.
	          // Media events don't bubble so adding the listener wouldn't do anything.
	          var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
	          if (!isMediaEvent) {
	            trapBubbledEvent(dependency, mountAt);
	          }
	          break;
	      }
	      isListening[dependency] = true;
	    }
	  }
	}

	function isListeningToAllDependencies(registrationName, mountAt) {
	  var isListening = getListeningForDocument(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];
	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	      return false;
	    }
	  }
	  return true;
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */
	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;

	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset;

	  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}

	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */
	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }
	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      }
	      // Moving from `node` to its first child `next`.
	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }
	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }
	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }
	      if ((next = node.nextSibling) !== null) {
	        break;
	      }
	      node = parentNode;
	      parentNode = node.parentNode;
	    }

	    // Moving from `node` to its next sibling `next`.
	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window;

	  // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)
	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }
	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();
	  while (element instanceof win.HTMLIFrameElement) {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute
	    try {
	      win = element.contentDocument.defaultView;
	    } catch (e) {
	      return element;
	    }
	    element = getActiveElement(win.document);
	  }
	  return element;
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */
	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}

	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
	  };
	}

	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */
	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;
	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    }

	    // Focusing a node can change the scroll position, which is undesirable
	    var ancestors = [];
	    var ancestor = priorFocusedElem;
	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}

	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */
	function getSelection$1(input) {
	  var selection = void 0;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || { start: 0, end: 0 };
	}

	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */
	function setSelection(input, offsets) {
	  var start = offsets.start,
	      end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes$3 = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
	  }
	};

	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}

	/**
	 * Get document associated with the event target.
	 *
	 * @param {object} nativeEventTarget
	 * @return {Document}
	 */
	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement$1);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement$1;

	    accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	  eventTypes: eventTypes$3,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var doc = getEventTargetDocument(nativeEventTarget);
	    // Track whether all listeners exists for this plugin. If none exist, we do
	    // not extract events. See #3639.
	    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
	      return null;
	    }

	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case TOP_FOCUS:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement$1 = targetNode;
	          activeElementInst$1 = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case TOP_BLUR:
	        activeElement$1 = null;
	        activeElementInst$1 = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case TOP_MOUSE_DOWN:
	        mouseDown = true;
	        break;
	      case TOP_CONTEXT_MENU:
	      case TOP_MOUSE_UP:
	      case TOP_DRAG_END:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case TOP_SELECTION_CHANGE:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  }
	};

	/**
	 * Inject modules for resolving DOM hierarchy and plugin ordering.
	 */
	injection.injectEventPluginOrder(DOMEventPluginOrder);
	setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);

	/**
	 * Some important event plugins included by default (without having to require
	 * them).
	 */
	injection.injectEventPluginsByName({
	  SimpleEventPlugin: SimpleEventPlugin,
	  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	  ChangeEventPlugin: ChangeEventPlugin,
	  SelectEventPlugin: SelectEventPlugin,
	  BeforeInputEventPlugin: BeforeInputEventPlugin
	});

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children. We'll warn if they are invalid
	  // during validateProps() which runs for hydration too.
	  // Note that this would throw on non-element objects.
	  // Elements are stringified (which is normally irrelevant
	  // but matters for <fbt>).
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    content += child;
	    // Note: we don't warn about invalid children here.
	    // Instead, this is done separately below so that
	    // it happens during the hydration codepath too.
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */

	function validateProps(element, props) {
	  {
	    // This mirrors the codepath above, but runs for hydration too.
	    // Warn about invalid children here so that client and hydration are consistent.
	    // TODO: this seems like it could cause a DEV-only throw for hydration
	    // if children contains a non-element object. We should try to avoid that.
	    if (typeof props.children === 'object' && props.children !== null) {
	      React.Children.forEach(props.children, function (child) {
	        if (child == null) {
	          return;
	        }
	        if (typeof child === 'string' || typeof child === 'number') {
	          return;
	        }
	        if (typeof child.type !== 'string') {
	          return;
	        }
	        if (!didWarnInvalidChild) {
	          didWarnInvalidChild = true;
	          warning$1(false, 'Only strings and numbers are supported as <option> children.');
	        }
	      });
	    }

	    // TODO: Remove support for `selected` in <option>.
	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}

	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}

	function getHostProps$1(element, props) {
	  var hostProps = _assign({ children: undefined }, props);
	  var content = flattenChildren(props.children);

	  if (content) {
	    hostProps.children = content;
	  }

	  return hostProps;
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnValueDefaultValue$1 = void 0;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();
	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 */
	function checkSelectPropTypes(props) {
	  ReactControlledValuePropTypes.checkPropTypes('select', props);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	    } else if (!props.multiple && isArray) {
	      warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};
	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }
	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }
	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));
	    var defaultSelected = null;
	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;
	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }
	        return;
	      }
	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }
	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */

	function getHostProps$2(element, props) {
	  return _assign({}, props, {
	    value: undefined
	  });
	}

	function initWrapperState$1(element, props) {
	  var node = element;
	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}

	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;
	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}

	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;

	  var value = props.value;
	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}

	function restoreControlledState$2(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */

	function getHostProps$3(element, props) {
	  var node = element;
	  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

	  // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.
	  var hostProps = _assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}

	function initWrapperState$2(element, props) {
	  var node = element;
	  {
	    ReactControlledValuePropTypes.checkPropTypes('textarea', props);
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value;

	  // Only bother fetching default value if we're going to use it
	  if (initialValue == null) {
	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      {
	        warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }
	      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
	        children = children[0];
	      }

	      defaultValue = children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}

	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);
	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value);
	    // To avoid side effects (such as losing text selection), only set value if changed
	    if (newValue !== node.value) {
	      node.value = newValue;
	    }
	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }
	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}

	function postMountWrapper$3(element, props) {
	  var node = element;
	  // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.
	  var textContent = node.textContent;

	  // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	  if (textContent === node._wrapperState.initialValue) {
	    node.value = textContent;
	  }
	}

	function restoreControlledState$3(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

	var Namespaces = {
	  html: HTML_NAMESPACE$1,
	  mathml: MATH_NAMESPACE,
	  svg: SVG_NAMESPACE
	};

	// Assumes there is no parent namespace.
	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;
	    case 'math':
	      return MATH_NAMESPACE;
	    default:
	      return HTML_NAMESPACE$1;
	  }
	}

	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }
	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE$1;
	  }
	  // By default, pass namespace below.
	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer = void 0;

	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node

	  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (node.firstChild) {
	      node.removeChild(node.firstChild);
	    }
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	// List derived from Gecko source code:
	// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
	var shorthandToLonghand = {
	  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
	  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
	  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
	  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
	  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
	  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
	  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
	  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
	  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
	  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
	  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
	  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
	  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
	  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
	  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
	  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
	  columns: ['columnCount', 'columnWidth'],
	  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
	  flexFlow: ['flexDirection', 'flexWrap'],
	  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
	  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
	  gap: ['columnGap', 'rowGap'],
	  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
	  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
	  gridColumnGap: ['columnGap'],
	  gridGap: ['columnGap', 'rowGap'],
	  gridRow: ['gridRowEnd', 'gridRowStart'],
	  gridRowGap: ['rowGap'],
	  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
	  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
	  marker: ['markerEnd', 'markerMid', 'markerStart'],
	  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
	  maskPosition: ['maskPositionX', 'maskPositionY'],
	  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
	  overflow: ['overflowX', 'overflowY'],
	  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
	  placeContent: ['alignContent', 'justifyContent'],
	  placeItems: ['alignItems', 'justifyItems'],
	  placeSelf: ['alignSelf', 'justifySelf'],
	  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
	  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
	  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
	  wordWrap: ['overflowWrap']
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */
	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    warning$1(false, 'Unsupported style property %s. Did you mean %s?', name,
	    // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;
	    warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */
	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + hyphenateStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

	        delimiter = ';';
	      }
	    }
	    return serialized || null;
	  }
	}

	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */
	function setValueForStyles(node, styles) {
	  var style = node.style;
	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }
	    var isCustomProperty = styleName.indexOf('--') === 0;
	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }
	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }
	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	function isValueEmpty(value) {
	  return value == null || typeof value === 'boolean' || value === '';
	}

	/**
	 * Given {color: 'red', overflow: 'hidden'} returns {
	 *   color: 'color',
	 *   overflowX: 'overflow',
	 *   overflowY: 'overflow',
	 * }. This can be read as "the overflowY property was set by the overflow
	 * shorthand". That is, the values are the property that each was derived from.
	 */
	function expandShorthandMap(styles) {
	  var expanded = {};
	  for (var key in styles) {
	    var longhands = shorthandToLonghand[key] || [key];
	    for (var i = 0; i < longhands.length; i++) {
	      expanded[longhands[i]] = key;
	    }
	  }
	  return expanded;
	}

	/**
	 * When mixing shorthand and longhand property names, we warn during updates if
	 * we expect an incorrect result to occur. In particular, we warn for:
	 *
	 * Updating a shorthand property (longhand gets overwritten):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
	 *   becomes .style.font = 'baz'
	 * Removing a shorthand property (longhand gets lost too):
	 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
	 *   becomes .style.font = ''
	 * Removing a longhand property (should revert to shorthand; doesn't):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
	 *   becomes .style.fontVariant = ''
	 */
	function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
	  if (!warnAboutShorthandPropertyCollision) {
	    return;
	  }

	  if (!nextStyles) {
	    return;
	  }

	  var expandedUpdates = expandShorthandMap(styleUpdates);
	  var expandedStyles = expandShorthandMap(nextStyles);
	  var warnedAbout = {};
	  for (var key in expandedUpdates) {
	    var originalKey = expandedUpdates[key];
	    var correctOriginalKey = expandedStyles[key];
	    if (correctOriginalKey && originalKey !== correctOriginalKey) {
	      var warningKey = originalKey + ',' + correctOriginalKey;
	      if (warnedAbout[warningKey]) {
	        continue;
	      }
	      warnedAbout[warningKey] = true;
	      warning$1(false, '%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	// TODO: We can remove this if we add invariantWithStack()
	// or add stack by default to invariants where possible.
	var HTML$1 = '__html';

	var ReactDebugCurrentFrame$2 = null;
	{
	  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
	}

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
	  }
	  {
	    !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }
	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this whitelist too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;
	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG whitelist, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',

	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0, // state
	  'aria-details': 0,
	  'aria-disabled': 0, // state
	  'aria-hidden': 0, // state
	  'aria-invalid': 0, // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

	function validateProperty(tagName, name) {
	  if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIACamel.test(name)) {
	    var ariaName = 'aria-' + name.slice(4).toLowerCase();
	    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (correctName == null) {
	      warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
	      warnedProperties[name] = true;
	      return true;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== correctName) {
	      warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  var invalidProps = [];

	  for (var key in props) {
	    var isValid = validateProperty(type, key);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	  } else if (invalidProps.length > 1) {
	    warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }
	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;

	function validateProperties$1(type, props) {
	  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	    return;
	  }

	  if (props != null && props.value === null && !didWarnValueNull) {
	    didWarnValueNull = true;
	    if (type === 'select' && props.multiple) {
	      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	    } else {
	      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var _hasOwnProperty = Object.prototype.hasOwnProperty;
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
	    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();
	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // We can't rely on the event system being injected on the server.
	    if (canUseEventSystem) {
	      if (registrationNameModules.hasOwnProperty(name)) {
	        return true;
	      }
	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
	      if (registrationName != null) {
	        warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	      if (EVENT_NAME_REGEX.test(name)) {
	        warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // Let the ARIA attribute hook validate ARIA attributes
	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;

	    // Known attributes should match the casing specified in the property config.
	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];
	      if (standardName !== name) {
	        warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // Now that we've validated casing, do not validate
	    // data types for reserved props
	    if (isReserved) {
	      return true;
	    }

	    // Warn when a known attribute is a bad type
	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    }

	    // Warn when passing the strings 'false' or 'true' into a boolean prop
	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, canUseEventSystem) {
	  var unknownProps = [];
	  for (var key in props) {
	    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	  if (unknownProps.length === 1) {
	    warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	  } else if (unknownProps.length > 1) {
	    warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	  }
	};

	function validateProperties$2(type, props, canUseEventSystem) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }
	  warnUnknownProperties(type, props, canUseEventSystem);
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var didWarnInvalidHydration = false;
	var didWarnShadyDOM = false;

	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE$1 = 'style';
	var HTML = '__html';

	var HTML_NAMESPACE = Namespaces.html;


	var warnedUnknownTags = void 0;
	var suppressHydrationWarning = void 0;

	var validatePropertiesInDevelopment = void 0;
	var warnForTextDifference = void 0;
	var warnForPropDifference = void 0;
	var warnForExtraAttributes = void 0;
	var warnForInvalidEventListener = void 0;
	var canDiffStyleForHydrationWarning = void 0;

	var normalizeMarkupForTextOrAttribute = void 0;
	var normalizeHTML = void 0;

	{
	  warnedUnknownTags = {
	    // Chrome is the only major browser not shipping <time>. But as of July
	    // 2017 it intends to ship it due to widespread usage. We intentionally
	    // *don't* warn for <time> even if it's unrecognized by Chrome because
	    // it soon will be, and many apps have been using it anyway.
	    time: true,
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props, /* canUseEventSystem */true);
	  };

	  // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807
	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

	  // HTML parsing normalizes CR and CRLF to LF.
	  // It also can turn \u0000 into \uFFFD inside attributes.
	  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	  // If we have a mismatch, it might be caused by that.
	  // We will still patch up in this case but not fire the warning.
	  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	  normalizeMarkupForTextOrAttribute = function (markup) {
	    var markupString = typeof markup === 'string' ? markup : '' + markup;
	    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	  };

	  warnForTextDifference = function (serverText, clientText) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
	    if (normalizedServerText === normalizedClientText) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	  };

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });
	    warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  };

	  // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.
	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	}

	function ensureListeningTo(rootContainerElement, registrationName) {
	  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
	  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
	  listenTo(registrationName, doc);
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }
	    var nextProp = nextProps[propKey];
	    if (propKey === STYLE$1) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }
	      // Relies on `updateStylesByID` not mutating `styleUpdates`.
	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML] : undefined;
	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
	      // Noop
	    } else if (propKey === AUTOFOCUS) {
	      // We polyfill it separately on the client during commit.
	      // We could have excluded it in the property list instead of
	      // adding a special case here, but then it wouldn't be emitted
	      // on server rendering (but we *do* want to emit it in SSR).
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if (true && typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];
	    if (propKey === STYLE$1) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag = void 0;

	  // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.
	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement = void 0;
	  var namespaceURI = parentNamespace;
	  if (namespaceURI === HTML_NAMESPACE) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }
	  if (namespaceURI === HTML_NAMESPACE) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props);
	      // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.
	      !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');
	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.
	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, { is: props.is });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type);
	      // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
	      // attribute on `select`s needs to be added before `option`s are inserted. This prevents
	      // a bug where the `select` does not scroll to the correct option because singular
	      // `select` elements automatically pick the first item.
	      // See https://github.com/facebook/react/issues/13222
	      if (type === 'select' && props.multiple) {
	        var node = domElement;
	        node.multiple = true;
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;
	        warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}

	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}

	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);
	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
	      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnShadyDOM = true;
	    }
	  }

	  // TODO: Make sure that we check isMounted before firing any of these events.
	  var props = void 0;
	  switch (tag) {
	    case 'iframe':
	    case 'object':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;
	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }
	      props = rawProps;
	      break;
	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      props = rawProps;
	      break;
	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;
	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      props = rawProps;
	      break;
	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      props = rawProps;
	      break;
	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'option':
	      validateProps(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps);
	      break;
	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$3(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);

	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;
	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement, rawProps);
	      break;
	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;
	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;
	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }
	}

	// Calculate the diff between the two objects.
	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;

	  var lastProps = void 0;
	  var nextProps = void 0;
	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'option':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'select':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'textarea':
	      lastProps = getHostProps$3(domElement, lastRawProps);
	      nextProps = getHostProps$3(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;
	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }

	  assertValidProps(tag, nextProps);

	  var propKey = void 0;
	  var styleName = void 0;
	  var styleUpdates = null;
	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }
	    if (propKey === STYLE$1) {
	      var lastStyle = lastProps[propKey];
	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }
	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
	      // Noop. This is handled by the clear text mechanism.
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
	      // Noop
	    } else if (propKey === AUTOFOCUS) {
	      // Noop. It doesn't work on updates anyway.
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the whitelist in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }
	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }
	    if (propKey === STYLE$1) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }
	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }
	            styleUpdates[styleName] = '';
	          }
	        }
	        // Update styles that changed since `lastProp`.
	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }
	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }
	          updatePayload.push(propKey, styleUpdates);
	        }
	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML] : undefined;
	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
	        }
	      } else {
	        // TODO: It might be too late to clear this if we have children
	        // inserted already.
	      }
	    } else if (propKey === CHILDREN) {
	      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
	      // Noop
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if (true && typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the whitelist during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }
	  if (styleUpdates) {
	    {
	      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
	    }
	    (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
	  }
	  return updatePayload;
	}

	// Apply the diff.
	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
	  // Apply the diff.
	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

	  // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.
	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;
	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;
	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();
	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }
	    return possibleStandardNames[lowerCasedName] || null;
	  }
	  return null;
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
	  var isCustomComponentTag = void 0;
	  var extraAttributeNames = void 0;

	  {
	    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
	      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
	      didWarnShadyDOM = true;
	    }
	  }

	  // TODO: Make sure that we check isMounted before firing any of these events.
	  switch (tag) {
	    case 'iframe':
	    case 'object':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;
	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }
	      break;
	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      break;
	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;
	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      break;
	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      break;
	    case 'input':
	      initWrapperState(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'option':
	      validateProps(domElement, rawProps);
	      break;
	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;
	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();
	      switch (name) {
	        // Built-in SSR attribute is whitelisted
	        case 'data-reactroot':
	          break;
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.
	        case 'value':
	          break;
	        case 'checked':
	          break;
	        case 'selected':
	          break;
	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;
	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }
	    var nextProp = rawProps[propKey];
	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if (true && !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }
	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if (true && !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }
	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if (true && typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (true &&
	    // Convince Flow we've calculated it (it's DEV-only in this method.)
	    typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = getPropertyInfo(propKey);
	      if (suppressHydrationWarning) {
	        // Don't bother comparing. We're ignoring all these warnings.
	      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
	      // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
	        // Noop
	      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML] : undefined;
	        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
	        if (expectedHTML !== serverHTML) {
	          warnForPropDifference(propKey, serverHTML, expectedHTML);
	        }
	      } else if (propKey === STYLE$1) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');
	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;
	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;
	          if (ownNamespace === HTML_NAMESPACE) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }
	          if (ownNamespace === HTML_NAMESPACE) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);
	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true;
	              // $FlowFixMe - Should be inferred as not undefined.
	              extraAttributeNames.delete(standardName);
	            }
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey);
	          }
	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    // $FlowFixMe - Should be inferred as not undefined.
	    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
	      // $FlowFixMe - Should be inferred as not undefined.
	      warnForExtraAttributes(extraAttributeNames);
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;
	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement, rawProps);
	      break;
	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;
	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }

	  return updatePayload;
	}

	function diffHydratedText(textNode, text) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}

	function warnForUnmatchedText(textNode, text) {
	  {
	    warnForTextDifference(textNode.nodeValue, text);
	  }
	}

	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}

	function restoreControlledState$1(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState(domElement, props);
	      return;
	    case 'textarea':
	      restoreControlledState$3(domElement, props);
	      return;
	    case 'select':
	      restoreControlledState$2(domElement, props);
	      return;
	  }
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var validateDOMNesting = function () {};
	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;
	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var addendum = getCurrentFiberStackInDev();

	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
	    if (didWarn[warnKey]) {
	      return;
	    }
	    didWarn[warnKey] = true;

	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';
	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';
	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	      }
	      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
	    } else {
	      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
	    }
	  };
	}

	// Renderers that don't support persistence
	// can re-export everything from this module.

	function shim() {
	  invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
	}

	// Persistence (when unsupported)
	var supportsPersistence = false;
	var cloneInstance = shim;
	var createContainerChildSet = shim;
	var appendChildToContainerChildSet = shim;
	var finalizeContainerChildren = shim;
	var replaceContainerChildren = shim;
	var cloneHiddenInstance = shim;
	var cloneUnhiddenInstance = shim;
	var createHiddenTextInstance = shim;

	var SUPPRESS_HYDRATION_WARNING = void 0;
	{
	  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	}

	var SUSPENSE_START_DATA = '$';
	var SUSPENSE_END_DATA = '/$';

	var STYLE = 'style';

	var eventsEnabled = null;
	var selectionInformation = null;

	function shouldAutoFocusHostComponent(type, props) {
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;
	  }
	  return false;
	}

	function getRootHostContext(rootContainerInstance) {
	  var type = void 0;
	  var namespace = void 0;
	  var nodeType = rootContainerInstance.nodeType;
	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }
	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }
	  {
	    var validatedTag = type.toLowerCase();
	    var _ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return { namespace: namespace, ancestorInfo: _ancestorInfo };
	  }
	  return namespace;
	}

	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
	  }
	  var parentNamespace = parentHostContext;
	  return getChildNamespace(parentNamespace, type);
	}

	function getPublicInstance(instance) {
	  return instance;
	}

	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  setEnabled(false);
	}

	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  selectionInformation = null;
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;
	}

	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace = void 0;
	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);
	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	    parentNamespace = hostContextDev.namespace;
	  }
	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}

	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}

	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);
	  return shouldAutoFocusHostComponent(type, props);
	}

	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;
	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }
	  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
	}

	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}

	function shouldDeprioritizeSubtree(type, props) {
	  return !!props.hidden;
	}

	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }
	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}

	var isPrimaryRenderer = true;
	// This initialization code may run even on server environments
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.
	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1;
	var schedulePassiveEffects = scheduler.unstable_scheduleCallback;
	var cancelPassiveEffects = scheduler.unstable_cancelCallback;

	// -------------------
	//     Mutation
	// -------------------

	var supportsMutation = true;

	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  if (shouldAutoFocusHostComponent(type, newProps)) {
	    domElement.focus();
	  }
	}

	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Update the props handle so that we know which props are the ones with
	  // with current event handlers.
	  updateFiberProps(domElement, newProps);
	  // Apply the diff to the DOM node.
	  updateProperties(domElement, updatePayload, type, oldProps, newProps);
	}

	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}

	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}

	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}

	function appendChildToContainer(container, child) {
	  var parentNode = void 0;
	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  }
	  // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918
	  var reactRootContainer = container._reactRootContainer;
	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}

	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}

	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	}

	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}

	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}

	function clearSuspenseBoundary(parentInstance, suspenseInstance) {
	  var node = suspenseInstance;
	  // Delete all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.
	  var depth = 0;
	  do {
	    var nextNode = node.nextSibling;
	    parentInstance.removeChild(node);
	    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
	      var data = nextNode.data;
	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          parentInstance.removeChild(nextNode);
	          return;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA) {
	        depth++;
	      }
	    }
	    node = nextNode;
	  } while (node);
	  // TODO: Warn, we didn't find the end comment boundary.
	}

	function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
	  if (container.nodeType === COMMENT_NODE) {
	    clearSuspenseBoundary(container.parentNode, suspenseInstance);
	  } else if (container.nodeType === ELEMENT_NODE) {
	    clearSuspenseBoundary(container, suspenseInstance);
	  } else {
	    // Document nodes should never contain suspense boundaries.
	  }
	}

	function hideInstance(instance) {
	  // TODO: Does this work for all element types? What about MathML? Should we
	  // pass host context to this method?
	  instance = instance;
	  instance.style.display = 'none';
	}

	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}

	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}

	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	}

	// -------------------
	//     Hydration
	// -------------------

	var supportsHydration = true;

	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  }
	  // This has now been refined to an element node.
	  return instance;
	}

	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  }
	  // This has now been refined to a text node.
	  return instance;
	}

	function canHydrateSuspenseInstance(instance) {
	  if (instance.nodeType !== COMMENT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  }
	  // This has now been refined to a suspense node.
	  return instance;
	}

	function getNextHydratableSibling(instance) {
	  var node = instance.nextSibling;
	  // Skip non-hydratable nodes.
	  while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || node.nodeType !== COMMENT_NODE || node.data !== SUSPENSE_START_DATA)) {
	    node = node.nextSibling;
	  }
	  return node;
	}

	function getFirstHydratableChild(parentInstance) {
	  var next = parentInstance.firstChild;
	  // Skip non-hydratable nodes.
	  while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || next.nodeType !== COMMENT_NODE || next.data !== SUSPENSE_START_DATA)) {
	    next = next.nextSibling;
	  }
	  return next;
	}

	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, instance);
	  // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.
	  updateFiberProps(instance, props);
	  var parentNamespace = void 0;
	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  }
	  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
	}

	function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, textInstance);
	  return diffHydratedText(textInstance, text);
	}

	function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	  var node = suspenseInstance.nextSibling;
	  // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.
	  var depth = 0;
	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;
	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          return getNextHydratableSibling(node);
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA) {
	        depth++;
	      }
	    }
	    node = node.nextSibling;
	  }
	  // TODO: Warn, we didn't find the end comment boundary.
	  return null;
	}

	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
	  {
	    warnForUnmatchedText(textInstance, text);
	  }
	}

	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
	  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForUnmatchedText(textInstance, text);
	  }
	}

	function didNotHydrateContainerInstance(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else if (instance.nodeType === COMMENT_NODE) {
	      // TODO: warnForDeletedHydratableSuspenseBoundary
	    } else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}

	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
	  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentInstance, instance);
	    } else if (instance.nodeType === COMMENT_NODE) {
	      // TODO: warnForDeletedHydratableSuspenseBoundary
	    } else {
	      warnForDeletedHydratableText(parentInstance, instance);
	    }
	  }
	}

	function didNotFindHydratableContainerInstance(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type, props);
	  }
	}

	function didNotFindHydratableContainerTextInstance(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}



	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
	  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForInsertedHydratedElement(parentInstance, type, props);
	  }
	}

	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
	  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    warnForInsertedHydratedText(parentInstance, text);
	  }
	}

	function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
	  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	    // TODO: warnForInsertedHydratedSuspense(parentInstance);
	  }
	}

	// Prefix measurements so that it's possible to filter them.
	// Longer prefixes are hard to read in DevTools.
	var reactEmoji = '\u269B';
	var warningEmoji = '\u26D4';
	var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	// Keep track of current fiber so that we know the path to unwind on pause.
	// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
	var currentFiber = null;
	// If we're in the middle of user code, which fiber and method is it?
	// Reusing `currentFiber` would be confusing for this because user code fiber
	// can change during commit phase too, but we don't need to unwind it (since
	// lifecycles in the commit phase don't resemble a tree).
	var currentPhase = null;
	var currentPhaseFiber = null;
	// Did lifecycle hook schedule an update? This is often a performance problem,
	// so we will keep track of it, and include it in the report.
	// Track commits caused by cascading updates.
	var isCommitting = false;
	var hasScheduledUpdateInCurrentCommit = false;
	var hasScheduledUpdateInCurrentPhase = false;
	var commitCountInCurrentWorkLoop = 0;
	var effectCountInCurrentCommit = 0;
	var isWaitingForCallback = false;
	// During commits, we only show a measurement once per method name
	// to avoid stretch the commit phase with measurement overhead.
	var labelsInCurrentCommit = new Set();

	var formatMarkName = function (markName) {
	  return reactEmoji + ' ' + markName;
	};

	var formatLabel = function (label, warning) {
	  var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
	  var suffix = warning ? ' Warning: ' + warning : '';
	  return '' + prefix + label + suffix;
	};

	var beginMark = function (markName) {
	  performance.mark(formatMarkName(markName));
	};

	var clearMark = function (markName) {
	  performance.clearMarks(formatMarkName(markName));
	};

	var endMark = function (label, markName, warning) {
	  var formattedMarkName = formatMarkName(markName);
	  var formattedLabel = formatLabel(label, warning);
	  try {
	    performance.measure(formattedLabel, formattedMarkName);
	  } catch (err) {}
	  // If previous mark was missing for some reason, this will throw.
	  // This could only happen if React crashed in an unexpected place earlier.
	  // Don't pile on with more errors.

	  // Clear marks immediately to avoid growing buffer.
	  performance.clearMarks(formattedMarkName);
	  performance.clearMeasures(formattedLabel);
	};

	var getFiberMarkName = function (label, debugID) {
	  return label + ' (#' + debugID + ')';
	};

	var getFiberLabel = function (componentName, isMounted, phase) {
	  if (phase === null) {
	    // These are composite component total time measurements.
	    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
	  } else {
	    // Composite component methods.
	    return componentName + '.' + phase;
	  }
	};

	var beginFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);

	  if (isCommitting && labelsInCurrentCommit.has(label)) {
	    // During the commit phase, we don't show duplicate labels because
	    // there is a fixed overhead for every measurement, and we don't
	    // want to stretch the commit phase beyond necessary.
	    return false;
	  }
	  labelsInCurrentCommit.add(label);

	  var markName = getFiberMarkName(label, debugID);
	  beginMark(markName);
	  return true;
	};

	var clearFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  clearMark(markName);
	};

	var endFiberMark = function (fiber, phase, warning) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  endMark(label, markName, warning);
	};

	var shouldIgnoreFiber = function (fiber) {
	  // Host components should be skipped in the timeline.
	  // We could check typeof fiber.type, but does this work with RN?
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	    case Mode:
	      return true;
	    default:
	      return false;
	  }
	};

	var clearPendingPhaseMeasurement = function () {
	  if (currentPhase !== null && currentPhaseFiber !== null) {
	    clearFiberMark(currentPhaseFiber, currentPhase);
	  }
	  currentPhaseFiber = null;
	  currentPhase = null;
	  hasScheduledUpdateInCurrentPhase = false;
	};

	var pauseTimers = function () {
	  // Stops all currently active measurements so that they can be resumed
	  // if we continue in a later deferred loop from the same unit of work.
	  var fiber = currentFiber;
	  while (fiber) {
	    if (fiber._debugIsCurrentlyTiming) {
	      endFiberMark(fiber, null, null);
	    }
	    fiber = fiber.return;
	  }
	};

	var resumeTimersRecursively = function (fiber) {
	  if (fiber.return !== null) {
	    resumeTimersRecursively(fiber.return);
	  }
	  if (fiber._debugIsCurrentlyTiming) {
	    beginFiberMark(fiber, null);
	  }
	};

	var resumeTimers = function () {
	  // Resumes all measurements that were active during the last deferred loop.
	  if (currentFiber !== null) {
	    resumeTimersRecursively(currentFiber);
	  }
	};

	function recordEffect() {
	  if (enableUserTimingAPI) {
	    effectCountInCurrentCommit++;
	  }
	}

	function recordScheduleUpdate() {
	  if (enableUserTimingAPI) {
	    if (isCommitting) {
	      hasScheduledUpdateInCurrentCommit = true;
	    }
	    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
	      hasScheduledUpdateInCurrentPhase = true;
	    }
	  }
	}

	function startRequestCallbackTimer() {
	  if (enableUserTimingAPI) {
	    if (supportsUserTiming && !isWaitingForCallback) {
	      isWaitingForCallback = true;
	      beginMark('(Waiting for async callback...)');
	    }
	  }
	}

	function stopRequestCallbackTimer(didExpire, expirationTime) {
	  if (enableUserTimingAPI) {
	    if (supportsUserTiming) {
	      isWaitingForCallback = false;
	      var warning = didExpire ? 'React was blocked by main thread' : null;
	      endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
	    }
	  }
	}

	function startWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, this is the fiber to unwind from.
	    currentFiber = fiber;
	    if (!beginFiberMark(fiber, null)) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = true;
	  }
	}

	function cancelWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // Remember we shouldn't complete measurement for this fiber.
	    // Otherwise flamechart will be deep even for small updates.
	    fiber._debugIsCurrentlyTiming = false;
	    clearFiberMark(fiber, null);
	  }
	}

	function stopWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, its parent is the fiber to unwind from.
	    currentFiber = fiber.return;
	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = false;
	    endFiberMark(fiber, null, null);
	  }
	}

	function stopFailedWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, its parent is the fiber to unwind from.
	    currentFiber = fiber.return;
	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = false;
	    var warning = fiber.tag === SuspenseComponent || fiber.tag === DehydratedSuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
	    endFiberMark(fiber, null, warning);
	  }
	}

	function startPhaseTimer(fiber, phase) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    clearPendingPhaseMeasurement();
	    if (!beginFiberMark(fiber, phase)) {
	      return;
	    }
	    currentPhaseFiber = fiber;
	    currentPhase = phase;
	  }
	}

	function stopPhaseTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    if (currentPhase !== null && currentPhaseFiber !== null) {
	      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
	      endFiberMark(currentPhaseFiber, currentPhase, warning);
	    }
	    currentPhase = null;
	    currentPhaseFiber = null;
	  }
	}

	function startWorkLoopTimer(nextUnitOfWork) {
	  if (enableUserTimingAPI) {
	    currentFiber = nextUnitOfWork;
	    if (!supportsUserTiming) {
	      return;
	    }
	    commitCountInCurrentWorkLoop = 0;
	    // This is top level call.
	    // Any other measurements are performed within.
	    beginMark('(React Tree Reconciliation)');
	    // Resume any measurements that were in progress during the last loop.
	    resumeTimers();
	  }
	}

	function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var warning = null;
	    if (interruptedBy !== null) {
	      if (interruptedBy.tag === HostRoot) {
	        warning = 'A top-level update interrupted the previous render';
	      } else {
	        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
	        warning = 'An update to ' + componentName + ' interrupted the previous render';
	      }
	    } else if (commitCountInCurrentWorkLoop > 1) {
	      warning = 'There were cascading updates';
	    }
	    commitCountInCurrentWorkLoop = 0;
	    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
	    // Pause any measurements until the next loop.
	    pauseTimers();
	    endMark(label, '(React Tree Reconciliation)', warning);
	  }
	}

	function startCommitTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    isCommitting = true;
	    hasScheduledUpdateInCurrentCommit = false;
	    labelsInCurrentCommit.clear();
	    beginMark('(Committing Changes)');
	  }
	}

	function stopCommitTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;
	    if (hasScheduledUpdateInCurrentCommit) {
	      warning = 'Lifecycle hook scheduled a cascading update';
	    } else if (commitCountInCurrentWorkLoop > 0) {
	      warning = 'Caused by a cascading update in earlier commit';
	    }
	    hasScheduledUpdateInCurrentCommit = false;
	    commitCountInCurrentWorkLoop++;
	    isCommitting = false;
	    labelsInCurrentCommit.clear();

	    endMark('(Committing Changes)', '(Committing Changes)', warning);
	  }
	}

	function startCommitSnapshotEffectsTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Snapshot Effects)');
	  }
	}

	function stopCommitSnapshotEffectsTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
	  }
	}

	function startCommitHostEffectsTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Host Effects)');
	  }
	}

	function stopCommitHostEffectsTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
	  }
	}

	function startCommitLifeCyclesTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Calling Lifecycle Methods)');
	  }
	}

	function stopCommitLifeCyclesTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
	  }
	}

	var valueStack = [];

	var fiberStack = void 0;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      warningWithoutStack$1(false, 'Unexpected pop.');
	    }
	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];

	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;

	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	function checkThatStackIsEmpty() {
	  {
	    if (index !== -1) {
	      warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
	    }
	  }
	}

	function resetStackAfterFatalErrorInDev() {
	  {
	    index = -1;
	    valueStack.length = 0;
	    fiberStack.length = 0;
	  }
	}

	var warnedAboutMissingGetChildContext = void 0;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};
	{
	  Object.freeze(emptyContextObject);
	}

	// A cursor to the current merged context object on the stack.
	var contextStackCursor = createCursor(emptyContextObject);
	// A cursor to a boolean indicating whether the context has changed.
	var didPerformWorkStackCursor = createCursor(false);
	// Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.
	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	    // If the fiber is a context provider itself, when we read its context
	    // we may have already pushed its own child context on the stack. A context
	    // provider should not "see" its own child context. Therefore we read the
	    // previous (parent) context instead for a context provider.
	    return previousContext;
	  }
	  return contextStackCursor.current;
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  var instance = workInProgress.stateNode;
	  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  var type = workInProgress.type;
	  var contextTypes = type.contextTypes;
	  if (!contextTypes) {
	    return emptyContextObject;
	  }

	  // Avoid recreating masked context unless unmasked context has changed.
	  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	  // This may trigger infinite loops if componentWillReceiveProps calls setState.
	  var instance = workInProgress.stateNode;
	  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	    return instance.__reactInternalMemoizedMaskedChildContext;
	  }

	  var context = {};
	  for (var key in contextTypes) {
	    context[key] = unmaskedContext[key];
	  }

	  {
	    var name = getComponentName(type) || 'Unknown';
	    checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
	  }

	  // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // Context is created before the class component is instantiated so check for instance.
	  if (instance) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return context;
	}

	function hasContextChanged() {
	  return didPerformWorkStackCursor.current;
	}

	function isContextProvider(type) {
	  var childContextTypes = type.childContextTypes;
	  return childContextTypes !== null && childContextTypes !== undefined;
	}

	function popContext(fiber) {
	  pop(didPerformWorkStackCursor, fiber);
	  pop(contextStackCursor, fiber);
	}

	function popTopLevelContextObject(fiber) {
	  pop(didPerformWorkStackCursor, fiber);
	  pop(contextStackCursor, fiber);
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  push(contextStackCursor, context, fiber);
	  push(didPerformWorkStackCursor, didChange, fiber);
	}

	function processChildContext(fiber, type, parentContext) {
	  var instance = fiber.stateNode;
	  var childContextTypes = type.childContextTypes;

	  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
	  if (typeof instance.getChildContext !== 'function') {
	    {
	      var componentName = getComponentName(type) || 'Unknown';

	      if (!warnedAboutMissingGetChildContext[componentName]) {
	        warnedAboutMissingGetChildContext[componentName] = true;
	        warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	      }
	    }
	    return parentContext;
	  }

	  var childContext = void 0;
	  {
	    setCurrentPhase('getChildContext');
	  }
	  startPhaseTimer(fiber, 'getChildContext');
	  childContext = instance.getChildContext();
	  stopPhaseTimer();
	  {
	    setCurrentPhase(null);
	  }
	  for (var contextKey in childContext) {
	    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
	  }
	  {
	    var name = getComponentName(type) || 'Unknown';
	    checkPropTypes(childContextTypes, childContext, 'child context', name,
	    // In practice, there is one case in which we won't get a stack. It's when
	    // somebody calls unstable_renderSubtreeIntoContainer() and we process
	    // context from the parent component instance. The stack will be missing
	    // because it's outside of the reconciliation, and so the pointer has not
	    // been set. This is rare and doesn't matter. We'll also remove that API.
	    getCurrentFiberStackInDev);
	  }

	  return _assign({}, parentContext, childContext);
	}

	function pushContextProvider(workInProgress) {
	  var instance = workInProgress.stateNode;
	  // We push the context as early as possible to ensure stack integrity.
	  // If the instance does not exist yet, we will push null at first,
	  // and replace it on the stack later when invalidating the context.
	  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;

	  // Remember the parent context so we can merge with it later.
	  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
	  previousContext = contextStackCursor.current;
	  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

	  return true;
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  var instance = workInProgress.stateNode;
	  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  if (didChange) {
	    // Merge parent and own context.
	    // Skip this if we're not updating due to sCU.
	    // This avoids unnecessarily recomputing memoized values.
	    var mergedContext = processChildContext(workInProgress, type, previousContext);
	    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

	    // Replace the old (or empty) context with the new one.
	    // It is important to unwind the context in the reverse order.
	    pop(didPerformWorkStackCursor, workInProgress);
	    pop(contextStackCursor, workInProgress);
	    // Now push the new context and mark that it has changed.
	    push(contextStackCursor, mergedContext, workInProgress);
	    push(didPerformWorkStackCursor, didChange, workInProgress);
	  } else {
	    pop(didPerformWorkStackCursor, workInProgress);
	    push(didPerformWorkStackCursor, didChange, workInProgress);
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	  // makes sense elsewhere
	  !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  var node = fiber;
	  do {
	    switch (node.tag) {
	      case HostRoot:
	        return node.stateNode.context;
	      case ClassComponent:
	        {
	          var Component = node.type;
	          if (isContextProvider(Component)) {
	            return node.stateNode.__reactInternalMemoizedMergedChildContext;
	          }
	          break;
	        }
	    }
	    node = node.return;
	  } while (node !== null);
	  invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
	}

	var onCommitFiberRoot = null;
	var onCommitFiberUnmount = null;
	var hasLoggedError = false;

	function catchErrors(fn) {
	  return function (arg) {
	    try {
	      return fn(arg);
	    } catch (err) {
	      if (true && !hasLoggedError) {
	        hasLoggedError = true;
	        warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
	      }
	    }
	  };
	}

	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }
	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }
	  if (!hook.supportsFiber) {
	    {
	      warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
	    }
	    // DevTools exists, even though it doesn't support Fiber.
	    return true;
	  }
	  try {
	    var rendererID = hook.inject(internals);
	    // We have successfully injected, so now it is safe to set up hooks.
	    onCommitFiberRoot = catchErrors(function (root) {
	      return hook.onCommitFiberRoot(rendererID, root);
	    });
	    onCommitFiberUnmount = catchErrors(function (fiber) {
	      return hook.onCommitFiberUnmount(rendererID, fiber);
	    });
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
	    }
	  }
	  // DevTools exists
	  return true;
	}

	function onCommitRoot(root) {
	  if (typeof onCommitFiberRoot === 'function') {
	    onCommitFiberRoot(root);
	  }
	}

	function onCommitUnmount(fiber) {
	  if (typeof onCommitFiberUnmount === 'function') {
	    onCommitFiberUnmount(fiber);
	  }
	}

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var maxSigned31BitInt = 1073741823;

	var NoWork = 0;
	var Never = 1;
	var Sync = maxSigned31BitInt;

	var UNIT_SIZE = 10;
	var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1;

	// 1 unit of expiration time represents 10ms.
	function msToExpirationTime(ms) {
	  // Always add an offset so that we don't clash with the magic number for NoWork.
	  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
	}

	function expirationTimeToMs(expirationTime) {
	  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
	}

	function ceiling(num, precision) {
	  return ((num / precision | 0) + 1) * precision;
	}

	function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
	  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
	}

	var LOW_PRIORITY_EXPIRATION = 5000;
	var LOW_PRIORITY_BATCH_SIZE = 250;

	function computeAsyncExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
	}

	// We intentionally set a higher expiration time for interactive updates in
	// dev than in production.
	//
	// If the main thread is being blocked so long that you hit the expiration,
	// it's a problem that could be solved with better scheduling.
	//
	// People will be more likely to notice this and fix it with the long
	// expiration time in development.
	//
	// In production we opt for better UX at the risk of masking scheduling
	// problems, by expiring fast.
	var HIGH_PRIORITY_EXPIRATION = 500;
	var HIGH_PRIORITY_BATCH_SIZE = 100;

	function computeInteractiveExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
	}

	var NoContext = 0;
	var ConcurrentMode = 1;
	var StrictMode = 2;
	var ProfileMode = 4;

	var hasBadMapPolyfill = void 0;

	{
	  hasBadMapPolyfill = false;
	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    var testMap = new Map([[nonExtensibleObject, null]]);
	    var testSet = new Set([nonExtensibleObject]);
	    // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.
	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	// A Fiber is work on a Component that needs to be done or was done. There can
	// be more than one per component.


	var debugCounter = void 0;

	{
	  debugCounter = 1;
	}

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null;

	  // Fiber
	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;

	  this.ref = null;

	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.contextDependencies = null;

	  this.mode = mode;

	  // Effects
	  this.effectTag = NoEffect;
	  this.nextEffect = null;

	  this.firstEffect = null;
	  this.lastEffect = null;

	  this.expirationTime = NoWork;
	  this.childExpirationTime = NoWork;

	  this.alternate = null;

	  if (enableProfilerTimer) {
	    // Note: The following is done to avoid a v8 performance cliff.
	    //
	    // Initializing the fields below to smis and later updating them with
	    // double values will cause Fibers to end up having separate shapes.
	    // This behavior/bug has something to do with Object.preventExtension().
	    // Fortunately this only impacts DEV builds.
	    // Unfortunately it makes React unusably slow for some applications.
	    // To work around this, initialize the fields below with doubles.
	    //
	    // Learn more about this here:
	    // https://github.com/facebook/react/issues/14365
	    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
	    this.actualDuration = Number.NaN;
	    this.actualStartTime = Number.NaN;
	    this.selfBaseDuration = Number.NaN;
	    this.treeBaseDuration = Number.NaN;

	    // It's okay to replace the initial doubles with smis after initialization.
	    // This won't trigger the performance cliff mentioned above,
	    // and it simplifies other profiler code (including DevTools).
	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  }

	  {
	    this._debugID = debugCounter++;
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugIsCurrentlyTiming = false;
	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	}

	// This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.
	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
	}

	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;
	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }
	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }
	  return IndeterminateComponent;
	}

	// This is used to create an alternate fiber to do work on.
	function createWorkInProgress(current, pendingProps, expirationTime) {
	  var workInProgress = current.alternate;
	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      workInProgress._debugID = current._debugID;
	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps;

	    // We already have an alternate.
	    // Reset the effect tag.
	    workInProgress.effectTag = NoEffect;

	    // The effect list is no longer valid.
	    workInProgress.nextEffect = null;
	    workInProgress.firstEffect = null;
	    workInProgress.lastEffect = null;

	    if (enableProfilerTimer) {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  }

	  workInProgress.childExpirationTime = current.childExpirationTime;
	  workInProgress.expirationTime = current.expirationTime;

	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue;
	  workInProgress.contextDependencies = current.contextDependencies;

	  // These will be overridden during the parent's reconciliation
	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  if (enableProfilerTimer) {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  return workInProgress;
	}

	function createHostRootFiber(isConcurrent) {
	  var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;

	  if (enableProfilerTimer && isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}

	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, expirationTime) {
	  var fiber = void 0;

	  var fiberTag = IndeterminateComponent;
	  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
	  var resolvedType = type;
	  if (typeof type === 'function') {
	    if (shouldConstruct(type)) {
	      fiberTag = ClassComponent;
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
	      case REACT_CONCURRENT_MODE_TYPE:
	        return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);
	      case REACT_STRICT_MODE_TYPE:
	        return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);
	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;
	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;
	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;
	                break getTag;
	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;
	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;
	            }
	          }
	          var info = '';
	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }
	            var ownerName = owner ? getComponentName(owner.type) : null;
	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }
	          invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
	        }
	    }
	  }

	  fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.expirationTime = expirationTime;

	  return fiber;
	}

	function createFiberFromElement(element, mode, expirationTime) {
	  var owner = null;
	  {
	    owner = element._owner;
	  }
	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }
	  return fiber;
	}

	function createFiberFromFragment(elements, mode, expirationTime, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
	  {
	    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
	      warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
	  // TODO: The Profiler fiber shouldn't have a type. It has a tag.
	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.type = REACT_PROFILER_TYPE;
	  fiber.expirationTime = expirationTime;

	  return fiber;
	}

	function createFiberFromMode(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(Mode, pendingProps, key, mode);

	  // TODO: The Mode fiber shouldn't have a type. It has a tag.
	  var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
	  fiber.elementType = type;
	  fiber.type = type;

	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);

	  // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
	  var type = REACT_SUSPENSE_TYPE;
	  fiber.elementType = type;
	  fiber.type = type;

	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromText(content, mode, expirationTime) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoContext);
	  // TODO: These should not need a type.
	  fiber.elementType = 'DELETED';
	  fiber.type = 'DELETED';
	  return fiber;
	}

	function createFiberFromPortal(portal, mode, expirationTime) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.expirationTime = expirationTime;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null, // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	}

	// Used for stashing WIP properties to replay failed work in DEV.
	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoContext);
	  }

	  // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.

	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.contextDependencies = source.contextDependencies;
	  target.mode = source.mode;
	  target.effectTag = source.effectTag;
	  target.nextEffect = source.nextEffect;
	  target.firstEffect = source.firstEffect;
	  target.lastEffect = source.lastEffect;
	  target.expirationTime = source.expirationTime;
	  target.childExpirationTime = source.childExpirationTime;
	  target.alternate = source.alternate;
	  if (enableProfilerTimer) {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }
	  target._debugID = source._debugID;
	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
	  return target;
	}

	// TODO: This should be lifted into the renderer.


	// The following attributes are only used by interaction tracing builds.
	// They enable interactions to be associated with their async work,
	// And expose interaction metadata to the React DevTools Profiler plugin.
	// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.


	// Exported FiberRoot type includes all properties,
	// To avoid requiring potentially error-prone :any casts throughout the project.
	// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
	// The types are defined separately within this file to ensure they stay in sync.
	// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)


	function createFiberRoot(containerInfo, isConcurrent, hydrate) {
	  // Cyclic construction. This cheats the type system right now because
	  // stateNode is any.
	  var uninitializedFiber = createHostRootFiber(isConcurrent);

	  var root = void 0;
	  if (enableSchedulerTracing) {
	    root = {
	      current: uninitializedFiber,
	      containerInfo: containerInfo,
	      pendingChildren: null,

	      earliestPendingTime: NoWork,
	      latestPendingTime: NoWork,
	      earliestSuspendedTime: NoWork,
	      latestSuspendedTime: NoWork,
	      latestPingedTime: NoWork,

	      pingCache: null,

	      didError: false,

	      pendingCommitExpirationTime: NoWork,
	      finishedWork: null,
	      timeoutHandle: noTimeout,
	      context: null,
	      pendingContext: null,
	      hydrate: hydrate,
	      nextExpirationTimeToWorkOn: NoWork,
	      expirationTime: NoWork,
	      firstBatch: null,
	      nextScheduledRoot: null,

	      interactionThreadID: tracing.unstable_getThreadID(),
	      memoizedInteractions: new Set(),
	      pendingInteractionMap: new Map()
	    };
	  } else {
	    root = {
	      current: uninitializedFiber,
	      containerInfo: containerInfo,
	      pendingChildren: null,

	      pingCache: null,

	      earliestPendingTime: NoWork,
	      latestPendingTime: NoWork,
	      earliestSuspendedTime: NoWork,
	      latestSuspendedTime: NoWork,
	      latestPingedTime: NoWork,

	      didError: false,

	      pendingCommitExpirationTime: NoWork,
	      finishedWork: null,
	      timeoutHandle: noTimeout,
	      context: null,
	      pendingContext: null,
	      hydrate: hydrate,
	      nextExpirationTimeToWorkOn: NoWork,
	      expirationTime: NoWork,
	      firstBatch: null,
	      nextScheduledRoot: null
	    };
	  }

	  uninitializedFiber.stateNode = root;

	  // The reason for the way the Flow types are structured in this file,
	  // Is to avoid needing :any casts everywhere interaction tracing fields are used.
	  // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
	  // $FlowFixMe Remove this :any cast and replace it with something better.
	  return root;
	}

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	var ReactStrictModeWarnings = {
	  discardPendingWarnings: function () {},
	  flushPendingDeprecationWarnings: function () {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordDeprecationWarnings: function (fiber, instance) {},
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {}
	};

	{
	  var LIFECYCLE_SUGGESTIONS = {
	    UNSAFE_componentWillMount: 'componentDidMount',
	    UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
	    UNSAFE_componentWillUpdate: 'componentDidUpdate'
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUnsafeLifecycleWarnings = new Map();
	  var pendingLegacyContextWarning = new Map();

	  // Tracks components we have already warned about.
	  var didWarnAboutDeprecatedLifecycles = new Set();
	  var didWarnAboutUnsafeLifecycles = new Set();
	  var didWarnAboutLegacyContext = new Set();

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUnsafeLifecycleWarnings = new Map();
	    pendingLegacyContextWarning = new Map();
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
	      var lifecyclesWarningMessages = [];

	      Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
	        var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
	        if (lifecycleWarnings.length > 0) {
	          var componentNames = new Set();
	          lifecycleWarnings.forEach(function (fiber) {
	            componentNames.add(getComponentName(fiber.type) || 'Component');
	            didWarnAboutUnsafeLifecycles.add(fiber.type);
	          });

	          var formatted = lifecycle.replace('UNSAFE_', '');
	          var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
	          var sortedComponentNames = setToSortedString(componentNames);

	          lifecyclesWarningMessages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
	        }
	      });

	      if (lifecyclesWarningMessages.length > 0) {
	        var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

	        warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMessages.join('\n\n'));
	      }
	    });

	    pendingUnsafeLifecycleWarnings = new Map();
	  };

	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;

	    var node = fiber;
	    while (node !== null) {
	      if (node.mode & StrictMode) {
	        maybeStrictRoot = node;
	      }
	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
	    if (pendingComponentWillMountWarnings.length > 0) {
	      var uniqueNames = new Set();
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutDeprecatedLifecycles.add(fiber.type);
	      });

	      var sortedNames = setToSortedString(uniqueNames);

	      lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);

	      pendingComponentWillMountWarnings = [];
	    }

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      var _uniqueNames = new Set();
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        _uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutDeprecatedLifecycles.add(fiber.type);
	      });

	      var _sortedNames = setToSortedString(_uniqueNames);

	      lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);

	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      var _uniqueNames2 = new Set();
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        _uniqueNames2.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutDeprecatedLifecycles.add(fiber.type);
	      });

	      var _sortedNames2 = setToSortedString(_uniqueNames2);

	      lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);

	      pendingComponentWillUpdateWarnings = [];
	    }
	  };

	  ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
	      return;
	    }

	    // Don't warn about react-lifecycles-compat polyfilled components.
	    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }
	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }
	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);
	    if (strictRoot === null) {
	      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	      return;
	    }

	    // Dedup strategy: Warn once per component.
	    // This is difficult to track any other way since component names
	    // are often vague and are likely to collide between 3rd party libraries.
	    // An expand property is probably okay to use here since it's DEV-only,
	    // and will only be set in the event of serious warnings.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = void 0;
	    if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
	      warningsForRoot = {
	        UNSAFE_componentWillMount: [],
	        UNSAFE_componentWillReceiveProps: [],
	        UNSAFE_componentWillUpdate: []
	      };

	      pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
	    } else {
	      warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
	    }

	    var unsafeLifecycles = [];
	    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
	      unsafeLifecycles.push('UNSAFE_componentWillMount');
	    }
	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
	    }
	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      unsafeLifecycles.push('UNSAFE_componentWillUpdate');
	    }

	    if (unsafeLifecycles.length > 0) {
	      unsafeLifecycles.forEach(function (lifecycle) {
	        warningsForRoot[lifecycle].push(fiber);
	      });
	    }
	  };

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);
	    if (strictRoot === null) {
	      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	      return;
	    }

	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }
	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });

	      var sortedNames = setToSortedString(uniqueNames);
	      var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

	      warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
	    });
	  };
	}

	// This lets us hook into Fiber to debug what it's doing.
	// See https://github.com/facebook/react/pull/8033.
	// This is not part of the public API, not even for React DevTools.
	// You may only inject a debugTool if you work on React Fiber itself.
	var ReactFiberInstrumentation = {
	  debugTool: null
	};

	var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

	// TODO: Offscreen updates should never suspend. However, a promise that
	// suspended inside an offscreen subtree should be able to ping at the priority
	// of the outer render.

	function markPendingPriorityLevel(root, expirationTime) {
	  // If there's a gap between completing a failed root and retrying it,
	  // additional updates may be scheduled. Clear `didError`, in case the update
	  // is sufficient to fix the error.
	  root.didError = false;

	  // Update the latest and earliest pending times
	  var earliestPendingTime = root.earliestPendingTime;
	  if (earliestPendingTime === NoWork) {
	    // No other pending updates.
	    root.earliestPendingTime = root.latestPendingTime = expirationTime;
	  } else {
	    if (earliestPendingTime < expirationTime) {
	      // This is the earliest pending update.
	      root.earliestPendingTime = expirationTime;
	    } else {
	      var latestPendingTime = root.latestPendingTime;
	      if (latestPendingTime > expirationTime) {
	        // This is the latest pending update
	        root.latestPendingTime = expirationTime;
	      }
	    }
	  }
	  findNextExpirationTimeToWorkOn(expirationTime, root);
	}

	function markCommittedPriorityLevels(root, earliestRemainingTime) {
	  root.didError = false;

	  if (earliestRemainingTime === NoWork) {
	    // Fast path. There's no remaining work. Clear everything.
	    root.earliestPendingTime = NoWork;
	    root.latestPendingTime = NoWork;
	    root.earliestSuspendedTime = NoWork;
	    root.latestSuspendedTime = NoWork;
	    root.latestPingedTime = NoWork;
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  if (earliestRemainingTime < root.latestPingedTime) {
	    root.latestPingedTime = NoWork;
	  }

	  // Let's see if the previous latest known pending level was just flushed.
	  var latestPendingTime = root.latestPendingTime;
	  if (latestPendingTime !== NoWork) {
	    if (latestPendingTime > earliestRemainingTime) {
	      // We've flushed all the known pending levels.
	      root.earliestPendingTime = root.latestPendingTime = NoWork;
	    } else {
	      var earliestPendingTime = root.earliestPendingTime;
	      if (earliestPendingTime > earliestRemainingTime) {
	        // We've flushed the earliest known pending level. Set this to the
	        // latest pending time.
	        root.earliestPendingTime = root.latestPendingTime;
	      }
	    }
	  }

	  // Now let's handle the earliest remaining level in the whole tree. We need to
	  // decide whether to treat it as a pending level or as suspended. Check
	  // it falls within the range of known suspended levels.

	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  if (earliestSuspendedTime === NoWork) {
	    // There's no suspended work. Treat the earliest remaining level as a
	    // pending level.
	    markPendingPriorityLevel(root, earliestRemainingTime);
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  var latestSuspendedTime = root.latestSuspendedTime;
	  if (earliestRemainingTime < latestSuspendedTime) {
	    // The earliest remaining level is later than all the suspended work. That
	    // means we've flushed all the suspended work.
	    root.earliestSuspendedTime = NoWork;
	    root.latestSuspendedTime = NoWork;
	    root.latestPingedTime = NoWork;

	    // There's no suspended work. Treat the earliest remaining level as a
	    // pending level.
	    markPendingPriorityLevel(root, earliestRemainingTime);
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  if (earliestRemainingTime > earliestSuspendedTime) {
	    // The earliest remaining time is earlier than all the suspended work.
	    // Treat it as a pending update.
	    markPendingPriorityLevel(root, earliestRemainingTime);
	    findNextExpirationTimeToWorkOn(NoWork, root);
	    return;
	  }

	  // The earliest remaining time falls within the range of known suspended
	  // levels. We should treat this as suspended work.
	  findNextExpirationTimeToWorkOn(NoWork, root);
	}

	function hasLowerPriorityWork(root, erroredExpirationTime) {
	  var latestPendingTime = root.latestPendingTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  var latestPingedTime = root.latestPingedTime;
	  return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;
	}

	function isPriorityLevelSuspended(root, expirationTime) {
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;
	}

	function markSuspendedPriorityLevel(root, suspendedTime) {
	  root.didError = false;
	  clearPing(root, suspendedTime);

	  // First, check the known pending levels and update them if needed.
	  var earliestPendingTime = root.earliestPendingTime;
	  var latestPendingTime = root.latestPendingTime;
	  if (earliestPendingTime === suspendedTime) {
	    if (latestPendingTime === suspendedTime) {
	      // Both known pending levels were suspended. Clear them.
	      root.earliestPendingTime = root.latestPendingTime = NoWork;
	    } else {
	      // The earliest pending level was suspended. Clear by setting it to the
	      // latest pending level.
	      root.earliestPendingTime = latestPendingTime;
	    }
	  } else if (latestPendingTime === suspendedTime) {
	    // The latest pending level was suspended. Clear by setting it to the
	    // latest pending level.
	    root.latestPendingTime = earliestPendingTime;
	  }

	  // Finally, update the known suspended levels.
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  if (earliestSuspendedTime === NoWork) {
	    // No other suspended levels.
	    root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
	  } else {
	    if (earliestSuspendedTime < suspendedTime) {
	      // This is the earliest suspended level.
	      root.earliestSuspendedTime = suspendedTime;
	    } else if (latestSuspendedTime > suspendedTime) {
	      // This is the latest suspended level
	      root.latestSuspendedTime = suspendedTime;
	    }
	  }

	  findNextExpirationTimeToWorkOn(suspendedTime, root);
	}

	function markPingedPriorityLevel(root, pingedTime) {
	  root.didError = false;

	  // TODO: When we add back resuming, we need to ensure the progressed work
	  // is thrown out and not reused during the restarted render. One way to
	  // invalidate the progressed work is to restart at expirationTime + 1.
	  var latestPingedTime = root.latestPingedTime;
	  if (latestPingedTime === NoWork || latestPingedTime > pingedTime) {
	    root.latestPingedTime = pingedTime;
	  }
	  findNextExpirationTimeToWorkOn(pingedTime, root);
	}

	function clearPing(root, completedTime) {
	  var latestPingedTime = root.latestPingedTime;
	  if (latestPingedTime >= completedTime) {
	    root.latestPingedTime = NoWork;
	  }
	}

	function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
	  var earliestExpirationTime = renderExpirationTime;

	  var earliestPendingTime = root.earliestPendingTime;
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  if (earliestPendingTime > earliestExpirationTime) {
	    earliestExpirationTime = earliestPendingTime;
	  }
	  if (earliestSuspendedTime > earliestExpirationTime) {
	    earliestExpirationTime = earliestSuspendedTime;
	  }
	  return earliestExpirationTime;
	}

	function didExpireAtExpirationTime(root, currentTime) {
	  var expirationTime = root.expirationTime;
	  if (expirationTime !== NoWork && currentTime <= expirationTime) {
	    // The root has expired. Flush all work up to the current time.
	    root.nextExpirationTimeToWorkOn = currentTime;
	  }
	}

	function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
	  var earliestSuspendedTime = root.earliestSuspendedTime;
	  var latestSuspendedTime = root.latestSuspendedTime;
	  var earliestPendingTime = root.earliestPendingTime;
	  var latestPingedTime = root.latestPingedTime;

	  // Work on the earliest pending time. Failing that, work on the latest
	  // pinged time.
	  var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime;

	  // If there is no pending or pinged work, check if there's suspended work
	  // that's lower priority than what we just completed.
	  if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) {
	    // The lowest priority suspended work is the work most likely to be
	    // committed next. Let's start rendering it again, so that if it times out,
	    // it's ready to commit.
	    nextExpirationTimeToWorkOn = latestSuspendedTime;
	  }

	  var expirationTime = nextExpirationTimeToWorkOn;
	  if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) {
	    // Expire using the earliest known expiration time.
	    expirationTime = earliestSuspendedTime;
	  }

	  root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
	  root.expirationTime = expirationTime;
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = _assign({}, baseProps);
	    var defaultProps = Component.defaultProps;
	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	    return props;
	  }
	  return baseProps;
	}

	function readLazyComponentType(lazyComponent) {
	  var status = lazyComponent._status;
	  var result = lazyComponent._result;
	  switch (status) {
	    case Resolved:
	      {
	        var Component = result;
	        return Component;
	      }
	    case Rejected:
	      {
	        var error = result;
	        throw error;
	      }
	    case Pending:
	      {
	        var thenable = result;
	        throw thenable;
	      }
	    default:
	      {
	        lazyComponent._status = Pending;
	        var ctor = lazyComponent._ctor;
	        var _thenable = ctor();
	        _thenable.then(function (moduleObject) {
	          if (lazyComponent._status === Pending) {
	            var defaultExport = moduleObject.default;
	            {
	              if (defaultExport === undefined) {
	                warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
	              }
	            }
	            lazyComponent._status = Resolved;
	            lazyComponent._result = defaultExport;
	          }
	        }, function (error) {
	          if (lazyComponent._status === Pending) {
	            lazyComponent._status = Rejected;
	            lazyComponent._result = error;
	          }
	        });
	        // Handle synchronous thenables.
	        switch (lazyComponent._status) {
	          case Resolved:
	            return lazyComponent._result;
	          case Rejected:
	            throw lazyComponent._result;
	        }
	        lazyComponent._result = _thenable;
	        throw _thenable;
	      }
	  }
	}

	var fakeInternalInstance = {};
	var isArray$1 = Array.isArray;

	// React.Component uses a shared frozen object by default.
	// We'll use it to determine whether we need to initialize legacy refs.
	var emptyRefsObject = new React.Component().refs;

	var didWarnAboutStateAssignmentForComponent = void 0;
	var didWarnAboutUninitializedState = void 0;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
	var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
	var didWarnAboutUndefinedDerivedState = void 0;
	var warnOnUndefinedDerivedState = void 0;
	var warnOnInvalidCallback$1 = void 0;
	var didWarnAboutDirectlyAssigningPropsToState = void 0;
	var didWarnAboutContextTypeAndContextTypes = void 0;
	var didWarnAboutInvalidateContextType = void 0;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();

	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback$1 = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }
	    var key = callerName + '_' + callback;
	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);
	      warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentName(type) || 'Component';
	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);
	        warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  };

	  // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.
	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;

	  {
	    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	      // Invoke the function an extra time to help detect side-effects.
	      getDerivedStateFromProps(nextProps, prevState);
	    }
	  }

	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    warnOnUndefinedDerivedState(ctor, partialState);
	  }
	  // Merge the partial state and the previous state.
	  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState;

	  // Once the update queue is empty, persist the derived state onto the
	  // base state.
	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
	    updateQueue.baseState = memoizedState;
	  }
	}

	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTime();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber);

	    var update = createUpdate(expirationTime);
	    update.payload = payload;
	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'setState');
	      }
	      update.callback = callback;
	    }

	    flushPassiveEffects();
	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTime();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber);

	    var update = createUpdate(expirationTime);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'replaceState');
	      }
	      update.callback = callback;
	    }

	    flushPassiveEffects();
	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTime();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber);

	    var update = createUpdate(expirationTime);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback$1(callback, 'forceUpdate');
	      }
	      update.callback = callback;
	    }

	    flushPassiveEffects();
	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;
	  if (typeof instance.shouldComponentUpdate === 'function') {
	    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	    stopPhaseTimer();

	    {
	      !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;
	  {
	    var name = getComponentName(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
	    !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
	    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
	    !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
	    var noInstancePropTypes = !instance.propTypes;
	    !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
	    var noInstanceContextType = !instance.contextType;
	    !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;
	    var noInstanceContextTypes = !instance.contextTypes;
	    !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

	    if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	      didWarnAboutContextTypeAndContextTypes.add(ctor);
	      warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	    }

	    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
	    !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;
	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
	    }
	    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
	    !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
	    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
	    !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
	    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
	    !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
	    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
	    !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
	    var hasMutatedProps = instance.props !== newProps;
	    !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
	    var noInstanceDefaultProps = !instance.defaultProps;
	    !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
	      warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
	    }

	    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
	    !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
	    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
	    !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
	    var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
	    !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
	    var _state = instance.state;
	    if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
	      warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
	    }
	    if (typeof instance.getChildContext === 'function') {
	      !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance;
	  // The instance needs access to the fiber so that it can schedule updates
	  set(instance, workInProgress);
	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = null;
	  var contextType = ctor.contextType;
	  if (typeof contextType === 'object' && contextType !== null) {
	    {
	      if (contextType.$$typeof !== REACT_CONTEXT_TYPE && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext(). ' + 'Did you accidentally pass the Context.Provider instead?', getComponentName(ctor) || 'Component');
	      }
	    }

	    context = readContext(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  }

	  // Instantiate twice to help detect side-effects.
	  {
	    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	      new ctor(props, context); // eslint-disable-line no-new
	    }
	  }

	  var instance = new ctor(props, context);
	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentName(ctor) || 'Component';
	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);
	        warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    }

	    // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.
	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;
	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }
	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }
	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }
	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentName(ctor) || 'Component';
	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
	          warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
	        }
	      }
	    }
	  }

	  // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.
	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  startPhaseTimer(workInProgress, 'componentWillMount');
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }
	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  stopPhaseTimer();

	  if (oldState !== instance.state) {
	    {
	      warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
	    }
	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;
	  startPhaseTimer(workInProgress, 'componentWillReceiveProps');
	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }
	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }
	  stopPhaseTimer();

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentName(workInProgress.type) || 'Component';
	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);
	        warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }
	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	// Invokes the mount life-cycles on a previously never rendered instance.
	function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = emptyRefsObject;

	  var contextType = ctor.contextType;
	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentName(ctor) || 'Component';
	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
	        warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);

	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    if (warnAboutDeprecatedLifecycles) {
	      ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
	    }
	  }

	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    instance.state = workInProgress.memoizedState;
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  }

	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.
	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance);
	    // If we had additional state updates during this life-cycle, let's
	    // process them now.
	    updateQueue = workInProgress.updateQueue;
	    if (updateQueue !== null) {
	      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	      instance.state = workInProgress.memoizedState;
	    }
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    workInProgress.effectTag |= Update;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;

	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;

	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = void 0;
	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

	  // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.

	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.
	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();

	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    newState = workInProgress.memoizedState;
	  }
	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillMount');
	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }
	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }
	      stopPhaseTimer();
	    }
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.
	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  }

	  // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.
	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;

	  return shouldUpdate;
	}

	// Invokes the update life-cycles and returns false if it shouldn't rerender.
	function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;

	  var oldProps = workInProgress.memoizedProps;
	  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);

	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = void 0;
	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

	  // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.

	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.
	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();

	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  var updateQueue = workInProgress.updateQueue;
	  if (updateQueue !== null) {
	    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
	    newState = workInProgress.memoizedState;
	  }

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }
	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    }
	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillUpdate');
	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }
	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }
	      stopPhaseTimer();
	    }
	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.effectTag |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }
	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    }

	    // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.
	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  }

	  // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.
	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;

	  return shouldUpdate;
	}

	var didWarnAboutMaps = void 0;
	var didWarnAboutGenerators = void 0;
	var didWarnAboutStringRefInStrictMode = void 0;
	var ownerHasKeyUseWarning = void 0;
	var ownerHasFunctionTypeWarning = void 0;
	var warnForMissingKey = function (child) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefInStrictMode = {};

	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */
	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }
	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }
	    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    child._store.validated = true;

	    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();
	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }
	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	    warning$1(false, 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
	  };
	}

	var isArray = Array.isArray;

	function coerceRef(returnFiber, current$$1, element) {
	  var mixedRef = element.ref;
	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      if (returnFiber.mode & StrictMode) {
	        var componentName = getComponentName(returnFiber.type) || 'Component';
	        if (!didWarnAboutStringRefInStrictMode[componentName]) {
	          warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
	          didWarnAboutStringRefInStrictMode[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst = void 0;
	      if (owner) {
	        var ownerFiber = owner;
	        !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Function components cannot have refs. Did you mean to use React.forwardRef()?') : void 0;
	        inst = ownerFiber.stateNode;
	      }
	      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
	      var stringRef = '' + mixedRef;
	      // Check if previous string ref matches new string ref
	      if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
	        return current$$1.ref;
	      }
	      var ref = function (value) {
	        var refs = inst.refs;
	        if (refs === emptyRefsObject) {
	          // This is a lazy pooled frozen object, so we need to initialize.
	          refs = inst.refs = {};
	        }
	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };
	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
	      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
	    }
	  }
	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  if (returnFiber.type !== 'textarea') {
	    var addendum = '';
	    {
	      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
	    }
	    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
	  }
	}

	function warnOnFunctionType() {
	  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

	  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
	    return;
	  }
	  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

	  warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	}

	// This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.
	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    }
	    // Deletions are added in reversed order so we add it to the front.
	    // At this point, the return fiber's effect list is empty except for
	    // deletions, so we can just append the deletion to the list. The remaining
	    // effects aren't added until the complete phase. Once we implement
	    // resuming, this may not be true.
	    var last = returnFiber.lastEffect;
	    if (last !== null) {
	      last.nextEffect = childToDelete;
	      returnFiber.lastEffect = childToDelete;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	    }
	    childToDelete.nextEffect = null;
	    childToDelete.effectTag = Deletion;
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    }

	    // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.
	    var childToDelete = currentFirstChild;
	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }
	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    var existingChildren = new Map();

	    var existingChild = currentFirstChild;
	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }
	      existingChild = existingChild.sibling;
	    }
	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps, expirationTime) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return lastPlacedIndex;
	    }
	    var current$$1 = newFiber.alternate;
	    if (current$$1 !== null) {
	      var oldIndex = current$$1.index;
	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.effectTag = Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.effectTag = Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.effectTag = Placement;
	    }
	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
	    if (current$$1 === null || current$$1.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, textContent, expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current$$1, element, expirationTime) {
	    if (current$$1 !== null && current$$1.elementType === element.type) {
	      // Move based on index
	      var existing = useFiber(current$$1, element.props, expirationTime);
	      existing.ref = coerceRef(returnFiber, current$$1, element);
	      existing.return = returnFiber;
	      {
	        existing._debugSource = element._source;
	        existing._debugOwner = element._owner;
	      }
	      return existing;
	    } else {
	      // Insert
	      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
	      created.ref = coerceRef(returnFiber, current$$1, element);
	      created.return = returnFiber;
	      return created;
	    }
	  }

	  function updatePortal(returnFiber, current$$1, portal, expirationTime) {
	    if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, portal.children || [], expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
	    if (current$$1 === null || current$$1.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current$$1, fragment, expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }
	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
	            _created2.return = returnFiber;
	            return _created2;
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
	    // Update the fiber if the keys match, otherwise return null.

	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }
	      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              if (newChild.type === REACT_FRAGMENT_TYPE) {
	                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
	              }
	              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
	            if (newChild.type === REACT_FRAGMENT_TYPE) {
	              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
	            }
	            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
	          }
	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
	            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;
	        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  /**
	   * Warns if there is a duplicate or missing key
	   */
	  function warnOnInvalidKey(child, knownKeys) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }
	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child);
	          var key = child.key;
	          if (typeof key !== 'string') {
	            break;
	          }
	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }
	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }
	          warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
	          break;
	        default:
	          break;
	      }
	    }
	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
	    // This algorithm can't optimize by searching from both ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.

	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.

	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.

	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.

	    {
	      // First, validate keys.
	      var knownKeys = null;
	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;

	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }
	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }
	        break;
	      }
	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }
	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }
	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
	        if (!_newFiber) {
	          continue;
	        }
	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }
	        previousNewFiber = _newFiber;
	      }
	      return resultingFirstChild;
	    }

	    // Add all children to a key map for quick lookups.
	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

	    // Keep scanning and use the map to restore deleted items as moves.
	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
	      if (_newFiber2) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }
	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }
	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.

	    var iteratorFn = getIteratorFn(newChildrenIterable);
	    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' &&
	      // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
	        didWarnAboutGenerators = true;
	      }

	      // Warn about using Maps as children
	      if (newChildrenIterable.entries === iteratorFn) {
	        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
	        didWarnAboutMaps = true;
	      }

	      // First, validate keys.
	      // We'll get a different iterator later for the main pass.
	      var _newChildren = iteratorFn.call(newChildrenIterable);
	      if (_newChildren) {
	        var knownKeys = null;
	        var _step = _newChildren.next();
	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);
	    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

	    var resultingFirstChild = null;
	    var previousNewFiber = null;

	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    var step = newChildren.next();
	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }
	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (!oldFiber) {
	          oldFiber = nextOldFiber;
	        }
	        break;
	      }
	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }
	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }
	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
	        if (_newFiber3 === null) {
	          continue;
	        }
	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }
	        previousNewFiber = _newFiber3;
	      }
	      return resultingFirstChild;
	    }

	    // Add all children to a key map for quick lookups.
	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

	    // Keep scanning and use the map to restore deleted items as moves.
	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }
	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }
	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent, expirationTime);
	      existing.return = returnFiber;
	      return existing;
	    }
	    // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.
	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
	    var key = element.key;
	    var child = currentFirstChild;
	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
	          existing.ref = coerceRef(returnFiber, child, element);
	          existing.return = returnFiber;
	          {
	            existing._debugSource = element._source;
	            existing._debugOwner = element._owner;
	          }
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }
	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
	    var key = portal.key;
	    var child = currentFirstChild;
	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || [], expirationTime);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }
	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  }

	  // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.
	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.

	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    }

	    // Handle object types
	    var isObject = typeof newChild === 'object' && newChild !== null;

	    if (isObject) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
	      }
	    }

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
	    }

	    if (isArray(newChild)) {
	      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (getIteratorFn(newChild)) {
	      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (isObject) {
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }
	    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
	      // If the new child is undefined, and the return fiber is a composite
	      // component, throw an error. If Fiber return types are disabled,
	      // we already threw above.
	      switch (returnFiber.tag) {
	        case ClassComponent:
	          {
	            {
	              var instance = returnFiber.stateNode;
	              if (instance.render._isMockFunction) {
	                // We allow auto-mocks to proceed as if they're returning null.
	                break;
	              }
	            }
	          }
	        // Intentionally fall through to the next case, which handles both
	        // functions and classes
	        // eslint-disable-next-lined no-fallthrough
	        case FunctionComponent:
	          {
	            var Component = returnFiber.type;
	            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
	          }
	      }
	    }

	    // Remaining cases are all treated as empty.
	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);

	function cloneChildFibers(current$$1, workInProgress) {
	  !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
	  workInProgress.child = newChild;

	  newChild.return = workInProgress;
	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
	    newChild.return = workInProgress;
	  }
	  newChild.sibling = null;
	}

	var NO_CONTEXT = {};

	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber);
	  // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.
	  push(contextFiberStackCursor, fiber, fiber);

	  // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.
	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance);
	  // Now that we know this function doesn't throw, replace it.
	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type, rootInstance);

	  // Don't push this Fiber's context unless it's unique.
	  if (context === nextContext) {
	    return;
	  }

	  // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.
	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var NoEffect$1 = /*             */0;
	var UnmountSnapshot = /*      */2;
	var UnmountMutation = /*      */4;
	var MountMutation = /*        */8;
	var UnmountLayout = /*        */16;
	var MountLayout = /*          */32;
	var MountPassive = /*         */64;
	var UnmountPassive = /*       */128;

	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;


	var didWarnAboutMismatchedHooksForComponent = void 0;
	{
	  didWarnAboutMismatchedHooksForComponent = new Set();
	}

	// These are set right before calling the component.
	var renderExpirationTime = NoWork;
	// The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.
	var currentlyRenderingFiber$1 = null;

	// Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.
	var firstCurrentHook = null;
	var currentHook = null;
	var nextCurrentHook = null;
	var firstWorkInProgressHook = null;
	var workInProgressHook = null;
	var nextWorkInProgressHook = null;

	var remainingExpirationTime = NoWork;
	var componentUpdateQueue = null;
	var sideEffectTag = 0;

	// Updates scheduled during render will trigger an immediate re-render at the
	// end of the current pass. We can't store these updates on the normal queue,
	// because if the work is aborted, they should be discarded. Because this is
	// a relatively rare case, we also don't want to add an additional field to
	// either the hook or queue object types. So we store them in a lazily create
	// map of queue -> render-phase updates, which are discarded once the component
	// completes without re-rendering.

	// Whether an update was scheduled during the currently executing render pass.
	var didScheduleRenderPhaseUpdate = false;
	// Lazily created map of render-phase updates
	var renderPhaseUpdates = null;
	// Counter to prevent infinite loops.
	var numberOfReRenders = 0;
	var RE_RENDER_LIMIT = 25;

	// In DEV, this is the name of the currently executing primitive hook
	var currentHookNameInDev = null;

	function warnOnHookMismatchInDev() {
	  {
	    var componentName = getComponentName(currentlyRenderingFiber$1.type);
	    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
	      didWarnAboutMismatchedHooksForComponent.add(componentName);

	      var secondColumnStart = 22;

	      var table = '';
	      var prevHook = firstCurrentHook;
	      var nextHook = firstWorkInProgressHook;
	      var n = 1;
	      while (prevHook !== null && nextHook !== null) {
	        var oldHookName = prevHook._debugType;
	        var newHookName = nextHook._debugType;

	        var row = n + '. ' + oldHookName;

	        // Extra space so second column lines up
	        // lol @ IE not supporting String#repeat
	        while (row.length < secondColumnStart) {
	          row += ' ';
	        }

	        row += newHookName + '\n';

	        table += row;
	        prevHook = prevHook.next;
	        nextHook = nextHook.next;
	        n++;
	      }

	      warning$1(false, 'React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render    Next render\n' + '   -------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
	    }
	  }
	}

	function throwInvalidHookError() {
	  invariant(false, 'Hooks can only be called inside the body of a function component. (https://fb.me/react-invalid-hook-call)');
	}

	function areHookInputsEqual(nextDeps, prevDeps) {
	  if (prevDeps === null) {
	    {
	      warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
	    }
	    return false;
	  }

	  {
	    // Don't bother comparing lengths in prod because these arrays should be
	    // passed inline.
	    if (nextDeps.length !== prevDeps.length) {
	      warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, '[' + nextDeps.join(', ') + ']', '[' + prevDeps.join(', ') + ']');
	    }
	  }
	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	    if (is(nextDeps[i], prevDeps[i])) {
	      continue;
	    }
	    return false;
	  }
	  return true;
	}

	function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
	  renderExpirationTime = nextRenderExpirationTime;
	  currentlyRenderingFiber$1 = workInProgress;
	  firstCurrentHook = nextCurrentHook = current !== null ? current.memoizedState : null;

	  // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;

	  // remainingExpirationTime = NoWork;
	  // componentUpdateQueue = null;

	  // didScheduleRenderPhaseUpdate = false;
	  // renderPhaseUpdates = null;
	  // numberOfReRenders = 0;
	  // sideEffectTag = 0;

	  {
	    ReactCurrentDispatcher$1.current = nextCurrentHook === null ? HooksDispatcherOnMountInDEV : HooksDispatcherOnUpdateInDEV;
	  }

	  var children = Component(props, refOrContext);

	  if (didScheduleRenderPhaseUpdate) {
	    do {
	      didScheduleRenderPhaseUpdate = false;
	      numberOfReRenders += 1;

	      // Start over from the beginning of the list
	      firstCurrentHook = nextCurrentHook = current !== null ? current.memoizedState : null;
	      nextWorkInProgressHook = firstWorkInProgressHook;

	      currentHook = null;
	      workInProgressHook = null;
	      componentUpdateQueue = null;

	      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;

	      children = Component(props, refOrContext);
	    } while (didScheduleRenderPhaseUpdate);

	    renderPhaseUpdates = null;
	    numberOfReRenders = 0;
	  }

	  {
	    currentHookNameInDev = null;
	  }

	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  var renderedWork = currentlyRenderingFiber$1;

	  renderedWork.memoizedState = firstWorkInProgressHook;
	  renderedWork.expirationTime = remainingExpirationTime;
	  renderedWork.updateQueue = componentUpdateQueue;
	  renderedWork.effectTag |= sideEffectTag;

	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;

	  renderExpirationTime = NoWork;
	  currentlyRenderingFiber$1 = null;

	  firstCurrentHook = null;
	  currentHook = null;
	  nextCurrentHook = null;
	  firstWorkInProgressHook = null;
	  workInProgressHook = null;
	  nextWorkInProgressHook = null;

	  remainingExpirationTime = NoWork;
	  componentUpdateQueue = null;
	  sideEffectTag = 0;

	  // These were reset above
	  // didScheduleRenderPhaseUpdate = false;
	  // renderPhaseUpdates = null;
	  // numberOfReRenders = 0;

	  !!didRenderTooFewHooks ? invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.') : void 0;

	  return children;
	}

	function bailoutHooks(current, workInProgress, expirationTime) {
	  workInProgress.updateQueue = current.updateQueue;
	  workInProgress.effectTag &= ~(Passive | Update);
	  if (current.expirationTime <= expirationTime) {
	    current.expirationTime = NoWork;
	  }
	}

	function resetHooks() {
	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  // This is used to reset the state of this module when a component throws.
	  // It's also called inside mountIndeterminateComponent if we determine the
	  // component is a module-style component.
	  renderExpirationTime = NoWork;
	  currentlyRenderingFiber$1 = null;

	  firstCurrentHook = null;
	  currentHook = null;
	  nextCurrentHook = null;
	  firstWorkInProgressHook = null;
	  workInProgressHook = null;
	  nextWorkInProgressHook = null;

	  remainingExpirationTime = NoWork;
	  componentUpdateQueue = null;
	  sideEffectTag = 0;

	  {
	    currentHookNameInDev = null;
	  }

	  didScheduleRenderPhaseUpdate = false;
	  renderPhaseUpdates = null;
	  numberOfReRenders = 0;
	}

	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,

	    baseState: null,
	    queue: null,
	    baseUpdate: null,

	    next: null
	  };

	  {
	    hook._debugType = currentHookNameInDev;
	  }
	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    firstWorkInProgressHook = workInProgressHook = hook;
	  } else {
	    // Append to the end of the list
	    workInProgressHook = workInProgressHook.next = hook;
	  }
	  return workInProgressHook;
	}

	function updateWorkInProgressHook() {
	  // This function is used both for updates and for re-renders triggered by a
	  // render phase update. It assumes there is either a current hook we can
	  // clone, or a work-in-progress hook from a previous render pass that we can
	  // use as a base. When we reach the end of the base list, we must switch to
	  // the dispatcher used for mounts.
	  if (nextWorkInProgressHook !== null) {
	    // There's already a work-in-progress. Reuse it.
	    workInProgressHook = nextWorkInProgressHook;
	    nextWorkInProgressHook = workInProgressHook.next;

	    currentHook = nextCurrentHook;
	    nextCurrentHook = currentHook !== null ? currentHook.next : null;
	  } else {
	    // Clone from the current hook.
	    !(nextCurrentHook !== null) ? invariant(false, 'Rendered more hooks than during the previous render.') : void 0;
	    currentHook = nextCurrentHook;

	    var newHook = {
	      memoizedState: currentHook.memoizedState,

	      baseState: currentHook.baseState,
	      queue: currentHook.queue,
	      baseUpdate: currentHook.baseUpdate,

	      next: null
	    };

	    if (workInProgressHook === null) {
	      // This is the first hook in the list.
	      workInProgressHook = firstWorkInProgressHook = newHook;
	    } else {
	      // Append to the end of the list.
	      workInProgressHook = workInProgressHook.next = newHook;
	    }
	    nextCurrentHook = currentHook.next;

	    {
	      newHook._debugType = currentHookNameInDev;
	      if (currentHookNameInDev !== currentHook._debugType) {
	        warnOnHookMismatchInDev();
	      }
	    }
	  }
	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null
	  };
	}

	function basicStateReducer(state, action) {
	  return typeof action === 'function' ? action(state) : action;
	}

	function mountContext(context, observedBits) {
	  {
	    mountWorkInProgressHook();
	  }
	  return readContext(context, observedBits);
	}

	function updateContext(context, observedBits) {
	  {
	    updateWorkInProgressHook();
	  }
	  return readContext(context, observedBits);
	}

	function mountReducer(reducer, initialArg, init) {
	  var hook = mountWorkInProgressHook();
	  var initialState = void 0;
	  if (init !== undefined) {
	    initialState = init(initialArg);
	  } else {
	    initialState = initialArg;
	  }
	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    last: null,
	    dispatch: null,
	    eagerReducer: reducer,
	    eagerState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null,
	  // Flow doesn't know this is non-null, but we do.
	  currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;
	  !(queue !== null) ? invariant(false, 'Should have a queue. This is likely a bug in React. Please file an issue.') : void 0;

	  if (numberOfReRenders > 0) {
	    // This is a re-render. Apply the new render phase updates to the previous
	    var _dispatch = queue.dispatch;
	    if (renderPhaseUpdates !== null) {
	      // Render phase updates are stored in a map of queue -> linked list
	      var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
	      if (firstRenderPhaseUpdate !== undefined) {
	        renderPhaseUpdates.delete(queue);
	        var newState = hook.memoizedState;
	        var update = firstRenderPhaseUpdate;
	        do {
	          // Process this render phase update. We don't have to check the
	          // priority because it will always be the same as the current
	          // render's.
	          var _action = update.action;
	          newState = reducer(newState, _action);
	          update = update.next;
	        } while (update !== null);

	        // Mark that the fiber performed work, but only if the new state is
	        // different from the current state.
	        if (!is(newState, hook.memoizedState)) {
	          markWorkInProgressReceivedUpdate();
	        }

	        hook.memoizedState = newState;
	        // Don't persist the state accumlated from the render phase updates to
	        // the base state unless the queue is empty.
	        // TODO: Not sure if this is the desired semantics, but it's what we
	        // do for gDSFP. I can't remember why.
	        if (hook.baseUpdate === queue.last) {
	          hook.baseState = newState;
	        }

	        queue.eagerReducer = reducer;
	        queue.eagerState = newState;

	        return [newState, _dispatch];
	      }
	    }
	    return [hook.memoizedState, _dispatch];
	  }

	  // The last update in the entire queue
	  var last = queue.last;
	  // The last update that is part of the base state.
	  var baseUpdate = hook.baseUpdate;
	  var baseState = hook.baseState;

	  // Find the first unprocessed update.
	  var first = void 0;
	  if (baseUpdate !== null) {
	    if (last !== null) {
	      // For the first update, the queue is a circular linked list where
	      // `queue.last.next = queue.first`. Once the first update commits, and
	      // the `baseUpdate` is no longer empty, we can unravel the list.
	      last.next = null;
	    }
	    first = baseUpdate.next;
	  } else {
	    first = last !== null ? last.next : null;
	  }
	  if (first !== null) {
	    var _newState = baseState;
	    var newBaseState = null;
	    var newBaseUpdate = null;
	    var prevUpdate = baseUpdate;
	    var _update = first;
	    var didSkip = false;
	    do {
	      var updateExpirationTime = _update.expirationTime;
	      if (updateExpirationTime < renderExpirationTime) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        if (!didSkip) {
	          didSkip = true;
	          newBaseUpdate = prevUpdate;
	          newBaseState = _newState;
	        }
	        // Update the remaining priority in the queue.
	        if (updateExpirationTime > remainingExpirationTime) {
	          remainingExpirationTime = updateExpirationTime;
	        }
	      } else {
	        // Process this update.
	        if (_update.eagerReducer === reducer) {
	          // If this update was processed eagerly, and its reducer matches the
	          // current reducer, we can use the eagerly computed state.
	          _newState = _update.eagerState;
	        } else {
	          var _action2 = _update.action;
	          _newState = reducer(_newState, _action2);
	        }
	      }
	      prevUpdate = _update;
	      _update = _update.next;
	    } while (_update !== null && _update !== first);

	    if (!didSkip) {
	      newBaseUpdate = prevUpdate;
	      newBaseState = _newState;
	    }

	    // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.
	    if (!is(_newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = _newState;
	    hook.baseUpdate = newBaseUpdate;
	    hook.baseState = newBaseState;

	    queue.eagerReducer = reducer;
	    queue.eagerState = _newState;
	  }

	  var dispatch = queue.dispatch;
	  return [hook.memoizedState, dispatch];
	}

	function mountState(initialState) {
	  var hook = mountWorkInProgressHook();
	  if (typeof initialState === 'function') {
	    initialState = initialState();
	  }
	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    last: null,
	    dispatch: null,
	    eagerReducer: basicStateReducer,
	    eagerState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null,
	  // Flow doesn't know this is non-null, but we do.
	  currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateState(initialState) {
	  return updateReducer(basicStateReducer, initialState);
	}

	function pushEffect(tag, create, destroy, deps) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    deps: deps,
	    // Circular
	    next: null
	  };
	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var _lastEffect = componentUpdateQueue.lastEffect;
	    if (_lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = _lastEffect.next;
	      _lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }
	  return effect;
	}

	function mountRef(initialValue) {
	  var hook = mountWorkInProgressHook();
	  var ref = { current: initialValue };
	  {
	    Object.seal(ref);
	  }
	  hook.memoizedState = ref;
	  return ref;
	}

	function updateRef(initialValue) {
	  var hook = updateWorkInProgressHook();
	  return hook.memoizedState;
	}

	function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  sideEffectTag |= fiberEffectTag;
	  hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
	}

	function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var destroy = undefined;

	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;
	    if (nextDeps !== null) {
	      var prevDeps = prevEffect.deps;
	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        pushEffect(NoEffect$1, create, destroy, nextDeps);
	        return;
	      }
	    }
	  }

	  sideEffectTag |= fiberEffectTag;
	  hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
	}

	function mountEffect(create, deps) {
	  return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
	}

	function updateEffect(create, deps) {
	  return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
	}

	function mountLayoutEffect(create, deps) {
	  return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
	}

	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
	}

	function imperativeHandleEffect(create, ref) {
	  if (typeof ref === 'function') {
	    var refCallback = ref;
	    var _inst = create();
	    refCallback(_inst);
	    return function () {
	      refCallback(null);
	    };
	  } else if (ref !== null && ref !== undefined) {
	    var refObject = ref;
	    {
	      !refObject.hasOwnProperty('current') ? warning$1(false, 'Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}') : void 0;
	    }
	    var _inst2 = create();
	    refObject.current = _inst2;
	    return function () {
	      refObject.current = null;
	    };
	  }
	}

	function mountImperativeHandle(ref, create, deps) {
	  {
	    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
	  }

	  // TODO: If deps are provided, should we skip comparing the ref itself?
	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;

	  return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function updateImperativeHandle(ref, create, deps) {
	  {
	    !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
	  }

	  // TODO: If deps are provided, should we skip comparing the ref itself?
	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;

	  return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function mountDebugValue(value, formatterFn) {
	  // This hook is normally a no-op.
	  // The react-debug-hooks package injects its own implementation
	  // so that e.g. DevTools can display custom hook values.
	}

	var updateDebugValue = mountDebugValue;

	function mountCallback(callback, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;
	  if (prevState !== null) {
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];
	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function mountMemo(nextCreate, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;
	  if (prevState !== null) {
	    // Assume these are defined. If they're not, areHookInputsEqual will warn.
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];
	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	// in a test-like environment, we want to warn if dispatchAction()
	// is called outside of a batchedUpdates/TestUtils.act(...) call.
	var shouldWarnForUnbatchedSetState = false;

	{
	  // jest isn't a 'global', it's just exposed to tests via a wrapped function
	  // further, this isn't a test file, so flow doesn't recognize the symbol. So...
	  // $FlowExpectedError - because requirements don't give a damn about your type sigs.
	  if ('undefined' !== typeof jest) {
	    shouldWarnForUnbatchedSetState = true;
	  }
	}

	function dispatchAction(fiber, queue, action) {
	  !(numberOfReRenders < RE_RENDER_LIMIT) ? invariant(false, 'Too many re-renders. React limits the number of renders to prevent an infinite loop.') : void 0;

	  {
	    !(arguments.length <= 3) ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().') : void 0;
	  }

	  var alternate = fiber.alternate;
	  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
	    // This is a render phase update. Stash it in a lazily-created map of
	    // queue -> linked list of updates. After this render pass, we'll restart
	    // and apply the stashed updates on top of the work-in-progress hook.
	    didScheduleRenderPhaseUpdate = true;
	    var update = {
	      expirationTime: renderExpirationTime,
	      action: action,
	      eagerReducer: null,
	      eagerState: null,
	      next: null
	    };
	    if (renderPhaseUpdates === null) {
	      renderPhaseUpdates = new Map();
	    }
	    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
	    if (firstRenderPhaseUpdate === undefined) {
	      renderPhaseUpdates.set(queue, update);
	    } else {
	      // Append the update to the end of the list.
	      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
	      while (lastRenderPhaseUpdate.next !== null) {
	        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	      }
	      lastRenderPhaseUpdate.next = update;
	    }
	  } else {
	    flushPassiveEffects();

	    var currentTime = requestCurrentTime();
	    var _expirationTime = computeExpirationForFiber(currentTime, fiber);

	    var _update2 = {
	      expirationTime: _expirationTime,
	      action: action,
	      eagerReducer: null,
	      eagerState: null,
	      next: null
	    };

	    // Append the update to the end of the list.
	    var _last = queue.last;
	    if (_last === null) {
	      // This is the first update. Create a circular list.
	      _update2.next = _update2;
	    } else {
	      var first = _last.next;
	      if (first !== null) {
	        // Still circular.
	        _update2.next = first;
	      }
	      _last.next = _update2;
	    }
	    queue.last = _update2;

	    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
	      // The queue is currently empty, which means we can eagerly compute the
	      // next state before entering the render phase. If the new state is the
	      // same as the current state, we may be able to bail out entirely.
	      var _eagerReducer = queue.eagerReducer;
	      if (_eagerReducer !== null) {
	        var prevDispatcher = void 0;
	        {
	          prevDispatcher = ReactCurrentDispatcher$1.current;
	          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        }
	        try {
	          var currentState = queue.eagerState;
	          var _eagerState = _eagerReducer(currentState, action);
	          // Stash the eagerly computed state, and the reducer used to compute
	          // it, on the update object. If the reducer hasn't changed by the
	          // time we enter the render phase, then the eager state can be used
	          // without calling the reducer again.
	          _update2.eagerReducer = _eagerReducer;
	          _update2.eagerState = _eagerState;
	          if (is(_eagerState, currentState)) {
	            // Fast path. We can bail out without scheduling React to re-render.
	            // It's still possible that we'll need to rebase this update later,
	            // if the component re-renders for a different reason and by that
	            // time the reducer has changed.
	            return;
	          }
	        } catch (error) {
	          // Suppress the error. It will throw again in the render phase.
	        } finally {
	          {
	            ReactCurrentDispatcher$1.current = prevDispatcher;
	          }
	        }
	      }
	    }
	    {
	      if (shouldWarnForUnbatchedSetState === true) {
	        warnIfNotCurrentlyBatchingInDev(fiber);
	      }
	    }
	    scheduleWork(fiber, _expirationTime);
	  }
	}

	var ContextOnlyDispatcher = {
	  readContext: readContext,

	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError
	};

	var HooksDispatcherOnMountInDEV = null;
	var HooksDispatcherOnUpdateInDEV = null;
	var InvalidNestedHooksDispatcherOnMountInDEV = null;
	var InvalidNestedHooksDispatcherOnUpdateInDEV = null;

	{
	  var warnInvalidContextAccess = function () {
	    warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	  };

	  var warnInvalidHookAccess = function () {
	    warning$1(false, 'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
	  };

	  HooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      return mountContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      return mountDebugValue(value, formatterFn);
	    }
	  };

	  HooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      return updateContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      return updateRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      return updateDebugValue(value, formatterFn);
	    }
	  };

	  InvalidNestedHooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      return mountContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      return mountDebugValue(value, formatterFn);
	    }
	  };

	  InvalidNestedHooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      return updateContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      return updateRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      return updateDebugValue(value, formatterFn);
	    }
	  };
	}

	var commitTime = 0;
	var profilerStartTime = -1;

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {
	  if (!enableProfilerTimer) {
	    return;
	  }
	  commitTime = scheduler.unstable_now();
	}

	function startProfilerTimer(fiber) {
	  if (!enableProfilerTimer) {
	    return;
	  }

	  profilerStartTime = scheduler.unstable_now();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = scheduler.unstable_now();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {
	  if (!enableProfilerTimer) {
	    return;
	  }
	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
	  if (!enableProfilerTimer) {
	    return;
	  }

	  if (profilerStartTime >= 0) {
	    var elapsedTime = scheduler.unstable_now() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;
	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }
	    profilerStartTime = -1;
	  }
	}

	// The deepest Fiber on the stack involved in a hydration context.
	// This may have been an insertion or a hydration.
	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false;

	function enterHydrationState(fiber) {
	  if (!supportsHydration) {
	    return false;
	  }

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChild(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  return true;
	}

	function reenterHydrationStateFromDehydratedSuspenseInstance(fiber) {
	  if (!supportsHydration) {
	    return false;
	  }

	  var suspenseInstance = fiber.stateNode;
	  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
	  popToNextHostParent(fiber);
	  isHydrating = true;
	  return true;
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
	        break;
	      case HostComponent:
	        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
	        break;
	    }
	  }

	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  childToDelete.effectTag = Deletion;

	  // This might seem like it belongs on progressedFirstDeletion. However,
	  // these children are not part of the reconciliation list of children.
	  // Even if we abort and rereconcile the children, that will try to hydrate
	  // again and the nodes are still in the host tree so these will be
	  // recreated.
	  if (returnFiber.lastEffect !== null) {
	    returnFiber.lastEffect.nextEffect = childToDelete;
	    returnFiber.lastEffect = childToDelete;
	  } else {
	    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.effectTag |= Placement;
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;
	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              var props = fiber.pendingProps;
	              didNotFindHydratableContainerInstance(parentContainer, type, props);
	              break;
	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableContainerTextInstance(parentContainer, text);
	              break;
	            case SuspenseComponent:
	              
	              break;
	          }
	          break;
	        }
	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;
	          switch (fiber.tag) {
	            case HostComponent:
	              var _type = fiber.type;
	              var _props = fiber.pendingProps;
	              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
	              break;
	            case HostText:
	              var _text = fiber.pendingProps;
	              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
	              break;
	            case SuspenseComponent:
	              didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
	              break;
	          }
	          break;
	        }
	      default:
	        return;
	    }
	  }
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        var props = fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type, props);
	        if (instance !== null) {
	          fiber.stateNode = instance;
	          return true;
	        }
	        return false;
	      }
	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);
	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          return true;
	        }
	        return false;
	      }
	    case SuspenseComponent:
	      {
	        if (enableSuspenseServerRenderer) {
	          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
	          if (suspenseInstance !== null) {
	            // Downgrade the tag to a dehydrated component until we've hydrated it.
	            fiber.tag = DehydratedSuspenseComponent;
	            fiber.stateNode = suspenseInstance;
	            return true;
	          }
	        }
	        return false;
	      }
	    default:
	      return false;
	  }
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }
	  var nextInstance = nextHydratableInstance;
	  if (!nextInstance) {
	    // Nothing to hydrate. Make it an insertion.
	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }
	  var firstAttemptedInstance = nextInstance;
	  if (!tryHydrate(fiber, nextInstance)) {
	    // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.
	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    }
	    // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.
	    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
	  }
	  hydrationParentFiber = fiber;
	  nextHydratableInstance = getFirstHydratableChild(nextInstance);
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
	  if (!supportsHydration) {
	    invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var instance = fiber.stateNode;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
	  // TODO: Type this specific to this type of component.
	  fiber.updateQueue = updatePayload;
	  // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.
	  if (updatePayload !== null) {
	    return true;
	  }
	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {
	  if (!supportsHydration) {
	    invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
	  {
	    if (shouldUpdate) {
	      // We assume that prepareToHydrateHostTextInstance is called in a context where the
	      // hydration parent is the parent host component of this host text.
	      var returnFiber = hydrationParentFiber;
	      if (returnFiber !== null) {
	        switch (returnFiber.tag) {
	          case HostRoot:
	            {
	              var parentContainer = returnFiber.stateNode.containerInfo;
	              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
	              break;
	            }
	          case HostComponent:
	            {
	              var parentType = returnFiber.type;
	              var parentProps = returnFiber.memoizedProps;
	              var parentInstance = returnFiber.stateNode;
	              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
	              break;
	            }
	        }
	      }
	    }
	  }
	  return shouldUpdate;
	}

	function skipPastDehydratedSuspenseInstance(fiber) {
	  if (!supportsHydration) {
	    invariant(false, 'Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
	  }
	  var suspenseInstance = fiber.stateNode;
	  !suspenseInstance ? invariant(false, 'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;
	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== DehydratedSuspenseComponent) {
	    parent = parent.return;
	  }
	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {
	  if (!supportsHydration) {
	    return false;
	  }
	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }
	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  }

	  var type = fiber.type;

	  // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them.
	  // TODO: Better heuristic.
	  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
	    var nextInstance = nextHydratableInstance;
	    while (nextInstance) {
	      deleteHydratableInstance(fiber, nextInstance);
	      nextInstance = getNextHydratableSibling(nextInstance);
	    }
	  }

	  popToNextHostParent(fiber);
	  nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  return true;
	}

	function resetHydrationState() {
	  if (!supportsHydration) {
	    return;
	  }

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

	var didReceiveUpdate = false;

	var didWarnAboutBadClass = void 0;
	var didWarnAboutContextTypeOnFunctionComponent = void 0;
	var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
	var didWarnAboutFunctionRefs = void 0;
	var didWarnAboutReassigningProps = void 0;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	  didWarnAboutReassigningProps = false;
	}

	function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
	  if (current$$1 === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.

	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
	  }
	}

	function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime);
	  // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their their
	  // identity matches.
	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	}

	function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens after the first render suspends.
	  // We'll need to figure out if this is fine or can cause issues.

	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;
	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  var render = Component.render;
	  var ref = workInProgress.ref;

	  // The rest is a fork of updateFunctionComponent
	  var nextChildren = void 0;
	  prepareToReadContext(workInProgress, renderExpirationTime);
	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
	    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	      // Only double-render components with Hooks
	      if (workInProgress.memoizedState !== null) {
	        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
	      }
	    }
	    setCurrentPhase(null);
	  }

	  if (current$$1 !== null && !didReceiveUpdate) {
	    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  }

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  if (current$$1 === null) {
	    var type = Component.type;
	    if (isSimpleFunctionComponent(type) && Component.compare === null &&
	    // SimpleMemoComponent codepath doesn't resolve outer props either.
	    Component.defaultProps === undefined) {
	      // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.
	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = type;
	      {
	        validateFunctionComponentInDev(workInProgress, type);
	      }
	      return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
	    }
	    {
	      var innerPropTypes = type.propTypes;
	      if (innerPropTypes) {
	        // Inner memo component props aren't currently validated in createElement.
	        // We could move it there, but we'd still need this for lazy code path.
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(type), getCurrentFiberStackInDev);
	      }
	    }
	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }
	  {
	    var _type = Component.type;
	    var _innerPropTypes = _type.propTypes;
	    if (_innerPropTypes) {
	      // Inner memo component props aren't currently validated in createElement.
	      // We could move it there, but we'd still need this for lazy code path.
	      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
	      'prop', getComponentName(_type), getCurrentFiberStackInDev);
	    }
	  }
	  var currentChild = current$$1.child; // This is always exactly one child
	  if (updateExpirationTime < renderExpirationTime) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps;
	    // Default to shallow comparison
	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;
	    if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	    }
	  }
	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens when the inner render suspends.
	  // We'll need to figure out if this is fine or can cause issues.

	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var outerMemoType = workInProgress.elementType;
	      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
	        // We warn when you define propTypes on lazy()
	        // so let's just skip over it to find memo() outer wrapper.
	        // Inner props for memo are validated later.
	        outerMemoType = refineResolvedLazyComponent(outerMemoType);
	      }
	      var outerPropTypes = outerMemoType && outerMemoType.propTypes;
	      if (outerPropTypes) {
	        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
	        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
	      }
	      // Inner propTypes will be validated in the function component path.
	    }
	  }
	  if (current$$1 !== null) {
	    var prevProps = current$$1.memoizedProps;
	    if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
	      didReceiveUpdate = false;
	      if (updateExpirationTime < renderExpirationTime) {
	        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	      }
	    }
	  }
	  return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
	}

	function updateFragment(current$$1, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMode(current$$1, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
	  if (enableProfilerTimer) {
	    workInProgress.effectTag |= Update;
	  }
	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markRef(current$$1, workInProgress) {
	  var ref = workInProgress.ref;
	  if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.effectTag |= Ref;
	  }
	}

	function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;
	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	  var context = getMaskedContext(workInProgress, unmaskedContext);

	  var nextChildren = void 0;
	  prepareToReadContext(workInProgress, renderExpirationTime);
	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
	    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	      // Only double-render components with Hooks
	      if (workInProgress.memoizedState !== null) {
	        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
	      }
	    }
	    setCurrentPhase(null);
	  }

	  if (current$$1 !== null && !didReceiveUpdate) {
	    bailoutHooks(current$$1, workInProgress, renderExpirationTime);
	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  }

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;
	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.
	  var hasContext = void 0;
	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  var instance = workInProgress.stateNode;
	  var shouldUpdate = void 0;
	  if (instance === null) {
	    if (current$$1 !== null) {
	      // An class component without an instance only mounts if it suspended
	      // inside a non- concurrent tree, in an inconsistent state. We want to
	      // tree it like a new mount, even though an empty version of it already
	      // committed. Disconnect the alternate pointers.
	      current$$1.alternate = null;
	      workInProgress.alternate = null;
	      // Since this is conceptually a new fiber, schedule a Placement effect
	      workInProgress.effectTag |= Placement;
	    }
	    // In the initial pass we might need to construct the instance.
	    constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	    shouldUpdate = true;
	  } else if (current$$1 === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  } else {
	    shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
	  }
	  var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
	  {
	    var inst = workInProgress.stateNode;
	    if (inst.props !== nextProps) {
	      !didWarnAboutReassigningProps ? warning$1(false, 'It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component') : void 0;
	      didWarnAboutReassigningProps = true;
	    }
	  }
	  return nextUnitOfWork;
	}

	function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current$$1, workInProgress);

	  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  }

	  var instance = workInProgress.stateNode;

	  // Rerender
	  ReactCurrentOwner$3.current = workInProgress;
	  var nextChildren = void 0;
	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFrom catch is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    if (enableProfilerTimer) {
	      stopProfilerTimerIfRunning(workInProgress);
	    }
	  } else {
	    {
	      setCurrentPhase('render');
	      nextChildren = instance.render();
	      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	        instance.render();
	      }
	      setCurrentPhase(null);
	    }
	  }

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  if (current$$1 !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  }

	  // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.
	  workInProgress.memoizedState = instance.state;

	  // The context might have changed so we need to recalculate it.
	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;
	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }
	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
	  pushHostRootContext(workInProgress);
	  var updateQueue = workInProgress.updateQueue;
	  !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState !== null ? prevState.element : null;
	  processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
	  var nextState = workInProgress.memoizedState;
	  // Caution: React DevTools currently depends on this property
	  // being called "element".
	  var nextChildren = nextState.element;
	  if (nextChildren === prevChildren) {
	    // If the state is the same as before, that's a bailout because we had
	    // no work that expires at this time.
	    resetHydrationState();
	    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	  }
	  var root = workInProgress.stateNode;
	  if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
	    // If we don't have any current children this might be the first pass.
	    // We always try to hydrate. If this isn't a hydration pass there won't
	    // be any children to hydrate which is effectively the same thing as
	    // not hydrating.

	    // This is a bit of a hack. We track the host root as a placement to
	    // know that we're currently in a mounting state. That way isMounted
	    // works as expected. We must reset this before committing.
	    // TODO: Delete this when we delete isMounted and findDOMNode.
	    workInProgress.effectTag |= Placement;

	    // Ensure that children mount into this root without tracking
	    // side-effects. This ensures that we don't store Placement effects on
	    // nodes that will be hydrated.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    // Otherwise reset hydration state in case we aborted and resumed another
	    // root.
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	    resetHydrationState();
	  }
	  return workInProgress.child;
	}

	function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
	  pushHostContext(workInProgress);

	  if (current$$1 === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;

	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also have access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.effectTag |= ContentReset;
	  }

	  markRef(current$$1, workInProgress);

	  // Check the host config to see if the children are offscreen/hidden.
	  if (renderExpirationTime !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {
	    // Schedule this fiber to re-render at offscreen priority. Then bailout.
	    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
	    return null;
	  }

	  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateHostText(current$$1, workInProgress) {
	  if (current$$1 === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }
	  // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.
	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
	  if (_current !== null) {
	    // An lazy component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null;
	    // Since this is conceptually a new fiber, schedule a Placement effect
	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  // We can't start a User Timing measurement with correct label yet.
	  // Cancel and resume right after we know the tag.
	  cancelWorkTimer(workInProgress);
	  var Component = readLazyComponentType(elementType);
	  // Store the unwrapped component in the type.
	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  startWorkTimer(workInProgress);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child = void 0;
	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        {
	          validateFunctionComponentInDev(workInProgress, Component);
	        }
	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }
	    case ClassComponent:
	      {
	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }
	    case ForwardRef:
	      {
	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        break;
	      }
	    case MemoComponent:
	      {
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = Component.propTypes;
	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
	              'prop', getComponentName(Component), getCurrentFiberStackInDev);
	            }
	          }
	        }
	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        updateExpirationTime, renderExpirationTime);
	        break;
	      }
	    default:
	      {
	        var hint = '';
	        {
	          if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
	            hint = ' Did you wrap a component in React.lazy() more than once?';
	          }
	        }
	        // This message intentionally doesn't mention ForwardRef or MemoComponent
	        // because the fact that it's a separate type of work is an
	        // implementation detail.
	        invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Lazy element type must resolve to a class or function.%s', Component, hint);
	      }
	  }
	  return child;
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
	  if (_current !== null) {
	    // An incomplete component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null;
	    // Since this is conceptually a new fiber, schedule a Placement effect
	    workInProgress.effectTag |= Placement;
	  }

	  // Promote the fiber to a class and try rendering again.
	  workInProgress.tag = ClassComponent;

	  // The rest of this function is a fork of `updateClassComponent`

	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.
	  var hasContext = void 0;
	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);

	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
	  if (_current !== null) {
	    // An indeterminate component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null;
	    // Since this is conceptually a new fiber, schedule a Placement effect
	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	  var context = getMaskedContext(workInProgress, unmaskedContext);

	  prepareToReadContext(workInProgress, renderExpirationTime);

	  var value = void 0;

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    ReactCurrentOwner$3.current = workInProgress;
	    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
	  }
	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;

	  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    // Proceed under the assumption that this is a class instance
	    workInProgress.tag = ClassComponent;

	    // Throw out any hooks that were used.
	    resetHooks();

	    // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.
	    var hasContext = false;
	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

	    var getDerivedStateFromProps = Component.getDerivedStateFromProps;
	    if (typeof getDerivedStateFromProps === 'function') {
	      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
	    }

	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;
	    {
	      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	        // Only double-render components with Hooks
	        if (workInProgress.memoizedState !== null) {
	          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
	        }
	      }
	    }
	    reconcileChildren(null, workInProgress, value, renderExpirationTime);
	    {
	      validateFunctionComponentInDev(workInProgress, Component);
	    }
	    return workInProgress.child;
	  }
	}

	function validateFunctionComponentInDev(workInProgress, Component) {
	  if (Component) {
	    !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	  if (workInProgress.ref !== null) {
	    var info = '';
	    var ownerName = getCurrentFiberOwnerNameInDevOrNull();
	    if (ownerName) {
	      info += '\n\nCheck the render method of `' + ownerName + '`.';
	    }

	    var warningKey = ownerName || workInProgress._debugID || '';
	    var debugSource = workInProgress._debugSource;
	    if (debugSource) {
	      warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	    }
	    if (!didWarnAboutFunctionRefs[warningKey]) {
	      didWarnAboutFunctionRefs[warningKey] = true;
	      warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
	    }
	  }

	  if (typeof Component.getDerivedStateFromProps === 'function') {
	    var componentName = getComponentName(Component) || 'Unknown';

	    if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {
	      warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', componentName);
	      didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;
	    }
	  }

	  if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	    var _componentName = getComponentName(Component) || 'Unknown';

	    if (!didWarnAboutContextTypeOnFunctionComponent[_componentName]) {
	      warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName);
	      didWarnAboutContextTypeOnFunctionComponent[_componentName] = true;
	    }
	  }
	}

	function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
	  var mode = workInProgress.mode;
	  var nextProps = workInProgress.pendingProps;

	  // We should attempt to render the primary children unless this boundary
	  // already suspended during this render (`alreadyCaptured` is true).
	  var nextState = workInProgress.memoizedState;

	  var nextDidTimeout = void 0;
	  if ((workInProgress.effectTag & DidCapture) === NoEffect) {
	    // This is the first attempt.
	    nextState = null;
	    nextDidTimeout = false;
	  } else {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    nextState = {
	      timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
	    };
	    nextDidTimeout = true;
	    workInProgress.effectTag &= ~DidCapture;
	  }

	  // This next part is a bit confusing. If the children timeout, we switch to
	  // showing the fallback children in place of the "primary" children.
	  // However, we don't want to delete the primary children because then their
	  // state will be lost (both the React state and the host state, e.g.
	  // uncontrolled form inputs). Instead we keep them mounted and hide them.
	  // Both the fallback children AND the primary children are rendered at the
	  // same time. Once the primary children are un-suspended, we can delete
	  // the fallback children — don't need to preserve their state.
	  //
	  // The two sets of children are siblings in the host environment, but
	  // semantically, for purposes of reconciliation, they are two separate sets.
	  // So we store them using two fragment fibers.
	  //
	  // However, we want to avoid allocating extra fibers for every placeholder.
	  // They're only necessary when the children time out, because that's the
	  // only time when both sets are mounted.
	  //
	  // So, the extra fragment fibers are only used if the children time out.
	  // Otherwise, we render the primary children directly. This requires some
	  // custom reconciliation logic to preserve the state of the primary
	  // children. It's essentially a very basic form of re-parenting.

	  // `child` points to the child fiber. In the normal case, this is the first
	  // fiber of the primary children set. In the timed-out case, it's a
	  // a fragment fiber containing the primary children.
	  var child = void 0;
	  // `next` points to the next fiber React should render. In the normal case,
	  // it's the same as `child`: the first fiber of the primary children set.
	  // In the timed-out case, it's a fragment fiber containing the *fallback*
	  // children -- we skip over the primary children entirely.
	  var next = void 0;
	  if (current$$1 === null) {
	    if (enableSuspenseServerRenderer) {
	      // If we're currently hydrating, try to hydrate this boundary.
	      // But only if this has a fallback.
	      if (nextProps.fallback !== undefined) {
	        tryToClaimNextHydratableInstance(workInProgress);
	        // This could've changed the tag if this was a dehydrated suspense component.
	        if (workInProgress.tag === DehydratedSuspenseComponent) {
	          return updateDehydratedSuspenseComponent(null, workInProgress, renderExpirationTime);
	        }
	      }
	    }

	    // This is the initial mount. This branch is pretty simple because there's
	    // no previous state that needs to be preserved.
	    if (nextDidTimeout) {
	      // Mount separate fragments for primary and fallback children.
	      var nextFallbackChildren = nextProps.fallback;
	      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);

	      if ((workInProgress.mode & ConcurrentMode) === NoContext) {
	        // Outside of concurrent mode, we commit the effects from the
	        var progressedState = workInProgress.memoizedState;
	        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
	        primaryChildFragment.child = progressedPrimaryChild;
	      }

	      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
	      primaryChildFragment.sibling = fallbackChildFragment;
	      child = primaryChildFragment;
	      // Skip the primary children, and continue working on the
	      // fallback children.
	      next = fallbackChildFragment;
	      child.return = next.return = workInProgress;
	    } else {
	      // Mount the primary children without an intermediate fragment fiber.
	      var nextPrimaryChildren = nextProps.children;
	      child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
	    }
	  } else {
	    // This is an update. This branch is more complicated because we need to
	    // ensure the state of the primary children is preserved.
	    var prevState = current$$1.memoizedState;
	    var prevDidTimeout = prevState !== null;
	    if (prevDidTimeout) {
	      // The current tree already timed out. That means each child set is
	      var currentPrimaryChildFragment = current$$1.child;
	      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	      if (nextDidTimeout) {
	        // Still timed out. Reuse the current primary children by cloning
	        // its fragment. We're going to skip over these entirely.
	        var _nextFallbackChildren = nextProps.fallback;
	        var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

	        if ((workInProgress.mode & ConcurrentMode) === NoContext) {
	          // Outside of concurrent mode, we commit the effects from the
	          var _progressedState = workInProgress.memoizedState;
	          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;
	          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
	            _primaryChildFragment.child = _progressedPrimaryChild;
	          }
	        }

	        // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.
	        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var treeBaseDuration = 0;
	          var hiddenChild = _primaryChildFragment.child;
	          while (hiddenChild !== null) {
	            treeBaseDuration += hiddenChild.treeBaseDuration;
	            hiddenChild = hiddenChild.sibling;
	          }
	          _primaryChildFragment.treeBaseDuration = treeBaseDuration;
	        }

	        // Clone the fallback child fragment, too. These we'll continue
	        // working on.
	        var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);
	        child = _primaryChildFragment;
	        _primaryChildFragment.childExpirationTime = NoWork;
	        // Skip the primary children, and continue working on the
	        // fallback children.
	        next = _fallbackChildFragment;
	        child.return = next.return = workInProgress;
	      } else {
	        // No longer suspended. Switch back to showing the primary children,
	        // and remove the intermediate fragment fiber.
	        var _nextPrimaryChildren = nextProps.children;
	        var currentPrimaryChild = currentPrimaryChildFragment.child;
	        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime);

	        // If this render doesn't suspend, we need to delete the fallback
	        // children. Wait until the complete phase, after we've confirmed the
	        // fallback is no longer needed.
	        // TODO: Would it be better to store the fallback fragment on
	        // the stateNode?

	        // Continue rendering the children, like we normally do.
	        child = next = primaryChild;
	      }
	    } else {
	      // The current tree has not already timed out. That means the primary
	      // children are not wrapped in a fragment fiber.
	      var _currentPrimaryChild = current$$1.child;
	      if (nextDidTimeout) {
	        // Timed out. Wrap the children in a fragment fiber to keep them
	        // separate from the fallback children.
	        var _nextFallbackChildren2 = nextProps.fallback;
	        var _primaryChildFragment2 = createFiberFromFragment(
	        // It shouldn't matter what the pending props are because we aren't
	        // going to render this fragment.
	        null, mode, NoWork, null);
	        _primaryChildFragment2.child = _currentPrimaryChild;

	        // Even though we're creating a new fiber, there are no new children,
	        // because we're reusing an already mounted tree. So we don't need to
	        // schedule a placement.
	        // primaryChildFragment.effectTag |= Placement;

	        if ((workInProgress.mode & ConcurrentMode) === NoContext) {
	          // Outside of concurrent mode, we commit the effects from the
	          var _progressedState2 = workInProgress.memoizedState;
	          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;
	          _primaryChildFragment2.child = _progressedPrimaryChild2;
	        }

	        // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.
	        if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration = 0;
	          var _hiddenChild = _primaryChildFragment2.child;
	          while (_hiddenChild !== null) {
	            _treeBaseDuration += _hiddenChild.treeBaseDuration;
	            _hiddenChild = _hiddenChild.sibling;
	          }
	          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
	        }

	        // Create a fragment from the fallback children, too.
	        var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);
	        _fallbackChildFragment2.effectTag |= Placement;
	        child = _primaryChildFragment2;
	        _primaryChildFragment2.childExpirationTime = NoWork;
	        // Skip the primary children, and continue working on the
	        // fallback children.
	        next = _fallbackChildFragment2;
	        child.return = next.return = workInProgress;
	      } else {
	        // Still haven't timed out.  Continue rendering the children, like we
	        // normally do.
	        var _nextPrimaryChildren2 = nextProps.children;
	        next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
	      }
	    }
	    workInProgress.stateNode = current$$1.stateNode;
	  }

	  workInProgress.memoizedState = nextState;
	  workInProgress.child = child;
	  return next;
	}

	function updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
	  if (current$$1 === null) {
	    // During the first pass, we'll bail out and not drill into the children.
	    // Instead, we'll leave the content in place and try to hydrate it later.
	    workInProgress.expirationTime = Never;
	    return null;
	  }
	  // We use childExpirationTime to indicate that a child might depend on context, so if
	  // any context has changed, we need to treat is as if the input might have changed.
	  var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;
	  if (didReceiveUpdate || hasContextChanged$$1) {
	    // This boundary has changed since the first render. This means that we are now unable to
	    // hydrate it. We might still be able to hydrate it using an earlier expiration time but
	    // during this render we can't. Instead, we're going to delete the whole subtree and
	    // instead inject a new real Suspense boundary to take its place, which may render content
	    // or fallback. The real Suspense boundary will suspend for a while so we have some time
	    // to ensure it can produce real content, but all state and pending events will be lost.

	    // Detach from the current dehydrated boundary.
	    current$$1.alternate = null;
	    workInProgress.alternate = null;

	    // Insert a deletion in the effect list.
	    var returnFiber = workInProgress.return;
	    !(returnFiber !== null) ? invariant(false, 'Suspense boundaries are never on the root. This is probably a bug in React.') : void 0;
	    var last = returnFiber.lastEffect;
	    if (last !== null) {
	      last.nextEffect = current$$1;
	      returnFiber.lastEffect = current$$1;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
	    }
	    current$$1.nextEffect = null;
	    current$$1.effectTag = Deletion;

	    // Upgrade this work in progress to a real Suspense component.
	    workInProgress.tag = SuspenseComponent;
	    workInProgress.stateNode = null;
	    workInProgress.memoizedState = null;
	    // This is now an insertion.
	    workInProgress.effectTag |= Placement;
	    // Retry as a real Suspense component.
	    return updateSuspenseComponent(null, workInProgress, renderExpirationTime);
	  }
	  if ((workInProgress.effectTag & DidCapture) === NoEffect) {
	    // This is the first attempt.
	    reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);
	    var nextProps = workInProgress.pendingProps;
	    var nextChildren = nextProps.children;
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	    return workInProgress.child;
	  } else {
	    // Something suspended. Leave the existing children in place.
	    // TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?
	    workInProgress.child = null;
	    return null;
	  }
	}

	function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;
	  if (current$$1 === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
	  }
	  return workInProgress.child;
	}

	function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;

	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;

	  var newValue = newProps.value;

	  {
	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
	    }
	  }

	  pushProvider(workInProgress, newValue);

	  if (oldProps !== null) {
	    var oldValue = oldProps.value;
	    var changedBits = calculateChangedBits(context, newValue, oldValue);
	    if (changedBits === 0) {
	      // No change. Bailout early if children are the same.
	      if (oldProps.children === newProps.children && !hasContextChanged()) {
	        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	      }
	    } else {
	      // The context value changed. Search for matching consumers and schedule
	      // them to update.
	      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
	  var context = workInProgress.type;
	  // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.
	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;
	          warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }
	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var newValue = readContext(context, newProps.unstable_observedBits);
	  var newChildren = void 0;
	  {
	    ReactCurrentOwner$3.current = workInProgress;
	    setCurrentPhase('render');
	    newChildren = render(newValue);
	    setCurrentPhase(null);
	  }

	  // React DevTools reads this flag.
	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markWorkInProgressReceivedUpdate() {
	  didReceiveUpdate = true;
	}

	function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
	  cancelWorkTimer(workInProgress);

	  if (current$$1 !== null) {
	    // Reuse previous context list
	    workInProgress.contextDependencies = current$$1.contextDependencies;
	  }

	  if (enableProfilerTimer) {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning(workInProgress);
	  }

	  // Check if the children have any pending work.
	  var childExpirationTime = workInProgress.childExpirationTime;
	  if (childExpirationTime < renderExpirationTime) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    return null;
	  } else {
	    // This fiber doesn't have work, but its subtree does. Clone the child
	    // fibers and continue.
	    cloneChildFibers(current$$1, workInProgress);
	    return workInProgress.child;
	  }
	}

	function beginWork(current$$1, workInProgress, renderExpirationTime) {
	  var updateExpirationTime = workInProgress.expirationTime;

	  if (current$$1 !== null) {
	    var oldProps = current$$1.memoizedProps;
	    var newProps = workInProgress.pendingProps;

	    if (oldProps !== newProps || hasContextChanged()) {
	      // If props or context changed, mark the fiber as having performed work.
	      // This may be unset if the props are determined to be equal later (memo).
	      didReceiveUpdate = true;
	    } else if (updateExpirationTime < renderExpirationTime) {
	      didReceiveUpdate = false;
	      // This fiber does not have any pending work. Bailout without entering
	      // the begin phase. There's still some bookkeeping we that needs to be done
	      // in this optimized path, mostly pushing stuff onto the stack.
	      switch (workInProgress.tag) {
	        case HostRoot:
	          pushHostRootContext(workInProgress);
	          resetHydrationState();
	          break;
	        case HostComponent:
	          pushHostContext(workInProgress);
	          break;
	        case ClassComponent:
	          {
	            var Component = workInProgress.type;
	            if (isContextProvider(Component)) {
	              pushContextProvider(workInProgress);
	            }
	            break;
	          }
	        case HostPortal:
	          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	          break;
	        case ContextProvider:
	          {
	            var newValue = workInProgress.memoizedProps.value;
	            pushProvider(workInProgress, newValue);
	            break;
	          }
	        case Profiler:
	          if (enableProfilerTimer) {
	            workInProgress.effectTag |= Update;
	          }
	          break;
	        case SuspenseComponent:
	          {
	            var state = workInProgress.memoizedState;
	            var didTimeout = state !== null;
	            if (didTimeout) {
	              // If this boundary is currently timed out, we need to decide
	              // whether to retry the primary children, or to skip over it and
	              // go straight to the fallback. Check the priority of the primary
	              var primaryChildFragment = workInProgress.child;
	              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
	              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
	                // The primary children have pending work. Use the normal path
	                // to attempt to render the primary children again.
	                return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
	              } else {
	                // The primary children do not have pending work with sufficient
	                // priority. Bailout.
	                var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	                if (child !== null) {
	                  // The fallback children have pending work. Skip over the
	                  // primary children and work on the fallback.
	                  return child.sibling;
	                } else {
	                  return null;
	                }
	              }
	            }
	            break;
	          }
	        case DehydratedSuspenseComponent:
	          {
	            if (enableSuspenseServerRenderer) {
	              // We know that this component will suspend again because if it has
	              // been unsuspended it has committed as a regular Suspense component.
	              // If it needs to be retried, it should have work scheduled on it.
	              workInProgress.effectTag |= DidCapture;
	              break;
	            }
	          }
	      }
	      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
	    }
	  } else {
	    didReceiveUpdate = false;
	  }

	  // Before entering the begin phase, clear the expiration time.
	  workInProgress.expirationTime = NoWork;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime);
	      }
	    case LazyComponent:
	      {
	        var _elementType = workInProgress.elementType;
	        return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime);
	      }
	    case FunctionComponent:
	      {
	        var _Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
	        return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
	      }
	    case ClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;
	        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
	        return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
	      }
	    case HostRoot:
	      return updateHostRoot(current$$1, workInProgress, renderExpirationTime);
	    case HostComponent:
	      return updateHostComponent(current$$1, workInProgress, renderExpirationTime);
	    case HostText:
	      return updateHostText(current$$1, workInProgress);
	    case SuspenseComponent:
	      return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
	    case HostPortal:
	      return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);
	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;
	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
	        return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
	      }
	    case Fragment:
	      return updateFragment(current$$1, workInProgress, renderExpirationTime);
	    case Mode:
	      return updateMode(current$$1, workInProgress, renderExpirationTime);
	    case Profiler:
	      return updateProfiler(current$$1, workInProgress, renderExpirationTime);
	    case ContextProvider:
	      return updateContextProvider(current$$1, workInProgress, renderExpirationTime);
	    case ContextConsumer:
	      return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);
	    case MemoComponent:
	      {
	        var _type2 = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps;
	        // Resolve outer props first, then resolve inner props.
	        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = _type2.propTypes;
	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
	              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
	            }
	          }
	        }
	        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
	        return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
	      }
	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
	      }
	    case IncompleteClassComponent:
	      {
	        var _Component3 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;
	        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
	        return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
	      }
	    case DehydratedSuspenseComponent:
	      {
	        if (enableSuspenseServerRenderer) {
	          return updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
	        }
	        break;
	      }
	  }
	  invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
	}

	var valueCursor = createCursor(null);

	var rendererSigil = void 0;
	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastContextWithAllBitsObserved = null;

	var isDisallowedContextReadInDEV = false;

	function resetContextDependences() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}

	function enterDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = true;
	  }
	}

	function exitDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}

	function pushProvider(providerFiber, nextValue) {
	  var context = providerFiber.type._context;

	  if (isPrimaryRenderer) {
	    push(valueCursor, context._currentValue, providerFiber);

	    context._currentValue = nextValue;
	    {
	      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
	      context._currentRenderer = rendererSigil;
	    }
	  } else {
	    push(valueCursor, context._currentValue2, providerFiber);

	    context._currentValue2 = nextValue;
	    {
	      !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
	      context._currentRenderer2 = rendererSigil;
	    }
	  }
	}

	function popProvider(providerFiber) {
	  var currentValue = valueCursor.current;

	  pop(valueCursor, providerFiber);

	  var context = providerFiber.type._context;
	  if (isPrimaryRenderer) {
	    context._currentValue = currentValue;
	  } else {
	    context._currentValue2 = currentValue;
	  }
	}

	function calculateChangedBits(context, newValue, oldValue) {
	  if (is(oldValue, newValue)) {
	    // No change
	    return 0;
	  } else {
	    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;

	    {
	      !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
	    }
	    return changedBits | 0;
	  }
	}

	function scheduleWorkOnParentPath(parent, renderExpirationTime) {
	  // Update the child expiration time of all the ancestors, including
	  // the alternates.
	  var node = parent;
	  while (node !== null) {
	    var alternate = node.alternate;
	    if (node.childExpirationTime < renderExpirationTime) {
	      node.childExpirationTime = renderExpirationTime;
	      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	        alternate.childExpirationTime = renderExpirationTime;
	      }
	    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	      alternate.childExpirationTime = renderExpirationTime;
	    } else {
	      // Neither alternate was updated, which means the rest of the
	      // ancestor path already has sufficient priority.
	      break;
	    }
	    node = node.return;
	  }
	}

	function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
	  var fiber = workInProgress.child;
	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }
	  while (fiber !== null) {
	    var nextFiber = void 0;

	    // Visit this fiber.
	    var list = fiber.contextDependencies;
	    if (list !== null) {
	      nextFiber = fiber.child;

	      var dependency = list.first;
	      while (dependency !== null) {
	        // Check if the context matches.
	        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
	          // Match! Schedule an update on this fiber.

	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var update = createUpdate(renderExpirationTime);
	            update.tag = ForceUpdate;
	            // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.
	            enqueueUpdate(fiber, update);
	          }

	          if (fiber.expirationTime < renderExpirationTime) {
	            fiber.expirationTime = renderExpirationTime;
	          }
	          var alternate = fiber.alternate;
	          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	            alternate.expirationTime = renderExpirationTime;
	          }

	          scheduleWorkOnParentPath(fiber.return, renderExpirationTime);

	          // Mark the expiration time on the list, too.
	          if (list.expirationTime < renderExpirationTime) {
	            list.expirationTime = renderExpirationTime;
	          }

	          // Since we already found a match, we can stop traversing the
	          // dependency list.
	          break;
	        }
	        dependency = dependency.next;
	      }
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedSuspenseComponent) {
	      // If a dehydrated suspense component is in this subtree, we don't know
	      // if it will have any context consumers in it. The best we can do is
	      // mark it as having updates on its children.
	      if (fiber.expirationTime < renderExpirationTime) {
	        fiber.expirationTime = renderExpirationTime;
	      }
	      var _alternate = fiber.alternate;
	      if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
	        _alternate.expirationTime = renderExpirationTime;
	      }
	      // This is intentionally passing this fiber as the parent
	      // because we want to schedule this fiber as having work
	      // on its children. We'll use the childExpirationTime on
	      // this fiber to indicate that a context has changed.
	      scheduleWorkOnParentPath(fiber, renderExpirationTime);
	      nextFiber = fiber.sibling;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;
	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }
	        var sibling = nextFiber.sibling;
	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        }
	        // No more siblings. Traverse up.
	        nextFiber = nextFiber.return;
	      }
	    }
	    fiber = nextFiber;
	  }
	}

	function prepareToReadContext(workInProgress, renderExpirationTime) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;

	  var currentDependencies = workInProgress.contextDependencies;
	  if (currentDependencies !== null && currentDependencies.expirationTime >= renderExpirationTime) {
	    // Context list has a pending update. Mark that this fiber performed work.
	    markWorkInProgressReceivedUpdate();
	  }

	  // Reset the work-in-progress list
	  workInProgress.contextDependencies = null;
	}

	function readContext(context, observedBits) {
	  {
	    // This warning would fire if you read context inside a Hook like useMemo.
	    // Unlike the class check below, it's not enforced in production for perf.
	    !!isDisallowedContextReadInDEV ? warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().') : void 0;
	  }

	  if (lastContextWithAllBitsObserved === context) {
	    // Nothing to do. We already observe everything in this context.
	  } else if (observedBits === false || observedBits === 0) {
	    // Do not observe any updates.
	  } else {
	    var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.
	    if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
	      // Observe all updates.
	      lastContextWithAllBitsObserved = context;
	      resolvedObservedBits = maxSigned31BitInt;
	    } else {
	      resolvedObservedBits = observedBits;
	    }

	    var contextItem = {
	      context: context,
	      observedBits: resolvedObservedBits,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      !(currentlyRenderingFiber !== null) ? invariant(false, 'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().') : void 0;

	      // This is the first dependency for this component. Create a new list.
	      lastContextDependency = contextItem;
	      currentlyRenderingFiber.contextDependencies = {
	        first: contextItem,
	        expirationTime: NoWork
	      };
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }
	  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
	}

	// UpdateQueue is a linked list of prioritized updates.
	//
	// Like fibers, update queues come in pairs: a current queue, which represents
	// the visible state of the screen, and a work-in-progress queue, which can be
	// mutated and processed asynchronously before it is committed — a form of
	// double buffering. If a work-in-progress render is discarded before finishing,
	// we create a new work-in-progress by cloning the current queue.
	//
	// Both queues share a persistent, singly-linked list structure. To schedule an
	// update, we append it to the end of both queues. Each queue maintains a
	// pointer to first update in the persistent list that hasn't been processed.
	// The work-in-progress pointer always has a position equal to or greater than
	// the current queue, since we always work on that one. The current queue's
	// pointer is only updated during the commit phase, when we swap in the
	// work-in-progress.
	//
	// For example:
	//
	//   Current pointer:           A - B - C - D - E - F
	//   Work-in-progress pointer:              D - E - F
	//                                          ^
	//                                          The work-in-progress queue has
	//                                          processed more updates than current.
	//
	// The reason we append to both queues is because otherwise we might drop
	// updates without ever processing them. For example, if we only add updates to
	// the work-in-progress queue, some updates could be lost whenever a work-in
	// -progress render restarts by cloning from current. Similarly, if we only add
	// updates to the current queue, the updates will be lost whenever an already
	// in-progress queue commits and swaps with the current queue. However, by
	// adding to both queues, we guarantee that the update will be part of the next
	// work-in-progress. (And because the work-in-progress queue becomes the
	// current queue once it commits, there's no danger of applying the same
	// update twice.)
	//
	// Prioritization
	// --------------
	//
	// Updates are not sorted by priority, but by insertion; new updates are always
	// appended to the end of the list.
	//
	// The priority is still important, though. When processing the update queue
	// during the render phase, only the updates with sufficient priority are
	// included in the result. If we skip an update because it has insufficient
	// priority, it remains in the queue to be processed later, during a lower
	// priority render. Crucially, all updates subsequent to a skipped update also
	// remain in the queue *regardless of their priority*. That means high priority
	// updates are sometimes processed twice, at two separate priorities. We also
	// keep track of a base state, that represents the state before the first
	// update in the queue is applied.
	//
	// For example:
	//
	//   Given a base state of '', and the following queue of updates
	//
	//     A1 - B2 - C1 - D2
	//
	//   where the number indicates the priority, and the update is applied to the
	//   previous state by appending a letter, React will process these updates as
	//   two separate renders, one per distinct priority level:
	//
	//   First render, at priority 1:
	//     Base state: ''
	//     Updates: [A1, C1]
	//     Result state: 'AC'
	//
	//   Second render, at priority 2:
	//     Base state: 'A'            <-  The base state does not include C1,
	//                                    because B2 was skipped.
	//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
	//     Result state: 'ABCD'
	//
	// Because we process updates in insertion order, and rebase high priority
	// updates when preceding updates are skipped, the final result is deterministic
	// regardless of priority. Intermediate state may vary according to system
	// resources, but the final state is always the same.

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3;

	// Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.
	var hasForceUpdate = false;

	var didWarnUpdateInsideUpdate = void 0;
	var currentlyProcessingQueue = void 0;
	var resetCurrentlyProcessingQueue = void 0;
	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	  resetCurrentlyProcessingQueue = function () {
	    currentlyProcessingQueue = null;
	  };
	}

	function createUpdateQueue(baseState) {
	  var queue = {
	    baseState: baseState,
	    firstUpdate: null,
	    lastUpdate: null,
	    firstCapturedUpdate: null,
	    lastCapturedUpdate: null,
	    firstEffect: null,
	    lastEffect: null,
	    firstCapturedEffect: null,
	    lastCapturedEffect: null
	  };
	  return queue;
	}

	function cloneUpdateQueue(currentQueue) {
	  var queue = {
	    baseState: currentQueue.baseState,
	    firstUpdate: currentQueue.firstUpdate,
	    lastUpdate: currentQueue.lastUpdate,

	    // TODO: With resuming, if we bail out and resuse the child tree, we should
	    // keep these effects.
	    firstCapturedUpdate: null,
	    lastCapturedUpdate: null,

	    firstEffect: null,
	    lastEffect: null,

	    firstCapturedEffect: null,
	    lastCapturedEffect: null
	  };
	  return queue;
	}

	function createUpdate(expirationTime) {
	  return {
	    expirationTime: expirationTime,

	    tag: UpdateState,
	    payload: null,
	    callback: null,

	    next: null,
	    nextEffect: null
	  };
	}

	function appendUpdateToQueue(queue, update) {
	  // Append the update to the end of the list.
	  if (queue.lastUpdate === null) {
	    // Queue is empty
	    queue.firstUpdate = queue.lastUpdate = update;
	  } else {
	    queue.lastUpdate.next = update;
	    queue.lastUpdate = update;
	  }
	}

	function enqueueUpdate(fiber, update) {
	  // Update queues are created lazily.
	  var alternate = fiber.alternate;
	  var queue1 = void 0;
	  var queue2 = void 0;
	  if (alternate === null) {
	    // There's only one fiber.
	    queue1 = fiber.updateQueue;
	    queue2 = null;
	    if (queue1 === null) {
	      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
	    }
	  } else {
	    // There are two owners.
	    queue1 = fiber.updateQueue;
	    queue2 = alternate.updateQueue;
	    if (queue1 === null) {
	      if (queue2 === null) {
	        // Neither fiber has an update queue. Create new ones.
	        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
	        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
	      } else {
	        // Only one fiber has an update queue. Clone to create a new one.
	        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
	      }
	    } else {
	      if (queue2 === null) {
	        // Only one fiber has an update queue. Clone to create a new one.
	        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
	      } else {
	        // Both owners have an update queue.
	      }
	    }
	  }
	  if (queue2 === null || queue1 === queue2) {
	    // There's only a single queue.
	    appendUpdateToQueue(queue1, update);
	  } else {
	    // There are two queues. We need to append the update to both queues,
	    // while accounting for the persistent structure of the list — we don't
	    // want the same update to be added multiple times.
	    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
	      // One of the queues is not empty. We must add the update to both queues.
	      appendUpdateToQueue(queue1, update);
	      appendUpdateToQueue(queue2, update);
	    } else {
	      // Both queues are non-empty. The last update is the same in both lists,
	      // because of structural sharing. So, only append to one of the lists.
	      appendUpdateToQueue(queue1, update);
	      // But we still need to update the `lastUpdate` pointer of queue2.
	      queue2.lastUpdate = update;
	    }
	  }

	  {
	    if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
	      warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
	      didWarnUpdateInsideUpdate = true;
	    }
	  }
	}

	function enqueueCapturedUpdate(workInProgress, update) {
	  // Captured updates go into a separate list, and only on the work-in-
	  // progress queue.
	  var workInProgressQueue = workInProgress.updateQueue;
	  if (workInProgressQueue === null) {
	    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
	  } else {
	    // TODO: I put this here rather than createWorkInProgress so that we don't
	    // clone the queue unnecessarily. There's probably a better way to
	    // structure this.
	    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
	  }

	  // Append the update to the end of the list.
	  if (workInProgressQueue.lastCapturedUpdate === null) {
	    // This is the first render phase update
	    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
	  } else {
	    workInProgressQueue.lastCapturedUpdate.next = update;
	    workInProgressQueue.lastCapturedUpdate = update;
	  }
	}

	function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
	  var current = workInProgress.alternate;
	  if (current !== null) {
	    // If the work-in-progress queue is equal to the current queue,
	    // we need to clone it first.
	    if (queue === current.updateQueue) {
	      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
	    }
	  }
	  return queue;
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var _payload = update.payload;
	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	              _payload.call(instance, prevState, nextProps);
	            }
	          }
	          var nextState = _payload.call(instance, prevState, nextProps);
	          {
	            exitDisallowedContextReadInDEV();
	          }
	          return nextState;
	        }
	        // State object
	        return _payload;
	      }
	    case CaptureUpdate:
	      {
	        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough
	    case UpdateState:
	      {
	        var _payload2 = update.payload;
	        var partialState = void 0;
	        if (typeof _payload2 === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
	              _payload2.call(instance, prevState, nextProps);
	            }
	          }
	          partialState = _payload2.call(instance, prevState, nextProps);
	          {
	            exitDisallowedContextReadInDEV();
	          }
	        } else {
	          // Partial state object
	          partialState = _payload2;
	        }
	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        }
	        // Merge the partial state and the previous state.
	        return _assign({}, prevState, partialState);
	      }
	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }
	  return prevState;
	}

	function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
	  hasForceUpdate = false;

	  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

	  {
	    currentlyProcessingQueue = queue;
	  }

	  // These values may change as we process the queue.
	  var newBaseState = queue.baseState;
	  var newFirstUpdate = null;
	  var newExpirationTime = NoWork;

	  // Iterate through the list of updates to compute the result.
	  var update = queue.firstUpdate;
	  var resultState = newBaseState;
	  while (update !== null) {
	    var updateExpirationTime = update.expirationTime;
	    if (updateExpirationTime < renderExpirationTime) {
	      // This update does not have sufficient priority. Skip it.
	      if (newFirstUpdate === null) {
	        // This is the first skipped update. It will be the first update in
	        // the new list.
	        newFirstUpdate = update;
	        // Since this is the first update that was skipped, the current result
	        // is the new base state.
	        newBaseState = resultState;
	      }
	      // Since this update will remain in the list, update the remaining
	      // expiration time.
	      if (newExpirationTime < updateExpirationTime) {
	        newExpirationTime = updateExpirationTime;
	      }
	    } else {
	      // This update does have sufficient priority. Process it and compute
	      // a new result.
	      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
	      var _callback = update.callback;
	      if (_callback !== null) {
	        workInProgress.effectTag |= Callback;
	        // Set this to null, in case it was mutated during an aborted render.
	        update.nextEffect = null;
	        if (queue.lastEffect === null) {
	          queue.firstEffect = queue.lastEffect = update;
	        } else {
	          queue.lastEffect.nextEffect = update;
	          queue.lastEffect = update;
	        }
	      }
	    }
	    // Continue to the next update.
	    update = update.next;
	  }

	  // Separately, iterate though the list of captured updates.
	  var newFirstCapturedUpdate = null;
	  update = queue.firstCapturedUpdate;
	  while (update !== null) {
	    var _updateExpirationTime = update.expirationTime;
	    if (_updateExpirationTime < renderExpirationTime) {
	      // This update does not have sufficient priority. Skip it.
	      if (newFirstCapturedUpdate === null) {
	        // This is the first skipped captured update. It will be the first
	        // update in the new list.
	        newFirstCapturedUpdate = update;
	        // If this is the first update that was skipped, the current result is
	        // the new base state.
	        if (newFirstUpdate === null) {
	          newBaseState = resultState;
	        }
	      }
	      // Since this update will remain in the list, update the remaining
	      // expiration time.
	      if (newExpirationTime < _updateExpirationTime) {
	        newExpirationTime = _updateExpirationTime;
	      }
	    } else {
	      // This update does have sufficient priority. Process it and compute
	      // a new result.
	      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
	      var _callback2 = update.callback;
	      if (_callback2 !== null) {
	        workInProgress.effectTag |= Callback;
	        // Set this to null, in case it was mutated during an aborted render.
	        update.nextEffect = null;
	        if (queue.lastCapturedEffect === null) {
	          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
	        } else {
	          queue.lastCapturedEffect.nextEffect = update;
	          queue.lastCapturedEffect = update;
	        }
	      }
	    }
	    update = update.next;
	  }

	  if (newFirstUpdate === null) {
	    queue.lastUpdate = null;
	  }
	  if (newFirstCapturedUpdate === null) {
	    queue.lastCapturedUpdate = null;
	  } else {
	    workInProgress.effectTag |= Callback;
	  }
	  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
	    // We processed every update, without skipping. That means the new base
	    // state is the same as the result state.
	    newBaseState = resultState;
	  }

	  queue.baseState = newBaseState;
	  queue.firstUpdate = newFirstUpdate;
	  queue.firstCapturedUpdate = newFirstCapturedUpdate;

	  // Set the remaining expiration time to be whatever is remaining in the queue.
	  // This should be fine because the only two other things that contribute to
	  // expiration time are props and context. We're already in the middle of the
	  // begin phase by the time we start processing the queue, so we've already
	  // dealt with the props. Context in components that specify
	  // shouldComponentUpdate is tricky; but we'll have to account for
	  // that regardless.
	  workInProgress.expirationTime = newExpirationTime;
	  workInProgress.memoizedState = resultState;

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}

	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}

	function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
	  // If the finished render included captured updates, and there are still
	  // lower priority updates left over, we need to keep the captured updates
	  // in the queue so that they are rebased and not dropped once we process the
	  // queue again at the lower priority.
	  if (finishedQueue.firstCapturedUpdate !== null) {
	    // Join the captured update list to the end of the normal list.
	    if (finishedQueue.lastUpdate !== null) {
	      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
	      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
	    }
	    // Clear the list of captured updates.
	    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
	  }

	  // Commit the effects
	  commitUpdateEffects(finishedQueue.firstEffect, instance);
	  finishedQueue.firstEffect = finishedQueue.lastEffect = null;

	  commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
	  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
	}

	function commitUpdateEffects(effect, instance) {
	  while (effect !== null) {
	    var _callback3 = effect.callback;
	    if (_callback3 !== null) {
	      effect.callback = null;
	      callCallback(_callback3, instance);
	    }
	    effect = effect.nextEffect;
	  }
	}

	function createCapturedValue(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source)
	  };
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.effectTag |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.effectTag |= Ref;
	}

	var appendAllChildren = void 0;
	var updateHostContainer = void 0;
	var updateHostComponent$1 = void 0;
	var updateHostText$1 = void 0;
	if (supportsMutation) {
	  // Mutation mode

	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;
	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) {
	        // If we have a portal child, then we don't want to traverse
	        // down its children. Instead, we'll get insertions from each child in
	        // the portal directly.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	      if (node === workInProgress) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (workInProgress) {
	    // Noop
	  };
	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;
	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    }

	    // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.
	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext();
	    // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.
	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
	    // TODO: Type this specific to this type of component.
	    workInProgress.updateQueue = updatePayload;
	    // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.
	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };
	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	} else if (supportsPersistence) {
	  // Persistent host tree mode

	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;
	    while (node !== null) {
	      // eslint-disable-next-line no-labels
	      branches: if (node.tag === HostComponent) {
	        var instance = node.stateNode;
	        if (needsVisibilityToggle) {
	          var props = node.memoizedProps;
	          var type = node.type;
	          if (isHidden) {
	            // This child is inside a timed out tree. Hide it.
	            instance = cloneHiddenInstance(instance, type, props, node);
	          } else {
	            // This child was previously inside a timed out tree. If it was not
	            // updated during this render, it may need to be unhidden. Clone
	            // again to be sure.
	            instance = cloneUnhiddenInstance(instance, type, props, node);
	          }
	          node.stateNode = instance;
	        }
	        appendInitialChild(parent, instance);
	      } else if (node.tag === HostText) {
	        var _instance = node.stateNode;
	        if (needsVisibilityToggle) {
	          var text = node.memoizedProps;
	          var rootContainerInstance = getRootHostContainer();
	          var currentHostContext = getHostContext();
	          if (isHidden) {
	            _instance = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
	          } else {
	            _instance = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
	          }
	          node.stateNode = _instance;
	        }
	        appendInitialChild(parent, _instance);
	      } else if (node.tag === HostPortal) {
	        // If we have a portal child, then we don't want to traverse
	        // down its children. Instead, we'll get insertions from each child in
	        // the portal directly.
	      } else if (node.tag === SuspenseComponent) {
	        var current = node.alternate;
	        if (current !== null) {
	          var oldState = current.memoizedState;
	          var newState = node.memoizedState;
	          var oldIsHidden = oldState !== null;
	          var newIsHidden = newState !== null;
	          if (oldIsHidden !== newIsHidden) {
	            // The placeholder either just timed out or switched back to the normal
	            // children after having previously timed out. Toggle the visibility of
	            // the direct host children.
	            var primaryChildParent = newIsHidden ? node.child : node;
	            if (primaryChildParent !== null) {
	              appendAllChildren(parent, primaryChildParent, true, newIsHidden);
	            }
	            // eslint-disable-next-line no-labels
	            break branches;
	          }
	        }
	        if (node.child !== null) {
	          // Continue traversing like normal
	          node.child.return = node;
	          node = node.child;
	          continue;
	        }
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	      // $FlowFixMe This is correct but Flow is confused by the labeled break.
	      node = node;
	      if (node === workInProgress) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  // An unfortunate fork of appendAllChildren because we have two different parent types.
	  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;
	    while (node !== null) {
	      // eslint-disable-next-line no-labels
	      branches: if (node.tag === HostComponent) {
	        var instance = node.stateNode;
	        if (needsVisibilityToggle) {
	          var props = node.memoizedProps;
	          var type = node.type;
	          if (isHidden) {
	            // This child is inside a timed out tree. Hide it.
	            instance = cloneHiddenInstance(instance, type, props, node);
	          } else {
	            // This child was previously inside a timed out tree. If it was not
	            // updated during this render, it may need to be unhidden. Clone
	            // again to be sure.
	            instance = cloneUnhiddenInstance(instance, type, props, node);
	          }
	          node.stateNode = instance;
	        }
	        appendChildToContainerChildSet(containerChildSet, instance);
	      } else if (node.tag === HostText) {
	        var _instance2 = node.stateNode;
	        if (needsVisibilityToggle) {
	          var text = node.memoizedProps;
	          var rootContainerInstance = getRootHostContainer();
	          var currentHostContext = getHostContext();
	          if (isHidden) {
	            _instance2 = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
	          } else {
	            _instance2 = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
	          }
	          node.stateNode = _instance2;
	        }
	        appendChildToContainerChildSet(containerChildSet, _instance2);
	      } else if (node.tag === HostPortal) {
	        // If we have a portal child, then we don't want to traverse
	        // down its children. Instead, we'll get insertions from each child in
	        // the portal directly.
	      } else if (node.tag === SuspenseComponent) {
	        var current = node.alternate;
	        if (current !== null) {
	          var oldState = current.memoizedState;
	          var newState = node.memoizedState;
	          var oldIsHidden = oldState !== null;
	          var newIsHidden = newState !== null;
	          if (oldIsHidden !== newIsHidden) {
	            // The placeholder either just timed out or switched back to the normal
	            // children after having previously timed out. Toggle the visibility of
	            // the direct host children.
	            var primaryChildParent = newIsHidden ? node.child : node;
	            if (primaryChildParent !== null) {
	              appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
	            }
	            // eslint-disable-next-line no-labels
	            break branches;
	          }
	        }
	        if (node.child !== null) {
	          // Continue traversing like normal
	          node.child.return = node;
	          node = node.child;
	          continue;
	        }
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	      // $FlowFixMe This is correct but Flow is confused by the labeled break.
	      node = node;
	      if (node === workInProgress) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };
	  updateHostContainer = function (workInProgress) {
	    var portalOrRoot = workInProgress.stateNode;
	    var childrenUnchanged = workInProgress.firstEffect === null;
	    if (childrenUnchanged) {
	      // No changes, just reuse the existing instance.
	    } else {
	      var container = portalOrRoot.containerInfo;
	      var newChildSet = createContainerChildSet(container);
	      // If children might have changed, we have to add them all to the set.
	      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
	      portalOrRoot.pendingChildren = newChildSet;
	      // Schedule an update on the container to swap out the container.
	      markUpdate(workInProgress);
	      finalizeContainerChildren(container, newChildSet);
	    }
	  };
	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    var currentInstance = current.stateNode;
	    var oldProps = current.memoizedProps;
	    // If there are no effects associated with this node, then none of our children had any updates.
	    // This guarantees that we can reuse all of them.
	    var childrenUnchanged = workInProgress.firstEffect === null;
	    if (childrenUnchanged && oldProps === newProps) {
	      // No changes, just reuse the existing instance.
	      // Note that this might release a previous clone.
	      workInProgress.stateNode = currentInstance;
	      return;
	    }
	    var recyclableInstance = workInProgress.stateNode;
	    var currentHostContext = getHostContext();
	    var updatePayload = null;
	    if (oldProps !== newProps) {
	      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
	    }
	    if (childrenUnchanged && updatePayload === null) {
	      // No changes, just reuse the existing instance.
	      // Note that this might release a previous clone.
	      workInProgress.stateNode = currentInstance;
	      return;
	    }
	    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
	    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
	      markUpdate(workInProgress);
	    }
	    workInProgress.stateNode = newInstance;
	    if (childrenUnchanged) {
	      // If there are no other effects in this tree, we need to flag this node as having one.
	      // Even though we're not going to use it for anything.
	      // Otherwise parents won't know that there are new children to propagate upwards.
	      markUpdate(workInProgress);
	    } else {
	      // If children might have changed, we have to add them all to the set.
	      appendAllChildren(newInstance, workInProgress, false, false);
	    }
	  };
	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    if (oldText !== newText) {
	      // If the text content differs, we'll create a new text instance for it.
	      var rootContainerInstance = getRootHostContainer();
	      var currentHostContext = getHostContext();
	      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
	      // We'll have to mark it as having an effect, even though we won't use the effect for anything.
	      // This lets the parents know that at least one of their children has changed.
	      markUpdate(workInProgress);
	    }
	  };
	} else {
	  // No host operations
	  updateHostContainer = function (workInProgress) {
	    // Noop
	  };
	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // Noop
	  };
	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // Noop
	  };
	}

	function completeWork(current, workInProgress, renderExpirationTime) {
	  var newProps = workInProgress.pendingProps;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      break;
	    case LazyComponent:
	      break;
	    case SimpleMemoComponent:
	    case FunctionComponent:
	      break;
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;
	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }
	        break;
	      }
	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var fiberRoot = workInProgress.stateNode;
	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }
	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          popHydrationState(workInProgress);
	          // This resets the hacky state to fix isMounted before committing.
	          // TODO: Delete this when we delete isMounted and findDOMNode.
	          workInProgress.effectTag &= ~Placement;
	        }
	        updateHostContainer(workInProgress);
	        break;
	      }
	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;
	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	            // This can happen when we abort work.
	            break;
	          }

	          var currentHostContext = getHostContext();
	          // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on we want to add then top->down or
	          // bottom->up. Top->down is faster in IE11.
	          var wasHydrated = popHydrationState(workInProgress);
	          if (wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node needs to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);

	            appendAllChildren(instance, workInProgress, false, false);

	            // Certain renderers require commit-time effects for initial mount.
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.
	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
	              markUpdate(workInProgress);
	            }
	            workInProgress.stateNode = instance;
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }
	        break;
	      }
	    case HostText:
	      {
	        var newText = newProps;
	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps;
	          // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.
	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	            // This can happen when we abort work.
	          }
	          var _rootContainerInstance = getRootHostContainer();
	          var _currentHostContext = getHostContext();
	          var _wasHydrated = popHydrationState(workInProgress);
	          if (_wasHydrated) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }
	        break;
	      }
	    case ForwardRef:
	      break;
	    case SuspenseComponent:
	      {
	        var nextState = workInProgress.memoizedState;
	        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.expirationTime = renderExpirationTime;
	          // Do not reset the effect list.
	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = current !== null && current.memoizedState !== null;

	        if (current !== null && !nextDidTimeout && prevDidTimeout) {
	          // We just switched from the fallback to the normal children. Delete
	          // the fallback.
	          // TODO: Would it be better to store the fallback fragment on
	          var currentFallbackChild = current.child.sibling;
	          if (currentFallbackChild !== null) {
	            // Deletions go at the beginning of the return fiber's effect list
	            var first = workInProgress.firstEffect;
	            if (first !== null) {
	              workInProgress.firstEffect = currentFallbackChild;
	              currentFallbackChild.nextEffect = first;
	            } else {
	              workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
	              currentFallbackChild.nextEffect = null;
	            }
	            currentFallbackChild.effectTag = Deletion;
	          }
	        }

	        if (nextDidTimeout || prevDidTimeout) {
	          // If the children are hidden, or if they were previous hidden, schedule
	          // an effect to toggle their visibility. This is also used to attach a
	          // retry listener to the promise.
	          workInProgress.effectTag |= Update;
	        }
	        break;
	      }
	    case Fragment:
	      break;
	    case Mode:
	      break;
	    case Profiler:
	      break;
	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(workInProgress);
	      break;
	    case ContextProvider:
	      // Pop provider fiber
	      popProvider(workInProgress);
	      break;
	    case ContextConsumer:
	      break;
	    case MemoComponent:
	      break;
	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;
	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }
	        break;
	      }
	    case DehydratedSuspenseComponent:
	      {
	        if (enableSuspenseServerRenderer) {
	          if (current === null) {
	            var _wasHydrated2 = popHydrationState(workInProgress);
	            !_wasHydrated2 ? invariant(false, 'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.') : void 0;
	            skipPastDehydratedSuspenseInstance(workInProgress);
	          } else if ((workInProgress.effectTag & DidCapture) === NoEffect) {
	            // This boundary did not suspend so it's now hydrated.
	            // To handle any future suspense cases, we're going to now upgrade it
	            // to a Suspense component. We detach it from the existing current fiber.
	            current.alternate = null;
	            workInProgress.alternate = null;
	            workInProgress.tag = SuspenseComponent;
	            workInProgress.memoizedState = null;
	            workInProgress.stateNode = null;
	          }
	        }
	        break;
	      }
	    default:
	      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  return null;
	}

	function shouldCaptureSuspense(workInProgress) {
	  // In order to capture, the Suspense component must have a fallback prop.
	  if (workInProgress.memoizedProps.fallback === undefined) {
	    return false;
	  }
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;
	  return nextState === null;
	}

	// This module is forked in different environments.
	// By default, return `true` to log errors to the console.
	// Forks can return `false` if this isn't desirable.
	function showErrorDialog(capturedError) {
	  return true;
	}

	function logCapturedError(capturedError) {
	  var logError = showErrorDialog(capturedError);

	  // Allow injected showErrorDialog() to prevent default console.error logging.
	  // This enables renderers like ReactNative to better manage redbox behavior.
	  if (logError === false) {
	    return;
	  }

	  var error = capturedError.error;
	  {
	    var componentName = capturedError.componentName,
	        componentStack = capturedError.componentStack,
	        errorBoundaryName = capturedError.errorBoundaryName,
	        errorBoundaryFound = capturedError.errorBoundaryFound,
	        willRetry = capturedError.willRetry;

	    // Browsers support silencing uncaught errors by calling
	    // `preventDefault()` in window `error` handler.
	    // We record this information as an expando on the error.

	    if (error != null && error._suppressLogging) {
	      if (errorBoundaryFound && willRetry) {
	        // The error is recoverable and was silenced.
	        // Ignore it and don't print the stack addendum.
	        // This is handy for testing error boundaries without noise.
	        return;
	      }
	      // The error is fatal. Since the silencing might have
	      // been accidental, we'll surface it anyway.
	      // However, the browser would have silenced the original error
	      // so we'll print it first, and then print the stack addendum.
	      console.error(error);
	      // For a more detailed description of this block, see:
	      // https://github.com/facebook/react/pull/13384
	    }

	    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

	    var errorBoundaryMessage = void 0;
	    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
	    if (errorBoundaryFound && errorBoundaryName) {
	      if (willRetry) {
	        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
	      } else {
	        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
	      }
	    } else {
	      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
	    }
	    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

	    // In development, we provide our own message with just the component stack.
	    // We don't include the original error message and JS stack because the browser
	    // has already printed it. Even if the application swallows the error, it is still
	    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
	    console.error(combinedMessage);
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	}

	var PossiblyWeakSet$1 = typeof WeakSet === 'function' ? WeakSet : Set;

	function logError(boundary, errorInfo) {
	  var source = errorInfo.source;
	  var stack = errorInfo.stack;
	  if (stack === null && source !== null) {
	    stack = getStackByFiberInDevAndProd(source);
	  }

	  var capturedError = {
	    componentName: source !== null ? getComponentName(source.type) : null,
	    componentStack: stack !== null ? stack : '',
	    error: errorInfo.value,
	    errorBoundary: null,
	    errorBoundaryName: null,
	    errorBoundaryFound: false,
	    willRetry: false
	  };

	  if (boundary !== null && boundary.tag === ClassComponent) {
	    capturedError.errorBoundary = boundary.stateNode;
	    capturedError.errorBoundaryName = getComponentName(boundary.type);
	    capturedError.errorBoundaryFound = true;
	    capturedError.willRetry = true;
	  }

	  try {
	    logCapturedError(capturedError);
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var callComponentWillUnmountWithTimer = function (current$$1, instance) {
	  startPhaseTimer(current$$1, 'componentWillUnmount');
	  instance.props = current$$1.memoizedProps;
	  instance.state = current$$1.memoizedState;
	  instance.componentWillUnmount();
	  stopPhaseTimer();
	};

	// Capture errors so they don't interrupt unmounting.
	function safelyCallComponentWillUnmount(current$$1, instance) {
	  {
	    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
	    if (hasCaughtError()) {
	      var unmountError = clearCaughtError();
	      captureCommitPhaseError(current$$1, unmountError);
	    }
	  }
	}

	function safelyDetachRef(current$$1) {
	  var ref = current$$1.ref;
	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      {
	        invokeGuardedCallback(null, ref, null, null);
	        if (hasCaughtError()) {
	          var refError = clearCaughtError();
	          captureCommitPhaseError(current$$1, refError);
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current$$1, destroy) {
	  {
	    invokeGuardedCallback(null, destroy, null);
	    if (hasCaughtError()) {
	      var error = clearCaughtError();
	      captureCommitPhaseError(current$$1, error);
	    }
	  }
	}

	function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
	        return;
	      }
	    case ClassComponent:
	      {
	        if (finishedWork.effectTag & Snapshot) {
	          if (current$$1 !== null) {
	            var prevProps = current$$1.memoizedProps;
	            var prevState = current$$1.memoizedState;
	            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
	            var instance = finishedWork.stateNode;
	            // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.
	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	              }
	            }
	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);
	                warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
	              }
	            }
	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	            stopPhaseTimer();
	          }
	        }
	        return;
	      }
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case IncompleteClassComponent:
	      // Nothing to do for these component types
	      return;
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function commitHookEffectList(unmountTag, mountTag, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;
	    do {
	      if ((effect.tag & unmountTag) !== NoEffect$1) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = undefined;
	        if (destroy !== undefined) {
	          destroy();
	        }
	      }
	      if ((effect.tag & mountTag) !== NoEffect$1) {
	        // Mount
	        var create = effect.create;
	        effect.destroy = create();

	        {
	          var _destroy = effect.destroy;
	          if (_destroy !== undefined && typeof _destroy !== 'function') {
	            var addendum = void 0;
	            if (_destroy === null) {
	              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
	            } else if (typeof _destroy.then === 'function') {
	              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, you may write an async function separately ' + 'and then call it from inside the effect:\n\n' + 'async function fetchComment(commentId) {\n' + '  // You can await here\n' + '}\n\n' + 'useEffect(() => {\n' + '  fetchComment(commentId);\n' + '}, [commentId]);\n\n' + 'In the future, React will provide a more idiomatic solution for data fetching ' + "that doesn't involve writing effects manually.";
	            } else {
	              addendum = ' You returned: ' + _destroy;
	            }
	            warningWithoutStack$1(false, 'An Effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
	          }
	        }
	      }
	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitPassiveHookEffects(finishedWork) {
	  commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
	  commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
	}

	function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
	        break;
	      }
	    case ClassComponent:
	      {
	        var instance = finishedWork.stateNode;
	        if (finishedWork.effectTag & Update) {
	          if (current$$1 === null) {
	            startPhaseTimer(finishedWork, 'componentDidMount');
	            // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.
	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	              }
	            }
	            instance.componentDidMount();
	            stopPhaseTimer();
	          } else {
	            var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
	            var prevState = current$$1.memoizedState;
	            startPhaseTimer(finishedWork, 'componentDidUpdate');
	            // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.
	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	                !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	              }
	            }
	            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	            stopPhaseTimer();
	          }
	        }
	        var updateQueue = finishedWork.updateQueue;
	        if (updateQueue !== null) {
	          {
	            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	              !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	              !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
	            }
	          }
	          // We could update instance props and state here,
	          // but instead we rely on them being set during last render.
	          // TODO: revisit this when we implement resuming.
	          commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
	        }
	        return;
	      }
	    case HostRoot:
	      {
	        var _updateQueue = finishedWork.updateQueue;
	        if (_updateQueue !== null) {
	          var _instance = null;
	          if (finishedWork.child !== null) {
	            switch (finishedWork.child.tag) {
	              case HostComponent:
	                _instance = getPublicInstance(finishedWork.child.stateNode);
	                break;
	              case ClassComponent:
	                _instance = finishedWork.child.stateNode;
	                break;
	            }
	          }
	          commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
	        }
	        return;
	      }
	    case HostComponent:
	      {
	        var _instance2 = finishedWork.stateNode;

	        // Renderers may schedule work to be done after host components are mounted
	        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	        // These effects should only be committed when components are first mounted,
	        // aka when there is no current/alternate.
	        if (current$$1 === null && finishedWork.effectTag & Update) {
	          var type = finishedWork.type;
	          var props = finishedWork.memoizedProps;
	          commitMount(_instance2, type, props, finishedWork);
	        }

	        return;
	      }
	    case HostText:
	      {
	        // We have no life-cycles associated with text.
	        return;
	      }
	    case HostPortal:
	      {
	        // We have no life-cycles associated with portals.
	        return;
	      }
	    case Profiler:
	      {
	        if (enableProfilerTimer) {
	          var onRender = finishedWork.memoizedProps.onRender;

	          if (enableSchedulerTracing) {
	            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
	          } else {
	            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
	          }
	        }
	        return;
	      }
	    case SuspenseComponent:
	      break;
	    case IncompleteClassComponent:
	      break;
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  if (supportsMutation) {
	    // We only have the top Fiber that was inserted but we need to recurse down its
	    var node = finishedWork;
	    while (true) {
	      if (node.tag === HostComponent) {
	        var instance = node.stateNode;
	        if (isHidden) {
	          hideInstance(instance);
	        } else {
	          unhideInstance(node.stateNode, node.memoizedProps);
	        }
	      } else if (node.tag === HostText) {
	        var _instance3 = node.stateNode;
	        if (isHidden) {
	          hideTextInstance(_instance3);
	        } else {
	          unhideTextInstance(_instance3, node.memoizedProps);
	        }
	      } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
	        // Found a nested Suspense component that timed out. Skip over the
	        var fallbackChildFragment = node.child.sibling;
	        fallbackChildFragment.return = node;
	        node = fallbackChildFragment;
	        continue;
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	      if (node === finishedWork) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }
	        node = node.return;
	      }
	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;
	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse = void 0;
	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;
	      default:
	        instanceToUse = instance;
	    }
	    if (typeof ref === 'function') {
	      ref(instanceToUse);
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function commitDetachRef(current$$1) {
	  var currentRef = current$$1.ref;
	  if (currentRef !== null) {
	    if (typeof currentRef === 'function') {
	      currentRef(null);
	    } else {
	      currentRef.current = null;
	    }
	  }
	}

	// User-originating errors (lifecycles and refs) should not interrupt
	// deletion, so don't let them throw. Host-originating errors should
	// interrupt deletion, so it's okay
	function commitUnmount(current$$1) {
	  onCommitUnmount(current$$1);

	  switch (current$$1.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        var updateQueue = current$$1.updateQueue;
	        if (updateQueue !== null) {
	          var lastEffect = updateQueue.lastEffect;
	          if (lastEffect !== null) {
	            var firstEffect = lastEffect.next;
	            var effect = firstEffect;
	            do {
	              var destroy = effect.destroy;
	              if (destroy !== undefined) {
	                safelyCallDestroy(current$$1, destroy);
	              }
	              effect = effect.next;
	            } while (effect !== firstEffect);
	          }
	        }
	        break;
	      }
	    case ClassComponent:
	      {
	        safelyDetachRef(current$$1);
	        var instance = current$$1.stateNode;
	        if (typeof instance.componentWillUnmount === 'function') {
	          safelyCallComponentWillUnmount(current$$1, instance);
	        }
	        return;
	      }
	    case HostComponent:
	      {
	        safelyDetachRef(current$$1);
	        return;
	      }
	    case HostPortal:
	      {
	        // TODO: this is recursive.
	        // We are also not using this parent because
	        // the portal will get pushed immediately.
	        if (supportsMutation) {
	          unmountHostComponents(current$$1);
	        } else if (supportsPersistence) {
	          emptyPortalContainer(current$$1);
	        }
	        return;
	      }
	  }
	}

	function commitNestedUnmounts(root) {
	  // While we're inside a removed host node we don't want to call
	  // removeChild on the inner nodes because they're removed by the top
	  // call anyway. We also want to call componentWillUnmount on all
	  // composites before this host node is removed from the tree. Therefore
	  var node = root;
	  while (true) {
	    commitUnmount(node);
	    // Visit children because they may contain more composite or host nodes.
	    // Skip portals because commitUnmount() currently visits them recursively.
	    if (node.child !== null && (
	    // If we use mutation we drill down into portals using commitUnmount above.
	    // If we don't use mutation we drill down into portals here instead.
	    !supportsMutation || node.tag !== HostPortal)) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === root) {
	      return;
	    }
	    while (node.sibling === null) {
	      if (node.return === null || node.return === root) {
	        return;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function detachFiber(current$$1) {
	  // Cut off the return pointers to disconnect it from the tree. Ideally, we
	  // should clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child. This child
	  // itself will be GC:ed when the parent updates the next time.
	  current$$1.return = null;
	  current$$1.child = null;
	  current$$1.memoizedState = null;
	  current$$1.updateQueue = null;
	  var alternate = current$$1.alternate;
	  if (alternate !== null) {
	    alternate.return = null;
	    alternate.child = null;
	    alternate.memoizedState = null;
	    alternate.updateQueue = null;
	  }
	}

	function emptyPortalContainer(current$$1) {
	  if (!supportsPersistence) {
	    return;
	  }

	  var portal = current$$1.stateNode;
	  var containerInfo = portal.containerInfo;

	  var emptyChildSet = createContainerChildSet(containerInfo);
	  replaceContainerChildren(containerInfo, emptyChildSet);
	}

	function commitContainer(finishedWork) {
	  if (!supportsPersistence) {
	    return;
	  }

	  switch (finishedWork.tag) {
	    case ClassComponent:
	      {
	        return;
	      }
	    case HostComponent:
	      {
	        return;
	      }
	    case HostText:
	      {
	        return;
	      }
	    case HostRoot:
	    case HostPortal:
	      {
	        var portalOrRoot = finishedWork.stateNode;
	        var containerInfo = portalOrRoot.containerInfo,
	            _pendingChildren = portalOrRoot.pendingChildren;

	        replaceContainerChildren(containerInfo, _pendingChildren);
	        return;
	      }
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;
	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }
	    parent = parent.return;
	  }
	  invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  var node = fiber;
	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedSuspenseComponent) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.effectTag & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      }
	      // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.
	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    }
	    // Check if this host node is stable or about to be placed.
	    if (!(node.effectTag & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {
	  if (!supportsMutation) {
	    return;
	  }

	  // Recursively insert all host nodes into the parent.
	  var parentFiber = getHostParentFiber(finishedWork);

	  // Note: these two variables *must* always be updated together.
	  var parent = void 0;
	  var isContainer = void 0;

	  switch (parentFiber.tag) {
	    case HostComponent:
	      parent = parentFiber.stateNode;
	      isContainer = false;
	      break;
	    case HostRoot:
	      parent = parentFiber.stateNode.containerInfo;
	      isContainer = true;
	      break;
	    case HostPortal:
	      parent = parentFiber.stateNode.containerInfo;
	      isContainer = true;
	      break;
	    default:
	      invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
	  }
	  if (parentFiber.effectTag & ContentReset) {
	    // Reset the text content of the parent before doing any insertions
	    resetTextContent(parent);
	    // Clear ContentReset from the effect tag
	    parentFiber.effectTag &= ~ContentReset;
	  }

	  var before = getHostSibling(finishedWork);
	  // We only have the top Fiber that was inserted but we need to recurse down its
	  // children to find all the terminal nodes.
	  var node = finishedWork;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      if (before) {
	        if (isContainer) {
	          insertInContainerBefore(parent, node.stateNode, before);
	        } else {
	          insertBefore(parent, node.stateNode, before);
	        }
	      } else {
	        if (isContainer) {
	          appendChildToContainer(parent, node.stateNode);
	        } else {
	          appendChild(parent, node.stateNode);
	        }
	      }
	    } else if (node.tag === HostPortal) {
	      // If the insertion itself is a portal, then we don't want to traverse
	      // down its children. Instead, we'll get insertions from each child in
	      // the portal directly.
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }
	    if (node === finishedWork) {
	      return;
	    }
	    while (node.sibling === null) {
	      if (node.return === null || node.return === finishedWork) {
	        return;
	      }
	      node = node.return;
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function unmountHostComponents(current$$1) {
	  // We only have the top Fiber that was deleted but we need to recurse down its
	  var node = current$$1;

	  // Each iteration, currentParent is populated with node's host parent if not
	  // currentParentIsValid.
	  var currentParentIsValid = false;

	  // Note: these two variables *must* always be updated together.
	  var currentParent = void 0;
	  var currentParentIsContainer = void 0;

	  while (true) {
	    if (!currentParentIsValid) {
	      var parent = node.return;
	      findParent: while (true) {
	        !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        switch (parent.tag) {
	          case HostComponent:
	            currentParent = parent.stateNode;
	            currentParentIsContainer = false;
	            break findParent;
	          case HostRoot:
	            currentParent = parent.stateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;
	          case HostPortal:
	            currentParent = parent.stateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;
	        }
	        parent = parent.return;
	      }
	      currentParentIsValid = true;
	    }

	    if (node.tag === HostComponent || node.tag === HostText) {
	      commitNestedUnmounts(node);
	      // After all the children have unmounted, it is now safe to remove the
	      // node from the tree.
	      if (currentParentIsContainer) {
	        removeChildFromContainer(currentParent, node.stateNode);
	      } else {
	        removeChild(currentParent, node.stateNode);
	      }
	      // Don't visit children because we already visited them.
	    } else if (enableSuspenseServerRenderer && node.tag === DehydratedSuspenseComponent) {
	      // Delete the dehydrated suspense boundary and all of its content.
	      if (currentParentIsContainer) {
	        clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
	      } else {
	        clearSuspenseBoundary(currentParent, node.stateNode);
	      }
	    } else if (node.tag === HostPortal) {
	      if (node.child !== null) {
	        // When we go into a portal, it becomes the parent to remove from.
	        // We will reassign it back when we pop the portal on the way up.
	        currentParent = node.stateNode.containerInfo;
	        currentParentIsContainer = true;
	        // Visit children because portals might contain host components.
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    } else {
	      commitUnmount(node);
	      // Visit children because we may find more host components below.
	      if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    }
	    if (node === current$$1) {
	      return;
	    }
	    while (node.sibling === null) {
	      if (node.return === null || node.return === current$$1) {
	        return;
	      }
	      node = node.return;
	      if (node.tag === HostPortal) {
	        // When we go out of the portal, we need to restore the parent.
	        // Since we don't keep a stack of them, we will search for it.
	        currentParentIsValid = false;
	      }
	    }
	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function commitDeletion(current$$1) {
	  if (supportsMutation) {
	    // Recursively delete all host nodes from the parent.
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    unmountHostComponents(current$$1);
	  } else {
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    commitNestedUnmounts(current$$1);
	  }
	  detachFiber(current$$1);
	}

	function commitWork(current$$1, finishedWork) {
	  if (!supportsMutation) {
	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          // Note: We currently never use MountMutation, but useLayout uses
	          // UnmountMutation.
	          commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
	          return;
	        }
	    }

	    commitContainer(finishedWork);
	    return;
	  }

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        // Note: We currently never use MountMutation, but useLayout uses
	        // UnmountMutation.
	        commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
	        return;
	      }
	    case ClassComponent:
	      {
	        return;
	      }
	    case HostComponent:
	      {
	        var instance = finishedWork.stateNode;
	        if (instance != null) {
	          // Commit the work prepared earlier.
	          var newProps = finishedWork.memoizedProps;
	          // For hydration we reuse the update path but we treat the oldProps
	          // as the newProps. The updatePayload will contain the real change in
	          // this case.
	          var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
	          var type = finishedWork.type;
	          // TODO: Type the updateQueue to be specific to host components.
	          var updatePayload = finishedWork.updateQueue;
	          finishedWork.updateQueue = null;
	          if (updatePayload !== null) {
	            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
	          }
	        }
	        return;
	      }
	    case HostText:
	      {
	        !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        var textInstance = finishedWork.stateNode;
	        var newText = finishedWork.memoizedProps;
	        // For hydration we reuse the update path but we treat the oldProps
	        // as the newProps. The updatePayload will contain the real change in
	        // this case.
	        var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
	        commitTextUpdate(textInstance, oldText, newText);
	        return;
	      }
	    case HostRoot:
	      {
	        return;
	      }
	    case Profiler:
	      {
	        return;
	      }
	    case SuspenseComponent:
	      {
	        var newState = finishedWork.memoizedState;

	        var newDidTimeout = void 0;
	        var primaryChildParent = finishedWork;
	        if (newState === null) {
	          newDidTimeout = false;
	        } else {
	          newDidTimeout = true;
	          primaryChildParent = finishedWork.child;
	          if (newState.timedOutAt === NoWork) {
	            // If the children had not already timed out, record the time.
	            // This is used to compute the elapsed time during subsequent
	            // attempts to render the children.
	            newState.timedOutAt = requestCurrentTime();
	          }
	        }

	        if (primaryChildParent !== null) {
	          hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
	        }

	        // If this boundary just timed out, then it will have a set of thenables.
	        // For each thenable, attach a listener so that when it resolves, React
	        // attempts to re-render the boundary in the primary (pre-timeout) state.
	        var thenables = finishedWork.updateQueue;
	        if (thenables !== null) {
	          finishedWork.updateQueue = null;
	          var retryCache = finishedWork.stateNode;
	          if (retryCache === null) {
	            retryCache = finishedWork.stateNode = new PossiblyWeakSet$1();
	          }
	          thenables.forEach(function (thenable) {
	            // Memoize using the boundary fiber to prevent redundant listeners.
	            var retry = retryTimedOutBoundary.bind(null, finishedWork, thenable);
	            if (enableSchedulerTracing) {
	              retry = tracing.unstable_wrap(retry);
	            }
	            if (!retryCache.has(thenable)) {
	              retryCache.add(thenable);
	              thenable.then(retry, retry);
	            }
	          });
	        }

	        return;
	      }
	    case IncompleteClassComponent:
	      {
	        return;
	      }
	    default:
	      {
	        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	      }
	  }
	}

	function commitResetTextContent(current$$1) {
	  if (!supportsMutation) {
	    return;
	  }
	  resetTextContent(current$$1.stateNode);
	}

	var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
	var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;

	function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime);
	  // Unmount the root by rendering null.
	  update.tag = CaptureUpdate;
	  // Caution: React DevTools currently depends on this property
	  // being called "element".
	  update.payload = { element: null };
	  var error = errorInfo.value;
	  update.callback = function () {
	    onUncaughtError(error);
	    logError(fiber, errorInfo);
	  };
	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
	  if (typeof getDerivedStateFromError === 'function') {
	    var error = errorInfo.value;
	    update.payload = function () {
	      return getDerivedStateFromError(error);
	    };
	  }

	  var inst = fiber.stateNode;
	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this);
	      }
	      var error = errorInfo.value;
	      var stack = errorInfo.stack;
	      logError(fiber, errorInfo);
	      this.componentDidCatch(error, {
	        componentStack: stack !== null ? stack : ''
	      });
	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
	        }
	      }
	    };
	  }
	  return update;
	}

	function attachPingListener(root, renderExpirationTime, thenable) {
	  // Attach a listener to the promise to "ping" the root and retry. But
	  // only if one does not already exist for the current render expiration
	  // time (which acts like a "thread ID" here).
	  var pingCache = root.pingCache;
	  var threadIDs = void 0;
	  if (pingCache === null) {
	    pingCache = root.pingCache = new PossiblyWeakMap();
	    threadIDs = new Set();
	    pingCache.set(thenable, threadIDs);
	  } else {
	    threadIDs = pingCache.get(thenable);
	    if (threadIDs === undefined) {
	      threadIDs = new Set();
	      pingCache.set(thenable, threadIDs);
	    }
	  }
	  if (!threadIDs.has(renderExpirationTime)) {
	    // Memoize using the thread ID to prevent redundant listeners.
	    threadIDs.add(renderExpirationTime);
	    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
	    if (enableSchedulerTracing) {
	      ping = tracing.unstable_wrap(ping);
	    }
	    thenable.then(ping, ping);
	  }
	}

	function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
	  // The source fiber did not complete.
	  sourceFiber.effectTag |= Incomplete;
	  // Its effect list is no longer valid.
	  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a thenable.
	    var thenable = value;

	    // Find the earliest timeout threshold of all the placeholders in the
	    // ancestor path. We could avoid this traversal by storing the thresholds on
	    // the stack, but we choose not to because we only hit this path if we're
	    // IO-bound (i.e. if something suspends). Whereas the stack is used even in
	    // the non-IO- bound case.
	    var _workInProgress = returnFiber;
	    var earliestTimeoutMs = -1;
	    var startTimeMs = -1;
	    do {
	      if (_workInProgress.tag === SuspenseComponent) {
	        var current$$1 = _workInProgress.alternate;
	        if (current$$1 !== null) {
	          var currentState = current$$1.memoizedState;
	          if (currentState !== null) {
	            // Reached a boundary that already timed out. Do not search
	            // any further.
	            var timedOutAt = currentState.timedOutAt;
	            startTimeMs = expirationTimeToMs(timedOutAt);
	            // Do not search any further.
	            break;
	          }
	        }
	        var timeoutPropMs = _workInProgress.pendingProps.maxDuration;
	        if (typeof timeoutPropMs === 'number') {
	          if (timeoutPropMs <= 0) {
	            earliestTimeoutMs = 0;
	          } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
	            earliestTimeoutMs = timeoutPropMs;
	          }
	        }
	      }
	      // If there is a DehydratedSuspenseComponent we don't have to do anything because
	      // if something suspends inside it, we will simply leave that as dehydrated. It
	      // will never timeout.
	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null);

	    // Schedule the nearest Suspense to re-render the timed out view.
	    _workInProgress = returnFiber;
	    do {
	      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress)) {
	        // Found the nearest boundary.

	        // Stash the promise on the boundary fiber. If the boundary times out, we'll
	        var thenables = _workInProgress.updateQueue;
	        if (thenables === null) {
	          var updateQueue = new Set();
	          updateQueue.add(thenable);
	          _workInProgress.updateQueue = updateQueue;
	        } else {
	          thenables.add(thenable);
	        }

	        // If the boundary is outside of concurrent mode, we should *not*
	        // suspend the commit. Pretend as if the suspended component rendered
	        // null and keep rendering. In the commit phase, we'll schedule a
	        // subsequent synchronous update to re-render the Suspense.
	        //
	        // Note: It doesn't matter whether the component that suspended was
	        // inside a concurrent mode tree. If the Suspense is outside of it, we
	        // should *not* suspend the commit.
	        if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
	          _workInProgress.effectTag |= DidCapture;

	          // We're going to commit this fiber even though it didn't complete.
	          // But we shouldn't call any lifecycle methods or callbacks. Remove
	          // all lifecycle effect tags.
	          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

	          if (sourceFiber.tag === ClassComponent) {
	            var currentSourceFiber = sourceFiber.alternate;
	            if (currentSourceFiber === null) {
	              // This is a new mount. Change the tag so it's not mistaken for a
	              // completed class component. For example, we should not call
	              // componentWillUnmount if it is deleted.
	              sourceFiber.tag = IncompleteClassComponent;
	            } else {
	              // When we try rendering again, we should not reuse the current fiber,
	              // since it's known to be in an inconsistent state. Use a force updte to
	              // prevent a bail out.
	              var update = createUpdate(Sync);
	              update.tag = ForceUpdate;
	              enqueueUpdate(sourceFiber, update);
	            }
	          }

	          // The source fiber did not complete. Mark it with Sync priority to
	          // indicate that it still has pending work.
	          sourceFiber.expirationTime = Sync;

	          // Exit without suspending.
	          return;
	        }

	        // Confirmed that the boundary is in a concurrent mode tree. Continue
	        // with the normal suspend path.

	        attachPingListener(root, renderExpirationTime, thenable);

	        var absoluteTimeoutMs = void 0;
	        if (earliestTimeoutMs === -1) {
	          // If no explicit threshold is given, default to an arbitrarily large
	          // value. The actual size doesn't matter because the threshold for the
	          // whole tree will be clamped to the expiration time.
	          absoluteTimeoutMs = maxSigned31BitInt;
	        } else {
	          if (startTimeMs === -1) {
	            // This suspend happened outside of any already timed-out
	            // placeholders. We don't know exactly when the update was
	            // scheduled, but we can infer an approximate start time from the
	            // expiration time. First, find the earliest uncommitted expiration
	            // time in the tree, including work that is suspended. Then subtract
	            // the offset used to compute an async update's expiration time.
	            // This will cause high priority (interactive) work to expire
	            // earlier than necessary, but we can account for this by adjusting
	            // for the Just Noticeable Difference.
	            var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
	            var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
	            startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
	          }
	          absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
	        }

	        // Mark the earliest timeout in the suspended fiber's ancestor path.
	        // After completing the root, we'll take the largest of all the
	        // suspended fiber's timeouts and use it to compute a timeout for the
	        // whole tree.
	        renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);

	        _workInProgress.effectTag |= ShouldCapture;
	        _workInProgress.expirationTime = renderExpirationTime;
	        return;
	      } else if (enableSuspenseServerRenderer && _workInProgress.tag === DehydratedSuspenseComponent) {
	        attachPingListener(root, renderExpirationTime, thenable);

	        // Since we already have a current fiber, we can eagerly add a retry listener.
	        var retryCache = _workInProgress.memoizedState;
	        if (retryCache === null) {
	          retryCache = _workInProgress.memoizedState = new PossiblyWeakSet();
	          var _current = _workInProgress.alternate;
	          !_current ? invariant(false, 'A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React.') : void 0;
	          _current.memoizedState = retryCache;
	        }
	        // Memoize using the boundary fiber to prevent redundant listeners.
	        if (!retryCache.has(thenable)) {
	          retryCache.add(thenable);
	          var retry = retryTimedOutBoundary.bind(null, _workInProgress, thenable);
	          if (enableSchedulerTracing) {
	            retry = tracing.unstable_wrap(retry);
	          }
	          thenable.then(retry, retry);
	        }
	        _workInProgress.effectTag |= ShouldCapture;
	        _workInProgress.expirationTime = renderExpirationTime;
	        return;
	      }
	      // This boundary already captured during this render. Continue to the next
	      // boundary.
	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null);
	    // No boundary was found. Fallthrough to error mode.
	    // TODO: Use invariant so the message is stripped in prod?
	    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
	  }

	  // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.
	  renderDidError();
	  value = createCapturedValue(value, sourceFiber);
	  var workInProgress = returnFiber;
	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime;
	          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }
	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;
	        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime;
	          // Schedule the error boundary to re-render using updated state
	          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
	          enqueueCapturedUpdate(workInProgress, _update2);
	          return;
	        }
	        break;
	      default:
	        break;
	    }
	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	function unwindWork(workInProgress, renderExpirationTime) {
	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;
	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }
	        var effectTag = workInProgress.effectTag;
	        if (effectTag & ShouldCapture) {
	          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        }
	        return null;
	      }
	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var _effectTag = workInProgress.effectTag;
	        !((_effectTag & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
	        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
	        return workInProgress;
	      }
	    case HostComponent:
	      {
	        // TODO: popHydrationState
	        popHostContext(workInProgress);
	        return null;
	      }
	    case SuspenseComponent:
	      {
	        var _effectTag2 = workInProgress.effectTag;
	        if (_effectTag2 & ShouldCapture) {
	          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
	          // Captured a suspense effect. Re-render the boundary.
	          return workInProgress;
	        }
	        return null;
	      }
	    case DehydratedSuspenseComponent:
	      {
	        if (enableSuspenseServerRenderer) {
	          // TODO: popHydrationState
	          var _effectTag3 = workInProgress.effectTag;
	          if (_effectTag3 & ShouldCapture) {
	            workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture;
	            // Captured a suspense effect. Re-render the boundary.
	            return workInProgress;
	          }
	        }
	        return null;
	      }
	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;
	    case ContextProvider:
	      popProvider(workInProgress);
	      return null;
	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(interruptedWork) {
	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;
	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }
	        break;
	      }
	    case HostRoot:
	      {
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        break;
	      }
	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }
	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;
	    case ContextProvider:
	      popProvider(interruptedWork);
	      break;
	    default:
	      break;
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;


	var didWarnAboutStateTransition = void 0;
	var didWarnSetStateChildContext = void 0;
	var warnAboutUpdateOnUnmounted = void 0;
	var warnAboutInvalidUpdates = void 0;

	if (enableSchedulerTracing) {
	  // Provide explicit error message when production+profiling bundle of e.g. react-dom
	  // is used with production (non-profiling) bundle of scheduler/tracing
	  !(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
	}

	{
	  didWarnAboutStateTransition = false;
	  didWarnSetStateChildContext = false;
	  var didWarnStateUpdateForUnmountedComponent = {};

	  warnAboutUpdateOnUnmounted = function (fiber, isClass) {
	    // We show the whole stack but dedupe on the top component's name because
	    // the problematic code almost always lies inside that component.
	    var componentName = getComponentName(fiber.type) || 'ReactComponent';
	    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
	      return;
	    }
	    warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
	    didWarnStateUpdateForUnmountedComponent[componentName] = true;
	  };

	  warnAboutInvalidUpdates = function (instance) {
	    switch (phase) {
	      case 'getChildContext':
	        if (didWarnSetStateChildContext) {
	          return;
	        }
	        warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
	        didWarnSetStateChildContext = true;
	        break;
	      case 'render':
	        if (didWarnAboutStateTransition) {
	          return;
	        }
	        warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
	        didWarnAboutStateTransition = true;
	        break;
	    }
	  };
	}

	// Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.
	var lastUniqueAsyncExpiration = Sync - 1;

	var isWorking = false;

	// The next work in progress fiber that we're currently working on.
	var nextUnitOfWork = null;
	var nextRoot = null;
	// The time at which we're currently rendering work.
	var nextRenderExpirationTime = NoWork;
	var nextLatestAbsoluteTimeoutMs = -1;
	var nextRenderDidError = false;

	// The next fiber with an effect that we're currently committing.
	var nextEffect = null;

	var isCommitting$1 = false;
	var rootWithPendingPassiveEffects = null;
	var passiveEffectCallbackHandle = null;
	var passiveEffectCallback = null;

	var legacyErrorBoundariesThatAlreadyFailed = null;

	// Used for performance tracking.
	var interruptedBy = null;

	var stashedWorkInProgressProperties = void 0;
	var replayUnitOfWork = void 0;
	var mayReplayFailedUnitOfWork = void 0;
	var isReplayingFailedUnitOfWork = void 0;
	var originalReplayError = void 0;
	var rethrowOriginalError = void 0;
	if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	  stashedWorkInProgressProperties = null;
	  mayReplayFailedUnitOfWork = true;
	  isReplayingFailedUnitOfWork = false;
	  originalReplayError = null;
	  replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
	    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
	      // Don't replay promises. Treat everything else like an error.
	      // TODO: Need to figure out a different strategy if/when we add
	      // support for catching other types.
	      return;
	    }

	    // Restore the original state of the work-in-progress
	    if (stashedWorkInProgressProperties === null) {
	      // This should never happen. Don't throw because this code is DEV-only.
	      warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
	      return;
	    }
	    assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

	    switch (failedUnitOfWork.tag) {
	      case HostRoot:
	        popHostContainer(failedUnitOfWork);
	        popTopLevelContextObject(failedUnitOfWork);
	        break;
	      case HostComponent:
	        popHostContext(failedUnitOfWork);
	        break;
	      case ClassComponent:
	        {
	          var Component = failedUnitOfWork.type;
	          if (isContextProvider(Component)) {
	            popContext(failedUnitOfWork);
	          }
	          break;
	        }
	      case HostPortal:
	        popHostContainer(failedUnitOfWork);
	        break;
	      case ContextProvider:
	        popProvider(failedUnitOfWork);
	        break;
	    }
	    // Replay the begin phase.
	    isReplayingFailedUnitOfWork = true;
	    originalReplayError = thrownValue;
	    invokeGuardedCallback(null, workLoop, null, isYieldy);
	    isReplayingFailedUnitOfWork = false;
	    originalReplayError = null;
	    if (hasCaughtError()) {
	      var replayError = clearCaughtError();
	      if (replayError != null && thrownValue != null) {
	        try {
	          // Reading the expando property is intentionally
	          // inside `try` because it might be a getter or Proxy.
	          if (replayError._suppressLogging) {
	            // Also suppress logging for the original error.
	            thrownValue._suppressLogging = true;
	          }
	        } catch (inner) {
	          // Ignore.
	        }
	      }
	    } else {
	      // If the begin phase did not fail the second time, set this pointer
	      // back to the original value.
	      nextUnitOfWork = failedUnitOfWork;
	    }
	  };
	  rethrowOriginalError = function () {
	    throw originalReplayError;
	  };
	}

	function resetStack() {
	  if (nextUnitOfWork !== null) {
	    var interruptedWork = nextUnitOfWork.return;
	    while (interruptedWork !== null) {
	      unwindInterruptedWork(interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	    checkThatStackIsEmpty();
	  }

	  nextRoot = null;
	  nextRenderExpirationTime = NoWork;
	  nextLatestAbsoluteTimeoutMs = -1;
	  nextRenderDidError = false;
	  nextUnitOfWork = null;
	}

	function commitAllHostEffects() {
	  while (nextEffect !== null) {
	    {
	      setCurrentFiber(nextEffect);
	    }
	    recordEffect();

	    var effectTag = nextEffect.effectTag;

	    if (effectTag & ContentReset) {
	      commitResetTextContent(nextEffect);
	    }

	    if (effectTag & Ref) {
	      var current$$1 = nextEffect.alternate;
	      if (current$$1 !== null) {
	        commitDetachRef(current$$1);
	      }
	    }

	    // The following switch statement is only concerned about placement,
	    // updates, and deletions. To avoid needing to add a case for every
	    // possible bitmap value, we remove the secondary effects from the
	    // effect tag and switch on that value.
	    var primaryEffectTag = effectTag & (Placement | Update | Deletion);
	    switch (primaryEffectTag) {
	      case Placement:
	        {
	          commitPlacement(nextEffect);
	          // Clear the "placement" from effect tag so that we know that this is inserted, before
	          // any life-cycles like componentDidMount gets called.
	          // TODO: findDOMNode doesn't rely on this any more but isMounted
	          // does and isMounted is deprecated anyway so we should be able
	          // to kill this.
	          nextEffect.effectTag &= ~Placement;
	          break;
	        }
	      case PlacementAndUpdate:
	        {
	          // Placement
	          commitPlacement(nextEffect);
	          // Clear the "placement" from effect tag so that we know that this is inserted, before
	          // any life-cycles like componentDidMount gets called.
	          nextEffect.effectTag &= ~Placement;

	          // Update
	          var _current = nextEffect.alternate;
	          commitWork(_current, nextEffect);
	          break;
	        }
	      case Update:
	        {
	          var _current2 = nextEffect.alternate;
	          commitWork(_current2, nextEffect);
	          break;
	        }
	      case Deletion:
	        {
	          commitDeletion(nextEffect);
	          break;
	        }
	    }
	    nextEffect = nextEffect.nextEffect;
	  }

	  {
	    resetCurrentFiber();
	  }
	}

	function commitBeforeMutationLifecycles() {
	  while (nextEffect !== null) {
	    {
	      setCurrentFiber(nextEffect);
	    }

	    var effectTag = nextEffect.effectTag;
	    if (effectTag & Snapshot) {
	      recordEffect();
	      var current$$1 = nextEffect.alternate;
	      commitBeforeMutationLifeCycles(current$$1, nextEffect);
	    }

	    nextEffect = nextEffect.nextEffect;
	  }

	  {
	    resetCurrentFiber();
	  }
	}

	function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
	  {
	    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    if (warnAboutDeprecatedLifecycles) {
	      ReactStrictModeWarnings.flushPendingDeprecationWarnings();
	    }
	  }
	  while (nextEffect !== null) {
	    {
	      setCurrentFiber(nextEffect);
	    }
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & (Update | Callback)) {
	      recordEffect();
	      var current$$1 = nextEffect.alternate;
	      commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
	    }

	    if (effectTag & Ref) {
	      recordEffect();
	      commitAttachRef(nextEffect);
	    }

	    if (effectTag & Passive) {
	      rootWithPendingPassiveEffects = finishedRoot;
	    }

	    nextEffect = nextEffect.nextEffect;
	  }
	  {
	    resetCurrentFiber();
	  }
	}

	function commitPassiveEffects(root, firstEffect) {
	  rootWithPendingPassiveEffects = null;
	  passiveEffectCallbackHandle = null;
	  passiveEffectCallback = null;

	  // Set this to true to prevent re-entrancy
	  var previousIsRendering = isRendering;
	  isRendering = true;

	  var effect = firstEffect;
	  do {
	    {
	      setCurrentFiber(effect);
	    }

	    if (effect.effectTag & Passive) {
	      var didError = false;
	      var error = void 0;
	      {
	        invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);
	        if (hasCaughtError()) {
	          didError = true;
	          error = clearCaughtError();
	        }
	      }
	      if (didError) {
	        captureCommitPhaseError(effect, error);
	      }
	    }
	    effect = effect.nextEffect;
	  } while (effect !== null);
	  {
	    resetCurrentFiber();
	  }

	  isRendering = previousIsRendering;

	  // Check if work was scheduled by one of the effects
	  var rootExpirationTime = root.expirationTime;
	  if (rootExpirationTime !== NoWork) {
	    requestWork(root, rootExpirationTime);
	  }
	  // Flush any sync work that was scheduled by effects
	  if (!isBatchingUpdates && !isRendering) {
	    performSyncWork();
	  }
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}

	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function flushPassiveEffects() {
	  if (passiveEffectCallbackHandle !== null) {
	    cancelPassiveEffects(passiveEffectCallbackHandle);
	  }
	  if (passiveEffectCallback !== null) {
	    // We call the scheduled callback instead of commitPassiveEffects directly
	    // to ensure tracing works correctly.
	    passiveEffectCallback();
	  }
	}

	function commitRoot(root, finishedWork) {
	  isWorking = true;
	  isCommitting$1 = true;
	  startCommitTimer();

	  !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  var committedExpirationTime = root.pendingCommitExpirationTime;
	  !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  root.pendingCommitExpirationTime = NoWork;

	  // Update the pending priority levels to account for the work that we are
	  // about to commit. This needs to happen before calling the lifecycles, since
	  // they may schedule additional updates.
	  var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
	  var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
	  var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
	  markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);

	  var prevInteractions = null;
	  if (enableSchedulerTracing) {
	    // Restore any pending interactions at this point,
	    // So that cascading work triggered during the render phase will be accounted for.
	    prevInteractions = tracing.__interactionsRef.current;
	    tracing.__interactionsRef.current = root.memoizedInteractions;
	  }

	  // Reset this to null before calling lifecycles
	  ReactCurrentOwner$2.current = null;

	  var firstEffect = void 0;
	  if (finishedWork.effectTag > PerformedWork) {
	    // A fiber's effect list consists only of its children, not itself. So if
	    // the root has an effect, we need to add it to the end of the list. The
	    // resulting list is the set that would belong to the root's parent, if
	    // it had one; that is, all the effects in the tree including the root.
	    if (finishedWork.lastEffect !== null) {
	      finishedWork.lastEffect.nextEffect = finishedWork;
	      firstEffect = finishedWork.firstEffect;
	    } else {
	      firstEffect = finishedWork;
	    }
	  } else {
	    // There is no effect on the root.
	    firstEffect = finishedWork.firstEffect;
	  }

	  prepareForCommit(root.containerInfo);

	  // Invoke instances of getSnapshotBeforeUpdate before mutation.
	  nextEffect = firstEffect;
	  startCommitSnapshotEffectsTimer();
	  while (nextEffect !== null) {
	    var didError = false;
	    var error = void 0;
	    {
	      invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);
	      if (hasCaughtError()) {
	        didError = true;
	        error = clearCaughtError();
	      }
	    }
	    if (didError) {
	      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      captureCommitPhaseError(nextEffect, error);
	      // Clean-up
	      if (nextEffect !== null) {
	        nextEffect = nextEffect.nextEffect;
	      }
	    }
	  }
	  stopCommitSnapshotEffectsTimer();

	  if (enableProfilerTimer) {
	    // Mark the current commit time to be shared by all Profilers in this batch.
	    // This enables them to be grouped later.
	    recordCommitTime();
	  }

	  // Commit all the side-effects within a tree. We'll do this in two passes.
	  // The first pass performs all the host insertions, updates, deletions and
	  // ref unmounts.
	  nextEffect = firstEffect;
	  startCommitHostEffectsTimer();
	  while (nextEffect !== null) {
	    var _didError = false;
	    var _error = void 0;
	    {
	      invokeGuardedCallback(null, commitAllHostEffects, null);
	      if (hasCaughtError()) {
	        _didError = true;
	        _error = clearCaughtError();
	      }
	    }
	    if (_didError) {
	      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      captureCommitPhaseError(nextEffect, _error);
	      // Clean-up
	      if (nextEffect !== null) {
	        nextEffect = nextEffect.nextEffect;
	      }
	    }
	  }
	  stopCommitHostEffectsTimer();

	  resetAfterCommit(root.containerInfo);

	  // The work-in-progress tree is now the current tree. This must come after
	  // the first pass of the commit phase, so that the previous tree is still
	  // current during componentWillUnmount, but before the second pass, so that
	  // the finished work is current during componentDidMount/Update.
	  root.current = finishedWork;

	  // In the second pass we'll perform all life-cycles and ref callbacks.
	  // Life-cycles happen as a separate pass so that all placements, updates,
	  // and deletions in the entire tree have already been invoked.
	  // This pass also triggers any renderer-specific initial effects.
	  nextEffect = firstEffect;
	  startCommitLifeCyclesTimer();
	  while (nextEffect !== null) {
	    var _didError2 = false;
	    var _error2 = void 0;
	    {
	      invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);
	      if (hasCaughtError()) {
	        _didError2 = true;
	        _error2 = clearCaughtError();
	      }
	    }
	    if (_didError2) {
	      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      captureCommitPhaseError(nextEffect, _error2);
	      if (nextEffect !== null) {
	        nextEffect = nextEffect.nextEffect;
	      }
	    }
	  }

	  if (firstEffect !== null && rootWithPendingPassiveEffects !== null) {
	    // This commit included a passive effect. These do not need to fire until
	    // after the next paint. Schedule an callback to fire them in an async
	    // event. To ensure serial execution, the callback will be flushed early if
	    // we enter rootWithPendingPassiveEffects commit phase before then.
	    var callback = commitPassiveEffects.bind(null, root, firstEffect);
	    if (enableSchedulerTracing) {
	      // TODO: Avoid this extra callback by mutating the tracing ref directly,
	      // like we do at the beginning of commitRoot. I've opted not to do that
	      // here because that code is still in flux.
	      callback = tracing.unstable_wrap(callback);
	    }
	    passiveEffectCallbackHandle = scheduler.unstable_runWithPriority(scheduler.unstable_NormalPriority, function () {
	      return schedulePassiveEffects(callback);
	    });
	    passiveEffectCallback = callback;
	  }

	  isCommitting$1 = false;
	  isWorking = false;
	  stopCommitLifeCyclesTimer();
	  stopCommitTimer();
	  onCommitRoot(finishedWork.stateNode);
	  if (true && ReactFiberInstrumentation_1.debugTool) {
	    ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
	  }

	  var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
	  var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
	  var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;
	  if (earliestRemainingTimeAfterCommit === NoWork) {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }
	  onCommit(root, earliestRemainingTimeAfterCommit);

	  if (enableSchedulerTracing) {
	    tracing.__interactionsRef.current = prevInteractions;

	    var subscriber = void 0;

	    try {
	      subscriber = tracing.__subscriberRef.current;
	      if (subscriber !== null && root.memoizedInteractions.size > 0) {
	        var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
	        subscriber.onWorkStopped(root.memoizedInteractions, threadID);
	      }
	    } catch (error) {
	      // It's not safe for commitRoot() to throw.
	      // Store the error for now and we'll re-throw in finishRendering().
	      if (!hasUnhandledError) {
	        hasUnhandledError = true;
	        unhandledError = error;
	      }
	    } finally {
	      // Clear completed interactions from the pending Map.
	      // Unless the render was suspended or cascading work was scheduled,
	      // In which case– leave pending interactions until the subsequent render.
	      var pendingInteractionMap = root.pendingInteractionMap;
	      pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	        // Only decrement the pending interaction count if we're done.
	        // If there's still work at the current priority,
	        // That indicates that we are waiting for suspense data.
	        if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
	          pendingInteractionMap.delete(scheduledExpirationTime);

	          scheduledInteractions.forEach(function (interaction) {
	            interaction.__count--;

	            if (subscriber !== null && interaction.__count === 0) {
	              try {
	                subscriber.onInteractionScheduledWorkCompleted(interaction);
	              } catch (error) {
	                // It's not safe for commitRoot() to throw.
	                // Store the error for now and we'll re-throw in finishRendering().
	                if (!hasUnhandledError) {
	                  hasUnhandledError = true;
	                  unhandledError = error;
	                }
	              }
	            }
	          });
	        }
	      });
	    }
	  }
	}

	function resetChildExpirationTime(workInProgress, renderTime) {
	  if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
	    // The children of this component are hidden. Don't bubble their
	    // expiration times.
	    return;
	  }

	  var newChildExpirationTime = NoWork;

	  // Bubble up the earliest expiration time.
	  if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	    // We're in profiling mode.
	    // Let's use this same traversal to update the render durations.
	    var actualDuration = workInProgress.actualDuration;
	    var treeBaseDuration = workInProgress.selfBaseDuration;

	    // When a fiber is cloned, its actualDuration is reset to 0.
	    // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
	    // When work is done, it should bubble to the parent's actualDuration.
	    // If the fiber has not been cloned though, (meaning no work was done),
	    // Then this value will reflect the amount of time spent working on a previous render.
	    // In that case it should not bubble.
	    // We determine whether it was cloned by comparing the child pointer.
	    var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;

	    var child = workInProgress.child;
	    while (child !== null) {
	      var childUpdateExpirationTime = child.expirationTime;
	      var childChildExpirationTime = child.childExpirationTime;
	      if (childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childUpdateExpirationTime;
	      }
	      if (childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childChildExpirationTime;
	      }
	      if (shouldBubbleActualDurations) {
	        actualDuration += child.actualDuration;
	      }
	      treeBaseDuration += child.treeBaseDuration;
	      child = child.sibling;
	    }
	    workInProgress.actualDuration = actualDuration;
	    workInProgress.treeBaseDuration = treeBaseDuration;
	  } else {
	    var _child = workInProgress.child;
	    while (_child !== null) {
	      var _childUpdateExpirationTime = _child.expirationTime;
	      var _childChildExpirationTime = _child.childExpirationTime;
	      if (_childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childUpdateExpirationTime;
	      }
	      if (_childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childChildExpirationTime;
	      }
	      _child = _child.sibling;
	    }
	  }

	  workInProgress.childExpirationTime = newChildExpirationTime;
	}

	function completeUnitOfWork(workInProgress) {
	  // Attempt to complete the current unit of work, then move to the
	  // next sibling. If there are no more siblings, return to the
	  // parent fiber.
	  while (true) {
	    // The current, flushed, state of this fiber is the alternate.
	    // Ideally nothing should rely on this, but relying on it here
	    // means that we don't need an additional field on the work in
	    // progress.
	    var current$$1 = workInProgress.alternate;
	    {
	      setCurrentFiber(workInProgress);
	    }

	    var returnFiber = workInProgress.return;
	    var siblingFiber = workInProgress.sibling;

	    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
	      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	        // Don't replay if it fails during completion phase.
	        mayReplayFailedUnitOfWork = false;
	      }
	      // This fiber completed.
	      // Remember we're completing this unit so we can find a boundary if it fails.
	      nextUnitOfWork = workInProgress;
	      if (enableProfilerTimer) {
	        if (workInProgress.mode & ProfileMode) {
	          startProfilerTimer(workInProgress);
	        }
	        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
	        if (workInProgress.mode & ProfileMode) {
	          // Update render duration assuming we didn't error.
	          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
	        }
	      } else {
	        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
	      }
	      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	        // We're out of completion phase so replaying is fine now.
	        mayReplayFailedUnitOfWork = true;
	      }
	      stopWorkTimer(workInProgress);
	      resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
	      {
	        resetCurrentFiber();
	      }

	      if (nextUnitOfWork !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        return nextUnitOfWork;
	      }

	      if (returnFiber !== null &&
	      // Do not append effects to parents if a sibling failed to complete
	      (returnFiber.effectTag & Incomplete) === NoEffect) {
	        // Append all the effects of the subtree and this fiber onto the effect
	        // list of the parent. The completion order of the children affects the
	        // side-effect order.
	        if (returnFiber.firstEffect === null) {
	          returnFiber.firstEffect = workInProgress.firstEffect;
	        }
	        if (workInProgress.lastEffect !== null) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
	          }
	          returnFiber.lastEffect = workInProgress.lastEffect;
	        }

	        // If this fiber had side-effects, we append it AFTER the children's
	        // side-effects. We can perform certain side-effects earlier if
	        // needed, by doing multiple passes over the effect list. We don't want
	        // to schedule our own side-effect on our own list because if end up
	        // reusing children we'll schedule this effect onto itself since we're
	        // at the end.
	        var effectTag = workInProgress.effectTag;
	        // Skip both NoWork and PerformedWork tags when creating the effect list.
	        // PerformedWork effect is read by React DevTools but shouldn't be committed.
	        if (effectTag > PerformedWork) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress;
	          } else {
	            returnFiber.firstEffect = workInProgress;
	          }
	          returnFiber.lastEffect = workInProgress;
	        }
	      }

	      if (true && ReactFiberInstrumentation_1.debugTool) {
	        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
	      }

	      if (siblingFiber !== null) {
	        // If there is more work to do in this returnFiber, do that next.
	        return siblingFiber;
	      } else if (returnFiber !== null) {
	        // If there's no more work in this returnFiber. Complete the returnFiber.
	        workInProgress = returnFiber;
	        continue;
	      } else {
	        // We've reached the root.
	        return null;
	      }
	    } else {
	      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);

	        // Include the time spent working on failed children before continuing.
	        var actualDuration = workInProgress.actualDuration;
	        var child = workInProgress.child;
	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }
	        workInProgress.actualDuration = actualDuration;
	      }

	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var next = unwindWork(workInProgress, nextRenderExpirationTime);
	      // Because this fiber did not complete, don't reset its expiration time.
	      if (workInProgress.effectTag & DidCapture) {
	        // Restarting an error boundary
	        stopFailedWorkTimer(workInProgress);
	      } else {
	        stopWorkTimer(workInProgress);
	      }

	      {
	        resetCurrentFiber();
	      }

	      if (next !== null) {
	        stopWorkTimer(workInProgress);
	        if (true && ReactFiberInstrumentation_1.debugTool) {
	          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
	        }

	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        next.effectTag &= HostEffectMask;
	        return next;
	      }

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its effect list.
	        returnFiber.firstEffect = returnFiber.lastEffect = null;
	        returnFiber.effectTag |= Incomplete;
	      }

	      if (true && ReactFiberInstrumentation_1.debugTool) {
	        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
	      }

	      if (siblingFiber !== null) {
	        // If there is more work to do in this returnFiber, do that next.
	        return siblingFiber;
	      } else if (returnFiber !== null) {
	        // If there's no more work in this returnFiber. Complete the returnFiber.
	        workInProgress = returnFiber;
	        continue;
	      } else {
	        return null;
	      }
	    }
	  }

	  // Without this explicit null return Flow complains of invalid return type
	  // TODO Remove the above while(true) loop
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	function performUnitOfWork(workInProgress) {
	  // The current, flushed, state of this fiber is the alternate.
	  // Ideally nothing should rely on this, but relying on it here
	  // means that we don't need an additional field on the work in
	  // progress.
	  var current$$1 = workInProgress.alternate;

	  // See if beginning this work spawns more work.
	  startWorkTimer(workInProgress);
	  {
	    setCurrentFiber(workInProgress);
	  }

	  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	    stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
	  }

	  var next = void 0;
	  if (enableProfilerTimer) {
	    if (workInProgress.mode & ProfileMode) {
	      startProfilerTimer(workInProgress);
	    }

	    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
	    workInProgress.memoizedProps = workInProgress.pendingProps;

	    if (workInProgress.mode & ProfileMode) {
	      // Record the render duration assuming we didn't bailout (or error).
	      stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
	    }
	  } else {
	    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
	    workInProgress.memoizedProps = workInProgress.pendingProps;
	  }

	  {
	    resetCurrentFiber();
	    if (isReplayingFailedUnitOfWork) {
	      // Currently replaying a failed unit of work. This should be unreachable,
	      // because the render phase is meant to be idempotent, and it should
	      // have thrown again. Since it didn't, rethrow the original error, so
	      // React's internal stack is not misaligned.
	      rethrowOriginalError();
	    }
	  }
	  if (true && ReactFiberInstrumentation_1.debugTool) {
	    ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
	  }

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    next = completeUnitOfWork(workInProgress);
	  }

	  ReactCurrentOwner$2.current = null;

	  return next;
	}

	function workLoop(isYieldy) {
	  if (!isYieldy) {
	    // Flush work without yielding
	    while (nextUnitOfWork !== null) {
	      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
	    }
	  } else {
	    // Flush asynchronous work until there's a higher priority event
	    while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {
	      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
	    }
	  }
	}

	function renderRoot(root, isYieldy) {
	  !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  flushPassiveEffects();

	  isWorking = true;
	  var previousDispatcher = ReactCurrentDispatcher.current;
	  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

	  var expirationTime = root.nextExpirationTimeToWorkOn;

	  // Check if we're starting from a fresh stack, or if we're resuming from
	  // previously yielded work.
	  if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
	    // Reset the stack and start working from the root.
	    resetStack();
	    nextRoot = root;
	    nextRenderExpirationTime = expirationTime;
	    nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
	    root.pendingCommitExpirationTime = NoWork;

	    if (enableSchedulerTracing) {
	      // Determine which interactions this batch of work currently includes,
	      // So that we can accurately attribute time spent working on it,
	      var interactions = new Set();
	      root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	        if (scheduledExpirationTime >= expirationTime) {
	          scheduledInteractions.forEach(function (interaction) {
	            return interactions.add(interaction);
	          });
	        }
	      });

	      // Store the current set of interactions on the FiberRoot for a few reasons:
	      // We can re-use it in hot functions like renderRoot() without having to recalculate it.
	      // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
	      // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
	      root.memoizedInteractions = interactions;

	      if (interactions.size > 0) {
	        var subscriber = tracing.__subscriberRef.current;
	        if (subscriber !== null) {
	          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
	          try {
	            subscriber.onWorkStarted(interactions, threadID);
	          } catch (error) {
	            // Work thrown by an interaction tracing subscriber should be rethrown,
	            // But only once it's safe (to avoid leaving the scheduler in an invalid state).
	            // Store the error for now and we'll re-throw in finishRendering().
	            if (!hasUnhandledError) {
	              hasUnhandledError = true;
	              unhandledError = error;
	            }
	          }
	        }
	      }
	    }
	  }

	  var prevInteractions = null;
	  if (enableSchedulerTracing) {
	    // We're about to start new traced work.
	    // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
	    prevInteractions = tracing.__interactionsRef.current;
	    tracing.__interactionsRef.current = root.memoizedInteractions;
	  }

	  var didFatal = false;

	  startWorkLoopTimer(nextUnitOfWork);

	  do {
	    try {
	      workLoop(isYieldy);
	    } catch (thrownValue) {
	      resetContextDependences();
	      resetHooks();

	      // Reset in case completion throws.
	      // This is only used in DEV and when replaying is on.
	      var mayReplay = void 0;
	      if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	        mayReplay = mayReplayFailedUnitOfWork;
	        mayReplayFailedUnitOfWork = true;
	      }

	      if (nextUnitOfWork === null) {
	        // This is a fatal error.
	        didFatal = true;
	        onUncaughtError(thrownValue);
	      } else {
	        if (enableProfilerTimer && nextUnitOfWork.mode & ProfileMode) {
	          // Record the time spent rendering before an error was thrown.
	          // This avoids inaccurate Profiler durations in the case of a suspended render.
	          stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);
	        }

	        {
	          // Reset global debug state
	          // We assume this is defined in DEV
	          resetCurrentlyProcessingQueue();
	        }

	        if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
	          if (mayReplay) {
	            var failedUnitOfWork = nextUnitOfWork;
	            replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
	          }
	        }

	        // TODO: we already know this isn't true in some cases.
	        // At least this shows a nicer error message until we figure out the cause.
	        // https://github.com/facebook/react/issues/12449#issuecomment-386727431
	        !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;

	        var sourceFiber = nextUnitOfWork;
	        var returnFiber = sourceFiber.return;
	        if (returnFiber === null) {
	          // This is the root. The root could capture its own errors. However,
	          // we don't know if it errors before or after we pushed the host
	          // context. This information is needed to avoid a stack mismatch.
	          // Because we're not sure, treat this as a fatal error. We could track
	          // which phase it fails in, but doesn't seem worth it. At least
	          // for now.
	          didFatal = true;
	          onUncaughtError(thrownValue);
	        } else {
	          throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
	          nextUnitOfWork = completeUnitOfWork(sourceFiber);
	          continue;
	        }
	      }
	    }
	    break;
	  } while (true);

	  if (enableSchedulerTracing) {
	    // Traced work is done for now; restore the previous interactions.
	    tracing.__interactionsRef.current = prevInteractions;
	  }

	  // We're done performing work. Time to clean up.
	  isWorking = false;
	  ReactCurrentDispatcher.current = previousDispatcher;
	  resetContextDependences();
	  resetHooks();

	  // Yield back to main thread.
	  if (didFatal) {
	    var _didCompleteRoot = false;
	    stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
	    interruptedBy = null;
	    // There was a fatal error.
	    {
	      resetStackAfterFatalErrorInDev();
	    }
	    // `nextRoot` points to the in-progress root. A non-null value indicates
	    // that we're in the middle of an async render. Set it to null to indicate
	    // there's no more work to be done in the current batch.
	    nextRoot = null;
	    onFatal(root);
	    return;
	  }

	  if (nextUnitOfWork !== null) {
	    // There's still remaining async work in this tree, but we ran out of time
	    // in the current frame. Yield back to the renderer. Unless we're
	    // interrupted by a higher priority update, we'll continue later from where
	    // we left off.
	    var _didCompleteRoot2 = false;
	    stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
	    interruptedBy = null;
	    onYield(root);
	    return;
	  }

	  // We completed the whole tree.
	  var didCompleteRoot = true;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  var rootWorkInProgress = root.current.alternate;
	  !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  // `nextRoot` points to the in-progress root. A non-null value indicates
	  // that we're in the middle of an async render. Set it to null to indicate
	  // there's no more work to be done in the current batch.
	  nextRoot = null;
	  interruptedBy = null;

	  if (nextRenderDidError) {
	    // There was an error
	    if (hasLowerPriorityWork(root, expirationTime)) {
	      // There's lower priority work. If so, it may have the effect of fixing
	      // the exception that was just thrown. Exit without committing. This is
	      // similar to a suspend, but without a timeout because we're not waiting
	      // for a promise to resolve. React will restart at the lower
	      // priority level.
	      markSuspendedPriorityLevel(root, expirationTime);
	      var suspendedExpirationTime = expirationTime;
	      var rootExpirationTime = root.expirationTime;
	      onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
	      );
	      return;
	    } else if (
	    // There's no lower priority work, but we're rendering asynchronously.
	    // Synchronously attempt to render the same level one more time. This is
	    // similar to a suspend, but without a timeout because we're not waiting
	    // for a promise to resolve.
	    !root.didError && isYieldy) {
	      root.didError = true;
	      var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;
	      var _rootExpirationTime = root.expirationTime = Sync;
	      onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
	      );
	      return;
	    }
	  }

	  if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
	    // The tree was suspended.
	    var _suspendedExpirationTime2 = expirationTime;
	    markSuspendedPriorityLevel(root, _suspendedExpirationTime2);

	    // Find the earliest uncommitted expiration time in the tree, including
	    // work that is suspended. The timeout threshold cannot be longer than
	    // the overall expiration.
	    var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
	    var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
	    if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
	      nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
	    }

	    // Subtract the current time from the absolute timeout to get the number
	    // of milliseconds until the timeout. In other words, convert an absolute
	    // timestamp to a relative time. This is the value that is passed
	    // to `setTimeout`.
	    var currentTimeMs = expirationTimeToMs(requestCurrentTime());
	    var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
	    msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout;

	    // TODO: Account for the Just Noticeable Difference

	    var _rootExpirationTime2 = root.expirationTime;
	    onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
	    return;
	  }

	  // Ready to commit.
	  onComplete(root, rootWorkInProgress, expirationTime);
	}

	function captureCommitPhaseError(sourceFiber, value) {
	  var expirationTime = Sync;
	  var fiber = sourceFiber.return;
	  while (fiber !== null) {
	    switch (fiber.tag) {
	      case ClassComponent:
	        var ctor = fiber.type;
	        var instance = fiber.stateNode;
	        if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	          var errorInfo = createCapturedValue(value, sourceFiber);
	          var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
	          enqueueUpdate(fiber, update);
	          scheduleWork(fiber, expirationTime);
	          return;
	        }
	        break;
	      case HostRoot:
	        {
	          var _errorInfo = createCapturedValue(value, sourceFiber);
	          var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
	          enqueueUpdate(fiber, _update);
	          scheduleWork(fiber, expirationTime);
	          return;
	        }
	    }
	    fiber = fiber.return;
	  }

	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    var rootFiber = sourceFiber;
	    var _errorInfo2 = createCapturedValue(value, rootFiber);
	    var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
	    enqueueUpdate(rootFiber, _update2);
	    scheduleWork(rootFiber, expirationTime);
	  }
	}

	function computeThreadID(expirationTime, interactionThreadID) {
	  // Interaction threads are unique per root and expiration time.
	  return expirationTime * 1000 + interactionThreadID;
	}

	// Creates a unique async expiration time.
	function computeUniqueAsyncExpiration() {
	  var currentTime = requestCurrentTime();
	  var result = computeAsyncExpiration(currentTime);
	  if (result >= lastUniqueAsyncExpiration) {
	    // Since we assume the current time monotonically increases, we only hit
	    // this branch when computeUniqueAsyncExpiration is fired multiple times
	    // within a 200ms window (or whatever the async bucket size is).
	    result = lastUniqueAsyncExpiration - 1;
	  }
	  lastUniqueAsyncExpiration = result;
	  return lastUniqueAsyncExpiration;
	}

	function computeExpirationForFiber(currentTime, fiber) {
	  var priorityLevel = scheduler.unstable_getCurrentPriorityLevel();

	  var expirationTime = void 0;
	  if ((fiber.mode & ConcurrentMode) === NoContext) {
	    // Outside of concurrent mode, updates are always synchronous.
	    expirationTime = Sync;
	  } else if (isWorking && !isCommitting$1) {
	    // During render phase, updates expire during as the current render.
	    expirationTime = nextRenderExpirationTime;
	  } else {
	    switch (priorityLevel) {
	      case scheduler.unstable_ImmediatePriority:
	        expirationTime = Sync;
	        break;
	      case scheduler.unstable_UserBlockingPriority:
	        expirationTime = computeInteractiveExpiration(currentTime);
	        break;
	      case scheduler.unstable_NormalPriority:
	        // This is a normal, concurrent update
	        expirationTime = computeAsyncExpiration(currentTime);
	        break;
	      case scheduler.unstable_LowPriority:
	      case scheduler.unstable_IdlePriority:
	        expirationTime = Never;
	        break;
	      default:
	        invariant(false, 'Unknown priority level. This error is likely caused by a bug in React. Please file an issue.');
	    }

	    // If we're in the middle of rendering a tree, do not update at the same
	    // expiration time that is already rendering.
	    if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
	      expirationTime -= 1;
	    }
	  }

	  // Keep track of the lowest pending interactive expiration time. This
	  // allows us to synchronously flush all interactive updates
	  // when needed.
	  // TODO: Move this to renderer?
	  if (priorityLevel === scheduler.unstable_UserBlockingPriority && (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime)) {
	    lowestPriorityPendingInteractiveExpirationTime = expirationTime;
	  }

	  return expirationTime;
	}

	function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
	  // Schedule the timeout.
	  if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
	    nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
	  }
	}

	function renderDidError() {
	  nextRenderDidError = true;
	}

	function pingSuspendedRoot(root, thenable, pingTime) {
	  // A promise that previously suspended React from committing has resolved.
	  // If React is still suspended, try again at the previous level (pingTime).

	  var pingCache = root.pingCache;
	  if (pingCache !== null) {
	    // The thenable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    pingCache.delete(thenable);
	  }

	  if (nextRoot !== null && nextRenderExpirationTime === pingTime) {
	    // Received a ping at the same priority level at which we're currently
	    // rendering. Restart from the root.
	    nextRoot = null;
	  } else {
	    // Confirm that the root is still suspended at this level. Otherwise exit.
	    if (isPriorityLevelSuspended(root, pingTime)) {
	      // Ping at the original level
	      markPingedPriorityLevel(root, pingTime);
	      var rootExpirationTime = root.expirationTime;
	      if (rootExpirationTime !== NoWork) {
	        requestWork(root, rootExpirationTime);
	      }
	    }
	  }
	}

	function retryTimedOutBoundary(boundaryFiber, thenable) {
	  // The boundary fiber (a Suspense component) previously timed out and was
	  // rendered in its fallback state. One of the promises that suspended it has
	  // resolved, which means at least part of the tree was likely unblocked. Try
	  var retryCache = void 0;
	  if (enableSuspenseServerRenderer) {
	    switch (boundaryFiber.tag) {
	      case SuspenseComponent:
	        retryCache = boundaryFiber.stateNode;
	        break;
	      case DehydratedSuspenseComponent:
	        retryCache = boundaryFiber.memoizedState;
	        break;
	      default:
	        invariant(false, 'Pinged unknown suspense boundary type. This is probably a bug in React.');
	    }
	  } else {
	    retryCache = boundaryFiber.stateNode;
	  }
	  if (retryCache !== null) {
	    // The thenable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    retryCache.delete(thenable);
	  }

	  var currentTime = requestCurrentTime();
	  var retryTime = computeExpirationForFiber(currentTime, boundaryFiber);
	  var root = scheduleWorkToRoot(boundaryFiber, retryTime);
	  if (root !== null) {
	    markPendingPriorityLevel(root, retryTime);
	    var rootExpirationTime = root.expirationTime;
	    if (rootExpirationTime !== NoWork) {
	      requestWork(root, rootExpirationTime);
	    }
	  }
	}

	function scheduleWorkToRoot(fiber, expirationTime) {
	  recordScheduleUpdate();

	  {
	    if (fiber.tag === ClassComponent) {
	      var instance = fiber.stateNode;
	      warnAboutInvalidUpdates(instance);
	    }
	  }

	  // Update the source fiber's expiration time
	  if (fiber.expirationTime < expirationTime) {
	    fiber.expirationTime = expirationTime;
	  }
	  var alternate = fiber.alternate;
	  if (alternate !== null && alternate.expirationTime < expirationTime) {
	    alternate.expirationTime = expirationTime;
	  }
	  // Walk the parent path to the root and update the child expiration time.
	  var node = fiber.return;
	  var root = null;
	  if (node === null && fiber.tag === HostRoot) {
	    root = fiber.stateNode;
	  } else {
	    while (node !== null) {
	      alternate = node.alternate;
	      if (node.childExpirationTime < expirationTime) {
	        node.childExpirationTime = expirationTime;
	        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	          alternate.childExpirationTime = expirationTime;
	        }
	      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	        alternate.childExpirationTime = expirationTime;
	      }
	      if (node.return === null && node.tag === HostRoot) {
	        root = node.stateNode;
	        break;
	      }
	      node = node.return;
	    }
	  }

	  if (enableSchedulerTracing) {
	    if (root !== null) {
	      var interactions = tracing.__interactionsRef.current;
	      if (interactions.size > 0) {
	        var pendingInteractionMap = root.pendingInteractionMap;
	        var pendingInteractions = pendingInteractionMap.get(expirationTime);
	        if (pendingInteractions != null) {
	          interactions.forEach(function (interaction) {
	            if (!pendingInteractions.has(interaction)) {
	              // Update the pending async work count for previously unscheduled interaction.
	              interaction.__count++;
	            }

	            pendingInteractions.add(interaction);
	          });
	        } else {
	          pendingInteractionMap.set(expirationTime, new Set(interactions));

	          // Update the pending async work count for the current interactions.
	          interactions.forEach(function (interaction) {
	            interaction.__count++;
	          });
	        }

	        var subscriber = tracing.__subscriberRef.current;
	        if (subscriber !== null) {
	          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
	          subscriber.onWorkScheduled(interactions, threadID);
	        }
	      }
	    }
	  }
	  return root;
	}

	function warnIfNotCurrentlyBatchingInDev(fiber) {
	  {
	    if (isRendering === false && isBatchingUpdates === false) {
	      warningWithoutStack$1(false, 'An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see in the browser." + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}

	function scheduleWork(fiber, expirationTime) {
	  var root = scheduleWorkToRoot(fiber, expirationTime);
	  if (root === null) {
	    {
	      switch (fiber.tag) {
	        case ClassComponent:
	          warnAboutUpdateOnUnmounted(fiber, true);
	          break;
	        case FunctionComponent:
	        case ForwardRef:
	        case MemoComponent:
	        case SimpleMemoComponent:
	          warnAboutUpdateOnUnmounted(fiber, false);
	          break;
	      }
	    }
	    return;
	  }

	  if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {
	    // This is an interruption. (Used for performance tracking.)
	    interruptedBy = fiber;
	    resetStack();
	  }
	  markPendingPriorityLevel(root, expirationTime);
	  if (
	  // If we're in the render phase, we don't need to schedule this root
	  // for an update, because we'll do it before we exit...
	  !isWorking || isCommitting$1 ||
	  // ...unless this is a different root than the one we're rendering.
	  nextRoot !== root) {
	    var rootExpirationTime = root.expirationTime;
	    requestWork(root, rootExpirationTime);
	  }
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    // Reset this back to zero so subsequent updates don't throw.
	    nestedUpdateCount = 0;
	    invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
	  }
	}

	function syncUpdates(fn, a, b, c, d) {
	  return scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, function () {
	    return fn(a, b, c, d);
	  });
	}

	// TODO: Everything below this is written as if it has been lifted to the
	// renderers. I'll do this in a follow-up.

	// Linked-list of roots
	var firstScheduledRoot = null;
	var lastScheduledRoot = null;

	var callbackExpirationTime = NoWork;
	var callbackID = void 0;
	var isRendering = false;
	var nextFlushedRoot = null;
	var nextFlushedExpirationTime = NoWork;
	var lowestPriorityPendingInteractiveExpirationTime = NoWork;
	var hasUnhandledError = false;
	var unhandledError = null;

	var isBatchingUpdates = false;
	var isUnbatchingUpdates = false;

	var completedBatches = null;

	var originalStartTimeMs = scheduler.unstable_now();
	var currentRendererTime = msToExpirationTime(originalStartTimeMs);
	var currentSchedulerTime = currentRendererTime;

	// Use these to prevent an infinite loop of nested updates
	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var lastCommittedRootDuringThisBatch = null;

	function recomputeCurrentRendererTime() {
	  var currentTimeMs = scheduler.unstable_now() - originalStartTimeMs;
	  currentRendererTime = msToExpirationTime(currentTimeMs);
	}

	function scheduleCallbackWithExpirationTime(root, expirationTime) {
	  if (callbackExpirationTime !== NoWork) {
	    // A callback is already scheduled. Check its expiration time (timeout).
	    if (expirationTime < callbackExpirationTime) {
	      // Existing callback has sufficient timeout. Exit.
	      return;
	    } else {
	      if (callbackID !== null) {
	        // Existing callback has insufficient timeout. Cancel and schedule a
	        // new one.
	        scheduler.unstable_cancelCallback(callbackID);
	      }
	    }
	    // The request callback timer is already running. Don't start a new one.
	  } else {
	    startRequestCallbackTimer();
	  }

	  callbackExpirationTime = expirationTime;
	  var currentMs = scheduler.unstable_now() - originalStartTimeMs;
	  var expirationTimeMs = expirationTimeToMs(expirationTime);
	  var timeout = expirationTimeMs - currentMs;
	  callbackID = scheduler.unstable_scheduleCallback(performAsyncWork, { timeout: timeout });
	}

	// For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
	// onYield is called upon exiting. We use these in lieu of returning a tuple.
	// I've also chosen not to inline them into renderRoot because these will
	// eventually be lifted into the renderer.
	function onFatal(root) {
	  root.finishedWork = null;
	}

	function onComplete(root, finishedWork, expirationTime) {
	  root.pendingCommitExpirationTime = expirationTime;
	  root.finishedWork = finishedWork;
	}

	function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
	  root.expirationTime = rootExpirationTime;
	  if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
	    // Don't wait an additional tick. Commit the tree immediately.
	    root.pendingCommitExpirationTime = suspendedExpirationTime;
	    root.finishedWork = finishedWork;
	  } else if (msUntilTimeout > 0) {
	    // Wait `msUntilTimeout` milliseconds before committing.
	    root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
	  }
	}

	function onYield(root) {
	  root.finishedWork = null;
	}

	function onTimeout(root, finishedWork, suspendedExpirationTime) {
	  // The root timed out. Commit it.
	  root.pendingCommitExpirationTime = suspendedExpirationTime;
	  root.finishedWork = finishedWork;
	  // Read the current time before entering the commit phase. We can be
	  // certain this won't cause tearing related to batching of event updates
	  // because we're at the top of a timer event.
	  recomputeCurrentRendererTime();
	  currentSchedulerTime = currentRendererTime;
	  flushRoot(root, suspendedExpirationTime);
	}

	function onCommit(root, expirationTime) {
	  root.expirationTime = expirationTime;
	  root.finishedWork = null;
	}

	function requestCurrentTime() {
	  // requestCurrentTime is called by the scheduler to compute an expiration
	  // time.
	  //
	  // Expiration times are computed by adding to the current time (the start
	  // time). However, if two updates are scheduled within the same event, we
	  // should treat their start times as simultaneous, even if the actual clock
	  // time has advanced between the first and second call.

	  // In other words, because expiration times determine how updates are batched,
	  // we want all updates of like priority that occur within the same event to
	  // receive the same expiration time. Otherwise we get tearing.
	  //
	  // We keep track of two separate times: the current "renderer" time and the
	  // current "scheduler" time. The renderer time can be updated whenever; it
	  // only exists to minimize the calls performance.now.
	  //
	  // But the scheduler time can only be updated if there's no pending work, or
	  // if we know for certain that we're not in the middle of an event.

	  if (isRendering) {
	    // We're already rendering. Return the most recently read time.
	    return currentSchedulerTime;
	  }
	  // Check if there's pending work.
	  findHighestPriorityRoot();
	  if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
	    // If there's no pending work, or if the pending work is offscreen, we can
	    // read the current time without risk of tearing.
	    recomputeCurrentRendererTime();
	    currentSchedulerTime = currentRendererTime;
	    return currentSchedulerTime;
	  }
	  // There's already pending work. We might be in the middle of a browser
	  // event. If we were to read the current time, it could cause multiple updates
	  // within the same event to receive different expiration times, leading to
	  // tearing. Return the last read time. During the next idle callback, the
	  // time will be updated.
	  return currentSchedulerTime;
	}

	// requestWork is called by the scheduler whenever a root receives an update.
	// It's up to the renderer to call renderRoot at some point in the future.
	function requestWork(root, expirationTime) {
	  addRootToSchedule(root, expirationTime);
	  if (isRendering) {
	    // Prevent reentrancy. Remaining work will be scheduled at the end of
	    // the currently rendering batch.
	    return;
	  }

	  if (isBatchingUpdates) {
	    // Flush work at the end of the batch.
	    if (isUnbatchingUpdates) {
	      // ...unless we're inside unbatchedUpdates, in which case we should
	      // flush it now.
	      nextFlushedRoot = root;
	      nextFlushedExpirationTime = Sync;
	      performWorkOnRoot(root, Sync, false);
	    }
	    return;
	  }

	  // TODO: Get rid of Sync and use current time?
	  if (expirationTime === Sync) {
	    performSyncWork();
	  } else {
	    scheduleCallbackWithExpirationTime(root, expirationTime);
	  }
	}

	function addRootToSchedule(root, expirationTime) {
	  // Add the root to the schedule.
	  // Check if this root is already part of the schedule.
	  if (root.nextScheduledRoot === null) {
	    // This root is not already scheduled. Add it.
	    root.expirationTime = expirationTime;
	    if (lastScheduledRoot === null) {
	      firstScheduledRoot = lastScheduledRoot = root;
	      root.nextScheduledRoot = root;
	    } else {
	      lastScheduledRoot.nextScheduledRoot = root;
	      lastScheduledRoot = root;
	      lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
	    }
	  } else {
	    // This root is already scheduled, but its priority may have increased.
	    var remainingExpirationTime = root.expirationTime;
	    if (expirationTime > remainingExpirationTime) {
	      // Update the priority.
	      root.expirationTime = expirationTime;
	    }
	  }
	}

	function findHighestPriorityRoot() {
	  var highestPriorityWork = NoWork;
	  var highestPriorityRoot = null;
	  if (lastScheduledRoot !== null) {
	    var previousScheduledRoot = lastScheduledRoot;
	    var root = firstScheduledRoot;
	    while (root !== null) {
	      var remainingExpirationTime = root.expirationTime;
	      if (remainingExpirationTime === NoWork) {
	        // This root no longer has work. Remove it from the scheduler.

	        // TODO: This check is redudant, but Flow is confused by the branch
	        // below where we set lastScheduledRoot to null, even though we break
	        // from the loop right after.
	        !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        if (root === root.nextScheduledRoot) {
	          // This is the only root in the list.
	          root.nextScheduledRoot = null;
	          firstScheduledRoot = lastScheduledRoot = null;
	          break;
	        } else if (root === firstScheduledRoot) {
	          // This is the first root in the list.
	          var next = root.nextScheduledRoot;
	          firstScheduledRoot = next;
	          lastScheduledRoot.nextScheduledRoot = next;
	          root.nextScheduledRoot = null;
	        } else if (root === lastScheduledRoot) {
	          // This is the last root in the list.
	          lastScheduledRoot = previousScheduledRoot;
	          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
	          root.nextScheduledRoot = null;
	          break;
	        } else {
	          previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
	          root.nextScheduledRoot = null;
	        }
	        root = previousScheduledRoot.nextScheduledRoot;
	      } else {
	        if (remainingExpirationTime > highestPriorityWork) {
	          // Update the priority, if it's higher
	          highestPriorityWork = remainingExpirationTime;
	          highestPriorityRoot = root;
	        }
	        if (root === lastScheduledRoot) {
	          break;
	        }
	        if (highestPriorityWork === Sync) {
	          // Sync is highest priority by definition so
	          // we can stop searching.
	          break;
	        }
	        previousScheduledRoot = root;
	        root = root.nextScheduledRoot;
	      }
	    }
	  }

	  nextFlushedRoot = highestPriorityRoot;
	  nextFlushedExpirationTime = highestPriorityWork;
	}

	// TODO: This wrapper exists because many of the older tests (the ones that use
	// flushDeferredPri) rely on the number of times `shouldYield` is called. We
	// should get rid of it.
	var didYield = false;
	function shouldYieldToRenderer() {
	  if (didYield) {
	    return true;
	  }
	  if (scheduler.unstable_shouldYield()) {
	    didYield = true;
	    return true;
	  }
	  return false;
	}

	function performAsyncWork() {
	  try {
	    if (!shouldYieldToRenderer()) {
	      // The callback timed out. That means at least one update has expired.
	      // Iterate through the root schedule. If they contain expired work, set
	      // the next render expiration time to the current time. This has the effect
	      // of flushing all expired work in a single batch, instead of flushing each
	      // level one at a time.
	      if (firstScheduledRoot !== null) {
	        recomputeCurrentRendererTime();
	        var root = firstScheduledRoot;
	        do {
	          didExpireAtExpirationTime(root, currentRendererTime);
	          // The root schedule is circular, so this is never null.
	          root = root.nextScheduledRoot;
	        } while (root !== firstScheduledRoot);
	      }
	    }
	    performWork(NoWork, true);
	  } finally {
	    didYield = false;
	  }
	}

	function performSyncWork() {
	  performWork(Sync, false);
	}

	function performWork(minExpirationTime, isYieldy) {
	  // Keep working on roots until there's no more work, or until there's a higher
	  // priority event.
	  findHighestPriorityRoot();

	  if (isYieldy) {
	    recomputeCurrentRendererTime();
	    currentSchedulerTime = currentRendererTime;

	    if (enableUserTimingAPI) {
	      var didExpire = nextFlushedExpirationTime > currentRendererTime;
	      var timeout = expirationTimeToMs(nextFlushedExpirationTime);
	      stopRequestCallbackTimer(didExpire, timeout);
	    }

	    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)) {
	      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);
	      findHighestPriorityRoot();
	      recomputeCurrentRendererTime();
	      currentSchedulerTime = currentRendererTime;
	    }
	  } else {
	    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime) {
	      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
	      findHighestPriorityRoot();
	    }
	  }

	  // We're done flushing work. Either we ran out of time in this callback,
	  // or there's no more work left with sufficient priority.

	  // If we're inside a callback, set this to false since we just completed it.
	  if (isYieldy) {
	    callbackExpirationTime = NoWork;
	    callbackID = null;
	  }
	  // If there's work left over, schedule a new callback.
	  if (nextFlushedExpirationTime !== NoWork) {
	    scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
	  }

	  // Clean-up.
	  finishRendering();
	}

	function flushRoot(root, expirationTime) {
	  !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0;
	  // Perform work on root as if the given expiration time is the current time.
	  // This has the effect of synchronously flushing all work up to and
	  // including the given time.
	  nextFlushedRoot = root;
	  nextFlushedExpirationTime = expirationTime;
	  performWorkOnRoot(root, expirationTime, false);
	  // Flush any sync work that was scheduled by lifecycles
	  performSyncWork();
	}

	function finishRendering() {
	  nestedUpdateCount = 0;
	  lastCommittedRootDuringThisBatch = null;

	  if (completedBatches !== null) {
	    var batches = completedBatches;
	    completedBatches = null;
	    for (var i = 0; i < batches.length; i++) {
	      var batch = batches[i];
	      try {
	        batch._onComplete();
	      } catch (error) {
	        if (!hasUnhandledError) {
	          hasUnhandledError = true;
	          unhandledError = error;
	        }
	      }
	    }
	  }

	  if (hasUnhandledError) {
	    var error = unhandledError;
	    unhandledError = null;
	    hasUnhandledError = false;
	    throw error;
	  }
	}

	function performWorkOnRoot(root, expirationTime, isYieldy) {
	  !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  isRendering = true;

	  // Check if this is async work or sync/expired work.
	  if (!isYieldy) {
	    // Flush work without yielding.
	    // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
	    // may want to perform some work without yielding, but also without
	    // requiring the root to complete (by triggering placeholders).

	    var finishedWork = root.finishedWork;
	    if (finishedWork !== null) {
	      // This root is already complete. We can commit it.
	      completeRoot(root, finishedWork, expirationTime);
	    } else {
	      root.finishedWork = null;
	      // If this root previously suspended, clear its existing timeout, since
	      // we're about to try rendering again.
	      var timeoutHandle = root.timeoutHandle;
	      if (timeoutHandle !== noTimeout) {
	        root.timeoutHandle = noTimeout;
	        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
	        cancelTimeout(timeoutHandle);
	      }
	      renderRoot(root, isYieldy);
	      finishedWork = root.finishedWork;
	      if (finishedWork !== null) {
	        // We've completed the root. Commit it.
	        completeRoot(root, finishedWork, expirationTime);
	      }
	    }
	  } else {
	    // Flush async work.
	    var _finishedWork = root.finishedWork;
	    if (_finishedWork !== null) {
	      // This root is already complete. We can commit it.
	      completeRoot(root, _finishedWork, expirationTime);
	    } else {
	      root.finishedWork = null;
	      // If this root previously suspended, clear its existing timeout, since
	      // we're about to try rendering again.
	      var _timeoutHandle = root.timeoutHandle;
	      if (_timeoutHandle !== noTimeout) {
	        root.timeoutHandle = noTimeout;
	        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
	        cancelTimeout(_timeoutHandle);
	      }
	      renderRoot(root, isYieldy);
	      _finishedWork = root.finishedWork;
	      if (_finishedWork !== null) {
	        // We've completed the root. Check the if we should yield one more time
	        // before committing.
	        if (!shouldYieldToRenderer()) {
	          // Still time left. Commit the root.
	          completeRoot(root, _finishedWork, expirationTime);
	        } else {
	          // There's no time left. Mark this root as complete. We'll come
	          // back and commit it later.
	          root.finishedWork = _finishedWork;
	        }
	      }
	    }
	  }

	  isRendering = false;
	}

	function completeRoot(root, finishedWork, expirationTime) {
	  // Check if there's a batch that matches this expiration time.
	  var firstBatch = root.firstBatch;
	  if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {
	    if (completedBatches === null) {
	      completedBatches = [firstBatch];
	    } else {
	      completedBatches.push(firstBatch);
	    }
	    if (firstBatch._defer) {
	      // This root is blocked from committing by a batch. Unschedule it until
	      // we receive another update.
	      root.finishedWork = finishedWork;
	      root.expirationTime = NoWork;
	      return;
	    }
	  }

	  // Commit the root.
	  root.finishedWork = null;

	  // Check if this is a nested update (a sync update scheduled during the
	  // commit phase).
	  if (root === lastCommittedRootDuringThisBatch) {
	    // If the next root is the same as the previous root, this is a nested
	    // update. To prevent an infinite loop, increment the nested update count.
	    nestedUpdateCount++;
	  } else {
	    // Reset whenever we switch roots.
	    lastCommittedRootDuringThisBatch = root;
	    nestedUpdateCount = 0;
	  }
	  scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, function () {
	    commitRoot(root, finishedWork);
	  });
	}

	function onUncaughtError(error) {
	  !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  // Unschedule this root so we don't work on it again until there's
	  // another update.
	  nextFlushedRoot.expirationTime = NoWork;
	  if (!hasUnhandledError) {
	    hasUnhandledError = true;
	    unhandledError = error;
	  }
	}

	// TODO: Batching should be implemented at the renderer level, not inside
	// the reconciler.
	function batchedUpdates$1(fn, a) {
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingUpdates = true;
	  try {
	    return fn(a);
	  } finally {
	    isBatchingUpdates = previousIsBatchingUpdates;
	    if (!isBatchingUpdates && !isRendering) {
	      performSyncWork();
	    }
	  }
	}

	// TODO: Batching should be implemented at the renderer level, not inside
	// the reconciler.
	function unbatchedUpdates(fn, a) {
	  if (isBatchingUpdates && !isUnbatchingUpdates) {
	    isUnbatchingUpdates = true;
	    try {
	      return fn(a);
	    } finally {
	      isUnbatchingUpdates = false;
	    }
	  }
	  return fn(a);
	}

	// TODO: Batching should be implemented at the renderer level, not within
	// the reconciler.
	function flushSync(fn, a) {
	  !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingUpdates = true;
	  try {
	    return syncUpdates(fn, a);
	  } finally {
	    isBatchingUpdates = previousIsBatchingUpdates;
	    performSyncWork();
	  }
	}

	function interactiveUpdates$1(fn, a, b) {
	  // If there are any pending interactive updates, synchronously flush them.
	  // This needs to happen before we read any handlers, because the effect of
	  // the previous event may influence which handlers are called during
	  // this event.
	  if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
	    // Synchronously flush pending interactive updates.
	    performWork(lowestPriorityPendingInteractiveExpirationTime, false);
	    lowestPriorityPendingInteractiveExpirationTime = NoWork;
	  }
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingUpdates = true;
	  try {
	    return scheduler.unstable_runWithPriority(scheduler.unstable_UserBlockingPriority, function () {
	      return fn(a, b);
	    });
	  } finally {
	    isBatchingUpdates = previousIsBatchingUpdates;
	    if (!isBatchingUpdates && !isRendering) {
	      performSyncWork();
	    }
	  }
	}

	function flushInteractiveUpdates$1() {
	  if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
	    // Synchronously flush pending interactive updates.
	    performWork(lowestPriorityPendingInteractiveExpirationTime, false);
	    lowestPriorityPendingInteractiveExpirationTime = NoWork;
	  }
	}

	function flushControlled(fn) {
	  var previousIsBatchingUpdates = isBatchingUpdates;
	  isBatchingUpdates = true;
	  try {
	    syncUpdates(fn);
	  } finally {
	    isBatchingUpdates = previousIsBatchingUpdates;
	    if (!isBatchingUpdates && !isRendering) {
	      performSyncWork();
	    }
	  }
	}

	// 0 is PROD, 1 is DEV.
	// Might add PROFILE later.


	var didWarnAboutNestedUpdates = void 0;
	var didWarnAboutFindNodeInStrictMode = void 0;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;
	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
	  {
	    if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;
	      warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
	    }
	  }

	  var update = createUpdate(expirationTime);
	  // Caution: React DevTools currently depends on this property
	  // being called "element".
	  update.payload = { element: element };

	  callback = callback === undefined ? null : callback;
	  if (callback !== null) {
	    !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
	    update.callback = callback;
	  }

	  flushPassiveEffects();
	  enqueueUpdate(current$$1, update);
	  scheduleWork(current$$1, expirationTime);

	  return expirationTime;
	}

	function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
	  // TODO: If this is a nested container, this won't be the root.
	  var current$$1 = container.current;

	  {
	    if (ReactFiberInstrumentation_1.debugTool) {
	      if (current$$1.alternate === null) {
	        ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
	      } else if (element === null) {
	        ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
	      } else {
	        ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
	      }
	    }
	  }

	  var context = getContextForSubtree(parentComponent);
	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  return scheduleRootUpdate(current$$1, element, expirationTime, callback);
	}

	function findHostInstance(component) {
	  var fiber = get(component);
	  if (fiber === undefined) {
	    if (typeof component.render === 'function') {
	      invariant(false, 'Unable to find node on an unmounted component.');
	    } else {
	      invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
	    }
	  }
	  var hostFiber = findCurrentHostFiber(fiber);
	  if (hostFiber === null) {
	    return null;
	  }
	  return hostFiber.stateNode;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);
	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        invariant(false, 'Unable to find node on an unmounted component.');
	      } else {
	        invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
	      }
	    }
	    var hostFiber = findCurrentHostFiber(fiber);
	    if (hostFiber === null) {
	      return null;
	    }
	    if (hostFiber.mode & StrictMode) {
	      var componentName = getComponentName(fiber.type) || 'Component';
	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;
	        if (fiber.mode & StrictMode) {
	          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        } else {
	          warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        }
	      }
	    }
	    return hostFiber.stateNode;
	  }
	  return findHostInstance(component);
	}

	function createContainer(containerInfo, isConcurrent, hydrate) {
	  return createFiberRoot(containerInfo, isConcurrent, hydrate);
	}

	function updateContainer(element, container, parentComponent, callback) {
	  var current$$1 = container.current;
	  var currentTime = requestCurrentTime();
	  var expirationTime = computeExpirationForFiber(currentTime, current$$1);
	  return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
	}

	function getPublicRootInstance(container) {
	  var containerFiber = container.current;
	  if (!containerFiber.child) {
	    return null;
	  }
	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);
	    default:
	      return containerFiber.child.stateNode;
	  }
	}

	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
	  if (hostFiber === null) {
	    return null;
	  }
	  return hostFiber.stateNode;
	}

	var overrideProps = null;

	{
	  var copyWithSetImpl = function (obj, path, idx, value) {
	    if (idx >= path.length) {
	      return value;
	    }
	    var key = path[idx];
	    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
	    // $FlowFixMe number or string is fine here
	    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
	    return updated;
	  };

	  var copyWithSet = function (obj, path, value) {
	    return copyWithSetImpl(obj, path, 0, value);
	  };

	  // Support DevTools props for function components, forwardRef, memo, host components, etc.
	  overrideProps = function (fiber, path, value) {
	    flushPassiveEffects();
	    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }
	    scheduleWork(fiber, Sync);
	  };
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
	  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;


	  return injectInternals(_assign({}, devToolsConfig, {
	    overrideProps: overrideProps,
	    currentDispatcherRef: ReactCurrentDispatcher,
	    findHostInstanceByFiber: function (fiber) {
	      var hostFiber = findCurrentHostFiber(fiber);
	      if (hostFiber === null) {
	        return null;
	      }
	      return hostFiber.stateNode;
	    },
	    findFiberByHostInstance: function (instance) {
	      if (!findFiberByHostInstance) {
	        // Might not be implemented by the renderer.
	        return null;
	      }
	      return findFiberByHostInstance(instance);
	    }
	  }));
	}

	// This file intentionally does *not* have the Flow annotation.
	// Don't add it. See `./inline-typed.js` for an explanation.

	function createPortal$1(children, containerInfo,
	// TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	// TODO: this is special because it gets imported during build.

	var ReactVersion = '16.8.3';

	// TODO: This type is shared between the reconciler and ReactDOM, but will
	// eventually be lifted out to the renderer.

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

	var topLevelUpdateWarnings = void 0;
	var warnOnInvalidCallback = void 0;
	var didWarnAboutUnstableCreatePortal = false;

	{
	  if (typeof Map !== 'function' ||
	  // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
	  // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	  }

	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
	      if (hostInstance) {
	        !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

	    !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	    !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	  };

	  warnOnInvalidCallback = function (callback, callerName) {
	    !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
	  };
	}

	setRestoreImplementation(restoreControlledState$1);

	function ReactBatch(root) {
	  var expirationTime = computeUniqueAsyncExpiration();
	  this._expirationTime = expirationTime;
	  this._root = root;
	  this._next = null;
	  this._callbacks = null;
	  this._didComplete = false;
	  this._hasChildren = false;
	  this._children = null;
	  this._defer = true;
	}
	ReactBatch.prototype.render = function (children) {
	  !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
	  this._hasChildren = true;
	  this._children = children;
	  var internalRoot = this._root._internalRoot;
	  var expirationTime = this._expirationTime;
	  var work = new ReactWork();
	  updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
	  return work;
	};
	ReactBatch.prototype.then = function (onComplete) {
	  if (this._didComplete) {
	    onComplete();
	    return;
	  }
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    callbacks = this._callbacks = [];
	  }
	  callbacks.push(onComplete);
	};
	ReactBatch.prototype.commit = function () {
	  var internalRoot = this._root._internalRoot;
	  var firstBatch = internalRoot.firstBatch;
	  !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

	  if (!this._hasChildren) {
	    // This batch is empty. Return.
	    this._next = null;
	    this._defer = false;
	    return;
	  }

	  var expirationTime = this._expirationTime;

	  // Ensure this is the first batch in the list.
	  if (firstBatch !== this) {
	    // This batch is not the earliest batch. We need to move it to the front.
	    // Update its expiration time to be the expiration time of the earliest
	    // batch, so that we can flush it without flushing the other batches.
	    if (this._hasChildren) {
	      expirationTime = this._expirationTime = firstBatch._expirationTime;
	      // Rendering this batch again ensures its children will be the final state
	      // when we flush (updates are processed in insertion order: last
	      // update wins).
	      // TODO: This forces a restart. Should we print a warning?
	      this.render(this._children);
	    }

	    // Remove the batch from the list.
	    var previous = null;
	    var batch = firstBatch;
	    while (batch !== this) {
	      previous = batch;
	      batch = batch._next;
	    }
	    !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
	    previous._next = batch._next;

	    // Add it to the front.
	    this._next = firstBatch;
	    firstBatch = internalRoot.firstBatch = this;
	  }

	  // Synchronously flush all the work up to this batch's expiration time.
	  this._defer = false;
	  flushRoot(internalRoot, expirationTime);

	  // Pop the batch from the list.
	  var next = this._next;
	  this._next = null;
	  firstBatch = internalRoot.firstBatch = next;

	  // Append the next earliest batch's children to the update queue.
	  if (firstBatch !== null && firstBatch._hasChildren) {
	    firstBatch.render(firstBatch._children);
	  }
	};
	ReactBatch.prototype._onComplete = function () {
	  if (this._didComplete) {
	    return;
	  }
	  this._didComplete = true;
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    return;
	  }
	  // TODO: Error handling.
	  for (var i = 0; i < callbacks.length; i++) {
	    var _callback = callbacks[i];
	    _callback();
	  }
	};

	function ReactWork() {
	  this._callbacks = null;
	  this._didCommit = false;
	  // TODO: Avoid need to bind by replacing callbacks in the update queue with
	  // list of Work objects.
	  this._onCommit = this._onCommit.bind(this);
	}
	ReactWork.prototype.then = function (onCommit) {
	  if (this._didCommit) {
	    onCommit();
	    return;
	  }
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    callbacks = this._callbacks = [];
	  }
	  callbacks.push(onCommit);
	};
	ReactWork.prototype._onCommit = function () {
	  if (this._didCommit) {
	    return;
	  }
	  this._didCommit = true;
	  var callbacks = this._callbacks;
	  if (callbacks === null) {
	    return;
	  }
	  // TODO: Error handling.
	  for (var i = 0; i < callbacks.length; i++) {
	    var _callback2 = callbacks[i];
	    !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;
	    _callback2();
	  }
	};

	function ReactRoot(container, isConcurrent, hydrate) {
	  var root = createContainer(container, isConcurrent, hydrate);
	  this._internalRoot = root;
	}
	ReactRoot.prototype.render = function (children, callback) {
	  var root = this._internalRoot;
	  var work = new ReactWork();
	  callback = callback === undefined ? null : callback;
	  {
	    warnOnInvalidCallback(callback, 'render');
	  }
	  if (callback !== null) {
	    work.then(callback);
	  }
	  updateContainer(children, root, null, work._onCommit);
	  return work;
	};
	ReactRoot.prototype.unmount = function (callback) {
	  var root = this._internalRoot;
	  var work = new ReactWork();
	  callback = callback === undefined ? null : callback;
	  {
	    warnOnInvalidCallback(callback, 'render');
	  }
	  if (callback !== null) {
	    work.then(callback);
	  }
	  updateContainer(null, root, null, work._onCommit);
	  return work;
	};
	ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
	  var root = this._internalRoot;
	  var work = new ReactWork();
	  callback = callback === undefined ? null : callback;
	  {
	    warnOnInvalidCallback(callback, 'render');
	  }
	  if (callback !== null) {
	    work.then(callback);
	  }
	  updateContainer(children, root, parentComponent, work._onCommit);
	  return work;
	};
	ReactRoot.prototype.createBatch = function () {
	  var batch = new ReactBatch(this);
	  var expirationTime = batch._expirationTime;

	  var internalRoot = this._internalRoot;
	  var firstBatch = internalRoot.firstBatch;
	  if (firstBatch === null) {
	    internalRoot.firstBatch = batch;
	    batch._next = null;
	  } else {
	    // Insert sorted by expiration time then insertion order
	    var insertAfter = null;
	    var insertBefore = firstBatch;
	    while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
	      insertAfter = insertBefore;
	      insertBefore = insertBefore._next;
	    }
	    batch._next = insertBefore;
	    if (insertAfter !== null) {
	      insertAfter._next = batch;
	    }
	  }

	  return batch;
	};

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function shouldHydrateDueToLegacyHeuristic(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
	}

	setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);

	var warnedAboutHydrateAPI = false;

	function legacyCreateRootFromDOMContainer(container, forceHydrate) {
	  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
	  // First clear any existing content.
	  if (!shouldHydrate) {
	    var warned = false;
	    var rootSibling = void 0;
	    while (rootSibling = container.lastChild) {
	      {
	        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
	          warned = true;
	          warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
	        }
	      }
	      container.removeChild(rootSibling);
	    }
	  }
	  {
	    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
	      warnedAboutHydrateAPI = true;
	      lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
	    }
	  }
	  // Legacy roots are not async by default.
	  var isConcurrent = false;
	  return new ReactRoot(container, isConcurrent, shouldHydrate);
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  {
	    topLevelUpdateWarnings(container);
	  }

	  // TODO: Without `any` type, Flow says "Property cannot be accessed on any
	  // member of intersection type." Whyyyyyy.
	  var root = container._reactRootContainer;
	  if (!root) {
	    // Initial mount
	    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
	    if (typeof callback === 'function') {
	      var originalCallback = callback;
	      callback = function () {
	        var instance = getPublicRootInstance(root._internalRoot);
	        originalCallback.call(instance);
	      };
	    }
	    // Initial mount should not be batched.
	    unbatchedUpdates(function () {
	      if (parentComponent != null) {
	        root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
	      } else {
	        root.render(children, callback);
	      }
	    });
	  } else {
	    if (typeof callback === 'function') {
	      var _originalCallback = callback;
	      callback = function () {
	        var instance = getPublicRootInstance(root._internalRoot);
	        _originalCallback.call(instance);
	      };
	    }
	    // Update
	    if (parentComponent != null) {
	      root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
	    } else {
	      root.render(children, callback);
	    }
	  }
	  return getPublicRootInstance(root._internalRoot);
	}

	function createPortal$$1(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
	  // TODO: pass ReactDOM portal implementation as third argument
	  return createPortal$1(children, container, null, key);
	}

	var ReactDOM = {
	  createPortal: createPortal$$1,

	  findDOMNode: function (componentOrElement) {
	    {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null && owner.stateNode !== null) {
	        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
	        !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
	        owner.stateNode._warnedAboutRefsInRender = true;
	      }
	    }
	    if (componentOrElement == null) {
	      return null;
	    }
	    if (componentOrElement.nodeType === ELEMENT_NODE) {
	      return componentOrElement;
	    }
	    {
	      return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	    }
	    return findHostInstance(componentOrElement);
	  },
	  hydrate: function (element, container, callback) {
	    !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
	    {
	      !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
	    }
	    // TODO: throw or warn if we couldn't hydrate?
	    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	  },
	  render: function (element, container, callback) {
	    !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
	    {
	      !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call root.render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
	    }
	    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	  },
	  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
	    !isValidContainer(containerNode) ? invariant(false, 'Target container is not a DOM element.') : void 0;
	    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
	    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	  },
	  unmountComponentAtNode: function (container) {
	    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

	    {
	      !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. Did you mean to call root.unmount()?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
	    }

	    if (container._reactRootContainer) {
	      {
	        var rootEl = getReactRootElementInContainer(container);
	        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
	        !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
	      }

	      // Unmount should not be batched.
	      unbatchedUpdates(function () {
	        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	          container._reactRootContainer = null;
	        });
	      });
	      // If you call unmountComponentAtNode twice in quick succession, you'll
	      // get `true` twice. That's probably fine?
	      return true;
	    } else {
	      {
	        var _rootEl = getReactRootElementInContainer(container);
	        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

	        // Check if the container itself is a React root node.
	        var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

	        !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	  },


	  // Temporary alias since we already shipped React 16 RC with it.
	  // TODO: remove in React 17.
	  unstable_createPortal: function () {
	    if (!didWarnAboutUnstableCreatePortal) {
	      didWarnAboutUnstableCreatePortal = true;
	      lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
	    }
	    return createPortal$$1.apply(undefined, arguments);
	  },


	  unstable_batchedUpdates: batchedUpdates$1,

	  unstable_interactiveUpdates: interactiveUpdates$1,

	  flushSync: flushSync,

	  unstable_createRoot: createRoot,
	  unstable_flushControlled: flushControlled,

	  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
	    // Keep in sync with ReactDOMUnstableNativeDependencies.js
	    // and ReactTestUtils.js. This is an array for better minification.
	    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
	  }
	};

	function createRoot(container, options) {
	  var functionName = enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot';
	  !isValidContainer(container) ? invariant(false, '%s(...): Target container is not a DOM element.', functionName) : void 0;
	  {
	    !!container._reactRootContainer ? warningWithoutStack$1(false, 'You are calling ReactDOM.%s() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
	    container._reactHasBeenPassedToCreateRootDEV = true;
	  }
	  var hydrate = options != null && options.hydrate === true;
	  return new ReactRoot(container, true, hydrate);
	}

	if (enableStableConcurrentModeAPIs) {
	  ReactDOM.createRoot = createRoot;
	  ReactDOM.unstable_createRoot = undefined;
	}

	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType: 1,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol;
	      // Don't warn in exotic cases like chrome-extension://.
	      if (/^(https?|file):$/.test(protocol)) {
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}



	var ReactDOM$2 = Object.freeze({
		default: ReactDOM
	});

	var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.
	var reactDom = ReactDOM$3.default || ReactDOM$3;

	module.exports = reactDom;
	  })();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (process.env.NODE_ENV === 'production') {
	  module.exports = __webpack_require__(15);
	} else {
	  module.exports = __webpack_require__(16);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	/** @license React v0.13.3
	 * scheduler-tracing.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';Object.defineProperty(exports,"__esModule",{value:!0});var b=0;exports.__interactionsRef=null;exports.__subscriberRef=null;exports.unstable_clear=function(a){return a()};exports.unstable_getCurrent=function(){return null};exports.unstable_getThreadID=function(){return++b};exports.unstable_trace=function(a,d,c){return c()};exports.unstable_wrap=function(a){return a};exports.unstable_subscribe=function(){};exports.unstable_unsubscribe=function(){};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v0.13.3
	 * scheduler-tracing.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


	// In some cases, StrictMode should also double-render lifecycles.
	// This can be confusing for tests though,
	// And it can be bad for performance in production.
	// This feature flag can be used to control the behavior:


	// To preserve the "Pause on caught exceptions" behavior of the debugger, we
	// replay the begin phase of a failed component inside invokeGuardedCallback.


	// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


	// Gather advanced timing metrics for Profiler subtrees.


	// Trace which interactions trigger each commit.
	var enableSchedulerTracing = true;

	// Only used in www builds.
	 // TODO: true? Here it might just be false.

	// Only used in www builds.


	// Only used in www builds.


	// React Fire: prevent the value and checked attributes from syncing
	// with their related DOM properties


	// These APIs will no longer be "unstable" in the upcoming 16.7 release,
	// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

	var DEFAULT_THREAD_ID = 0;

	// Counters used to generate unique IDs.
	var interactionIDCounter = 0;
	var threadIDCounter = 0;

	// Set of currently traced interactions.
	// Interactions "stack"–
	// Meaning that newly traced interactions are appended to the previously active set.
	// When an interaction goes out of scope, the previous set (if any) is restored.
	exports.__interactionsRef = null;

	// Listener(s) to notify when interactions begin and end.
	exports.__subscriberRef = null;

	if (enableSchedulerTracing) {
	  exports.__interactionsRef = {
	    current: new Set()
	  };
	  exports.__subscriberRef = {
	    current: null
	  };
	}

	function unstable_clear(callback) {
	  if (!enableSchedulerTracing) {
	    return callback();
	  }

	  var prevInteractions = exports.__interactionsRef.current;
	  exports.__interactionsRef.current = new Set();

	  try {
	    return callback();
	  } finally {
	    exports.__interactionsRef.current = prevInteractions;
	  }
	}

	function unstable_getCurrent() {
	  if (!enableSchedulerTracing) {
	    return null;
	  } else {
	    return exports.__interactionsRef.current;
	  }
	}

	function unstable_getThreadID() {
	  return ++threadIDCounter;
	}

	function unstable_trace(name, timestamp, callback) {
	  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

	  if (!enableSchedulerTracing) {
	    return callback();
	  }

	  var interaction = {
	    __count: 1,
	    id: interactionIDCounter++,
	    name: name,
	    timestamp: timestamp
	  };

	  var prevInteractions = exports.__interactionsRef.current;

	  // Traced interactions should stack/accumulate.
	  // To do that, clone the current interactions.
	  // The previous set will be restored upon completion.
	  var interactions = new Set(prevInteractions);
	  interactions.add(interaction);
	  exports.__interactionsRef.current = interactions;

	  var subscriber = exports.__subscriberRef.current;
	  var returnValue = void 0;

	  try {
	    if (subscriber !== null) {
	      subscriber.onInteractionTraced(interaction);
	    }
	  } finally {
	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkStarted(interactions, threadID);
	      }
	    } finally {
	      try {
	        returnValue = callback();
	      } finally {
	        exports.__interactionsRef.current = prevInteractions;

	        try {
	          if (subscriber !== null) {
	            subscriber.onWorkStopped(interactions, threadID);
	          }
	        } finally {
	          interaction.__count--;

	          // If no async work was scheduled for this interaction,
	          // Notify subscribers that it's completed.
	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        }
	      }
	    }
	  }

	  return returnValue;
	}

	function unstable_wrap(callback) {
	  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

	  if (!enableSchedulerTracing) {
	    return callback;
	  }

	  var wrappedInteractions = exports.__interactionsRef.current;

	  var subscriber = exports.__subscriberRef.current;
	  if (subscriber !== null) {
	    subscriber.onWorkScheduled(wrappedInteractions, threadID);
	  }

	  // Update the pending async work count for the current interactions.
	  // Update after calling subscribers in case of error.
	  wrappedInteractions.forEach(function (interaction) {
	    interaction.__count++;
	  });

	  var hasRun = false;

	  function wrapped() {
	    var prevInteractions = exports.__interactionsRef.current;
	    exports.__interactionsRef.current = wrappedInteractions;

	    subscriber = exports.__subscriberRef.current;

	    try {
	      var returnValue = void 0;

	      try {
	        if (subscriber !== null) {
	          subscriber.onWorkStarted(wrappedInteractions, threadID);
	        }
	      } finally {
	        try {
	          returnValue = callback.apply(undefined, arguments);
	        } finally {
	          exports.__interactionsRef.current = prevInteractions;

	          if (subscriber !== null) {
	            subscriber.onWorkStopped(wrappedInteractions, threadID);
	          }
	        }
	      }

	      return returnValue;
	    } finally {
	      if (!hasRun) {
	        // We only expect a wrapped function to be executed once,
	        // But in the event that it's executed more than once–
	        // Only decrement the outstanding interaction counts once.
	        hasRun = true;

	        // Update pending async counts for all wrapped interactions.
	        // If this was the last scheduled async work for any of them,
	        // Mark them as completed.
	        wrappedInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        });
	      }
	    }
	  }

	  wrapped.cancel = function cancel() {
	    subscriber = exports.__subscriberRef.current;

	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkCanceled(wrappedInteractions, threadID);
	      }
	    } finally {
	      // Update pending async counts for all wrapped interactions.
	      // If this was the last scheduled async work for any of them,
	      // Mark them as completed.
	      wrappedInteractions.forEach(function (interaction) {
	        interaction.__count--;

	        if (subscriber && interaction.__count === 0) {
	          subscriber.onInteractionScheduledWorkCompleted(interaction);
	        }
	      });
	    }
	  };

	  return wrapped;
	}

	var subscribers = null;
	if (enableSchedulerTracing) {
	  subscribers = new Set();
	}

	function unstable_subscribe(subscriber) {
	  if (enableSchedulerTracing) {
	    subscribers.add(subscriber);

	    if (subscribers.size === 1) {
	      exports.__subscriberRef.current = {
	        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
	        onInteractionTraced: onInteractionTraced,
	        onWorkCanceled: onWorkCanceled,
	        onWorkScheduled: onWorkScheduled,
	        onWorkStarted: onWorkStarted,
	        onWorkStopped: onWorkStopped
	      };
	    }
	  }
	}

	function unstable_unsubscribe(subscriber) {
	  if (enableSchedulerTracing) {
	    subscribers.delete(subscriber);

	    if (subscribers.size === 0) {
	      exports.__subscriberRef.current = null;
	    }
	  }
	}

	function onInteractionTraced(interaction) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionTraced(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onInteractionScheduledWorkCompleted(interaction) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionScheduledWorkCompleted(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkScheduled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkScheduled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStarted(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStarted(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStopped(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStopped(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkCanceled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;

	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkCanceled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	exports.unstable_clear = unstable_clear;
	exports.unstable_getCurrent = unstable_getCurrent;
	exports.unstable_getThreadID = unstable_getThreadID;
	exports.unstable_trace = unstable_trace;
	exports.unstable_wrap = unstable_wrap;
	exports.unstable_subscribe = unstable_subscribe;
	exports.unstable_unsubscribe = unstable_unsubscribe;
	  })();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.router = undefined;

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _reactRouterDom = __webpack_require__(53);

	var _store = __webpack_require__(92);

	var _store2 = _interopRequireDefault(_store);

	var _screens = __webpack_require__(160);

	var _routes = __webpack_require__(959);

	var _routes2 = _interopRequireDefault(_routes);

	var _reactIntl = __webpack_require__(827);

	var _en = __webpack_require__(960);

	var _en2 = _interopRequireDefault(_en);

	var _es = __webpack_require__(961);

	var _es2 = _interopRequireDefault(_es);

	var _es3 = __webpack_require__(962);

	var _es4 = _interopRequireDefault(_es3);

	var _en3 = __webpack_require__(963);

	var _en4 = _interopRequireDefault(_en3);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _toConsumableArray(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }return arr2;
	  } else {
	    return Array.from(arr);
	  }
	}

	(0, _reactIntl.addLocaleData)([].concat(_toConsumableArray(_en2.default), _toConsumableArray(_es2.default)));

	var messages = {
	  es: _es4.default,
	  en: _en4.default
	};
	var language = navigator.language.split(/[-_]/)[0]; // language without region code

	var router = exports.router = _react2.default.createElement(_reactRedux.Provider, { store: _store2.default }, _react2.default.createElement(_reactIntl.IntlProvider, { locale: language, messages: messages[language] }, _react2.default.createElement(_reactRouterDom.BrowserRouter, null, _react2.default.createElement(_reactRouterDom.Switch, null, _react2.default.createElement(_reactRouterDom.Route, { exact: true, path: _routes2.default.HOME, component: _screens.HomePage }), _react2.default.createElement(_reactRouterDom.Route, { exact: true, path: _routes2.default.SEARCH, component: _screens.SearchPage }), _react2.default.createElement(_reactRouterDom.Route, { path: _routes2.default.PLAY, component: _screens.PublicGame }), _react2.default.createElement(_reactRouterDom.Route, { path: _routes2.default.CREATE, component: _screens.CreatePage }), _react2.default.createElement(_reactRouterDom.Route, { path: _routes2.default.GAME, component: _screens.PrivateGame }), _react2.default.createElement(_reactRouterDom.Route, { path: _routes2.default.SETTINGS, component: _screens.SettingsPage }), _react2.default.createElement(_reactRouterDom.Route, { path: _routes2.default.POLICY, component: _screens.PolicyPage }), _react2.default.createElement(_reactRouterDom.Route, { path: _routes2.default.HOW_TO_PLAY, component: _screens.HowToPlayPage })))));

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.connect = exports.Provider = undefined;

	var _Provider = __webpack_require__(19);

	var _Provider2 = _interopRequireDefault(_Provider);

	var _connect = __webpack_require__(28);

	var _connect2 = _interopRequireDefault(_connect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Provider = _Provider2["default"];
	exports.connect = _connect2["default"];

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports["default"] = undefined;

	var _react = __webpack_require__(4);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _storeShape = __webpack_require__(26);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _warning = __webpack_require__(27);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var didWarnAboutReceivingStore = false;
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	  didWarnAboutReceivingStore = true;

	  (0, _warning2["default"])('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	}

	var Provider = function (_Component) {
	  _inherits(Provider, _Component);

	  Provider.prototype.getChildContext = function getChildContext() {
	    return { store: this.store };
	  };

	  function Provider(props, context) {
	    _classCallCheck(this, Provider);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _this.store = props.store;
	    return _this;
	  }

	  Provider.prototype.render = function render() {
	    return _react.Children.only(this.props.children);
	  };

	  return Provider;
	}(_react.Component);

	exports["default"] = Provider;


	if (process.env.NODE_ENV !== 'production') {
	  Provider.prototype.componentWillReceiveProps = function (nextProps) {
	    var store = this.store;
	    var nextStore = nextProps.store;


	    if (store !== nextStore) {
	      warnAboutReceivingStore();
	    }
	  };
	}

	Provider.propTypes = {
	  store: _storeShape2["default"].isRequired,
	  children: _propTypes2["default"].element.isRequired
	};
	Provider.childContextTypes = {
	  store: _storeShape2["default"].isRequired
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var ReactIs = __webpack_require__(21);

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(24)(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(25)();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (process.env.NODE_ENV === 'production') {
	  module.exports = __webpack_require__(22);
	} else {
	  module.exports = __webpack_require__(23);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	/** @license React v16.8.3
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';Object.defineProperty(exports,"__esModule",{value:!0});
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.memo"):
	60115,r=b?Symbol.for("react.lazy"):60116;function t(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case r:case q:case d:return u}}}function v(a){return t(a)===m}exports.typeOf=t;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;
	exports.Fragment=e;exports.Lazy=r;exports.Memo=q;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||"object"===typeof a&&null!==a&&(a.$$typeof===r||a.$$typeof===q||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)};exports.isAsyncMode=function(a){return v(a)||t(a)===l};exports.isConcurrentMode=v;exports.isContextConsumer=function(a){return t(a)===k};
	exports.isContextProvider=function(a){return t(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return t(a)===n};exports.isFragment=function(a){return t(a)===e};exports.isLazy=function(a){return t(a)===r};exports.isMemo=function(a){return t(a)===q};exports.isPortal=function(a){return t(a)===d};exports.isProfiler=function(a){return t(a)===g};exports.isStrictMode=function(a){return t(a)===f};
	exports.isSuspense=function(a){return t(a)===p};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.8.3
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if (process.env.NODE_ENV !== "production") {
	  (function() {
	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' ||
	  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
	}

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;
	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;
	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;
	              default:
	                return $$typeof;
	            }
	        }
	      case REACT_LAZY_TYPE:
	      case REACT_MEMO_TYPE:
	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	}

	// AsyncMode is deprecated along with isAsyncMode
	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;

	var hasWarnedAboutDeprecatedIsAsyncMode = false;

	// AsyncMode should be deprecated
	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true;
	      lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }
	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	exports.typeOf = typeOf;
	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isValidElementType = isValidElementType;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	  })();
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactIs = __webpack_require__(21);
	var assign = __webpack_require__(6);

	var ReactPropTypesSecret = __webpack_require__(9);
	var checkPropTypes = __webpack_require__(8);

	var has = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = __webpack_require__(9);

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _propTypes2["default"].shape({
	  subscribe: _propTypes2["default"].func.isRequired,
	  dispatch: _propTypes2["default"].func.isRequired,
	  getState: _propTypes2["default"].func.isRequired
	});

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports["default"] = connect;

	var _react = __webpack_require__(4);

	var _storeShape = __webpack_require__(26);

	var _storeShape2 = _interopRequireDefault(_storeShape);

	var _shallowEqual = __webpack_require__(29);

	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

	var _wrapActionCreators = __webpack_require__(30);

	var _wrapActionCreators2 = _interopRequireDefault(_wrapActionCreators);

	var _warning = __webpack_require__(27);

	var _warning2 = _interopRequireDefault(_warning);

	var _isPlainObject = __webpack_require__(33);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _hoistNonReactStatics = __webpack_require__(51);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _invariant = __webpack_require__(52);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var defaultMapStateToProps = function defaultMapStateToProps(state) {
	  return {};
	}; // eslint-disable-line no-unused-vars
	var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
	  return { dispatch: dispatch };
	};
	var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
	  return _extends({}, parentProps, stateProps, dispatchProps);
	};

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	var errorObject = { value: null };
	function tryCatch(fn, ctx) {
	  try {
	    return fn.apply(ctx);
	  } catch (e) {
	    errorObject.value = e;
	    return errorObject;
	  }
	}

	// Helps track hot reloading.
	var nextVersion = 0;

	function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	  var shouldSubscribe = Boolean(mapStateToProps);
	  var mapState = mapStateToProps || defaultMapStateToProps;

	  var mapDispatch = void 0;
	  if (typeof mapDispatchToProps === 'function') {
	    mapDispatch = mapDispatchToProps;
	  } else if (!mapDispatchToProps) {
	    mapDispatch = defaultMapDispatchToProps;
	  } else {
	    mapDispatch = (0, _wrapActionCreators2["default"])(mapDispatchToProps);
	  }

	  var finalMergeProps = mergeProps || defaultMergeProps;
	  var _options$pure = options.pure,
	      pure = _options$pure === undefined ? true : _options$pure,
	      _options$withRef = options.withRef,
	      withRef = _options$withRef === undefined ? false : _options$withRef;

	  var checkMergedEquals = pure && finalMergeProps !== defaultMergeProps;

	  // Helps track hot reloading.
	  var version = nextVersion++;

	  return function wrapWithConnect(WrappedComponent) {
	    var connectDisplayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';

	    function checkStateShape(props, methodName) {
	      if (!(0, _isPlainObject2["default"])(props)) {
	        (0, _warning2["default"])(methodName + '() in ' + connectDisplayName + ' must return a plain object. ' + ('Instead received ' + props + '.'));
	      }
	    }

	    function computeMergedProps(stateProps, dispatchProps, parentProps) {
	      var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
	      if (process.env.NODE_ENV !== 'production') {
	        checkStateShape(mergedProps, 'mergeProps');
	      }
	      return mergedProps;
	    }

	    var Connect = function (_Component) {
	      _inherits(Connect, _Component);

	      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	        return !pure || this.haveOwnPropsChanged || this.hasStoreStateChanged;
	      };

	      function Connect(props, context) {
	        _classCallCheck(this, Connect);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	        _this.version = version;
	        _this.store = props.store || context.store;

	        (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));

	        var storeState = _this.store.getState();
	        _this.state = { storeState: storeState };
	        _this.clearCache();
	        return _this;
	      }

	      Connect.prototype.computeStateProps = function computeStateProps(store, props) {
	        if (!this.finalMapStateToProps) {
	          return this.configureFinalMapState(store, props);
	        }

	        var state = store.getState();
	        var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(stateProps, 'mapStateToProps');
	        }
	        return stateProps;
	      };

	      Connect.prototype.configureFinalMapState = function configureFinalMapState(store, props) {
	        var mappedState = mapState(store.getState(), props);
	        var isFactory = typeof mappedState === 'function';

	        this.finalMapStateToProps = isFactory ? mappedState : mapState;
	        this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;

	        if (isFactory) {
	          return this.computeStateProps(store, props);
	        }

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedState, 'mapStateToProps');
	        }
	        return mappedState;
	      };

	      Connect.prototype.computeDispatchProps = function computeDispatchProps(store, props) {
	        if (!this.finalMapDispatchToProps) {
	          return this.configureFinalMapDispatch(store, props);
	        }

	        var dispatch = store.dispatch;

	        var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(dispatchProps, 'mapDispatchToProps');
	        }
	        return dispatchProps;
	      };

	      Connect.prototype.configureFinalMapDispatch = function configureFinalMapDispatch(store, props) {
	        var mappedDispatch = mapDispatch(store.dispatch, props);
	        var isFactory = typeof mappedDispatch === 'function';

	        this.finalMapDispatchToProps = isFactory ? mappedDispatch : mapDispatch;
	        this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;

	        if (isFactory) {
	          return this.computeDispatchProps(store, props);
	        }

	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedDispatch, 'mapDispatchToProps');
	        }
	        return mappedDispatch;
	      };

	      Connect.prototype.updateStatePropsIfNeeded = function updateStatePropsIfNeeded() {
	        var nextStateProps = this.computeStateProps(this.store, this.props);
	        if (this.stateProps && (0, _shallowEqual2["default"])(nextStateProps, this.stateProps)) {
	          return false;
	        }

	        this.stateProps = nextStateProps;
	        return true;
	      };

	      Connect.prototype.updateDispatchPropsIfNeeded = function updateDispatchPropsIfNeeded() {
	        var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
	        if (this.dispatchProps && (0, _shallowEqual2["default"])(nextDispatchProps, this.dispatchProps)) {
	          return false;
	        }

	        this.dispatchProps = nextDispatchProps;
	        return true;
	      };

	      Connect.prototype.updateMergedPropsIfNeeded = function updateMergedPropsIfNeeded() {
	        var nextMergedProps = computeMergedProps(this.stateProps, this.dispatchProps, this.props);
	        if (this.mergedProps && checkMergedEquals && (0, _shallowEqual2["default"])(nextMergedProps, this.mergedProps)) {
	          return false;
	        }

	        this.mergedProps = nextMergedProps;
	        return true;
	      };

	      Connect.prototype.isSubscribed = function isSubscribed() {
	        return typeof this.unsubscribe === 'function';
	      };

	      Connect.prototype.trySubscribe = function trySubscribe() {
	        if (shouldSubscribe && !this.unsubscribe) {
	          this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
	          this.handleChange();
	        }
	      };

	      Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
	        if (this.unsubscribe) {
	          this.unsubscribe();
	          this.unsubscribe = null;
	        }
	      };

	      Connect.prototype.componentDidMount = function componentDidMount() {
	        this.trySubscribe();
	      };

	      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!pure || !(0, _shallowEqual2["default"])(nextProps, this.props)) {
	          this.haveOwnPropsChanged = true;
	        }
	      };

	      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.tryUnsubscribe();
	        this.clearCache();
	      };

	      Connect.prototype.clearCache = function clearCache() {
	        this.dispatchProps = null;
	        this.stateProps = null;
	        this.mergedProps = null;
	        this.haveOwnPropsChanged = true;
	        this.hasStoreStateChanged = true;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;
	        this.renderedElement = null;
	        this.finalMapDispatchToProps = null;
	        this.finalMapStateToProps = null;
	      };

	      Connect.prototype.handleChange = function handleChange() {
	        if (!this.unsubscribe) {
	          return;
	        }

	        var storeState = this.store.getState();
	        var prevStoreState = this.state.storeState;
	        if (pure && prevStoreState === storeState) {
	          return;
	        }

	        if (pure && !this.doStatePropsDependOnOwnProps) {
	          var haveStatePropsChanged = tryCatch(this.updateStatePropsIfNeeded, this);
	          if (!haveStatePropsChanged) {
	            return;
	          }
	          if (haveStatePropsChanged === errorObject) {
	            this.statePropsPrecalculationError = errorObject.value;
	          }
	          this.haveStatePropsBeenPrecalculated = true;
	        }

	        this.hasStoreStateChanged = true;
	        this.setState({ storeState: storeState });
	      };

	      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	        (0, _invariant2["default"])(withRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } as the fourth argument of the connect() call.');

	        return this.refs.wrappedInstance;
	      };

	      Connect.prototype.render = function render() {
	        var haveOwnPropsChanged = this.haveOwnPropsChanged,
	            hasStoreStateChanged = this.hasStoreStateChanged,
	            haveStatePropsBeenPrecalculated = this.haveStatePropsBeenPrecalculated,
	            statePropsPrecalculationError = this.statePropsPrecalculationError,
	            renderedElement = this.renderedElement;


	        this.haveOwnPropsChanged = false;
	        this.hasStoreStateChanged = false;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;

	        if (statePropsPrecalculationError) {
	          throw statePropsPrecalculationError;
	        }

	        var shouldUpdateStateProps = true;
	        var shouldUpdateDispatchProps = true;
	        if (pure && renderedElement) {
	          shouldUpdateStateProps = hasStoreStateChanged || haveOwnPropsChanged && this.doStatePropsDependOnOwnProps;
	          shouldUpdateDispatchProps = haveOwnPropsChanged && this.doDispatchPropsDependOnOwnProps;
	        }

	        var haveStatePropsChanged = false;
	        var haveDispatchPropsChanged = false;
	        if (haveStatePropsBeenPrecalculated) {
	          haveStatePropsChanged = true;
	        } else if (shouldUpdateStateProps) {
	          haveStatePropsChanged = this.updateStatePropsIfNeeded();
	        }
	        if (shouldUpdateDispatchProps) {
	          haveDispatchPropsChanged = this.updateDispatchPropsIfNeeded();
	        }

	        var haveMergedPropsChanged = true;
	        if (haveStatePropsChanged || haveDispatchPropsChanged || haveOwnPropsChanged) {
	          haveMergedPropsChanged = this.updateMergedPropsIfNeeded();
	        } else {
	          haveMergedPropsChanged = false;
	        }

	        if (!haveMergedPropsChanged && renderedElement) {
	          return renderedElement;
	        }

	        if (withRef) {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, _extends({}, this.mergedProps, {
	            ref: 'wrappedInstance'
	          }));
	        } else {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, this.mergedProps);
	        }

	        return this.renderedElement;
	      };

	      return Connect;
	    }(_react.Component);

	    Connect.displayName = connectDisplayName;
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.contextTypes = {
	      store: _storeShape2["default"]
	    };
	    Connect.propTypes = {
	      store: _storeShape2["default"]
	    };

	    if (process.env.NODE_ENV !== 'production') {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        if (this.version === version) {
	          return;
	        }

	        // We are hot reloading!
	        this.version = version;
	        this.trySubscribe();
	        this.clearCache();
	      };
	    }

	    return (0, _hoistNonReactStatics2["default"])(Connect, WrappedComponent);
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = shallowEqual;
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var hasOwn = Object.prototype.hasOwnProperty;
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports["default"] = wrapActionCreators;

	var _redux = __webpack_require__(31);

	function wrapActionCreators(actionCreators) {
	  return function (dispatch) {
	    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
	  };
	}

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;

	var _createStore = __webpack_require__(32);

	var _createStore2 = _interopRequireDefault(_createStore);

	var _combineReducers = __webpack_require__(46);

	var _combineReducers2 = _interopRequireDefault(_combineReducers);

	var _bindActionCreators = __webpack_require__(48);

	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);

	var _applyMiddleware = __webpack_require__(49);

	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);

	var _compose = __webpack_require__(50);

	var _compose2 = _interopRequireDefault(_compose);

	var _warning = __webpack_require__(47);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}

	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}

	exports.createStore = _createStore2['default'];
	exports.combineReducers = _combineReducers2['default'];
	exports.bindActionCreators = _bindActionCreators2['default'];
	exports.applyMiddleware = _applyMiddleware2['default'];
	exports.compose = _compose2['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports['default'] = createStore;

	var _isPlainObject = __webpack_require__(33);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _symbolObservable = __webpack_require__(43);

	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'

	  /**
	   * Creates a Redux store that holds the state tree.
	   * The only way to change the data in the store is to call `dispatch()` on it.
	   *
	   * There should only be a single store in your app. To specify how different
	   * parts of the state tree respond to actions, you may combine several reducers
	   * into a single reducer function by using `combineReducers`.
	   *
	   * @param {Function} reducer A function that returns the next state tree, given
	   * the current state tree and the action to handle.
	   *
	   * @param {any} [preloadedState] The initial state. You may optionally specify it
	   * to hydrate the state from the server in universal apps, or to restore a
	   * previously serialized user session.
	   * If you use `combineReducers` to produce the root reducer function, this must be
	   * an object with the same shape as `combineReducers` keys.
	   *
	   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
	   * to enhance the store with third-party capabilities such as middleware,
	   * time travel, persistence, etc. The only store enhancer that ships with Redux
	   * is `applyMiddleware()`.
	   *
	   * @returns {Store} A Redux store that lets you read the state, dispatch actions
	   * and subscribe to changes.
	   */
	};function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }

	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }

	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }

	    var isSubscribed = true;

	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);

	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      isSubscribed = false;

	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }

	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2['default'])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }

	    return action;
	  }

	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }

	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */
	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[_symbolObservable2['default']] = function () {
	      return this;
	    }, _ref;
	  }

	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });

	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[_symbolObservable2['default']] = observable, _ref2;
	}

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(34),
	    getPrototype = __webpack_require__(40),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}

	module.exports = isPlainObject;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(35),
	    getRawTag = __webpack_require__(38),
	    objectToString = __webpack_require__(39);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(36);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(37);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ }),
/* 37 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(35);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ }),
/* 39 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(41);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;


/***/ }),
/* 41 */
/***/ (function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ }),
/* 42 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _ponyfill = __webpack_require__(45);

	var _ponyfill2 = _interopRequireDefault(_ponyfill);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var root; /* global window */


	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else if (true) {
	  root = module;
	} else {
	  root = Function('return this')();
	}

	var result = (0, _ponyfill2['default'])(root);
	exports['default'] = result;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(44)(module)))

/***/ }),
/* 44 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 45 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;

		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports['default'] = combineReducers;

	var _createStore = __webpack_require__(32);

	var _isPlainObject = __webpack_require__(33);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _warning = __webpack_require__(47);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!(0, _isPlainObject2['default'])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });

	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });

	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}

	function assertReducerShape(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });

	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
	    }

	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
	    }
	  });
	}

	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];

	    if (process.env.NODE_ENV !== 'production') {
	      if (typeof reducers[key] === 'undefined') {
	        (0, _warning2['default'])('No reducer provided for key "' + key + '"');
	      }
	    }

	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);

	  var unexpectedKeyCache = void 0;
	  if (process.env.NODE_ENV !== 'production') {
	    unexpectedKeyCache = {};
	  }

	  var shapeAssertionError = void 0;
	  try {
	    assertReducerShape(finalReducers);
	  } catch (e) {
	    shapeAssertionError = e;
	  }

	  return function combination() {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var action = arguments[1];

	    if (shapeAssertionError) {
	      throw shapeAssertionError;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
	      if (warningMessage) {
	        (0, _warning2['default'])(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};
	    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
	      var _key = finalReducerKeys[_i];
	      var reducer = finalReducers[_key];
	      var previousStateForKey = state[_key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(_key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[_key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 47 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ }),
/* 48 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}

	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = applyMiddleware;

	var _compose = __webpack_require__(50);

	var _compose2 = _interopRequireDefault(_compose);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function (reducer, preloadedState, enhancer) {
	      var store = createStore(reducer, preloadedState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);

	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ }),
/* 50 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */

	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}

/***/ }),
/* 51 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    getDerivedStateFromProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    callee: true,
	    arguments: true,
	    arity: true
	};

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

	        if (objectPrototype) {
	            var inheritedComponent = getPrototypeOf(sourceComponent);
	            if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	            }
	        }

	        var keys = getOwnPropertyNames(sourceComponent);

	        if (getOwnPropertySymbols) {
	            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
	                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
	                try { // Avoid failures from read-only properties
	                    defineProperty(targetComponent, key, descriptor);
	                } catch (e) {}
	            }
	        }

	        return targetComponent;
	    }

	    return targetComponent;
	}

	module.exports = hoistNonReactStatics;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;
	exports.withRouter = exports.matchPath = exports.generatePath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.NavLink = exports.MemoryRouter = exports.Link = exports.HashRouter = exports.BrowserRouter = undefined;

	var _BrowserRouter2 = __webpack_require__(54);

	var _BrowserRouter3 = _interopRequireDefault(_BrowserRouter2);

	var _HashRouter2 = __webpack_require__(69);

	var _HashRouter3 = _interopRequireDefault(_HashRouter2);

	var _Link2 = __webpack_require__(70);

	var _Link3 = _interopRequireDefault(_Link2);

	var _MemoryRouter2 = __webpack_require__(71);

	var _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);

	var _NavLink2 = __webpack_require__(73);

	var _NavLink3 = _interopRequireDefault(_NavLink2);

	var _Prompt2 = __webpack_require__(79);

	var _Prompt3 = _interopRequireDefault(_Prompt2);

	var _Redirect2 = __webpack_require__(81);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	var _Route2 = __webpack_require__(74);

	var _Route3 = _interopRequireDefault(_Route2);

	var _Router2 = __webpack_require__(67);

	var _Router3 = _interopRequireDefault(_Router2);

	var _StaticRouter2 = __webpack_require__(84);

	var _StaticRouter3 = _interopRequireDefault(_StaticRouter2);

	var _Switch2 = __webpack_require__(86);

	var _Switch3 = _interopRequireDefault(_Switch2);

	var _generatePath2 = __webpack_require__(88);

	var _generatePath3 = _interopRequireDefault(_generatePath2);

	var _matchPath2 = __webpack_require__(89);

	var _matchPath3 = _interopRequireDefault(_matchPath2);

	var _withRouter2 = __webpack_require__(90);

	var _withRouter3 = _interopRequireDefault(_withRouter2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.BrowserRouter = _BrowserRouter3.default;
	exports.HashRouter = _HashRouter3.default;
	exports.Link = _Link3.default;
	exports.MemoryRouter = _MemoryRouter3.default;
	exports.NavLink = _NavLink3.default;
	exports.Prompt = _Prompt3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;
	exports.Router = _Router3.default;
	exports.StaticRouter = _StaticRouter3.default;
	exports.Switch = _Switch3.default;
	exports.generatePath = _generatePath3.default;
	exports.matchPath = _matchPath3.default;
	exports.withRouter = _withRouter3.default;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _warning = __webpack_require__(55);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(56);

	var _Router = __webpack_require__(67);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses HTML5 history.
	 */
	var BrowserRouter = function (_React$Component) {
	  _inherits(BrowserRouter, _React$Component);

	  function BrowserRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, BrowserRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createBrowserHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  BrowserRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.");
	  };

	  BrowserRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return BrowserRouter;
	}(_react2.default.Component);

	BrowserRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  forceRefresh: _propTypes2.default.bool,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = BrowserRouter;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var __DEV__ = process.env.NODE_ENV !== 'production';

	var warning = function() {};

	if (__DEV__) {
	  var printWarning = function printWarning(format, args) {
	    var len = arguments.length;
	    args = new Array(len > 1 ? len - 1 : 0);
	    for (var key = 1; key < len; key++) {
	      args[key - 1] = arguments[key];
	    }
	    var argIndex = 0;
	    var message = 'Warning: ' +
	      format.replace(/%s/g, function() {
	        return args[argIndex++];
	      });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  }

	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	          '`warning(condition, format, ...args)` requires a warning ' +
	          'message argument'
	      );
	    }
	    if (!condition) {
	      printWarning.apply(null, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;

	var _LocationUtils = __webpack_require__(57);

	Object.defineProperty(exports, 'createLocation', {
	  enumerable: true,
	  get: function get() {
	    return _LocationUtils.createLocation;
	  }
	});
	Object.defineProperty(exports, 'locationsAreEqual', {
	  enumerable: true,
	  get: function get() {
	    return _LocationUtils.locationsAreEqual;
	  }
	});

	var _PathUtils = __webpack_require__(60);

	Object.defineProperty(exports, 'parsePath', {
	  enumerable: true,
	  get: function get() {
	    return _PathUtils.parsePath;
	  }
	});
	Object.defineProperty(exports, 'createPath', {
	  enumerable: true,
	  get: function get() {
	    return _PathUtils.createPath;
	  }
	});

	var _createBrowserHistory2 = __webpack_require__(61);

	var _createBrowserHistory3 = _interopRequireDefault(_createBrowserHistory2);

	var _createHashHistory2 = __webpack_require__(65);

	var _createHashHistory3 = _interopRequireDefault(_createHashHistory2);

	var _createMemoryHistory2 = __webpack_require__(66);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.createBrowserHistory = _createBrowserHistory3.default;
	exports.createHashHistory = _createHashHistory3.default;
	exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.locationsAreEqual = exports.createLocation = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _resolvePathname = __webpack_require__(58);

	var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

	var _valueEqual = __webpack_require__(59);

	var _valueEqual2 = _interopRequireDefault(_valueEqual);

	var _PathUtils = __webpack_require__(60);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
	  var location = void 0;
	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = (0, _PathUtils.parsePath)(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends({}, path);

	    if (location.pathname === undefined) location.pathname = '';

	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }

	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }

	    if (state !== undefined && location.state === undefined) location.state = state;
	  }

	  try {
	    location.pathname = decodeURI(location.pathname);
	  } catch (e) {
	    if (e instanceof URIError) {
	      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
	    } else {
	      throw e;
	    }
	  }

	  if (key) location.key = key;

	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
	    }
	  } else {
	    // When there is no prior location and pathname is empty, set it to /
	    if (!location.pathname) {
	      location.pathname = '/';
	    }
	  }

	  return location;
	};

	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
	};

/***/ }),
/* 58 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	function isAbsolute(pathname) {
	  return pathname.charAt(0) === '/';
	}

	// About 1.5x faster than the two-arg version of Array#splice()
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }

	  list.pop();
	}

	// This implementation is based heavily on node's url.parse
	function resolvePathname(to) {
	  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	  var toParts = to && to.split('/') || [];
	  var fromParts = from && from.split('/') || [];

	  var isToAbs = to && isAbsolute(to);
	  var isFromAbs = from && isAbsolute(from);
	  var mustEndAbs = isToAbs || isFromAbs;

	  if (to && isAbsolute(to)) {
	    // to is absolute
	    fromParts = toParts;
	  } else if (toParts.length) {
	    // to is relative, drop the filename
	    fromParts.pop();
	    fromParts = fromParts.concat(toParts);
	  }

	  if (!fromParts.length) return '/';

	  var hasTrailingSlash = void 0;
	  if (fromParts.length) {
	    var last = fromParts[fromParts.length - 1];
	    hasTrailingSlash = last === '.' || last === '..' || last === '';
	  } else {
	    hasTrailingSlash = false;
	  }

	  var up = 0;
	  for (var i = fromParts.length; i >= 0; i--) {
	    var part = fromParts[i];

	    if (part === '.') {
	      spliceOne(fromParts, i);
	    } else if (part === '..') {
	      spliceOne(fromParts, i);
	      up++;
	    } else if (up) {
	      spliceOne(fromParts, i);
	      up--;
	    }
	  }

	  if (!mustEndAbs) for (; up--; up) {
	    fromParts.unshift('..');
	  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

	  var result = fromParts.join('/');

	  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

	  return result;
	}

	exports.default = resolvePathname;
	module.exports = exports['default'];

/***/ }),
/* 59 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function valueEqual(a, b) {
	  if (a === b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return valueEqual(item, b[index]);
	    });
	  }

	  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

	  if (aType !== bType) return false;

	  if (aType === 'object') {
	    var aValue = a.valueOf();
	    var bValue = b.valueOf();

	    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

	    var aKeys = Object.keys(a);
	    var bKeys = Object.keys(b);

	    if (aKeys.length !== bKeys.length) return false;

	    return aKeys.every(function (key) {
	      return valueEqual(a[key], b[key]);
	    });
	  }

	  return false;
	}

	exports.default = valueEqual;
	module.exports = exports['default'];

/***/ }),
/* 60 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};

	var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path.substr(1) : path;
	};

	var hasBasename = exports.hasBasename = function hasBasename(path, prefix) {
	  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
	};

	var stripBasename = exports.stripBasename = function stripBasename(path, prefix) {
	  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
	};

	var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
	  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
	};

	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }

	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};

	var createPath = exports.createPath = function createPath(location) {
	  var pathname = location.pathname,
	      search = location.search,
	      hash = location.hash;


	  var path = pathname || '/';

	  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

	  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

	  return path;
	};

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(62);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(52);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(57);

	var _PathUtils = __webpack_require__(60);

	var _createTransitionManager = __webpack_require__(63);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _DOMUtils = __webpack_require__(64);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	var getHistoryState = function getHistoryState() {
	  try {
	    return window.history.state || {};
	  } catch (e) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    return {};
	  }
	};

	/**
	 * Creates a history object that uses the HTML5 history API including
	 * pushState, replaceState, and the popstate event.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');

	  var globalHistory = window.history;
	  var canUseHistory = (0, _DOMUtils.supportsHistory)();
	  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();

	  var _props$forceRefresh = props.forceRefresh,
	      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
	      _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

	  var getDOMLocation = function getDOMLocation(historyState) {
	    var _ref = historyState || {},
	        key = _ref.key,
	        state = _ref.state;

	    var _window$location = window.location,
	        pathname = _window$location.pathname,
	        search = _window$location.search,
	        hash = _window$location.hash;


	    var path = pathname + search + hash;

	    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

	    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

	    return (0, _LocationUtils.createLocation)(path, state, key);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };

	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var handlePopState = function handlePopState(event) {
	    // Ignore extraneous popstate events in WebKit.
	    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;

	    handlePop(getDOMLocation(event.state));
	  };

	  var handleHashChange = function handleHashChange() {
	    handlePop(getDOMLocation(getHistoryState()));
	  };

	  var forceNextPop = false;

	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';

	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };

	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;

	    // TODO: We could probably make this more reliable by
	    // keeping a list of keys we've seen in sessionStorage.
	    // Instead, we just default to 0 for keys we don't know.

	    var toIndex = allKeys.indexOf(toLocation.key);

	    if (toIndex === -1) toIndex = 0;

	    var fromIndex = allKeys.indexOf(fromLocation.key);

	    if (fromIndex === -1) fromIndex = 0;

	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };

	  var initialLocation = getDOMLocation(getHistoryState());
	  var allKeys = [initialLocation.key];

	  // Public interface

	  var createHref = function createHref(location) {
	    return basename + (0, _PathUtils.createPath)(location);
	  };

	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;


	      if (canUseHistory) {
	        globalHistory.pushState({ key: key, state: state }, null, href);

	        if (forceRefresh) {
	          window.location.href = href;
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

	          nextKeys.push(location.key);
	          allKeys = nextKeys;

	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');

	        window.location.href = href;
	      }
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;


	      if (canUseHistory) {
	        globalHistory.replaceState({ key: key, state: state }, null, href);

	        if (forceRefresh) {
	          window.location.replace(href);
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);

	          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');

	        window.location.replace(href);
	      }
	    });
	  };

	  var go = function go(n) {
	    globalHistory.go(n);
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var listenerCount = 0;

	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

	      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

	      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };

	  var isBlocked = false;

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  };

	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);

	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createBrowserHistory;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _warning = __webpack_require__(62);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createTransitionManager = function createTransitionManager() {
	  var prompt = null;

	  var setPrompt = function setPrompt(nextPrompt) {
	    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');

	    prompt = nextPrompt;

	    return function () {
	      if (prompt === nextPrompt) prompt = null;
	    };
	  };

	  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
	    // TODO: If another transition starts while we're still confirming
	    // the previous one, we may end up in a weird state. Figure out the
	    // best way to handle this.
	    if (prompt != null) {
	      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

	      if (typeof result === 'string') {
	        if (typeof getUserConfirmation === 'function') {
	          getUserConfirmation(result, callback);
	        } else {
	          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');

	          callback(true);
	        }
	      } else {
	        // Return false from a transition hook to cancel the transition.
	        callback(result !== false);
	      }
	    } else {
	      callback(true);
	    }
	  };

	  var listeners = [];

	  var appendListener = function appendListener(fn) {
	    var isActive = true;

	    var listener = function listener() {
	      if (isActive) fn.apply(undefined, arguments);
	    };

	    listeners.push(listener);

	    return function () {
	      isActive = false;
	      listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var notifyListeners = function notifyListeners() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    listeners.forEach(function (listener) {
	      return listener.apply(undefined, args);
	    });
	  };

	  return {
	    setPrompt: setPrompt,
	    confirmTransitionTo: confirmTransitionTo,
	    appendListener: appendListener,
	    notifyListeners: notifyListeners
	  };
	};

	exports.default = createTransitionManager;

/***/ }),
/* 64 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};

	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};

	var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;

	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

	  return window.history && 'pushState' in window.history;
	};

	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};

	/**
	 * Returns true if a given popstate event is an extraneous WebKit event.
	 * Accounts for the fact that Chrome on iOS fires real popstate events
	 * containing undefined state when pressing the back button.
	 */
	var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
	  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
	};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(62);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(52);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _LocationUtils = __webpack_require__(57);

	var _PathUtils = __webpack_require__(60);

	var _createTransitionManager = __webpack_require__(63);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _DOMUtils = __webpack_require__(64);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HashChangeEvent = 'hashchange';

	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substr(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: _PathUtils.stripLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  },
	  slash: {
	    encodePath: _PathUtils.addLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  }
	};

	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};

	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};

	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');

	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};

	var createHashHistory = function createHashHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');

	  var globalHistory = window.history;
	  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

	  var _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$hashType = props.hashType,
	      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;

	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

	  var _HashPathCoders$hashT = HashPathCoders[hashType],
	      encodePath = _HashPathCoders$hashT.encodePath,
	      decodePath = _HashPathCoders$hashT.decodePath;


	  var getDOMLocation = function getDOMLocation() {
	    var path = decodePath(getHashPath());

	    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

	    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);

	    return (0, _LocationUtils.createLocation)(path);
	  };

	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var forceNextPop = false;
	  var ignorePath = null;

	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = encodePath(path);

	    if (path !== encodedPath) {
	      // Ensure we always have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var location = getDOMLocation();
	      var prevLocation = history.location;

	      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.

	      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.

	      ignorePath = null;

	      handlePop(location);
	    }
	  };

	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';

	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };

	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;

	    // TODO: We could probably make this more reliable by
	    // keeping a list of paths we've seen in sessionStorage.
	    // Instead, we just default to 0 for paths we don't know.

	    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));

	    if (toIndex === -1) toIndex = 0;

	    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));

	    if (fromIndex === -1) fromIndex = 0;

	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };

	  // Ensure the hash is encoded properly before doing anything else.
	  var path = getHashPath();
	  var encodedPath = encodePath(path);

	  if (path !== encodedPath) replaceHashPath(encodedPath);

	  var initialLocation = getDOMLocation();
	  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];

	  // Public interface

	  var createHref = function createHref(location) {
	    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
	  };

	  var push = function push(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a PUSH, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        pushHashPath(encodedPath);

	        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
	        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

	        nextPaths.push(path);
	        allPaths = nextPaths;

	        setState({ action: action, location: location });
	      } else {
	        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');

	        setState();
	      }
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        replaceHashPath(encodedPath);
	      }

	      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));

	      if (prevIndex !== -1) allPaths[prevIndex] = path;

	      setState({ action: action, location: location });
	    });
	  };

	  var go = function go(n) {
	    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');

	    globalHistory.go(n);
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var listenerCount = 0;

	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };

	  var isBlocked = false;

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  };

	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);

	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createHashHistory;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(62);

	var _warning2 = _interopRequireDefault(_warning);

	var _PathUtils = __webpack_require__(60);

	var _LocationUtils = __webpack_require__(57);

	var _createTransitionManager = __webpack_require__(63);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var clamp = function clamp(n, lowerBound, upperBound) {
	  return Math.min(Math.max(n, lowerBound), upperBound);
	};

	/**
	 * Creates a history object that stores locations in memory.
	 */
	var createMemoryHistory = function createMemoryHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var getUserConfirmation = props.getUserConfirmation,
	      _props$initialEntries = props.initialEntries,
	      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
	      _props$initialIndex = props.initialIndex,
	      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = history.entries.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };

	  var index = clamp(initialIndex, 0, initialEntries.length - 1);
	  var entries = initialEntries.map(function (entry) {
	    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, createKey()) : (0, _LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
	  });

	  // Public interface

	  var createHref = _PathUtils.createPath;

	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var prevIndex = history.index;
	      var nextIndex = prevIndex + 1;

	      var nextEntries = history.entries.slice(0);
	      if (nextEntries.length > nextIndex) {
	        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
	      } else {
	        nextEntries.push(location);
	      }

	      setState({
	        action: action,
	        location: location,
	        index: nextIndex,
	        entries: nextEntries
	      });
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      history.entries[history.index] = location;

	      setState({ action: action, location: location });
	    });
	  };

	  var go = function go(n) {
	    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);

	    var action = 'POP';
	    var location = history.entries[nextIndex];

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (ok) {
	        setState({
	          action: action,
	          location: location,
	          index: nextIndex
	        });
	      } else {
	        // Mimic the behavior of DOM histories by
	        // causing a render after a cancelled POP.
	        setState();
	      }
	    });
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var canGo = function canGo(n) {
	    var nextIndex = history.index + n;
	    return nextIndex >= 0 && nextIndex < history.entries.length;
	  };

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    return transitionManager.setPrompt(prompt);
	  };

	  var listen = function listen(listener) {
	    return transitionManager.appendListener(listener);
	  };

	  var history = {
	    length: entries.length,
	    action: 'POP',
	    location: entries[index],
	    index: index,
	    entries: entries,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    canGo: canGo,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createMemoryHistory;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Router = __webpack_require__(68);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Router2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(55);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(52);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for putting history on context.
	 */
	var Router = function (_React$Component) {
	  _inherits(Router, _React$Component);

	  function Router() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Router);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props.history.location.pathname)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Router.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        history: this.props.history,
	        route: {
	          location: this.props.history.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Router.prototype.computeMatch = function computeMatch(pathname) {
	    return {
	      path: "/",
	      url: "/",
	      params: {},
	      isExact: pathname === "/"
	    };
	  };

	  Router.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;

	    var _props = this.props,
	        children = _props.children,
	        history = _props.history;


	    (0, _invariant2.default)(children == null || _react2.default.Children.count(children) === 1, "A <Router> may have only one child element");

	    // Do this here so we can setState when a <Redirect> changes the
	    // location in componentWillMount. This happens e.g. when doing
	    // server rendering using a <StaticRouter>.
	    this.unlisten = history.listen(function () {
	      _this2.setState({
	        match: _this2.computeMatch(history.location.pathname)
	      });
	    });
	  };

	  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(this.props.history === nextProps.history, "You cannot change <Router history>");
	  };

	  Router.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unlisten();
	  };

	  Router.prototype.render = function render() {
	    var children = this.props.children;

	    return children ? _react2.default.Children.only(children) : null;
	  };

	  return Router;
	}(_react2.default.Component);

	Router.propTypes = {
	  history: _propTypes2.default.object.isRequired,
	  children: _propTypes2.default.node
	};
	Router.contextTypes = {
	  router: _propTypes2.default.object
	};
	Router.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Router;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _warning = __webpack_require__(55);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(56);

	var _Router = __webpack_require__(67);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses window.location.hash.
	 */
	var HashRouter = function (_React$Component) {
	  _inherits(HashRouter, _React$Component);

	  function HashRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, HashRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createHashHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  HashRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.");
	  };

	  HashRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return HashRouter;
	}(_react2.default.Component);

	HashRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  getUserConfirmation: _propTypes2.default.func,
	  hashType: _propTypes2.default.oneOf(["hashbang", "noslash", "slash"]),
	  children: _propTypes2.default.node
	};
	exports.default = HashRouter;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _invariant = __webpack_require__(52);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _history = __webpack_require__(56);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isModifiedEvent = function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	};

	/**
	 * The public API for rendering a history-aware <a>.
	 */

	var Link = function (_React$Component) {
	  _inherits(Link, _React$Component);

	  function Link() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Link);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
	      if (_this.props.onClick) _this.props.onClick(event);

	      if (!event.defaultPrevented && // onClick prevented default
	      event.button === 0 && // ignore everything but left clicks
	      !_this.props.target && // let browser handle "target=_blank" etc.
	      !isModifiedEvent(event) // ignore clicks with modifier keys
	      ) {
	          event.preventDefault();

	          var history = _this.context.router.history;
	          var _this$props = _this.props,
	              replace = _this$props.replace,
	              to = _this$props.to;


	          if (replace) {
	            history.replace(to);
	          } else {
	            history.push(to);
	          }
	        }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Link.prototype.render = function render() {
	    var _props = this.props,
	        replace = _props.replace,
	        to = _props.to,
	        innerRef = _props.innerRef,
	        props = _objectWithoutProperties(_props, ["replace", "to", "innerRef"]); // eslint-disable-line no-unused-vars

	    (0, _invariant2.default)(this.context.router, "You should not use <Link> outside a <Router>");

	    (0, _invariant2.default)(to !== undefined, 'You must specify the "to" property');

	    var history = this.context.router.history;

	    var location = typeof to === "string" ? (0, _history.createLocation)(to, null, null, history.location) : to;

	    var href = history.createHref(location);
	    return _react2.default.createElement("a", _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));
	  };

	  return Link;
	}(_react2.default.Component);

	Link.propTypes = {
	  onClick: _propTypes2.default.func,
	  target: _propTypes2.default.string,
	  replace: _propTypes2.default.bool,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,
	  innerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
	};
	Link.defaultProps = {
	  replace: false
	};
	Link.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired,
	      createHref: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Link;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _MemoryRouter = __webpack_require__(72);

	var _MemoryRouter2 = _interopRequireDefault(_MemoryRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _MemoryRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _warning = __webpack_require__(55);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(56);

	var _Router = __webpack_require__(68);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that stores location in memory.
	 */
	var MemoryRouter = function (_React$Component) {
	  _inherits(MemoryRouter, _React$Component);

	  function MemoryRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, MemoryRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _history.createMemoryHistory)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  MemoryRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.");
	  };

	  MemoryRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };

	  return MemoryRouter;
	}(_react2.default.Component);

	MemoryRouter.propTypes = {
	  initialEntries: _propTypes2.default.array,
	  initialIndex: _propTypes2.default.number,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = MemoryRouter;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _Route = __webpack_require__(74);

	var _Route2 = _interopRequireDefault(_Route);

	var _Link = __webpack_require__(70);

	var _Link2 = _interopRequireDefault(_Link);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */
	var NavLink = function NavLink(_ref) {
	  var to = _ref.to,
	      exact = _ref.exact,
	      strict = _ref.strict,
	      location = _ref.location,
	      activeClassName = _ref.activeClassName,
	      className = _ref.className,
	      activeStyle = _ref.activeStyle,
	      style = _ref.style,
	      getIsActive = _ref.isActive,
	      ariaCurrent = _ref["aria-current"],
	      rest = _objectWithoutProperties(_ref, ["to", "exact", "strict", "location", "activeClassName", "className", "activeStyle", "style", "isActive", "aria-current"]);

	  var path = (typeof to === "undefined" ? "undefined" : _typeof(to)) === "object" ? to.pathname : to;

	  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202
	  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");

	  return _react2.default.createElement(_Route2.default, {
	    path: escapedPath,
	    exact: exact,
	    strict: strict,
	    location: location,
	    children: function children(_ref2) {
	      var location = _ref2.location,
	          match = _ref2.match;

	      var isActive = !!(getIsActive ? getIsActive(match, location) : match);

	      return _react2.default.createElement(_Link2.default, _extends({
	        to: to,
	        className: isActive ? [className, activeClassName].filter(function (i) {
	          return i;
	        }).join(" ") : className,
	        style: isActive ? _extends({}, style, activeStyle) : style,
	        "aria-current": isActive && ariaCurrent || null
	      }, rest));
	    }
	  });
	};

	NavLink.propTypes = {
	  to: _Link2.default.propTypes.to,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  location: _propTypes2.default.object,
	  activeClassName: _propTypes2.default.string,
	  className: _propTypes2.default.string,
	  activeStyle: _propTypes2.default.object,
	  style: _propTypes2.default.object,
	  isActive: _propTypes2.default.func,
	  "aria-current": _propTypes2.default.oneOf(["page", "step", "location", "date", "time", "true"])
	};

	NavLink.defaultProps = {
	  activeClassName: "active",
	  "aria-current": "page"
	};

	exports.default = NavLink;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Route = __webpack_require__(75);

	var _Route2 = _interopRequireDefault(_Route);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Route2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(55);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(52);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _matchPath = __webpack_require__(76);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isEmptyChildren = function isEmptyChildren(children) {
	  return _react2.default.Children.count(children) === 0;
	};

	/**
	 * The public API for matching a single path and rendering.
	 */

	var Route = function (_React$Component) {
	  _inherits(Route, _React$Component);

	  function Route() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Route);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props, _this.context.router)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Route.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        route: {
	          location: this.props.location || this.context.router.route.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Route.prototype.computeMatch = function computeMatch(_ref, router) {
	    var computedMatch = _ref.computedMatch,
	        location = _ref.location,
	        path = _ref.path,
	        strict = _ref.strict,
	        exact = _ref.exact,
	        sensitive = _ref.sensitive;

	    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

	    (0, _invariant2.default)(router, "You should not use <Route> or withRouter() outside a <Router>");

	    var route = router.route;

	    var pathname = (location || route.location).pathname;

	    return (0, _matchPath2.default)(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }, route.match);
	  };

	  Route.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");

	    (0, _warning2.default)(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored");

	    (0, _warning2.default)(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored");
	  };

	  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');

	    this.setState({
	      match: this.computeMatch(nextProps, nextContext.router)
	    });
	  };

	  Route.prototype.render = function render() {
	    var match = this.state.match;
	    var _props = this.props,
	        children = _props.children,
	        component = _props.component,
	        render = _props.render;
	    var _context$router = this.context.router,
	        history = _context$router.history,
	        route = _context$router.route,
	        staticContext = _context$router.staticContext;

	    var location = this.props.location || route.location;
	    var props = { match: match, location: location, history: history, staticContext: staticContext };

	    if (component) return match ? _react2.default.createElement(component, props) : null;

	    if (render) return match ? render(props) : null;

	    if (typeof children === "function") return children(props);

	    if (children && !isEmptyChildren(children)) return _react2.default.Children.only(children);

	    return null;
	  };

	  return Route;
	}(_react2.default.Component);

	Route.propTypes = {
	  computedMatch: _propTypes2.default.object, // private, from <Switch>
	  path: _propTypes2.default.string,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  sensitive: _propTypes2.default.bool,
	  component: _propTypes2.default.func,
	  render: _propTypes2.default.func,
	  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),
	  location: _propTypes2.default.object
	};
	Route.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.object.isRequired,
	    route: _propTypes2.default.object.isRequired,
	    staticContext: _propTypes2.default.object
	  })
	};
	Route.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Route;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _pathToRegexp = __webpack_require__(77);

	var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	var compilePath = function compilePath(pattern, options) {
	  var cacheKey = "" + options.end + options.strict + options.sensitive;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

	  if (cache[pattern]) return cache[pattern];

	  var keys = [];
	  var re = (0, _pathToRegexp2.default)(pattern, keys, options);
	  var compiledPattern = { re: re, keys: keys };

	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledPattern;
	    cacheCount++;
	  }

	  return compiledPattern;
	};

	/**
	 * Public API for matching a URL pathname to a path pattern.
	 */
	var matchPath = function matchPath(pathname) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var parent = arguments[2];

	  if (typeof options === "string") options = { path: options };

	  var _options = options,
	      path = _options.path,
	      _options$exact = _options.exact,
	      exact = _options$exact === undefined ? false : _options$exact,
	      _options$strict = _options.strict,
	      strict = _options$strict === undefined ? false : _options$strict,
	      _options$sensitive = _options.sensitive,
	      sensitive = _options$sensitive === undefined ? false : _options$sensitive;


	  if (path == null) return parent;

	  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),
	      re = _compilePath.re,
	      keys = _compilePath.keys;

	  var match = re.exec(pathname);

	  if (!match) return null;

	  var url = match[0],
	      values = match.slice(1);

	  var isExact = pathname === url;

	  if (exact && !isExact) return null;

	  return {
	    path: path, // the path pattern used to match
	    url: path === "/" && url === "" ? "/" : url, // the matched portion of the URL
	    isExact: isExact, // whether or not we matched exactly
	    params: keys.reduce(function (memo, key, index) {
	      memo[key.name] = values[index];
	      return memo;
	    }, {})
	  };
	};

	exports.default = matchPath;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	var isarray = __webpack_require__(78)

	/**
	 * Expose `pathToRegexp`.
	 */
	module.exports = pathToRegexp
	module.exports.parse = parse
	module.exports.compile = compile
	module.exports.tokensToFunction = tokensToFunction
	module.exports.tokensToRegExp = tokensToRegExp

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g')

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse (str, options) {
	  var tokens = []
	  var key = 0
	  var index = 0
	  var path = ''
	  var defaultDelimiter = options && options.delimiter || '/'
	  var res

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0]
	    var escaped = res[1]
	    var offset = res.index
	    path += str.slice(index, offset)
	    index = offset + m.length

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1]
	      continue
	    }

	    var next = str[index]
	    var prefix = res[2]
	    var name = res[3]
	    var capture = res[4]
	    var group = res[5]
	    var modifier = res[6]
	    var asterisk = res[7]

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path)
	      path = ''
	    }

	    var partial = prefix != null && next != null && next !== prefix
	    var repeat = modifier === '+' || modifier === '*'
	    var optional = modifier === '?' || modifier === '*'
	    var delimiter = res[2] || defaultDelimiter
	    var pattern = capture || group

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    })
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index)
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path)
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse(str, options))
	}

	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length)

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
	    }
	  }

	  return function (obj, opts) {
	    var path = ''
	    var data = obj || {}
	    var options = opts || {}
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i]

	      if (typeof token === 'string') {
	        path += token

	        continue
	      }

	      var value = data[token.name]
	      var segment

	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix
	          }

	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j])

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment
	        }

	        continue
	      }

	      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g)

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      })
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = []

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source)
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }

	  options = options || {}

	  var strict = options.strict
	  var end = options.end !== false
	  var route = ''

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i]

	    if (typeof token === 'string') {
	      route += escapeString(token)
	    } else {
	      var prefix = escapeString(token.prefix)
	      var capture = '(?:' + token.pattern + ')'

	      keys.push(token)

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*'
	      }

	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?'
	        } else {
	          capture = prefix + '(' + capture + ')?'
	        }
	      } else {
	        capture = prefix + '(' + capture + ')'
	      }

	      route += capture
	    }
	  }

	  var delimiter = escapeString(options.delimiter || '/')
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
	  }

	  if (end) {
	    route += '$'
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
	  }

	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }

	  options = options || {}

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }

	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}


/***/ }),
/* 78 */
/***/ (function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Prompt = __webpack_require__(80);

	var _Prompt2 = _interopRequireDefault(_Prompt);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Prompt2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _invariant = __webpack_require__(52);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for prompting the user before navigating away
	 * from a screen with a component.
	 */
	var Prompt = function (_React$Component) {
	  _inherits(Prompt, _React$Component);

	  function Prompt() {
	    _classCallCheck(this, Prompt);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Prompt.prototype.enable = function enable(message) {
	    if (this.unblock) this.unblock();

	    this.unblock = this.context.router.history.block(message);
	  };

	  Prompt.prototype.disable = function disable() {
	    if (this.unblock) {
	      this.unblock();
	      this.unblock = null;
	    }
	  };

	  Prompt.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, "You should not use <Prompt> outside a <Router>");

	    if (this.props.when) this.enable(this.props.message);
	  };

	  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.when) {
	      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
	    } else {
	      this.disable();
	    }
	  };

	  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.disable();
	  };

	  Prompt.prototype.render = function render() {
	    return null;
	  };

	  return Prompt;
	}(_react2.default.Component);

	Prompt.propTypes = {
	  when: _propTypes2.default.bool,
	  message: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
	};
	Prompt.defaultProps = {
	  when: true
	};
	Prompt.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      block: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Prompt;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Redirect = __webpack_require__(82);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Redirect2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(55);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(52);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _history = __webpack_require__(56);

	var _generatePath = __webpack_require__(83);

	var _generatePath2 = _interopRequireDefault(_generatePath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for updating the location programmatically
	 * with a component.
	 */
	var Redirect = function (_React$Component) {
	  _inherits(Redirect, _React$Component);

	  function Redirect() {
	    _classCallCheck(this, Redirect);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Redirect.prototype.isStatic = function isStatic() {
	    return this.context.router && this.context.router.staticContext;
	  };

	  Redirect.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, "You should not use <Redirect> outside a <Router>");

	    if (this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidMount = function componentDidMount() {
	    if (!this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var prevTo = (0, _history.createLocation)(prevProps.to);
	    var nextTo = (0, _history.createLocation)(this.props.to);

	    if ((0, _history.locationsAreEqual)(prevTo, nextTo)) {
	      (0, _warning2.default)(false, "You tried to redirect to the same route you're currently on: " + ("\"" + nextTo.pathname + nextTo.search + "\""));
	      return;
	    }

	    this.perform();
	  };

	  Redirect.prototype.computeTo = function computeTo(_ref) {
	    var computedMatch = _ref.computedMatch,
	        to = _ref.to;

	    if (computedMatch) {
	      if (typeof to === "string") {
	        return (0, _generatePath2.default)(to, computedMatch.params);
	      } else {
	        return _extends({}, to, {
	          pathname: (0, _generatePath2.default)(to.pathname, computedMatch.params)
	        });
	      }
	    }

	    return to;
	  };

	  Redirect.prototype.perform = function perform() {
	    var history = this.context.router.history;
	    var push = this.props.push;

	    var to = this.computeTo(this.props);

	    if (push) {
	      history.push(to);
	    } else {
	      history.replace(to);
	    }
	  };

	  Redirect.prototype.render = function render() {
	    return null;
	  };

	  return Redirect;
	}(_react2.default.Component);

	Redirect.propTypes = {
	  computedMatch: _propTypes2.default.object, // private, from <Switch>
	  push: _propTypes2.default.bool,
	  from: _propTypes2.default.string,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
	};
	Redirect.defaultProps = {
	  push: false
	};
	Redirect.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired
	    }).isRequired,
	    staticContext: _propTypes2.default.object
	  }).isRequired
	};
	exports.default = Redirect;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _pathToRegexp = __webpack_require__(77);

	var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	var compileGenerator = function compileGenerator(pattern) {
	  var cacheKey = pattern;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

	  if (cache[pattern]) return cache[pattern];

	  var compiledGenerator = _pathToRegexp2.default.compile(pattern);

	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledGenerator;
	    cacheCount++;
	  }

	  return compiledGenerator;
	};

	/**
	 * Public API for generating a URL pathname from a pattern and parameters.
	 */
	var generatePath = function generatePath() {
	  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  if (pattern === "/") {
	    return pattern;
	  }
	  var generator = compileGenerator(pattern);
	  return generator(params, { pretty: true });
	};

	exports.default = generatePath;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _StaticRouter = __webpack_require__(85);

	var _StaticRouter2 = _interopRequireDefault(_StaticRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _StaticRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _warning = __webpack_require__(55);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(52);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _history = __webpack_require__(56);

	var _Router = __webpack_require__(68);

	var _Router2 = _interopRequireDefault(_Router);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === "/" ? path : "/" + path;
	};

	var addBasename = function addBasename(basename, location) {
	  if (!basename) return location;

	  return _extends({}, location, {
	    pathname: addLeadingSlash(basename) + location.pathname
	  });
	};

	var stripBasename = function stripBasename(basename, location) {
	  if (!basename) return location;

	  var base = addLeadingSlash(basename);

	  if (location.pathname.indexOf(base) !== 0) return location;

	  return _extends({}, location, {
	    pathname: location.pathname.substr(base.length)
	  });
	};

	var createURL = function createURL(location) {
	  return typeof location === "string" ? location : (0, _history.createPath)(location);
	};

	var staticHandler = function staticHandler(methodName) {
	  return function () {
	    (0, _invariant2.default)(false, "You cannot %s with <StaticRouter>", methodName);
	  };
	};

	var noop = function noop() {};

	/**
	 * The public top-level API for a "static" <Router>, so-called because it
	 * can't actually change the current location. Instead, it just records
	 * location changes in a context object. Useful mainly in testing and
	 * server-rendering scenarios.
	 */

	var StaticRouter = function (_React$Component) {
	  _inherits(StaticRouter, _React$Component);

	  function StaticRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, StaticRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
	      return addLeadingSlash(_this.props.basename + createURL(path));
	    }, _this.handlePush = function (location) {
	      var _this$props = _this.props,
	          basename = _this$props.basename,
	          context = _this$props.context;

	      context.action = "PUSH";
	      context.location = addBasename(basename, (0, _history.createLocation)(location));
	      context.url = createURL(context.location);
	    }, _this.handleReplace = function (location) {
	      var _this$props2 = _this.props,
	          basename = _this$props2.basename,
	          context = _this$props2.context;

	      context.action = "REPLACE";
	      context.location = addBasename(basename, (0, _history.createLocation)(location));
	      context.url = createURL(context.location);
	    }, _this.handleListen = function () {
	      return noop;
	    }, _this.handleBlock = function () {
	      return noop;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  StaticRouter.prototype.getChildContext = function getChildContext() {
	    return {
	      router: {
	        staticContext: this.props.context
	      }
	    };
	  };

	  StaticRouter.prototype.componentWillMount = function componentWillMount() {
	    (0, _warning2.default)(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.");
	  };

	  StaticRouter.prototype.render = function render() {
	    var _props = this.props,
	        basename = _props.basename,
	        context = _props.context,
	        location = _props.location,
	        props = _objectWithoutProperties(_props, ["basename", "context", "location"]);

	    var history = {
	      createHref: this.createHref,
	      action: "POP",
	      location: stripBasename(basename, (0, _history.createLocation)(location)),
	      push: this.handlePush,
	      replace: this.handleReplace,
	      go: staticHandler("go"),
	      goBack: staticHandler("goBack"),
	      goForward: staticHandler("goForward"),
	      listen: this.handleListen,
	      block: this.handleBlock
	    };

	    return _react2.default.createElement(_Router2.default, _extends({}, props, { history: history }));
	  };

	  return StaticRouter;
	}(_react2.default.Component);

	StaticRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  context: _propTypes2.default.object.isRequired,
	  location: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
	};
	StaticRouter.defaultProps = {
	  basename: "",
	  location: "/"
	};
	StaticRouter.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = StaticRouter;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _Switch = __webpack_require__(87);

	var _Switch2 = _interopRequireDefault(_Switch);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Switch2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warning = __webpack_require__(55);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(52);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _matchPath = __webpack_require__(76);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for rendering the first <Route> that matches.
	 */
	var Switch = function (_React$Component) {
	  _inherits(Switch, _React$Component);

	  function Switch() {
	    _classCallCheck(this, Switch);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Switch.prototype.componentWillMount = function componentWillMount() {
	    (0, _invariant2.default)(this.context.router, "You should not use <Switch> outside a <Router>");
	  };

	  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
	  };

	  Switch.prototype.render = function render() {
	    var route = this.context.router.route;
	    var children = this.props.children;

	    var location = this.props.location || route.location;

	    var match = void 0,
	        child = void 0;
	    _react2.default.Children.forEach(children, function (element) {
	      if (match == null && _react2.default.isValidElement(element)) {
	        var _element$props = element.props,
	            pathProp = _element$props.path,
	            exact = _element$props.exact,
	            strict = _element$props.strict,
	            sensitive = _element$props.sensitive,
	            from = _element$props.from;

	        var path = pathProp || from;

	        child = element;
	        match = (0, _matchPath2.default)(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }, route.match);
	      }
	    });

	    return match ? _react2.default.cloneElement(child, { location: location, computedMatch: match }) : null;
	  };

	  return Switch;
	}(_react2.default.Component);

	Switch.contextTypes = {
	  router: _propTypes2.default.shape({
	    route: _propTypes2.default.object.isRequired
	  }).isRequired
	};
	Switch.propTypes = {
	  children: _propTypes2.default.node,
	  location: _propTypes2.default.object
	};
	exports.default = Switch;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _generatePath = __webpack_require__(83);

	var _generatePath2 = _interopRequireDefault(_generatePath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _generatePath2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _matchPath = __webpack_require__(76);

	var _matchPath2 = _interopRequireDefault(_matchPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _matchPath2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _withRouter = __webpack_require__(91);

	var _withRouter2 = _interopRequireDefault(_withRouter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _withRouter2.default; // Written in this round about way for babel-transform-imports

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(20);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _hoistNonReactStatics = __webpack_require__(51);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _Route = __webpack_require__(75);

	var _Route2 = _interopRequireDefault(_Route);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A public higher-order component to access the imperative API
	 */
	var withRouter = function withRouter(Component) {
	  var C = function C(props) {
	    var wrappedComponentRef = props.wrappedComponentRef,
	        remainingProps = _objectWithoutProperties(props, ["wrappedComponentRef"]);

	    return _react2.default.createElement(_Route2.default, {
	      children: function children(routeComponentProps) {
	        return _react2.default.createElement(Component, _extends({}, remainingProps, routeComponentProps, {
	          ref: wrappedComponentRef
	        }));
	      }
	    });
	  };

	  C.displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
	  C.WrappedComponent = Component;
	  C.propTypes = {
	    wrappedComponentRef: _propTypes2.default.func
	  };

	  return (0, _hoistNonReactStatics2.default)(C, Component);
	};

	exports.default = withRouter;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _redux = __webpack_require__(31);

	var _reduxThunk = __webpack_require__(93);

	var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

	var _reducers = __webpack_require__(94);

	var _reducers2 = _interopRequireDefault(_reducers);

	var _logger = __webpack_require__(100);

	var _socket = __webpack_require__(101);

	var _socket2 = _interopRequireDefault(_socket);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	//
	var host = window.location.protocol + "//" + window.location.host;
	var socketMiddleware = (0, _socket2.default)(host);

	var store = (0, _redux.createStore)(_reducers2.default, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(), (0, _redux.applyMiddleware)(_reduxThunk2.default, _logger.logger, socketMiddleware));
	exports.default = store;

/***/ }),
/* 93 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	function createThunkMiddleware(extraArgument) {
	  return function (_ref) {
	    var dispatch = _ref.dispatch,
	        getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        if (typeof action === 'function') {
	          return action(dispatch, getState, extraArgument);
	        }

	        return next(action);
	      };
	    };
	  };
	}

	var thunk = createThunkMiddleware();
	thunk.withExtraArgument = createThunkMiddleware;

	exports['default'] = thunk;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _redux = __webpack_require__(31);

	var _playerReducer = __webpack_require__(95);

	var _playerReducer2 = _interopRequireDefault(_playerReducer);

	var _gameReducer = __webpack_require__(98);

	var _gameReducer2 = _interopRequireDefault(_gameReducer);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	// all reducers combined into 1!
	var rootReducer = (0, _redux.combineReducers)({
	  playerReducer: _playerReducer2.default,
	  gameReducer: _gameReducer2.default
	});

	exports.default = rootReducer;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = playerReducer;

	var _actions = __webpack_require__(96);

	var ACTIONS = _interopRequireWildcard(_actions);

	var _initialState = __webpack_require__(97);

	var _initialState2 = _interopRequireDefault(_initialState);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	function playerReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _initialState2.default.player;
	  var action = arguments[1];

	  switch (action.type) {
	    case ACTIONS.CHANGE_USERNAME:
	      return Object.assign({}, state, {
	        username: action.payload
	      });
	    case ACTIONS.CREATE_ROOM:
	      return Object.assign({}, state, {
	        connection: true
	      });
	    case ACTIONS.SOCKET_CONNECTION:
	      return Object.assign({}, state, {
	        connection: action.payload
	      });
	    case ACTIONS.SET_CONNECTION:
	      return Object.assign({}, state, {
	        connection: action.payload
	      });
	    default:
	      return state;
	  }
	}

/***/ }),
/* 96 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var CHANGE_USERNAME = exports.CHANGE_USERNAME = 'setPlayerUsername';
	var SOCKET_CONNECTION = exports.SOCKET_CONNECTION = 'openSocketConnection';
	var CONNECT_PRIVATE_ROOM = exports.CONNECT_PRIVATE_ROOM = 'connectPrivateRoom';
	var CREATE_ROOM = exports.CREATE_ROOM = 'createRoom';
	var SET_CONNECTION = exports.SET_CONNECTION = 'setConnection';

/***/ }),
/* 97 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var initialState = {
	  game: {
	    gameInfo: {
	      roomTag: ""
	    },
	    toolPicked: "pencil",
	    colorPicked: "#000",
	    penWidth: "1px",
	    playerList: [],
	    messages: [],
	    lastDraw: null,
	    countDown: undefined,
	    gamePlay: "waitting",
	    playersDraw: [],
	    currentWord: "Waitting round to start",
	    modal: false,
	    fullscreen: false
	  },
	  player: {
	    username: "",
	    connection: null,
	    sound: true
	  }
	};

	exports.default = initialState;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = gameReducer;

	var _actions = __webpack_require__(99);

	var ACTIONS = _interopRequireWildcard(_actions);

	var _initialState = __webpack_require__(97);

	var _initialState2 = _interopRequireDefault(_initialState);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	function _toConsumableArray(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }return arr2;
	  } else {
	    return Array.from(arr);
	  }
	}

	function gameReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _initialState2.default.game;
	  var action = arguments[1];

	  switch (action.type) {
	    case ACTIONS.RETRIEVE_GAME_INFO:
	      return Object.assign({}, state, {
	        gameInfo: action.payload
	      });
	    case ACTIONS.TOGGLE_EXPAND:
	      return Object.assign({}, state, {
	        fullscreen: !state.fullscreen
	      });
	    case ACTIONS.CHANGE_COLOR_PICKED:
	      return Object.assign({}, state, {
	        colorPicked: action.payload
	      });
	    case ACTIONS.SELECT_TOOL_PICKED:
	      return Object.assign({}, state, {
	        toolPicked: action.payload
	      });
	    case ACTIONS.SELECT_PEN_WIDTH:
	      return Object.assign({}, state, {
	        penWidth: action.payload
	      });
	    case ACTIONS.UPDATE_USERLIST:
	      return Object.assign({}, state, {
	        playerList: action.payload
	      });
	    case ACTIONS.ADD_NEW_CHAT_MESSAGE:
	      return Object.assign({}, state, {
	        messages: [].concat(_toConsumableArray(state.messages), [action.payload])
	      });
	    case ACTIONS.UPDATE_CANVAS:
	      return Object.assign({}, state, {
	        lastDraw: action.payload
	      });
	    case ACTIONS.UPDATE_TIMER:
	      return Object.assign({}, state, {
	        countDown: action.payload
	      });
	    case ACTIONS.UPDATE_GAME_STATE:
	      return Object.assign({}, state, {
	        gamePlay: action.payload
	      });
	    case ACTIONS.DISPLAY_PLAYERS_DRAW:
	      return Object.assign({}, state, {
	        playersDraw: action.payload
	      });
	    case ACTIONS.DISPLAY_CURRENT_WORD:
	      return Object.assign({}, state, {
	        currentWord: action.payload
	      });
	    case ACTIONS.DISCONNECT_GAME_ROOM:
	      return Object.assign({}, state, {
	        modal: true
	      });
	    default:
	      return state;
	  }
	}

/***/ }),
/* 99 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var RETRIEVE_GAME_INFO = exports.RETRIEVE_GAME_INFO = 'retrieveGameInfo';
	var UPDATE_CANVAS = exports.UPDATE_CANVAS = 'updateCanvas';
	var UPDATE_TIMER = exports.UPDATE_TIMER = 'updateTimer';
	var CHANGE_COLOR_PICKED = exports.CHANGE_COLOR_PICKED = 'selectColor';
	var SELECT_TOOL_PICKED = exports.SELECT_TOOL_PICKED = 'selectTool';
	var SELECT_PEN_WIDTH = exports.SELECT_PEN_WIDTH = 'setPenWidth';
	var UPDATE_USERLIST = exports.UPDATE_USERLIST = 'updatePlayerList';
	var ADD_NEW_CHAT_MESSAGE = exports.ADD_NEW_CHAT_MESSAGE = 'addMessageChatList';
	var PLAYER_SEND_MESSAGE = exports.PLAYER_SEND_MESSAGE = 'playerSendMessage';
	var PLAYER_DRAW_CANVAS = exports.PLAYER_DRAW_CANVAS = 'playerDrawCanvas';
	var PLAYER_CLEAR_CANVAS = exports.PLAYER_CLEAR_CANVAS = 'clearCanvas';
	var UPDATE_GAME_STATE = exports.UPDATE_GAME_STATE = 'updateGameState';
	var PLAYER_VOTE_DRAW = exports.PLAYER_VOTE_DRAW = 'playerVoteDraw';
	var DISPLAY_PLAYERS_DRAW = exports.DISPLAY_PLAYERS_DRAW = 'displayPlayersDraw';
	var DISPLAY_CURRENT_WORD = exports.DISPLAY_CURRENT_WORD = 'displayCurrentWord';
	var DISCONNECT_GAME_ROOM = exports.DISCONNECT_GAME_ROOM = 'disconnectGameRoom';
	var TOGGLE_EXPAND = exports.TOGGLE_EXPAND = 'toggleExpand';

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var logger = exports.logger = function logger(store) {
	    return function (next) {
	        return function (action) {
	            //console.group(action.type);
	            //console.info('dispatching', action);
	            var result = next(action);
	            //console.log('next state', store.getState());
	            console.groupEnd(action.type);

	            return result;
	        };
	    };
	};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _middleware = __webpack_require__(102);

	var _middleware2 = _interopRequireDefault(_middleware);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _middleware2.default;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _SocketManagerFactory = __webpack_require__(103);

	var _SocketManagerFactory2 = _interopRequireDefault(_SocketManagerFactory);

	var _actions = __webpack_require__(96);

	var _actions2 = __webpack_require__(99);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var SocketMiddleware = function SocketMiddleware(url) {
	  return function (store) {
	    var sm = void 0; // SocketManage
	    return function (next) {
	      return function (action) {
	        // When dispatching a redux action.
	        switch (action.type) {
	          case _actions.SOCKET_CONNECTION:
	            var username = store.getState().playerReducer.username;

	            sm = (0, _SocketManagerFactory2.default)(url, store);
	            sm.joinRandomRoom(username);
	            action.payload = true;
	            next(action);
	            break;
	          case _actions.CONNECT_PRIVATE_ROOM:
	            sm = (0, _SocketManagerFactory2.default)(url, store);
	            sm.joinPrivateRoom(username);
	            next(action);
	            break;
	          case _actions.CREATE_ROOM:
	            sm = (0, _SocketManagerFactory2.default)(url, store);
	            sm.createRoom(action.payload);
	            next(action);
	            break;
	          case _actions2.PLAYER_SEND_MESSAGE:
	            sm.sendMessage(action.payload);
	            break;
	          case _actions2.PLAYER_DRAW_CANVAS:
	            sm.drawCanvas(action.payload);
	            break;
	          case _actions2.PLAYER_CLEAR_CANVAS:
	            sm.clearCanvas();
	            break;
	          case _actions2.PLAYER_VOTE_DRAW:
	            sm.voteDraw(action.payload);
	            break;
	          default:
	            next(action);
	        }
	      };
	    };
	  };
	};

	exports.default = SocketMiddleware;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _socket = __webpack_require__(104);

	var _socket2 = _interopRequireDefault(_socket);

	var _socketManager = __webpack_require__(155);

	var _socketManager2 = _interopRequireDefault(_socketManager);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	var SocketManagerFactory = function SocketManagerFactory(url, store) {
	    var ws = (0, _socket2.default)(url);
	    var sm = new _socketManager2.default(ws, store);

	    return sm;
	};

	exports.default = SocketManagerFactory;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var url = __webpack_require__(105);
	var parser = __webpack_require__(110);
	var Manager = __webpack_require__(122);
	var debug = __webpack_require__(107)('socket.io-client');

	/**
	 * Module exports.
	 */

	module.exports = exports = lookup;

	/**
	 * Managers cache.
	 */

	var cache = exports.managers = {};

	/**
	 * Looks up an existing `Manager` for multiplexing.
	 * If the user summons:
	 *
	 *   `io('http://localhost/a');`
	 *   `io('http://localhost/b');`
	 *
	 * We reuse the existing instance based on same scheme/port/host,
	 * and we initialize sockets for each namespace.
	 *
	 * @api public
	 */

	function lookup (uri, opts) {
	  if (typeof uri === 'object') {
	    opts = uri;
	    uri = undefined;
	  }

	  opts = opts || {};

	  var parsed = url(uri);
	  var source = parsed.source;
	  var id = parsed.id;
	  var path = parsed.path;
	  var sameNamespace = cache[id] && path in cache[id].nsps;
	  var newConnection = opts.forceNew || opts['force new connection'] ||
	                      false === opts.multiplex || sameNamespace;

	  var io;

	  if (newConnection) {
	    debug('ignoring socket cache for %s', source);
	    io = Manager(source, opts);
	  } else {
	    if (!cache[id]) {
	      debug('new io instance for %s', source);
	      cache[id] = Manager(source, opts);
	    }
	    io = cache[id];
	  }
	  if (parsed.query && !opts.query) {
	    opts.query = parsed.query;
	  }
	  return io.socket(parsed.path, opts);
	}

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = parser.protocol;

	/**
	 * `connect`.
	 *
	 * @param {String} uri
	 * @api public
	 */

	exports.connect = lookup;

	/**
	 * Expose constructors for standalone build.
	 *
	 * @api public
	 */

	exports.Manager = __webpack_require__(122);
	exports.Socket = __webpack_require__(150);


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var parseuri = __webpack_require__(106);
	var debug = __webpack_require__(107)('socket.io-client:url');

	/**
	 * Module exports.
	 */

	module.exports = url;

	/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */

	function url (uri, loc) {
	  var obj = uri;

	  // default to window.location
	  loc = loc || (typeof location !== 'undefined' && location);
	  if (null == uri) uri = loc.protocol + '//' + loc.host;

	  // relative path support
	  if ('string' === typeof uri) {
	    if ('/' === uri.charAt(0)) {
	      if ('/' === uri.charAt(1)) {
	        uri = loc.protocol + uri;
	      } else {
	        uri = loc.host + uri;
	      }
	    }

	    if (!/^(https?|wss?):\/\//.test(uri)) {
	      debug('protocol-less url %s', uri);
	      if ('undefined' !== typeof loc) {
	        uri = loc.protocol + '//' + uri;
	      } else {
	        uri = 'https://' + uri;
	      }
	    }

	    // parse
	    debug('parse %s', uri);
	    obj = parseuri(uri);
	  }

	  // make sure we treat `localhost:80` and `localhost` equally
	  if (!obj.port) {
	    if (/^(http|ws)$/.test(obj.protocol)) {
	      obj.port = '80';
	    } else if (/^(http|ws)s$/.test(obj.protocol)) {
	      obj.port = '443';
	    }
	  }

	  obj.path = obj.path || '/';

	  var ipv6 = obj.host.indexOf(':') !== -1;
	  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

	  // define unique id
	  obj.id = obj.protocol + '://' + host + ':' + obj.port;
	  // define href
	  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

	  return obj;
	}


/***/ }),
/* 106 */
/***/ (function(module, exports) {

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];

	module.exports = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');

	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }

	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }

	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }

	    return uri;
	};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(108);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
	  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
	  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
	  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
	  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
	  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
	  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
	  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
	  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
	  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
	  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // NB: In an Electron preload script, document will be defined but not fully
	  // initialized. Since we know we're in Chrome, we'll just detect this case
	  // explicitly
	  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
	    return true;
	  }

	  // Internet Explorer and Edge do not support colors.
	  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
	    return false;
	  }

	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
	    // double check webkit in userAgent just in case we are in a worker
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return;

	  var c = 'color: ' + this.color;
	  args.splice(1, 0, c, 'color: inherit')

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-zA-Z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}

	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (!r && typeof process !== 'undefined' && 'env' in process) {
	    r = process.env.DEBUG;
	  }

	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(109);

	/**
	 * Active `debug` instances.
	 */
	exports.instances = [];

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	 */

	exports.formatters = {};

	/**
	 * Select a color.
	 * @param {String} namespace
	 * @return {Number}
	 * @api private
	 */

	function selectColor(namespace) {
	  var hash = 0, i;

	  for (i in namespace) {
	    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
	    hash |= 0; // Convert to 32bit integer
	  }

	  return exports.colors[Math.abs(hash) % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function createDebug(namespace) {

	  var prevTime;

	  function debug() {
	    // disabled?
	    if (!debug.enabled) return;

	    var self = debug;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // turn the `arguments` into a proper Array
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %O
	      args.unshift('%O');
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    // apply env-specific formatting (colors, etc.)
	    exports.formatArgs.call(self, args);

	    var logFn = debug.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }

	  debug.namespace = namespace;
	  debug.enabled = exports.enabled(namespace);
	  debug.useColors = exports.useColors();
	  debug.color = selectColor(namespace);
	  debug.destroy = destroy;

	  // env-specific initialization logic for debug instances
	  if ('function' === typeof exports.init) {
	    exports.init(debug);
	  }

	  exports.instances.push(debug);

	  return debug;
	}

	function destroy () {
	  var index = exports.instances.indexOf(this);
	  if (index !== -1) {
	    exports.instances.splice(index, 1);
	    return true;
	  } else {
	    return false;
	  }
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  exports.names = [];
	  exports.skips = [];

	  var i;
	  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
	  var len = split.length;

	  for (i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }

	  for (i = 0; i < exports.instances.length; i++) {
	    var instance = exports.instances[i];
	    instance.enabled = exports.enabled(instance.namespace);
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  if (name[name.length - 1] === '*') {
	    return true;
	  }
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ }),
/* 109 */
/***/ (function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var debug = __webpack_require__(111)('socket.io-parser');
	var Emitter = __webpack_require__(114);
	var binary = __webpack_require__(115);
	var isArray = __webpack_require__(116);
	var isBuf = __webpack_require__(117);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = 4;

	/**
	 * Packet types.
	 *
	 * @api public
	 */

	exports.types = [
	  'CONNECT',
	  'DISCONNECT',
	  'EVENT',
	  'ACK',
	  'ERROR',
	  'BINARY_EVENT',
	  'BINARY_ACK'
	];

	/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */

	exports.CONNECT = 0;

	/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */

	exports.DISCONNECT = 1;

	/**
	 * Packet type `event`.
	 *
	 * @api public
	 */

	exports.EVENT = 2;

	/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */

	exports.ACK = 3;

	/**
	 * Packet type `error`.
	 *
	 * @api public
	 */

	exports.ERROR = 4;

	/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */

	exports.BINARY_EVENT = 5;

	/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */

	exports.BINARY_ACK = 6;

	/**
	 * Encoder constructor.
	 *
	 * @api public
	 */

	exports.Encoder = Encoder;

	/**
	 * Decoder constructor.
	 *
	 * @api public
	 */

	exports.Decoder = Decoder;

	/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */

	function Encoder() {}

	var ERROR_PACKET = exports.ERROR + '"encode error"';

	/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */

	Encoder.prototype.encode = function(obj, callback){
	  debug('encoding packet %j', obj);

	  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
	    encodeAsBinary(obj, callback);
	  } else {
	    var encoding = encodeAsString(obj);
	    callback([encoding]);
	  }
	};

	/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */

	function encodeAsString(obj) {

	  // first is type
	  var str = '' + obj.type;

	  // attachments if we have them
	  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
	    str += obj.attachments + '-';
	  }

	  // if we have a namespace other than `/`
	  // we append it followed by a comma `,`
	  if (obj.nsp && '/' !== obj.nsp) {
	    str += obj.nsp + ',';
	  }

	  // immediately followed by the id
	  if (null != obj.id) {
	    str += obj.id;
	  }

	  // json data
	  if (null != obj.data) {
	    var payload = tryStringify(obj.data);
	    if (payload !== false) {
	      str += payload;
	    } else {
	      return ERROR_PACKET;
	    }
	  }

	  debug('encoded %j as %s', obj, str);
	  return str;
	}

	function tryStringify(str) {
	  try {
	    return JSON.stringify(str);
	  } catch(e){
	    return false;
	  }
	}

	/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */

	function encodeAsBinary(obj, callback) {

	  function writeEncoding(bloblessData) {
	    var deconstruction = binary.deconstructPacket(bloblessData);
	    var pack = encodeAsString(deconstruction.packet);
	    var buffers = deconstruction.buffers;

	    buffers.unshift(pack); // add packet info to beginning of data list
	    callback(buffers); // write all the buffers
	  }

	  binary.removeBlobs(obj, writeEncoding);
	}

	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */

	function Decoder() {
	  this.reconstructor = null;
	}

	/**
	 * Mix in `Emitter` with Decoder.
	 */

	Emitter(Decoder.prototype);

	/**
	 * Decodes an encoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */

	Decoder.prototype.add = function(obj) {
	  var packet;
	  if (typeof obj === 'string') {
	    packet = decodeString(obj);
	    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
	      this.reconstructor = new BinaryReconstructor(packet);

	      // no attachments, labeled binary but no binary data to follow
	      if (this.reconstructor.reconPack.attachments === 0) {
	        this.emit('decoded', packet);
	      }
	    } else { // non-binary full packet
	      this.emit('decoded', packet);
	    }
	  } else if (isBuf(obj) || obj.base64) { // raw binary data
	    if (!this.reconstructor) {
	      throw new Error('got binary data when not reconstructing a packet');
	    } else {
	      packet = this.reconstructor.takeBinaryData(obj);
	      if (packet) { // received final buffer
	        this.reconstructor = null;
	        this.emit('decoded', packet);
	      }
	    }
	  } else {
	    throw new Error('Unknown type: ' + obj);
	  }
	};

	/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */

	function decodeString(str) {
	  var i = 0;
	  // look up type
	  var p = {
	    type: Number(str.charAt(0))
	  };

	  if (null == exports.types[p.type]) {
	    return error('unknown packet type ' + p.type);
	  }

	  // look up attachments if type binary
	  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
	    var buf = '';
	    while (str.charAt(++i) !== '-') {
	      buf += str.charAt(i);
	      if (i == str.length) break;
	    }
	    if (buf != Number(buf) || str.charAt(i) !== '-') {
	      throw new Error('Illegal attachments');
	    }
	    p.attachments = Number(buf);
	  }

	  // look up namespace (if any)
	  if ('/' === str.charAt(i + 1)) {
	    p.nsp = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (',' === c) break;
	      p.nsp += c;
	      if (i === str.length) break;
	    }
	  } else {
	    p.nsp = '/';
	  }

	  // look up id
	  var next = str.charAt(i + 1);
	  if ('' !== next && Number(next) == next) {
	    p.id = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (null == c || Number(c) != c) {
	        --i;
	        break;
	      }
	      p.id += str.charAt(i);
	      if (i === str.length) break;
	    }
	    p.id = Number(p.id);
	  }

	  // look up json data
	  if (str.charAt(++i)) {
	    var payload = tryParse(str.substr(i));
	    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
	    if (isPayloadValid) {
	      p.data = payload;
	    } else {
	      return error('invalid payload');
	    }
	  }

	  debug('decoded %s as %j', str, p);
	  return p;
	}

	function tryParse(str) {
	  try {
	    return JSON.parse(str);
	  } catch(e){
	    return false;
	  }
	}

	/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */

	Decoder.prototype.destroy = function() {
	  if (this.reconstructor) {
	    this.reconstructor.finishedReconstruction();
	  }
	};

	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */

	function BinaryReconstructor(packet) {
	  this.reconPack = packet;
	  this.buffers = [];
	}

	/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */

	BinaryReconstructor.prototype.takeBinaryData = function(binData) {
	  this.buffers.push(binData);
	  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
	    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
	    this.finishedReconstruction();
	    return packet;
	  }
	  return null;
	};

	/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */

	BinaryReconstructor.prototype.finishedReconstruction = function() {
	  this.reconPack = null;
	  this.buffers = [];
	};

	function error(msg) {
	  return {
	    type: exports.ERROR,
	    data: 'parser error: ' + msg
	  };
	}


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(112);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
	  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
	  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
	  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
	  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
	  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
	  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
	  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
	  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
	  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
	  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // NB: In an Electron preload script, document will be defined but not fully
	  // initialized. Since we know we're in Chrome, we'll just detect this case
	  // explicitly
	  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
	    return true;
	  }

	  // Internet Explorer and Edge do not support colors.
	  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
	    return false;
	  }

	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
	    // double check webkit in userAgent just in case we are in a worker
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return;

	  var c = 'color: ' + this.color;
	  args.splice(1, 0, c, 'color: inherit')

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-zA-Z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}

	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (!r && typeof process !== 'undefined' && 'env' in process) {
	    r = process.env.DEBUG;
	  }

	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(113);

	/**
	 * Active `debug` instances.
	 */
	exports.instances = [];

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	 */

	exports.formatters = {};

	/**
	 * Select a color.
	 * @param {String} namespace
	 * @return {Number}
	 * @api private
	 */

	function selectColor(namespace) {
	  var hash = 0, i;

	  for (i in namespace) {
	    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
	    hash |= 0; // Convert to 32bit integer
	  }

	  return exports.colors[Math.abs(hash) % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function createDebug(namespace) {

	  var prevTime;

	  function debug() {
	    // disabled?
	    if (!debug.enabled) return;

	    var self = debug;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // turn the `arguments` into a proper Array
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %O
	      args.unshift('%O');
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    // apply env-specific formatting (colors, etc.)
	    exports.formatArgs.call(self, args);

	    var logFn = debug.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }

	  debug.namespace = namespace;
	  debug.enabled = exports.enabled(namespace);
	  debug.useColors = exports.useColors();
	  debug.color = selectColor(namespace);
	  debug.destroy = destroy;

	  // env-specific initialization logic for debug instances
	  if ('function' === typeof exports.init) {
	    exports.init(debug);
	  }

	  exports.instances.push(debug);

	  return debug;
	}

	function destroy () {
	  var index = exports.instances.indexOf(this);
	  if (index !== -1) {
	    exports.instances.splice(index, 1);
	    return true;
	  } else {
	    return false;
	  }
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  exports.names = [];
	  exports.skips = [];

	  var i;
	  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
	  var len = split.length;

	  for (i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }

	  for (i = 0; i < exports.instances.length; i++) {
	    var instance = exports.instances[i];
	    instance.enabled = exports.enabled(instance.namespace);
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  if (name[name.length - 1] === '*') {
	    return true;
	  }
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ }),
/* 113 */
/***/ (function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */

	if (true) {
	  module.exports = Emitter;
	}

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/*global Blob,File*/

	/**
	 * Module requirements
	 */

	var isArray = __webpack_require__(116);
	var isBuf = __webpack_require__(117);
	var toString = Object.prototype.toString;
	var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');
	var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');

	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */

	exports.deconstructPacket = function(packet) {
	  var buffers = [];
	  var packetData = packet.data;
	  var pack = packet;
	  pack.data = _deconstructPacket(packetData, buffers);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return {packet: pack, buffers: buffers};
	};

	function _deconstructPacket(data, buffers) {
	  if (!data) return data;

	  if (isBuf(data)) {
	    var placeholder = { _placeholder: true, num: buffers.length };
	    buffers.push(data);
	    return placeholder;
	  } else if (isArray(data)) {
	    var newData = new Array(data.length);
	    for (var i = 0; i < data.length; i++) {
	      newData[i] = _deconstructPacket(data[i], buffers);
	    }
	    return newData;
	  } else if (typeof data === 'object' && !(data instanceof Date)) {
	    var newData = {};
	    for (var key in data) {
	      newData[key] = _deconstructPacket(data[key], buffers);
	    }
	    return newData;
	  }
	  return data;
	}

	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */

	exports.reconstructPacket = function(packet, buffers) {
	  packet.data = _reconstructPacket(packet.data, buffers);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};

	function _reconstructPacket(data, buffers) {
	  if (!data) return data;

	  if (data && data._placeholder) {
	    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
	  } else if (isArray(data)) {
	    for (var i = 0; i < data.length; i++) {
	      data[i] = _reconstructPacket(data[i], buffers);
	    }
	  } else if (typeof data === 'object') {
	    for (var key in data) {
	      data[key] = _reconstructPacket(data[key], buffers);
	    }
	  }

	  return data;
	}

	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */

	exports.removeBlobs = function(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;

	    // convert any blob
	    if ((withNativeBlob && obj instanceof Blob) ||
	        (withNativeFile && obj instanceof File)) {
	      pendingBlobs++;

	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function() { // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        }
	        else {
	          bloblessData = this.result;
	        }

	        // if nothing pending its callback time
	        if(! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };

	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) { // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }

	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};


/***/ }),
/* 116 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = isBuf;

	var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
	var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

	var isView = function (obj) {
	  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
	};

	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */

	function isBuf(obj) {
	  return (withNativeBuffer && Buffer.isBuffer(obj)) ||
	          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(118).Buffer))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(119)
	var ieee754 = __webpack_require__(120)
	var isArray = __webpack_require__(121)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 119 */
/***/ (function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function getLens (b64) {
	  var len = b64.length

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=')
	  if (validLen === -1) validLen = len

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4)

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

	  var curByte = 0

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen

	  for (var i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)]
	    arr[curByte++] = (tmp >> 16) & 0xFF
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF)
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(
	      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
	    ))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    )
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    )
	  }

	  return parts.join('')
	}


/***/ }),
/* 120 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 121 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var eio = __webpack_require__(123);
	var Socket = __webpack_require__(150);
	var Emitter = __webpack_require__(114);
	var parser = __webpack_require__(110);
	var on = __webpack_require__(152);
	var bind = __webpack_require__(153);
	var debug = __webpack_require__(107)('socket.io-client:manager');
	var indexOf = __webpack_require__(149);
	var Backoff = __webpack_require__(154);

	/**
	 * IE6+ hasOwnProperty
	 */

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Module exports
	 */

	module.exports = Manager;

	/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */

	function Manager (uri, opts) {
	  if (!(this instanceof Manager)) return new Manager(uri, opts);
	  if (uri && ('object' === typeof uri)) {
	    opts = uri;
	    uri = undefined;
	  }
	  opts = opts || {};

	  opts.path = opts.path || '/socket.io';
	  this.nsps = {};
	  this.subs = [];
	  this.opts = opts;
	  this.reconnection(opts.reconnection !== false);
	  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	  this.reconnectionDelay(opts.reconnectionDelay || 1000);
	  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	  this.randomizationFactor(opts.randomizationFactor || 0.5);
	  this.backoff = new Backoff({
	    min: this.reconnectionDelay(),
	    max: this.reconnectionDelayMax(),
	    jitter: this.randomizationFactor()
	  });
	  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	  this.readyState = 'closed';
	  this.uri = uri;
	  this.connecting = [];
	  this.lastPing = null;
	  this.encoding = false;
	  this.packetBuffer = [];
	  var _parser = opts.parser || parser;
	  this.encoder = new _parser.Encoder();
	  this.decoder = new _parser.Decoder();
	  this.autoConnect = opts.autoConnect !== false;
	  if (this.autoConnect) this.open();
	}

	/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */

	Manager.prototype.emitAll = function () {
	  this.emit.apply(this, arguments);
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
	    }
	  }
	};

	/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */

	Manager.prototype.updateSocketIds = function () {
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].id = this.generateId(nsp);
	    }
	  }
	};

	/**
	 * generate `socket.id` for the given `nsp`
	 *
	 * @param {String} nsp
	 * @return {String}
	 * @api private
	 */

	Manager.prototype.generateId = function (nsp) {
	  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
	};

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Manager.prototype);

	/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnection = function (v) {
	  if (!arguments.length) return this._reconnection;
	  this._reconnection = !!v;
	  return this;
	};

	/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionAttempts = function (v) {
	  if (!arguments.length) return this._reconnectionAttempts;
	  this._reconnectionAttempts = v;
	  return this;
	};

	/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelay = function (v) {
	  if (!arguments.length) return this._reconnectionDelay;
	  this._reconnectionDelay = v;
	  this.backoff && this.backoff.setMin(v);
	  return this;
	};

	Manager.prototype.randomizationFactor = function (v) {
	  if (!arguments.length) return this._randomizationFactor;
	  this._randomizationFactor = v;
	  this.backoff && this.backoff.setJitter(v);
	  return this;
	};

	/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelayMax = function (v) {
	  if (!arguments.length) return this._reconnectionDelayMax;
	  this._reconnectionDelayMax = v;
	  this.backoff && this.backoff.setMax(v);
	  return this;
	};

	/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.timeout = function (v) {
	  if (!arguments.length) return this._timeout;
	  this._timeout = v;
	  return this;
	};

	/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */

	Manager.prototype.maybeReconnectOnOpen = function () {
	  // Only try to reconnect if it's the first time we're connecting
	  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
	    // keeps reconnection from firing twice for the same reconnection loop
	    this.reconnect();
	  }
	};

	/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */

	Manager.prototype.open =
	Manager.prototype.connect = function (fn, opts) {
	  debug('readyState %s', this.readyState);
	  if (~this.readyState.indexOf('open')) return this;

	  debug('opening %s', this.uri);
	  this.engine = eio(this.uri, this.opts);
	  var socket = this.engine;
	  var self = this;
	  this.readyState = 'opening';
	  this.skipReconnect = false;

	  // emit `open`
	  var openSub = on(socket, 'open', function () {
	    self.onopen();
	    fn && fn();
	  });

	  // emit `connect_error`
	  var errorSub = on(socket, 'error', function (data) {
	    debug('connect_error');
	    self.cleanup();
	    self.readyState = 'closed';
	    self.emitAll('connect_error', data);
	    if (fn) {
	      var err = new Error('Connection error');
	      err.data = data;
	      fn(err);
	    } else {
	      // Only do this if there is no fn to handle the error
	      self.maybeReconnectOnOpen();
	    }
	  });

	  // emit `connect_timeout`
	  if (false !== this._timeout) {
	    var timeout = this._timeout;
	    debug('connect attempt will timeout after %d', timeout);

	    // set timer
	    var timer = setTimeout(function () {
	      debug('connect attempt timed out after %d', timeout);
	      openSub.destroy();
	      socket.close();
	      socket.emit('error', 'timeout');
	      self.emitAll('connect_timeout', timeout);
	    }, timeout);

	    this.subs.push({
	      destroy: function () {
	        clearTimeout(timer);
	      }
	    });
	  }

	  this.subs.push(openSub);
	  this.subs.push(errorSub);

	  return this;
	};

	/**
	 * Called upon transport open.
	 *
	 * @api private
	 */

	Manager.prototype.onopen = function () {
	  debug('open');

	  // clear old subs
	  this.cleanup();

	  // mark as open
	  this.readyState = 'open';
	  this.emit('open');

	  // add new subs
	  var socket = this.engine;
	  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
	  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
	  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
	  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
	  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
	  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
	};

	/**
	 * Called upon a ping.
	 *
	 * @api private
	 */

	Manager.prototype.onping = function () {
	  this.lastPing = new Date();
	  this.emitAll('ping');
	};

	/**
	 * Called upon a packet.
	 *
	 * @api private
	 */

	Manager.prototype.onpong = function () {
	  this.emitAll('pong', new Date() - this.lastPing);
	};

	/**
	 * Called with data.
	 *
	 * @api private
	 */

	Manager.prototype.ondata = function (data) {
	  this.decoder.add(data);
	};

	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */

	Manager.prototype.ondecoded = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon socket error.
	 *
	 * @api private
	 */

	Manager.prototype.onerror = function (err) {
	  debug('error', err);
	  this.emitAll('error', err);
	};

	/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */

	Manager.prototype.socket = function (nsp, opts) {
	  var socket = this.nsps[nsp];
	  if (!socket) {
	    socket = new Socket(this, nsp, opts);
	    this.nsps[nsp] = socket;
	    var self = this;
	    socket.on('connecting', onConnecting);
	    socket.on('connect', function () {
	      socket.id = self.generateId(nsp);
	    });

	    if (this.autoConnect) {
	      // manually call here since connecting event is fired before listening
	      onConnecting();
	    }
	  }

	  function onConnecting () {
	    if (!~indexOf(self.connecting, socket)) {
	      self.connecting.push(socket);
	    }
	  }

	  return socket;
	};

	/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */

	Manager.prototype.destroy = function (socket) {
	  var index = indexOf(this.connecting, socket);
	  if (~index) this.connecting.splice(index, 1);
	  if (this.connecting.length) return;

	  this.close();
	};

	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Manager.prototype.packet = function (packet) {
	  debug('writing packet %j', packet);
	  var self = this;
	  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

	  if (!self.encoding) {
	    // encode, then write to engine with result
	    self.encoding = true;
	    this.encoder.encode(packet, function (encodedPackets) {
	      for (var i = 0; i < encodedPackets.length; i++) {
	        self.engine.write(encodedPackets[i], packet.options);
	      }
	      self.encoding = false;
	      self.processPacketQueue();
	    });
	  } else { // add packet to the queue
	    self.packetBuffer.push(packet);
	  }
	};

	/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */

	Manager.prototype.processPacketQueue = function () {
	  if (this.packetBuffer.length > 0 && !this.encoding) {
	    var pack = this.packetBuffer.shift();
	    this.packet(pack);
	  }
	};

	/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */

	Manager.prototype.cleanup = function () {
	  debug('cleanup');

	  var subsLength = this.subs.length;
	  for (var i = 0; i < subsLength; i++) {
	    var sub = this.subs.shift();
	    sub.destroy();
	  }

	  this.packetBuffer = [];
	  this.encoding = false;
	  this.lastPing = null;

	  this.decoder.destroy();
	};

	/**
	 * Close the current socket.
	 *
	 * @api private
	 */

	Manager.prototype.close =
	Manager.prototype.disconnect = function () {
	  debug('disconnect');
	  this.skipReconnect = true;
	  this.reconnecting = false;
	  if ('opening' === this.readyState) {
	    // `onclose` will not fire because
	    // an open event never happened
	    this.cleanup();
	  }
	  this.backoff.reset();
	  this.readyState = 'closed';
	  if (this.engine) this.engine.close();
	};

	/**
	 * Called upon engine close.
	 *
	 * @api private
	 */

	Manager.prototype.onclose = function (reason) {
	  debug('onclose');

	  this.cleanup();
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.emit('close', reason);

	  if (this._reconnection && !this.skipReconnect) {
	    this.reconnect();
	  }
	};

	/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */

	Manager.prototype.reconnect = function () {
	  if (this.reconnecting || this.skipReconnect) return this;

	  var self = this;

	  if (this.backoff.attempts >= this._reconnectionAttempts) {
	    debug('reconnect failed');
	    this.backoff.reset();
	    this.emitAll('reconnect_failed');
	    this.reconnecting = false;
	  } else {
	    var delay = this.backoff.duration();
	    debug('will wait %dms before reconnect attempt', delay);

	    this.reconnecting = true;
	    var timer = setTimeout(function () {
	      if (self.skipReconnect) return;

	      debug('attempting reconnect');
	      self.emitAll('reconnect_attempt', self.backoff.attempts);
	      self.emitAll('reconnecting', self.backoff.attempts);

	      // check again for the case socket closed in above events
	      if (self.skipReconnect) return;

	      self.open(function (err) {
	        if (err) {
	          debug('reconnect attempt error');
	          self.reconnecting = false;
	          self.reconnect();
	          self.emitAll('reconnect_error', err.data);
	        } else {
	          debug('reconnect success');
	          self.onreconnect();
	        }
	      });
	    }, delay);

	    this.subs.push({
	      destroy: function () {
	        clearTimeout(timer);
	      }
	    });
	  }
	};

	/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */

	Manager.prototype.onreconnect = function () {
	  var attempt = this.backoff.attempts;
	  this.reconnecting = false;
	  this.backoff.reset();
	  this.updateSocketIds();
	  this.emitAll('reconnect', attempt);
	};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports = __webpack_require__(124);

	/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */
	module.exports.parser = __webpack_require__(131);


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var transports = __webpack_require__(125);
	var Emitter = __webpack_require__(114);
	var debug = __webpack_require__(143)('engine.io-client:socket');
	var index = __webpack_require__(149);
	var parser = __webpack_require__(131);
	var parseuri = __webpack_require__(106);
	var parseqs = __webpack_require__(140);

	/**
	 * Module exports.
	 */

	module.exports = Socket;

	/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */

	function Socket (uri, opts) {
	  if (!(this instanceof Socket)) return new Socket(uri, opts);

	  opts = opts || {};

	  if (uri && 'object' === typeof uri) {
	    opts = uri;
	    uri = null;
	  }

	  if (uri) {
	    uri = parseuri(uri);
	    opts.hostname = uri.host;
	    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
	    opts.port = uri.port;
	    if (uri.query) opts.query = uri.query;
	  } else if (opts.host) {
	    opts.hostname = parseuri(opts.host).host;
	  }

	  this.secure = null != opts.secure ? opts.secure
	    : (typeof location !== 'undefined' && 'https:' === location.protocol);

	  if (opts.hostname && !opts.port) {
	    // if no port is specified manually, use the protocol default
	    opts.port = this.secure ? '443' : '80';
	  }

	  this.agent = opts.agent || false;
	  this.hostname = opts.hostname ||
	    (typeof location !== 'undefined' ? location.hostname : 'localhost');
	  this.port = opts.port || (typeof location !== 'undefined' && location.port
	      ? location.port
	      : (this.secure ? 443 : 80));
	  this.query = opts.query || {};
	  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
	  this.upgrade = false !== opts.upgrade;
	  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
	  this.forceJSONP = !!opts.forceJSONP;
	  this.jsonp = false !== opts.jsonp;
	  this.forceBase64 = !!opts.forceBase64;
	  this.enablesXDR = !!opts.enablesXDR;
	  this.timestampParam = opts.timestampParam || 't';
	  this.timestampRequests = opts.timestampRequests;
	  this.transports = opts.transports || ['polling', 'websocket'];
	  this.transportOptions = opts.transportOptions || {};
	  this.readyState = '';
	  this.writeBuffer = [];
	  this.prevBufferLen = 0;
	  this.policyPort = opts.policyPort || 843;
	  this.rememberUpgrade = opts.rememberUpgrade || false;
	  this.binaryType = null;
	  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
	  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

	  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
	  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
	    this.perMessageDeflate.threshold = 1024;
	  }

	  // SSL options for Node.js client
	  this.pfx = opts.pfx || null;
	  this.key = opts.key || null;
	  this.passphrase = opts.passphrase || null;
	  this.cert = opts.cert || null;
	  this.ca = opts.ca || null;
	  this.ciphers = opts.ciphers || null;
	  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
	  this.forceNode = !!opts.forceNode;

	  // detect ReactNative environment
	  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

	  // other options for Node.js or ReactNative client
	  if (typeof self === 'undefined' || this.isReactNative) {
	    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
	      this.extraHeaders = opts.extraHeaders;
	    }

	    if (opts.localAddress) {
	      this.localAddress = opts.localAddress;
	    }
	  }

	  // set on handshake
	  this.id = null;
	  this.upgrades = null;
	  this.pingInterval = null;
	  this.pingTimeout = null;

	  // set on heartbeat
	  this.pingIntervalTimer = null;
	  this.pingTimeoutTimer = null;

	  this.open();
	}

	Socket.priorWebsocketSuccess = false;

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	Socket.protocol = parser.protocol; // this is an int

	/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */

	Socket.Socket = Socket;
	Socket.Transport = __webpack_require__(130);
	Socket.transports = __webpack_require__(125);
	Socket.parser = __webpack_require__(131);

	/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */

	Socket.prototype.createTransport = function (name) {
	  debug('creating transport "%s"', name);
	  var query = clone(this.query);

	  // append engine.io protocol identifier
	  query.EIO = parser.protocol;

	  // transport name
	  query.transport = name;

	  // per-transport options
	  var options = this.transportOptions[name] || {};

	  // session id if we already have one
	  if (this.id) query.sid = this.id;

	  var transport = new transports[name]({
	    query: query,
	    socket: this,
	    agent: options.agent || this.agent,
	    hostname: options.hostname || this.hostname,
	    port: options.port || this.port,
	    secure: options.secure || this.secure,
	    path: options.path || this.path,
	    forceJSONP: options.forceJSONP || this.forceJSONP,
	    jsonp: options.jsonp || this.jsonp,
	    forceBase64: options.forceBase64 || this.forceBase64,
	    enablesXDR: options.enablesXDR || this.enablesXDR,
	    timestampRequests: options.timestampRequests || this.timestampRequests,
	    timestampParam: options.timestampParam || this.timestampParam,
	    policyPort: options.policyPort || this.policyPort,
	    pfx: options.pfx || this.pfx,
	    key: options.key || this.key,
	    passphrase: options.passphrase || this.passphrase,
	    cert: options.cert || this.cert,
	    ca: options.ca || this.ca,
	    ciphers: options.ciphers || this.ciphers,
	    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
	    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
	    extraHeaders: options.extraHeaders || this.extraHeaders,
	    forceNode: options.forceNode || this.forceNode,
	    localAddress: options.localAddress || this.localAddress,
	    requestTimeout: options.requestTimeout || this.requestTimeout,
	    protocols: options.protocols || void (0),
	    isReactNative: this.isReactNative
	  });

	  return transport;
	};

	function clone (obj) {
	  var o = {};
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = obj[i];
	    }
	  }
	  return o;
	}

	/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */
	Socket.prototype.open = function () {
	  var transport;
	  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
	    transport = 'websocket';
	  } else if (0 === this.transports.length) {
	    // Emit error on next tick so it can be listened to
	    var self = this;
	    setTimeout(function () {
	      self.emit('error', 'No transports available');
	    }, 0);
	    return;
	  } else {
	    transport = this.transports[0];
	  }
	  this.readyState = 'opening';

	  // Retry with the next transport if the transport is disabled (jsonp: false)
	  try {
	    transport = this.createTransport(transport);
	  } catch (e) {
	    this.transports.shift();
	    this.open();
	    return;
	  }

	  transport.open();
	  this.setTransport(transport);
	};

	/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */

	Socket.prototype.setTransport = function (transport) {
	  debug('setting transport %s', transport.name);
	  var self = this;

	  if (this.transport) {
	    debug('clearing existing transport %s', this.transport.name);
	    this.transport.removeAllListeners();
	  }

	  // set up transport
	  this.transport = transport;

	  // set up transport listeners
	  transport
	  .on('drain', function () {
	    self.onDrain();
	  })
	  .on('packet', function (packet) {
	    self.onPacket(packet);
	  })
	  .on('error', function (e) {
	    self.onError(e);
	  })
	  .on('close', function () {
	    self.onClose('transport close');
	  });
	};

	/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */

	Socket.prototype.probe = function (name) {
	  debug('probing transport "%s"', name);
	  var transport = this.createTransport(name, { probe: 1 });
	  var failed = false;
	  var self = this;

	  Socket.priorWebsocketSuccess = false;

	  function onTransportOpen () {
	    if (self.onlyBinaryUpgrades) {
	      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
	      failed = failed || upgradeLosesBinary;
	    }
	    if (failed) return;

	    debug('probe transport "%s" opened', name);
	    transport.send([{ type: 'ping', data: 'probe' }]);
	    transport.once('packet', function (msg) {
	      if (failed) return;
	      if ('pong' === msg.type && 'probe' === msg.data) {
	        debug('probe transport "%s" pong', name);
	        self.upgrading = true;
	        self.emit('upgrading', transport);
	        if (!transport) return;
	        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

	        debug('pausing current transport "%s"', self.transport.name);
	        self.transport.pause(function () {
	          if (failed) return;
	          if ('closed' === self.readyState) return;
	          debug('changing transport and sending upgrade packet');

	          cleanup();

	          self.setTransport(transport);
	          transport.send([{ type: 'upgrade' }]);
	          self.emit('upgrade', transport);
	          transport = null;
	          self.upgrading = false;
	          self.flush();
	        });
	      } else {
	        debug('probe transport "%s" failed', name);
	        var err = new Error('probe error');
	        err.transport = transport.name;
	        self.emit('upgradeError', err);
	      }
	    });
	  }

	  function freezeTransport () {
	    if (failed) return;

	    // Any callback called by transport should be ignored since now
	    failed = true;

	    cleanup();

	    transport.close();
	    transport = null;
	  }

	  // Handle any error that happens while probing
	  function onerror (err) {
	    var error = new Error('probe error: ' + err);
	    error.transport = transport.name;

	    freezeTransport();

	    debug('probe transport "%s" failed because of error: %s', name, err);

	    self.emit('upgradeError', error);
	  }

	  function onTransportClose () {
	    onerror('transport closed');
	  }

	  // When the socket is closed while we're probing
	  function onclose () {
	    onerror('socket closed');
	  }

	  // When the socket is upgraded while we're probing
	  function onupgrade (to) {
	    if (transport && to.name !== transport.name) {
	      debug('"%s" works - aborting "%s"', to.name, transport.name);
	      freezeTransport();
	    }
	  }

	  // Remove all listeners on the transport and on self
	  function cleanup () {
	    transport.removeListener('open', onTransportOpen);
	    transport.removeListener('error', onerror);
	    transport.removeListener('close', onTransportClose);
	    self.removeListener('close', onclose);
	    self.removeListener('upgrading', onupgrade);
	  }

	  transport.once('open', onTransportOpen);
	  transport.once('error', onerror);
	  transport.once('close', onTransportClose);

	  this.once('close', onclose);
	  this.once('upgrading', onupgrade);

	  transport.open();
	};

	/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */

	Socket.prototype.onOpen = function () {
	  debug('socket open');
	  this.readyState = 'open';
	  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
	  this.emit('open');
	  this.flush();

	  // we check for `readyState` in case an `open`
	  // listener already closed the socket
	  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
	    debug('starting upgrade probes');
	    for (var i = 0, l = this.upgrades.length; i < l; i++) {
	      this.probe(this.upgrades[i]);
	    }
	  }
	};

	/**
	 * Handles a packet.
	 *
	 * @api private
	 */

	Socket.prototype.onPacket = function (packet) {
	  if ('opening' === this.readyState || 'open' === this.readyState ||
	      'closing' === this.readyState) {
	    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

	    this.emit('packet', packet);

	    // Socket is live - any packet counts
	    this.emit('heartbeat');

	    switch (packet.type) {
	      case 'open':
	        this.onHandshake(JSON.parse(packet.data));
	        break;

	      case 'pong':
	        this.setPing();
	        this.emit('pong');
	        break;

	      case 'error':
	        var err = new Error('server error');
	        err.code = packet.data;
	        this.onError(err);
	        break;

	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug('packet received with socket readyState "%s"', this.readyState);
	  }
	};

	/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */

	Socket.prototype.onHandshake = function (data) {
	  this.emit('handshake', data);
	  this.id = data.sid;
	  this.transport.query.sid = data.sid;
	  this.upgrades = this.filterUpgrades(data.upgrades);
	  this.pingInterval = data.pingInterval;
	  this.pingTimeout = data.pingTimeout;
	  this.onOpen();
	  // In case open handler closes socket
	  if ('closed' === this.readyState) return;
	  this.setPing();

	  // Prolong liveness of socket on heartbeat
	  this.removeListener('heartbeat', this.onHeartbeat);
	  this.on('heartbeat', this.onHeartbeat);
	};

	/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */

	Socket.prototype.onHeartbeat = function (timeout) {
	  clearTimeout(this.pingTimeoutTimer);
	  var self = this;
	  self.pingTimeoutTimer = setTimeout(function () {
	    if ('closed' === self.readyState) return;
	    self.onClose('ping timeout');
	  }, timeout || (self.pingInterval + self.pingTimeout));
	};

	/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */

	Socket.prototype.setPing = function () {
	  var self = this;
	  clearTimeout(self.pingIntervalTimer);
	  self.pingIntervalTimer = setTimeout(function () {
	    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
	    self.ping();
	    self.onHeartbeat(self.pingTimeout);
	  }, self.pingInterval);
	};

	/**
	* Sends a ping packet.
	*
	* @api private
	*/

	Socket.prototype.ping = function () {
	  var self = this;
	  this.sendPacket('ping', function () {
	    self.emit('ping');
	  });
	};

	/**
	 * Called on `drain` event
	 *
	 * @api private
	 */

	Socket.prototype.onDrain = function () {
	  this.writeBuffer.splice(0, this.prevBufferLen);

	  // setting prevBufferLen = 0 is very important
	  // for example, when upgrading, upgrade packet is sent over,
	  // and a nonzero prevBufferLen could cause problems on `drain`
	  this.prevBufferLen = 0;

	  if (0 === this.writeBuffer.length) {
	    this.emit('drain');
	  } else {
	    this.flush();
	  }
	};

	/**
	 * Flush write buffers.
	 *
	 * @api private
	 */

	Socket.prototype.flush = function () {
	  if ('closed' !== this.readyState && this.transport.writable &&
	    !this.upgrading && this.writeBuffer.length) {
	    debug('flushing %d packets in socket', this.writeBuffer.length);
	    this.transport.send(this.writeBuffer);
	    // keep track of current length of writeBuffer
	    // splice writeBuffer and callbackBuffer on `drain`
	    this.prevBufferLen = this.writeBuffer.length;
	    this.emit('flush');
	  }
	};

	/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @param {Object} options.
	 * @return {Socket} for chaining.
	 * @api public
	 */

	Socket.prototype.write =
	Socket.prototype.send = function (msg, options, fn) {
	  this.sendPacket('message', msg, options, fn);
	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Object} options.
	 * @param {Function} callback function.
	 * @api private
	 */

	Socket.prototype.sendPacket = function (type, data, options, fn) {
	  if ('function' === typeof data) {
	    fn = data;
	    data = undefined;
	  }

	  if ('function' === typeof options) {
	    fn = options;
	    options = null;
	  }

	  if ('closing' === this.readyState || 'closed' === this.readyState) {
	    return;
	  }

	  options = options || {};
	  options.compress = false !== options.compress;

	  var packet = {
	    type: type,
	    data: data,
	    options: options
	  };
	  this.emit('packetCreate', packet);
	  this.writeBuffer.push(packet);
	  if (fn) this.once('flush', fn);
	  this.flush();
	};

	/**
	 * Closes the connection.
	 *
	 * @api private
	 */

	Socket.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.readyState = 'closing';

	    var self = this;

	    if (this.writeBuffer.length) {
	      this.once('drain', function () {
	        if (this.upgrading) {
	          waitForUpgrade();
	        } else {
	          close();
	        }
	      });
	    } else if (this.upgrading) {
	      waitForUpgrade();
	    } else {
	      close();
	    }
	  }

	  function close () {
	    self.onClose('forced close');
	    debug('socket closing - telling transport to close');
	    self.transport.close();
	  }

	  function cleanupAndClose () {
	    self.removeListener('upgrade', cleanupAndClose);
	    self.removeListener('upgradeError', cleanupAndClose);
	    close();
	  }

	  function waitForUpgrade () {
	    // wait for upgrade to finish since we can't send packets while pausing a transport
	    self.once('upgrade', cleanupAndClose);
	    self.once('upgradeError', cleanupAndClose);
	  }

	  return this;
	};

	/**
	 * Called upon transport error
	 *
	 * @api private
	 */

	Socket.prototype.onError = function (err) {
	  debug('socket error %j', err);
	  Socket.priorWebsocketSuccess = false;
	  this.emit('error', err);
	  this.onClose('transport error', err);
	};

	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */

	Socket.prototype.onClose = function (reason, desc) {
	  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
	    debug('socket close with reason: "%s"', reason);
	    var self = this;

	    // clear timers
	    clearTimeout(this.pingIntervalTimer);
	    clearTimeout(this.pingTimeoutTimer);

	    // stop event from firing again for transport
	    this.transport.removeAllListeners('close');

	    // ensure transport won't stay open
	    this.transport.close();

	    // ignore further transport communication
	    this.transport.removeAllListeners();

	    // set ready state
	    this.readyState = 'closed';

	    // clear session id
	    this.id = null;

	    // emit close event
	    this.emit('close', reason, desc);

	    // clean buffers after, so users can still
	    // grab the buffers on `close` event
	    self.writeBuffer = [];
	    self.prevBufferLen = 0;
	  }
	};

	/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */

	Socket.prototype.filterUpgrades = function (upgrades) {
	  var filteredUpgrades = [];
	  for (var i = 0, j = upgrades.length; i < j; i++) {
	    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
	  }
	  return filteredUpgrades;
	};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies
	 */

	var XMLHttpRequest = __webpack_require__(126);
	var XHR = __webpack_require__(128);
	var JSONP = __webpack_require__(146);
	var websocket = __webpack_require__(147);

	/**
	 * Export transports.
	 */

	exports.polling = polling;
	exports.websocket = websocket;

	/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */

	function polling (opts) {
	  var xhr;
	  var xd = false;
	  var xs = false;
	  var jsonp = false !== opts.jsonp;

	  if (typeof location !== 'undefined') {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    xd = opts.hostname !== location.hostname || port !== opts.port;
	    xs = opts.secure !== isSSL;
	  }

	  opts.xdomain = xd;
	  opts.xscheme = xs;
	  xhr = new XMLHttpRequest(opts);

	  if ('open' in xhr && !opts.forceJSONP) {
	    return new XHR(opts);
	  } else {
	    if (!jsonp) throw new Error('JSONP disabled');
	    return new JSONP(opts);
	  }
	}


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	// browser shim for xmlhttprequest module

	var hasCORS = __webpack_require__(127);

	module.exports = function (opts) {
	  var xdomain = opts.xdomain;

	  // scheme must be same when usign XDomainRequest
	  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
	  var xscheme = opts.xscheme;

	  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
	  // https://github.com/Automattic/engine.io-client/pull/217
	  var enablesXDR = opts.enablesXDR;

	  // XMLHttpRequest can be disabled on IE
	  try {
	    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
	      return new XMLHttpRequest();
	    }
	  } catch (e) { }

	  // Use XDomainRequest for IE8 if enablesXDR is true
	  // because loading bar keeps flashing when using jsonp-polling
	  // https://github.com/yujiosaka/socke.io-ie8-loading-example
	  try {
	    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
	      return new XDomainRequest();
	    }
	  } catch (e) { }

	  if (!xdomain) {
	    try {
	      return new self[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
	    } catch (e) { }
	  }
	};


/***/ }),
/* 127 */
/***/ (function(module, exports) {

	
	/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */

	try {
	  module.exports = typeof XMLHttpRequest !== 'undefined' &&
	    'withCredentials' in new XMLHttpRequest();
	} catch (err) {
	  // if XMLHttp support is disabled in IE then it will throw
	  // when trying to create
	  module.exports = false;
	}


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/* global attachEvent */

	/**
	 * Module requirements.
	 */

	var XMLHttpRequest = __webpack_require__(126);
	var Polling = __webpack_require__(129);
	var Emitter = __webpack_require__(114);
	var inherit = __webpack_require__(141);
	var debug = __webpack_require__(143)('engine.io-client:polling-xhr');

	/**
	 * Module exports.
	 */

	module.exports = XHR;
	module.exports.Request = Request;

	/**
	 * Empty function
	 */

	function empty () {}

	/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function XHR (opts) {
	  Polling.call(this, opts);
	  this.requestTimeout = opts.requestTimeout;
	  this.extraHeaders = opts.extraHeaders;

	  if (typeof location !== 'undefined') {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
	      port !== opts.port;
	    this.xs = opts.secure !== isSSL;
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(XHR, Polling);

	/**
	 * XHR supports binary
	 */

	XHR.prototype.supportsBinary = true;

	/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */

	XHR.prototype.request = function (opts) {
	  opts = opts || {};
	  opts.uri = this.uri();
	  opts.xd = this.xd;
	  opts.xs = this.xs;
	  opts.agent = this.agent || false;
	  opts.supportsBinary = this.supportsBinary;
	  opts.enablesXDR = this.enablesXDR;

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  opts.requestTimeout = this.requestTimeout;

	  // other options for Node.js client
	  opts.extraHeaders = this.extraHeaders;

	  return new Request(opts);
	};

	/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */

	XHR.prototype.doWrite = function (data, fn) {
	  var isBinary = typeof data !== 'string' && data !== undefined;
	  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
	  var self = this;
	  req.on('success', fn);
	  req.on('error', function (err) {
	    self.onError('xhr post error', err);
	  });
	  this.sendXhr = req;
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	XHR.prototype.doPoll = function () {
	  debug('xhr poll');
	  var req = this.request();
	  var self = this;
	  req.on('data', function (data) {
	    self.onData(data);
	  });
	  req.on('error', function (err) {
	    self.onError('xhr poll error', err);
	  });
	  this.pollXhr = req;
	};

	/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Request (opts) {
	  this.method = opts.method || 'GET';
	  this.uri = opts.uri;
	  this.xd = !!opts.xd;
	  this.xs = !!opts.xs;
	  this.async = false !== opts.async;
	  this.data = undefined !== opts.data ? opts.data : null;
	  this.agent = opts.agent;
	  this.isBinary = opts.isBinary;
	  this.supportsBinary = opts.supportsBinary;
	  this.enablesXDR = opts.enablesXDR;
	  this.requestTimeout = opts.requestTimeout;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;

	  this.create();
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Request.prototype);

	/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */

	Request.prototype.create = function () {
	  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  var xhr = this.xhr = new XMLHttpRequest(opts);
	  var self = this;

	  try {
	    debug('xhr open %s: %s', this.method, this.uri);
	    xhr.open(this.method, this.uri, this.async);
	    try {
	      if (this.extraHeaders) {
	        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
	        for (var i in this.extraHeaders) {
	          if (this.extraHeaders.hasOwnProperty(i)) {
	            xhr.setRequestHeader(i, this.extraHeaders[i]);
	          }
	        }
	      }
	    } catch (e) {}

	    if ('POST' === this.method) {
	      try {
	        if (this.isBinary) {
	          xhr.setRequestHeader('Content-type', 'application/octet-stream');
	        } else {
	          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        }
	      } catch (e) {}
	    }

	    try {
	      xhr.setRequestHeader('Accept', '*/*');
	    } catch (e) {}

	    // ie6 check
	    if ('withCredentials' in xhr) {
	      xhr.withCredentials = true;
	    }

	    if (this.requestTimeout) {
	      xhr.timeout = this.requestTimeout;
	    }

	    if (this.hasXDR()) {
	      xhr.onload = function () {
	        self.onLoad();
	      };
	      xhr.onerror = function () {
	        self.onError(xhr.responseText);
	      };
	    } else {
	      xhr.onreadystatechange = function () {
	        if (xhr.readyState === 2) {
	          try {
	            var contentType = xhr.getResponseHeader('Content-Type');
	            if (self.supportsBinary && contentType === 'application/octet-stream') {
	              xhr.responseType = 'arraybuffer';
	            }
	          } catch (e) {}
	        }
	        if (4 !== xhr.readyState) return;
	        if (200 === xhr.status || 1223 === xhr.status) {
	          self.onLoad();
	        } else {
	          // make sure the `error` event handler that's user-set
	          // does not throw in the same tick and gets caught here
	          setTimeout(function () {
	            self.onError(xhr.status);
	          }, 0);
	        }
	      };
	    }

	    debug('xhr data %s', this.data);
	    xhr.send(this.data);
	  } catch (e) {
	    // Need to defer since .create() is called directly fhrom the constructor
	    // and thus the 'error' event can only be only bound *after* this exception
	    // occurs.  Therefore, also, we cannot throw here at all.
	    setTimeout(function () {
	      self.onError(e);
	    }, 0);
	    return;
	  }

	  if (typeof document !== 'undefined') {
	    this.index = Request.requestsCount++;
	    Request.requests[this.index] = this;
	  }
	};

	/**
	 * Called upon successful response.
	 *
	 * @api private
	 */

	Request.prototype.onSuccess = function () {
	  this.emit('success');
	  this.cleanup();
	};

	/**
	 * Called if we have data.
	 *
	 * @api private
	 */

	Request.prototype.onData = function (data) {
	  this.emit('data', data);
	  this.onSuccess();
	};

	/**
	 * Called upon error.
	 *
	 * @api private
	 */

	Request.prototype.onError = function (err) {
	  this.emit('error', err);
	  this.cleanup(true);
	};

	/**
	 * Cleans up house.
	 *
	 * @api private
	 */

	Request.prototype.cleanup = function (fromError) {
	  if ('undefined' === typeof this.xhr || null === this.xhr) {
	    return;
	  }
	  // xmlhttprequest
	  if (this.hasXDR()) {
	    this.xhr.onload = this.xhr.onerror = empty;
	  } else {
	    this.xhr.onreadystatechange = empty;
	  }

	  if (fromError) {
	    try {
	      this.xhr.abort();
	    } catch (e) {}
	  }

	  if (typeof document !== 'undefined') {
	    delete Request.requests[this.index];
	  }

	  this.xhr = null;
	};

	/**
	 * Called upon load.
	 *
	 * @api private
	 */

	Request.prototype.onLoad = function () {
	  var data;
	  try {
	    var contentType;
	    try {
	      contentType = this.xhr.getResponseHeader('Content-Type');
	    } catch (e) {}
	    if (contentType === 'application/octet-stream') {
	      data = this.xhr.response || this.xhr.responseText;
	    } else {
	      data = this.xhr.responseText;
	    }
	  } catch (e) {
	    this.onError(e);
	  }
	  if (null != data) {
	    this.onData(data);
	  }
	};

	/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */

	Request.prototype.hasXDR = function () {
	  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
	};

	/**
	 * Aborts the request.
	 *
	 * @api public
	 */

	Request.prototype.abort = function () {
	  this.cleanup();
	};

	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */

	Request.requestsCount = 0;
	Request.requests = {};

	if (typeof document !== 'undefined') {
	  if (typeof attachEvent === 'function') {
	    attachEvent('onunload', unloadHandler);
	  } else if (typeof addEventListener === 'function') {
	    var terminationEvent = 'onpagehide' in self ? 'pagehide' : 'unload';
	    addEventListener(terminationEvent, unloadHandler, false);
	  }
	}

	function unloadHandler () {
	  for (var i in Request.requests) {
	    if (Request.requests.hasOwnProperty(i)) {
	      Request.requests[i].abort();
	    }
	  }
	}


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var Transport = __webpack_require__(130);
	var parseqs = __webpack_require__(140);
	var parser = __webpack_require__(131);
	var inherit = __webpack_require__(141);
	var yeast = __webpack_require__(142);
	var debug = __webpack_require__(143)('engine.io-client:polling');

	/**
	 * Module exports.
	 */

	module.exports = Polling;

	/**
	 * Is XHR2 supported?
	 */

	var hasXHR2 = (function () {
	  var XMLHttpRequest = __webpack_require__(126);
	  var xhr = new XMLHttpRequest({ xdomain: false });
	  return null != xhr.responseType;
	})();

	/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */

	function Polling (opts) {
	  var forceBase64 = (opts && opts.forceBase64);
	  if (!hasXHR2 || forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(Polling, Transport);

	/**
	 * Transport name.
	 */

	Polling.prototype.name = 'polling';

	/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */

	Polling.prototype.doOpen = function () {
	  this.poll();
	};

	/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */

	Polling.prototype.pause = function (onPause) {
	  var self = this;

	  this.readyState = 'pausing';

	  function pause () {
	    debug('paused');
	    self.readyState = 'paused';
	    onPause();
	  }

	  if (this.polling || !this.writable) {
	    var total = 0;

	    if (this.polling) {
	      debug('we are currently polling - waiting to pause');
	      total++;
	      this.once('pollComplete', function () {
	        debug('pre-pause polling complete');
	        --total || pause();
	      });
	    }

	    if (!this.writable) {
	      debug('we are currently writing - waiting to pause');
	      total++;
	      this.once('drain', function () {
	        debug('pre-pause writing complete');
	        --total || pause();
	      });
	    }
	  } else {
	    pause();
	  }
	};

	/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */

	Polling.prototype.poll = function () {
	  debug('polling');
	  this.polling = true;
	  this.doPoll();
	  this.emit('poll');
	};

	/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */

	Polling.prototype.onData = function (data) {
	  var self = this;
	  debug('polling got data %s', data);
	  var callback = function (packet, index, total) {
	    // if its the first message we consider the transport open
	    if ('opening' === self.readyState) {
	      self.onOpen();
	    }

	    // if its a close packet, we close the ongoing requests
	    if ('close' === packet.type) {
	      self.onClose();
	      return false;
	    }

	    // otherwise bypass onData and handle the message
	    self.onPacket(packet);
	  };

	  // decode payload
	  parser.decodePayload(data, this.socket.binaryType, callback);

	  // if an event did not trigger closing
	  if ('closed' !== this.readyState) {
	    // if we got data we're not polling
	    this.polling = false;
	    this.emit('pollComplete');

	    if ('open' === this.readyState) {
	      this.poll();
	    } else {
	      debug('ignoring poll - transport state "%s"', this.readyState);
	    }
	  }
	};

	/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */

	Polling.prototype.doClose = function () {
	  var self = this;

	  function close () {
	    debug('writing close packet');
	    self.write([{ type: 'close' }]);
	  }

	  if ('open' === this.readyState) {
	    debug('transport open - closing');
	    close();
	  } else {
	    // in case we're trying to close while
	    // handshaking is in progress (GH-164)
	    debug('transport not open - deferring close');
	    this.once('open', close);
	  }
	};

	/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */

	Polling.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;
	  var callbackfn = function () {
	    self.writable = true;
	    self.emit('drain');
	  };

	  parser.encodePayload(packets, this.supportsBinary, function (data) {
	    self.doWrite(data, callbackfn);
	  });
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	Polling.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'https' : 'http';
	  var port = '';

	  // cache busting is forced
	  if (false !== this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }

	  if (!this.supportsBinary && !query.sid) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // avoid port if default for schema
	  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
	     ('http' === schema && Number(this.port) !== 80))) {
	    port = ':' + this.port;
	  }

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var parser = __webpack_require__(131);
	var Emitter = __webpack_require__(114);

	/**
	 * Module exports.
	 */

	module.exports = Transport;

	/**
	 * Transport abstract constructor.
	 *
	 * @param {Object} options.
	 * @api private
	 */

	function Transport (opts) {
	  this.path = opts.path;
	  this.hostname = opts.hostname;
	  this.port = opts.port;
	  this.secure = opts.secure;
	  this.query = opts.query;
	  this.timestampParam = opts.timestampParam;
	  this.timestampRequests = opts.timestampRequests;
	  this.readyState = '';
	  this.agent = opts.agent || false;
	  this.socket = opts.socket;
	  this.enablesXDR = opts.enablesXDR;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;
	  this.forceNode = opts.forceNode;

	  // results of ReactNative environment detection
	  this.isReactNative = opts.isReactNative;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;
	  this.localAddress = opts.localAddress;
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Transport.prototype);

	/**
	 * Emits an error.
	 *
	 * @param {String} str
	 * @return {Transport} for chaining
	 * @api public
	 */

	Transport.prototype.onError = function (msg, desc) {
	  var err = new Error(msg);
	  err.type = 'TransportError';
	  err.description = desc;
	  this.emit('error', err);
	  return this;
	};

	/**
	 * Opens the transport.
	 *
	 * @api public
	 */

	Transport.prototype.open = function () {
	  if ('closed' === this.readyState || '' === this.readyState) {
	    this.readyState = 'opening';
	    this.doOpen();
	  }

	  return this;
	};

	/**
	 * Closes the transport.
	 *
	 * @api private
	 */

	Transport.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.doClose();
	    this.onClose();
	  }

	  return this;
	};

	/**
	 * Sends multiple packets.
	 *
	 * @param {Array} packets
	 * @api private
	 */

	Transport.prototype.send = function (packets) {
	  if ('open' === this.readyState) {
	    this.write(packets);
	  } else {
	    throw new Error('Transport not open');
	  }
	};

	/**
	 * Called upon open
	 *
	 * @api private
	 */

	Transport.prototype.onOpen = function () {
	  this.readyState = 'open';
	  this.writable = true;
	  this.emit('open');
	};

	/**
	 * Called with data.
	 *
	 * @param {String} data
	 * @api private
	 */

	Transport.prototype.onData = function (data) {
	  var packet = parser.decodePacket(data, this.socket.binaryType);
	  this.onPacket(packet);
	};

	/**
	 * Called with a decoded packet.
	 */

	Transport.prototype.onPacket = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon close.
	 *
	 * @api private
	 */

	Transport.prototype.onClose = function () {
	  this.readyState = 'closed';
	  this.emit('close');
	};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var keys = __webpack_require__(132);
	var hasBinary = __webpack_require__(133);
	var sliceBuffer = __webpack_require__(135);
	var after = __webpack_require__(136);
	var utf8 = __webpack_require__(137);

	var base64encoder;
	if (typeof ArrayBuffer !== 'undefined') {
	  base64encoder = __webpack_require__(138);
	}

	/**
	 * Check if we are running an android browser. That requires us to use
	 * ArrayBuffer with polling transports...
	 *
	 * http://ghinda.net/jpeg-blob-ajax-android/
	 */

	var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

	/**
	 * Check if we are running in PhantomJS.
	 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	 * https://github.com/ariya/phantomjs/issues/11395
	 * @type boolean
	 */
	var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

	/**
	 * When true, avoids using Blobs to encode payloads.
	 * @type boolean
	 */
	var dontSendBlobs = isAndroid || isPhantomJS;

	/**
	 * Current protocol version.
	 */

	exports.protocol = 3;

	/**
	 * Packet types.
	 */

	var packets = exports.packets = {
	    open:     0    // non-ws
	  , close:    1    // non-ws
	  , ping:     2
	  , pong:     3
	  , message:  4
	  , upgrade:  5
	  , noop:     6
	};

	var packetslist = keys(packets);

	/**
	 * Premade error packet.
	 */

	var err = { type: 'error', data: 'parser error' };

	/**
	 * Create a blob api even for blob builder when vendor prefixes exist
	 */

	var Blob = __webpack_require__(139);

	/**
	 * Encodes a packet.
	 *
	 *     <packet type id> [ <data> ]
	 *
	 * Example:
	 *
	 *     5hello world
	 *     3
	 *     4
	 *
	 * Binary is encoded in an identical principle
	 *
	 * @api private
	 */

	exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
	  if (typeof supportsBinary === 'function') {
	    callback = supportsBinary;
	    supportsBinary = false;
	  }

	  if (typeof utf8encode === 'function') {
	    callback = utf8encode;
	    utf8encode = null;
	  }

	  var data = (packet.data === undefined)
	    ? undefined
	    : packet.data.buffer || packet.data;

	  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
	    return encodeArrayBuffer(packet, supportsBinary, callback);
	  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
	    return encodeBlob(packet, supportsBinary, callback);
	  }

	  // might be an object with { base64: true, data: dataAsBase64String }
	  if (data && data.base64) {
	    return encodeBase64Object(packet, callback);
	  }

	  // Sending data as a utf-8 string
	  var encoded = packets[packet.type];

	  // data fragment is optional
	  if (undefined !== packet.data) {
	    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
	  }

	  return callback('' + encoded);

	};

	function encodeBase64Object(packet, callback) {
	  // packet data is an object { base64: true, data: dataAsBase64String }
	  var message = 'b' + exports.packets[packet.type] + packet.data.data;
	  return callback(message);
	}

	/**
	 * Encode packet helpers for binary types
	 */

	function encodeArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var data = packet.data;
	  var contentArray = new Uint8Array(data);
	  var resultBuffer = new Uint8Array(1 + data.byteLength);

	  resultBuffer[0] = packets[packet.type];
	  for (var i = 0; i < contentArray.length; i++) {
	    resultBuffer[i+1] = contentArray[i];
	  }

	  return callback(resultBuffer.buffer);
	}

	function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var fr = new FileReader();
	  fr.onload = function() {
	    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);
	  };
	  return fr.readAsArrayBuffer(packet.data);
	}

	function encodeBlob(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  if (dontSendBlobs) {
	    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
	  }

	  var length = new Uint8Array(1);
	  length[0] = packets[packet.type];
	  var blob = new Blob([length.buffer, packet.data]);

	  return callback(blob);
	}

	/**
	 * Encodes a packet with binary data in a base64 string
	 *
	 * @param {Object} packet, has `type` and `data`
	 * @return {String} base64 encoded message
	 */

	exports.encodeBase64Packet = function(packet, callback) {
	  var message = 'b' + exports.packets[packet.type];
	  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
	    var fr = new FileReader();
	    fr.onload = function() {
	      var b64 = fr.result.split(',')[1];
	      callback(message + b64);
	    };
	    return fr.readAsDataURL(packet.data);
	  }

	  var b64data;
	  try {
	    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
	  } catch (e) {
	    // iPhone Safari doesn't let you apply with typed arrays
	    var typed = new Uint8Array(packet.data);
	    var basic = new Array(typed.length);
	    for (var i = 0; i < typed.length; i++) {
	      basic[i] = typed[i];
	    }
	    b64data = String.fromCharCode.apply(null, basic);
	  }
	  message += btoa(b64data);
	  return callback(message);
	};

	/**
	 * Decodes a packet. Changes format to Blob if requested.
	 *
	 * @return {Object} with `type` and `data` (if any)
	 * @api private
	 */

	exports.decodePacket = function (data, binaryType, utf8decode) {
	  if (data === undefined) {
	    return err;
	  }
	  // String data
	  if (typeof data === 'string') {
	    if (data.charAt(0) === 'b') {
	      return exports.decodeBase64Packet(data.substr(1), binaryType);
	    }

	    if (utf8decode) {
	      data = tryDecode(data);
	      if (data === false) {
	        return err;
	      }
	    }
	    var type = data.charAt(0);

	    if (Number(type) != type || !packetslist[type]) {
	      return err;
	    }

	    if (data.length > 1) {
	      return { type: packetslist[type], data: data.substring(1) };
	    } else {
	      return { type: packetslist[type] };
	    }
	  }

	  var asArray = new Uint8Array(data);
	  var type = asArray[0];
	  var rest = sliceBuffer(data, 1);
	  if (Blob && binaryType === 'blob') {
	    rest = new Blob([rest]);
	  }
	  return { type: packetslist[type], data: rest };
	};

	function tryDecode(data) {
	  try {
	    data = utf8.decode(data, { strict: false });
	  } catch (e) {
	    return false;
	  }
	  return data;
	}

	/**
	 * Decodes a packet encoded in a base64 string
	 *
	 * @param {String} base64 encoded message
	 * @return {Object} with `type` and `data` (if any)
	 */

	exports.decodeBase64Packet = function(msg, binaryType) {
	  var type = packetslist[msg.charAt(0)];
	  if (!base64encoder) {
	    return { type: type, data: { base64: true, data: msg.substr(1) } };
	  }

	  var data = base64encoder.decode(msg.substr(1));

	  if (binaryType === 'blob' && Blob) {
	    data = new Blob([data]);
	  }

	  return { type: type, data: data };
	};

	/**
	 * Encodes multiple messages (payload).
	 *
	 *     <length>:data
	 *
	 * Example:
	 *
	 *     11:hello world2:hi
	 *
	 * If any contents are binary, they will be encoded as base64 strings. Base64
	 * encoded strings are marked with a b before the length specifier
	 *
	 * @param {Array} packets
	 * @api private
	 */

	exports.encodePayload = function (packets, supportsBinary, callback) {
	  if (typeof supportsBinary === 'function') {
	    callback = supportsBinary;
	    supportsBinary = null;
	  }

	  var isBinary = hasBinary(packets);

	  if (supportsBinary && isBinary) {
	    if (Blob && !dontSendBlobs) {
	      return exports.encodePayloadAsBlob(packets, callback);
	    }

	    return exports.encodePayloadAsArrayBuffer(packets, callback);
	  }

	  if (!packets.length) {
	    return callback('0:');
	  }

	  function setLengthHeader(message) {
	    return message.length + ':' + message;
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
	      doneCallback(null, setLengthHeader(message));
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(results.join(''));
	  });
	};

	/**
	 * Async array map using after
	 */

	function map(ary, each, done) {
	  var result = new Array(ary.length);
	  var next = after(ary.length, done);

	  var eachWithIndex = function(i, el, cb) {
	    each(el, function(error, msg) {
	      result[i] = msg;
	      cb(error, result);
	    });
	  };

	  for (var i = 0; i < ary.length; i++) {
	    eachWithIndex(i, ary[i], next);
	  }
	}

	/*
	 * Decodes data when a payload is maybe expected. Possible binary contents are
	 * decoded from their base64 representation
	 *
	 * @param {String} data, callback method
	 * @api public
	 */

	exports.decodePayload = function (data, binaryType, callback) {
	  if (typeof data !== 'string') {
	    return exports.decodePayloadAsBinary(data, binaryType, callback);
	  }

	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var packet;
	  if (data === '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	  var length = '', n, msg;

	  for (var i = 0, l = data.length; i < l; i++) {
	    var chr = data.charAt(i);

	    if (chr !== ':') {
	      length += chr;
	      continue;
	    }

	    if (length === '' || (length != (n = Number(length)))) {
	      // parser error - ignoring payload
	      return callback(err, 0, 1);
	    }

	    msg = data.substr(i + 1, n);

	    if (length != msg.length) {
	      // parser error - ignoring payload
	      return callback(err, 0, 1);
	    }

	    if (msg.length) {
	      packet = exports.decodePacket(msg, binaryType, false);

	      if (err.type === packet.type && err.data === packet.data) {
	        // parser error in individual packet - ignoring payload
	        return callback(err, 0, 1);
	      }

	      var ret = callback(packet, i + n, l);
	      if (false === ret) return;
	    }

	    // advance cursor
	    i += n;
	    length = '';
	  }

	  if (length !== '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	};

	/**
	 * Encodes multiple messages (payload) as binary.
	 *
	 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	 * 255><data>
	 *
	 * Example:
	 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	 *
	 * @param {Array} packets
	 * @return {ArrayBuffer} encoded payload
	 * @api private
	 */

	exports.encodePayloadAsArrayBuffer = function(packets, callback) {
	  if (!packets.length) {
	    return callback(new ArrayBuffer(0));
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(data) {
	      return doneCallback(null, data);
	    });
	  }

	  map(packets, encodeOne, function(err, encodedPackets) {
	    var totalLength = encodedPackets.reduce(function(acc, p) {
	      var len;
	      if (typeof p === 'string'){
	        len = p.length;
	      } else {
	        len = p.byteLength;
	      }
	      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
	    }, 0);

	    var resultArray = new Uint8Array(totalLength);

	    var bufferIndex = 0;
	    encodedPackets.forEach(function(p) {
	      var isString = typeof p === 'string';
	      var ab = p;
	      if (isString) {
	        var view = new Uint8Array(p.length);
	        for (var i = 0; i < p.length; i++) {
	          view[i] = p.charCodeAt(i);
	        }
	        ab = view.buffer;
	      }

	      if (isString) { // not true binary
	        resultArray[bufferIndex++] = 0;
	      } else { // true binary
	        resultArray[bufferIndex++] = 1;
	      }

	      var lenStr = ab.byteLength.toString();
	      for (var i = 0; i < lenStr.length; i++) {
	        resultArray[bufferIndex++] = parseInt(lenStr[i]);
	      }
	      resultArray[bufferIndex++] = 255;

	      var view = new Uint8Array(ab);
	      for (var i = 0; i < view.length; i++) {
	        resultArray[bufferIndex++] = view[i];
	      }
	    });

	    return callback(resultArray.buffer);
	  });
	};

	/**
	 * Encode as Blob
	 */

	exports.encodePayloadAsBlob = function(packets, callback) {
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(encoded) {
	      var binaryIdentifier = new Uint8Array(1);
	      binaryIdentifier[0] = 1;
	      if (typeof encoded === 'string') {
	        var view = new Uint8Array(encoded.length);
	        for (var i = 0; i < encoded.length; i++) {
	          view[i] = encoded.charCodeAt(i);
	        }
	        encoded = view.buffer;
	        binaryIdentifier[0] = 0;
	      }

	      var len = (encoded instanceof ArrayBuffer)
	        ? encoded.byteLength
	        : encoded.size;

	      var lenStr = len.toString();
	      var lengthAry = new Uint8Array(lenStr.length + 1);
	      for (var i = 0; i < lenStr.length; i++) {
	        lengthAry[i] = parseInt(lenStr[i]);
	      }
	      lengthAry[lenStr.length] = 255;

	      if (Blob) {
	        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
	        doneCallback(null, blob);
	      }
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(new Blob(results));
	  });
	};

	/*
	 * Decodes data when a payload is maybe expected. Strings are decoded by
	 * interpreting each byte as a key code for entries marked to start with 0. See
	 * description of encodePayloadAsBinary
	 *
	 * @param {ArrayBuffer} data, callback method
	 * @api public
	 */

	exports.decodePayloadAsBinary = function (data, binaryType, callback) {
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var bufferTail = data;
	  var buffers = [];

	  while (bufferTail.byteLength > 0) {
	    var tailArray = new Uint8Array(bufferTail);
	    var isString = tailArray[0] === 0;
	    var msgLength = '';

	    for (var i = 1; ; i++) {
	      if (tailArray[i] === 255) break;

	      // 310 = char length of Number.MAX_VALUE
	      if (msgLength.length > 310) {
	        return callback(err, 0, 1);
	      }

	      msgLength += tailArray[i];
	    }

	    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
	    msgLength = parseInt(msgLength);

	    var msg = sliceBuffer(bufferTail, 0, msgLength);
	    if (isString) {
	      try {
	        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
	      } catch (e) {
	        // iPhone Safari doesn't let you apply to typed arrays
	        var typed = new Uint8Array(msg);
	        msg = '';
	        for (var i = 0; i < typed.length; i++) {
	          msg += String.fromCharCode(typed[i]);
	        }
	      }
	    }

	    buffers.push(msg);
	    bufferTail = sliceBuffer(bufferTail, msgLength);
	  }

	  var total = buffers.length;
	  buffers.forEach(function(buffer, i) {
	    callback(exports.decodePacket(buffer, binaryType, true), i, total);
	  });
	};


/***/ }),
/* 132 */
/***/ (function(module, exports) {

	
	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */

	module.exports = Object.keys || function keys (obj){
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;

	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/* global Blob File */

	/*
	 * Module requirements.
	 */

	var isArray = __webpack_require__(134);

	var toString = Object.prototype.toString;
	var withNativeBlob = typeof Blob === 'function' ||
	                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
	var withNativeFile = typeof File === 'function' ||
	                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';

	/**
	 * Module exports.
	 */

	module.exports = hasBinary;

	/**
	 * Checks for binary data.
	 *
	 * Supports Buffer, ArrayBuffer, Blob and File.
	 *
	 * @param {Object} anything
	 * @api public
	 */

	function hasBinary (obj) {
	  if (!obj || typeof obj !== 'object') {
	    return false;
	  }

	  if (isArray(obj)) {
	    for (var i = 0, l = obj.length; i < l; i++) {
	      if (hasBinary(obj[i])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
	    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
	    (withNativeBlob && obj instanceof Blob) ||
	    (withNativeFile && obj instanceof File)
	  ) {
	    return true;
	  }

	  // see: https://github.com/Automattic/has-binary/pull/4
	  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
	    return hasBinary(obj.toJSON(), true);
	  }

	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
	      return true;
	    }
	  }

	  return false;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(118).Buffer))

/***/ }),
/* 134 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 135 */
/***/ (function(module, exports) {

	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */

	module.exports = function(arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;

	  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

	  if (start < 0) { start += bytes; }
	  if (end < 0) { end += bytes; }
	  if (end > bytes) { end = bytes; }

	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }

	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};


/***/ }),
/* 136 */
/***/ (function(module, exports) {

	module.exports = after

	function after(count, callback, err_cb) {
	    var bail = false
	    err_cb = err_cb || noop
	    proxy.count = count

	    return (count === 0) ? callback() : proxy

	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times')
	        }
	        --proxy.count

	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true
	            callback(err)
	            // future error callbacks will go to error handler
	            callback = err_cb
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result)
	        }
	    }
	}

	function noop() {}


/***/ }),
/* 137 */
/***/ (function(module, exports) {

	/*! https://mths.be/utf8js v2.1.2 by @mathias */

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint, strict) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			if (strict) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
			return false;
		}
		return true;
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint, strict) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			if (!checkScalarValue(codePoint, strict)) {
				codePoint = 0xFFFD;
			}
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function utf8encode(string, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint, strict);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol(strict) {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol(strict)) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	module.exports = {
		version: '2.1.2',
		encode: utf8encode,
		decode: utf8decode
	};


/***/ }),
/* 138 */
/***/ (function(module, exports) {

	/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */
	(function(){
	  "use strict";

	  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

	  // Use a lookup table to find the index.
	  var lookup = new Uint8Array(256);
	  for (var i = 0; i < chars.length; i++) {
	    lookup[chars.charCodeAt(i)] = i;
	  }

	  exports.encode = function(arraybuffer) {
	    var bytes = new Uint8Array(arraybuffer),
	    i, len = bytes.length, base64 = "";

	    for (i = 0; i < len; i+=3) {
	      base64 += chars[bytes[i] >> 2];
	      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
	      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
	      base64 += chars[bytes[i + 2] & 63];
	    }

	    if ((len % 3) === 2) {
	      base64 = base64.substring(0, base64.length - 1) + "=";
	    } else if (len % 3 === 1) {
	      base64 = base64.substring(0, base64.length - 2) + "==";
	    }

	    return base64;
	  };

	  exports.decode =  function(base64) {
	    var bufferLength = base64.length * 0.75,
	    len = base64.length, i, p = 0,
	    encoded1, encoded2, encoded3, encoded4;

	    if (base64[base64.length - 1] === "=") {
	      bufferLength--;
	      if (base64[base64.length - 2] === "=") {
	        bufferLength--;
	      }
	    }

	    var arraybuffer = new ArrayBuffer(bufferLength),
	    bytes = new Uint8Array(arraybuffer);

	    for (i = 0; i < len; i+=4) {
	      encoded1 = lookup[base64.charCodeAt(i)];
	      encoded2 = lookup[base64.charCodeAt(i+1)];
	      encoded3 = lookup[base64.charCodeAt(i+2)];
	      encoded4 = lookup[base64.charCodeAt(i+3)];

	      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
	      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
	      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
	    }

	    return arraybuffer;
	  };
	})();


/***/ }),
/* 139 */
/***/ (function(module, exports) {

	/**
	 * Create a blob builder even when vendor prefixes exist
	 */

	var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
	  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :
	  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
	  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : 
	  false;

	/**
	 * Check if Blob constructor is supported
	 */

	var blobSupported = (function() {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */

	var blobSupportsArrayBufferView = blobSupported && (function() {
	  try {
	    var b = new Blob([new Uint8Array([1,2])]);
	    return b.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if BlobBuilder is supported
	 */

	var blobBuilderSupported = BlobBuilder
	  && BlobBuilder.prototype.append
	  && BlobBuilder.prototype.getBlob;

	/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */

	function mapArrayBufferViews(ary) {
	  return ary.map(function(chunk) {
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;

	      // if this is a subarray, make a copy so we only
	      // include the subarray region from the underlying buffer
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }

	      return buf;
	    }

	    return chunk;
	  });
	}

	function BlobBuilderConstructor(ary, options) {
	  options = options || {};

	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary).forEach(function(part) {
	    bb.append(part);
	  });

	  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
	};

	function BlobConstructor(ary, options) {
	  return new Blob(mapArrayBufferViews(ary), options || {});
	};

	if (typeof Blob !== 'undefined') {
	  BlobBuilderConstructor.prototype = Blob.prototype;
	  BlobConstructor.prototype = Blob.prototype;
	}

	module.exports = (function() {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	})();


/***/ }),
/* 140 */
/***/ (function(module, exports) {

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */

	exports.encode = function (obj) {
	  var str = '';

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }

	  return str;
	};

	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */

	exports.decode = function(qs){
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};


/***/ }),
/* 141 */
/***/ (function(module, exports) {

	
	module.exports = function(a, b){
	  var fn = function(){};
	  fn.prototype = b.prototype;
	  a.prototype = new fn;
	  a.prototype.constructor = a;
	};

/***/ }),
/* 142 */
/***/ (function(module, exports) {

	'use strict';

	var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
	  , length = 64
	  , map = {}
	  , seed = 0
	  , i = 0
	  , prev;

	/**
	 * Return a string representing the specified number.
	 *
	 * @param {Number} num The number to convert.
	 * @returns {String} The string representation of the number.
	 * @api public
	 */
	function encode(num) {
	  var encoded = '';

	  do {
	    encoded = alphabet[num % length] + encoded;
	    num = Math.floor(num / length);
	  } while (num > 0);

	  return encoded;
	}

	/**
	 * Return the integer value specified by the given string.
	 *
	 * @param {String} str The string to convert.
	 * @returns {Number} The integer value represented by the string.
	 * @api public
	 */
	function decode(str) {
	  var decoded = 0;

	  for (i = 0; i < str.length; i++) {
	    decoded = decoded * length + map[str.charAt(i)];
	  }

	  return decoded;
	}

	/**
	 * Yeast: A tiny growing id generator.
	 *
	 * @returns {String} A unique id.
	 * @api public
	 */
	function yeast() {
	  var now = encode(+new Date());

	  if (now !== prev) return seed = 0, prev = now;
	  return now +'.'+ encode(seed++);
	}

	//
	// Map each character to its index.
	//
	for (; i < length; i++) map[alphabet[i]] = i;

	//
	// Expose the `yeast`, `encode` and `decode` functions.
	//
	yeast.encode = encode;
	yeast.decode = decode;
	module.exports = yeast;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(144);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
	  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
	  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
	  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
	  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
	  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
	  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
	  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
	  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
	  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
	  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // NB: In an Electron preload script, document will be defined but not fully
	  // initialized. Since we know we're in Chrome, we'll just detect this case
	  // explicitly
	  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
	    return true;
	  }

	  // Internet Explorer and Edge do not support colors.
	  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
	    return false;
	  }

	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
	    // double check webkit in userAgent just in case we are in a worker
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return;

	  var c = 'color: ' + this.color;
	  args.splice(1, 0, c, 'color: inherit')

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-zA-Z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}

	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (!r && typeof process !== 'undefined' && 'env' in process) {
	    r = process.env.DEBUG;
	  }

	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(145);

	/**
	 * Active `debug` instances.
	 */
	exports.instances = [];

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	 */

	exports.formatters = {};

	/**
	 * Select a color.
	 * @param {String} namespace
	 * @return {Number}
	 * @api private
	 */

	function selectColor(namespace) {
	  var hash = 0, i;

	  for (i in namespace) {
	    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
	    hash |= 0; // Convert to 32bit integer
	  }

	  return exports.colors[Math.abs(hash) % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function createDebug(namespace) {

	  var prevTime;

	  function debug() {
	    // disabled?
	    if (!debug.enabled) return;

	    var self = debug;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // turn the `arguments` into a proper Array
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %O
	      args.unshift('%O');
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    // apply env-specific formatting (colors, etc.)
	    exports.formatArgs.call(self, args);

	    var logFn = debug.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }

	  debug.namespace = namespace;
	  debug.enabled = exports.enabled(namespace);
	  debug.useColors = exports.useColors();
	  debug.color = selectColor(namespace);
	  debug.destroy = destroy;

	  // env-specific initialization logic for debug instances
	  if ('function' === typeof exports.init) {
	    exports.init(debug);
	  }

	  exports.instances.push(debug);

	  return debug;
	}

	function destroy () {
	  var index = exports.instances.indexOf(this);
	  if (index !== -1) {
	    exports.instances.splice(index, 1);
	    return true;
	  } else {
	    return false;
	  }
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  exports.names = [];
	  exports.skips = [];

	  var i;
	  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
	  var len = split.length;

	  for (i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }

	  for (i = 0; i < exports.instances.length; i++) {
	    var instance = exports.instances[i];
	    instance.enabled = exports.enabled(instance.namespace);
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  if (name[name.length - 1] === '*') {
	    return true;
	  }
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ }),
/* 145 */
/***/ (function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module requirements.
	 */

	var Polling = __webpack_require__(129);
	var inherit = __webpack_require__(141);

	/**
	 * Module exports.
	 */

	module.exports = JSONPPolling;

	/**
	 * Cached regular expressions.
	 */

	var rNewline = /\n/g;
	var rEscapedNewline = /\\n/g;

	/**
	 * Global JSONP callbacks.
	 */

	var callbacks;

	/**
	 * Noop.
	 */

	function empty () { }

	/**
	 * Until https://github.com/tc39/proposal-global is shipped.
	 */
	function glob () {
	  return typeof self !== 'undefined' ? self
	      : typeof window !== 'undefined' ? window
	      : typeof global !== 'undefined' ? global : {};
	}

	/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */

	function JSONPPolling (opts) {
	  Polling.call(this, opts);

	  this.query = this.query || {};

	  // define global callbacks array if not present
	  // we do this here (lazily) to avoid unneeded global pollution
	  if (!callbacks) {
	    // we need to consider multiple engines in the same page
	    var global = glob();
	    callbacks = global.___eio = (global.___eio || []);
	  }

	  // callback identifier
	  this.index = callbacks.length;

	  // add callback to jsonp global
	  var self = this;
	  callbacks.push(function (msg) {
	    self.onData(msg);
	  });

	  // append to query string
	  this.query.j = this.index;

	  // prevent spurious errors from being emitted when the window is unloaded
	  if (typeof addEventListener === 'function') {
	    addEventListener('beforeunload', function () {
	      if (self.script) self.script.onerror = empty;
	    }, false);
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(JSONPPolling, Polling);

	/*
	 * JSONP only supports binary as base64 encoded strings
	 */

	JSONPPolling.prototype.supportsBinary = false;

	/**
	 * Closes the socket.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doClose = function () {
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  if (this.form) {
	    this.form.parentNode.removeChild(this.form);
	    this.form = null;
	    this.iframe = null;
	  }

	  Polling.prototype.doClose.call(this);
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doPoll = function () {
	  var self = this;
	  var script = document.createElement('script');

	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  script.async = true;
	  script.src = this.uri();
	  script.onerror = function (e) {
	    self.onError('jsonp poll error', e);
	  };

	  var insertAt = document.getElementsByTagName('script')[0];
	  if (insertAt) {
	    insertAt.parentNode.insertBefore(script, insertAt);
	  } else {
	    (document.head || document.body).appendChild(script);
	  }
	  this.script = script;

	  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

	  if (isUAgecko) {
	    setTimeout(function () {
	      var iframe = document.createElement('iframe');
	      document.body.appendChild(iframe);
	      document.body.removeChild(iframe);
	    }, 100);
	  }
	};

	/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */

	JSONPPolling.prototype.doWrite = function (data, fn) {
	  var self = this;

	  if (!this.form) {
	    var form = document.createElement('form');
	    var area = document.createElement('textarea');
	    var id = this.iframeId = 'eio_iframe_' + this.index;
	    var iframe;

	    form.className = 'socketio';
	    form.style.position = 'absolute';
	    form.style.top = '-1000px';
	    form.style.left = '-1000px';
	    form.target = id;
	    form.method = 'POST';
	    form.setAttribute('accept-charset', 'utf-8');
	    area.name = 'd';
	    form.appendChild(area);
	    document.body.appendChild(form);

	    this.form = form;
	    this.area = area;
	  }

	  this.form.action = this.uri();

	  function complete () {
	    initIframe();
	    fn();
	  }

	  function initIframe () {
	    if (self.iframe) {
	      try {
	        self.form.removeChild(self.iframe);
	      } catch (e) {
	        self.onError('jsonp polling iframe removal error', e);
	      }
	    }

	    try {
	      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
	      iframe = document.createElement(html);
	    } catch (e) {
	      iframe = document.createElement('iframe');
	      iframe.name = self.iframeId;
	      iframe.src = 'javascript:0';
	    }

	    iframe.id = self.iframeId;

	    self.form.appendChild(iframe);
	    self.iframe = iframe;
	  }

	  initIframe();

	  // escape \n to prevent it from being converted into \r\n by some UAs
	  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
	  data = data.replace(rEscapedNewline, '\\\n');
	  this.area.value = data.replace(rNewline, '\\n');

	  try {
	    this.form.submit();
	  } catch (e) {}

	  if (this.iframe.attachEvent) {
	    this.iframe.onreadystatechange = function () {
	      if (self.iframe.readyState === 'complete') {
	        complete();
	      }
	    };
	  } else {
	    this.iframe.onload = complete;
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/**
	 * Module dependencies.
	 */

	var Transport = __webpack_require__(130);
	var parser = __webpack_require__(131);
	var parseqs = __webpack_require__(140);
	var inherit = __webpack_require__(141);
	var yeast = __webpack_require__(142);
	var debug = __webpack_require__(143)('engine.io-client:websocket');

	var BrowserWebSocket, NodeWebSocket;

	if (typeof WebSocket !== 'undefined') {
	  BrowserWebSocket = WebSocket;
	} else if (typeof self !== 'undefined') {
	  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
	} else {
	  try {
	    NodeWebSocket = __webpack_require__(148);
	  } catch (e) { }
	}

	/**
	 * Get either the `WebSocket` or `MozWebSocket` globals
	 * in the browser or try to resolve WebSocket-compatible
	 * interface exposed by `ws` for Node-like environment.
	 */

	var WebSocketImpl = BrowserWebSocket || NodeWebSocket;

	/**
	 * Module exports.
	 */

	module.exports = WS;

	/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */

	function WS (opts) {
	  var forceBase64 = (opts && opts.forceBase64);
	  if (forceBase64) {
	    this.supportsBinary = false;
	  }
	  this.perMessageDeflate = opts.perMessageDeflate;
	  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
	  this.protocols = opts.protocols;
	  if (!this.usingBrowserWebSocket) {
	    WebSocketImpl = NodeWebSocket;
	  }
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(WS, Transport);

	/**
	 * Transport name.
	 *
	 * @api public
	 */

	WS.prototype.name = 'websocket';

	/*
	 * WebSockets support binary
	 */

	WS.prototype.supportsBinary = true;

	/**
	 * Opens socket.
	 *
	 * @api private
	 */

	WS.prototype.doOpen = function () {
	  if (!this.check()) {
	    // let probe timeout
	    return;
	  }

	  var uri = this.uri();
	  var protocols = this.protocols;
	  var opts = {
	    agent: this.agent,
	    perMessageDeflate: this.perMessageDeflate
	  };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  if (this.extraHeaders) {
	    opts.headers = this.extraHeaders;
	  }
	  if (this.localAddress) {
	    opts.localAddress = this.localAddress;
	  }

	  try {
	    this.ws =
	      this.usingBrowserWebSocket && !this.isReactNative
	        ? protocols
	          ? new WebSocketImpl(uri, protocols)
	          : new WebSocketImpl(uri)
	        : new WebSocketImpl(uri, protocols, opts);
	  } catch (err) {
	    return this.emit('error', err);
	  }

	  if (this.ws.binaryType === undefined) {
	    this.supportsBinary = false;
	  }

	  if (this.ws.supports && this.ws.supports.binary) {
	    this.supportsBinary = true;
	    this.ws.binaryType = 'nodebuffer';
	  } else {
	    this.ws.binaryType = 'arraybuffer';
	  }

	  this.addEventListeners();
	};

	/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */

	WS.prototype.addEventListeners = function () {
	  var self = this;

	  this.ws.onopen = function () {
	    self.onOpen();
	  };
	  this.ws.onclose = function () {
	    self.onClose();
	  };
	  this.ws.onmessage = function (ev) {
	    self.onData(ev.data);
	  };
	  this.ws.onerror = function (e) {
	    self.onError('websocket error', e);
	  };
	};

	/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */

	WS.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;

	  // encodePacket efficient as it uses WS framing
	  // no need for encodePayload
	  var total = packets.length;
	  for (var i = 0, l = total; i < l; i++) {
	    (function (packet) {
	      parser.encodePacket(packet, self.supportsBinary, function (data) {
	        if (!self.usingBrowserWebSocket) {
	          // always create a new object (GH-437)
	          var opts = {};
	          if (packet.options) {
	            opts.compress = packet.options.compress;
	          }

	          if (self.perMessageDeflate) {
	            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
	            if (len < self.perMessageDeflate.threshold) {
	              opts.compress = false;
	            }
	          }
	        }

	        // Sometimes the websocket has already been closed but the browser didn't
	        // have a chance of informing us about it yet, in that case send will
	        // throw an error
	        try {
	          if (self.usingBrowserWebSocket) {
	            // TypeError is thrown when passing the second argument on Safari
	            self.ws.send(data);
	          } else {
	            self.ws.send(data, opts);
	          }
	        } catch (e) {
	          debug('websocket closed before onclose event');
	        }

	        --total || done();
	      });
	    })(packets[i]);
	  }

	  function done () {
	    self.emit('flush');

	    // fake drain
	    // defer to next tick to allow Socket to clear writeBuffer
	    setTimeout(function () {
	      self.writable = true;
	      self.emit('drain');
	    }, 0);
	  }
	};

	/**
	 * Called upon close
	 *
	 * @api private
	 */

	WS.prototype.onClose = function () {
	  Transport.prototype.onClose.call(this);
	};

	/**
	 * Closes socket.
	 *
	 * @api private
	 */

	WS.prototype.doClose = function () {
	  if (typeof this.ws !== 'undefined') {
	    this.ws.close();
	  }
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	WS.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';

	  // avoid port if default for schema
	  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
	    ('ws' === schema && Number(this.port) !== 80))) {
	    port = ':' + this.port;
	  }

	  // append timestamp to URI
	  if (this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }

	  // communicate binary support capabilities
	  if (!this.supportsBinary) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};

	/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */

	WS.prototype.check = function () {
	  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(118).Buffer))

/***/ }),
/* 148 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 149 */
/***/ (function(module, exports) {

	
	var indexOf = [].indexOf;

	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var parser = __webpack_require__(110);
	var Emitter = __webpack_require__(114);
	var toArray = __webpack_require__(151);
	var on = __webpack_require__(152);
	var bind = __webpack_require__(153);
	var debug = __webpack_require__(107)('socket.io-client:socket');
	var parseqs = __webpack_require__(140);
	var hasBin = __webpack_require__(133);

	/**
	 * Module exports.
	 */

	module.exports = exports = Socket;

	/**
	 * Internal events (blacklisted).
	 * These events can't be emitted by the user.
	 *
	 * @api private
	 */

	var events = {
	  connect: 1,
	  connect_error: 1,
	  connect_timeout: 1,
	  connecting: 1,
	  disconnect: 1,
	  error: 1,
	  reconnect: 1,
	  reconnect_attempt: 1,
	  reconnect_failed: 1,
	  reconnect_error: 1,
	  reconnecting: 1,
	  ping: 1,
	  pong: 1
	};

	/**
	 * Shortcut to `Emitter#emit`.
	 */

	var emit = Emitter.prototype.emit;

	/**
	 * `Socket` constructor.
	 *
	 * @api public
	 */

	function Socket (io, nsp, opts) {
	  this.io = io;
	  this.nsp = nsp;
	  this.json = this; // compat
	  this.ids = 0;
	  this.acks = {};
	  this.receiveBuffer = [];
	  this.sendBuffer = [];
	  this.connected = false;
	  this.disconnected = true;
	  this.flags = {};
	  if (opts && opts.query) {
	    this.query = opts.query;
	  }
	  if (this.io.autoConnect) this.open();
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Subscribe to open, close and packet events
	 *
	 * @api private
	 */

	Socket.prototype.subEvents = function () {
	  if (this.subs) return;

	  var io = this.io;
	  this.subs = [
	    on(io, 'open', bind(this, 'onopen')),
	    on(io, 'packet', bind(this, 'onpacket')),
	    on(io, 'close', bind(this, 'onclose'))
	  ];
	};

	/**
	 * "Opens" the socket.
	 *
	 * @api public
	 */

	Socket.prototype.open =
	Socket.prototype.connect = function () {
	  if (this.connected) return this;

	  this.subEvents();
	  this.io.open(); // ensure open
	  if ('open' === this.io.readyState) this.onopen();
	  this.emit('connecting');
	  return this;
	};

	/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.send = function () {
	  var args = toArray(arguments);
	  args.unshift('message');
	  this.emit.apply(this, args);
	  return this;
	};

	/**
	 * Override `emit`.
	 * If the event is in `events`, it's emitted normally.
	 *
	 * @param {String} event name
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.emit = function (ev) {
	  if (events.hasOwnProperty(ev)) {
	    emit.apply(this, arguments);
	    return this;
	  }

	  var args = toArray(arguments);
	  var packet = {
	    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
	    data: args
	  };

	  packet.options = {};
	  packet.options.compress = !this.flags || false !== this.flags.compress;

	  // event ack callback
	  if ('function' === typeof args[args.length - 1]) {
	    debug('emitting packet with ack id %d', this.ids);
	    this.acks[this.ids] = args.pop();
	    packet.id = this.ids++;
	  }

	  if (this.connected) {
	    this.packet(packet);
	  } else {
	    this.sendBuffer.push(packet);
	  }

	  this.flags = {};

	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.packet = function (packet) {
	  packet.nsp = this.nsp;
	  this.io.packet(packet);
	};

	/**
	 * Called upon engine `open`.
	 *
	 * @api private
	 */

	Socket.prototype.onopen = function () {
	  debug('transport is open - connecting');

	  // write connect packet if necessary
	  if ('/' !== this.nsp) {
	    if (this.query) {
	      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
	      debug('sending connect packet with query %s', query);
	      this.packet({type: parser.CONNECT, query: query});
	    } else {
	      this.packet({type: parser.CONNECT});
	    }
	  }
	};

	/**
	 * Called upon engine `close`.
	 *
	 * @param {String} reason
	 * @api private
	 */

	Socket.prototype.onclose = function (reason) {
	  debug('close (%s)', reason);
	  this.connected = false;
	  this.disconnected = true;
	  delete this.id;
	  this.emit('disconnect', reason);
	};

	/**
	 * Called with socket packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onpacket = function (packet) {
	  var sameNamespace = packet.nsp === this.nsp;
	  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';

	  if (!sameNamespace && !rootNamespaceError) return;

	  switch (packet.type) {
	    case parser.CONNECT:
	      this.onconnect();
	      break;

	    case parser.EVENT:
	      this.onevent(packet);
	      break;

	    case parser.BINARY_EVENT:
	      this.onevent(packet);
	      break;

	    case parser.ACK:
	      this.onack(packet);
	      break;

	    case parser.BINARY_ACK:
	      this.onack(packet);
	      break;

	    case parser.DISCONNECT:
	      this.ondisconnect();
	      break;

	    case parser.ERROR:
	      this.emit('error', packet.data);
	      break;
	  }
	};

	/**
	 * Called upon a server event.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onevent = function (packet) {
	  var args = packet.data || [];
	  debug('emitting event %j', args);

	  if (null != packet.id) {
	    debug('attaching ack callback to event');
	    args.push(this.ack(packet.id));
	  }

	  if (this.connected) {
	    emit.apply(this, args);
	  } else {
	    this.receiveBuffer.push(args);
	  }
	};

	/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @api private
	 */

	Socket.prototype.ack = function (id) {
	  var self = this;
	  var sent = false;
	  return function () {
	    // prevent double callbacks
	    if (sent) return;
	    sent = true;
	    var args = toArray(arguments);
	    debug('sending ack %j', args);

	    self.packet({
	      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
	      id: id,
	      data: args
	    });
	  };
	};

	/**
	 * Called upon a server acknowlegement.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onack = function (packet) {
	  var ack = this.acks[packet.id];
	  if ('function' === typeof ack) {
	    debug('calling ack %s with %j', packet.id, packet.data);
	    ack.apply(this, packet.data);
	    delete this.acks[packet.id];
	  } else {
	    debug('bad ack %s', packet.id);
	  }
	};

	/**
	 * Called upon server connect.
	 *
	 * @api private
	 */

	Socket.prototype.onconnect = function () {
	  this.connected = true;
	  this.disconnected = false;
	  this.emit('connect');
	  this.emitBuffered();
	};

	/**
	 * Emit buffered events (received and emitted).
	 *
	 * @api private
	 */

	Socket.prototype.emitBuffered = function () {
	  var i;
	  for (i = 0; i < this.receiveBuffer.length; i++) {
	    emit.apply(this, this.receiveBuffer[i]);
	  }
	  this.receiveBuffer = [];

	  for (i = 0; i < this.sendBuffer.length; i++) {
	    this.packet(this.sendBuffer[i]);
	  }
	  this.sendBuffer = [];
	};

	/**
	 * Called upon server disconnect.
	 *
	 * @api private
	 */

	Socket.prototype.ondisconnect = function () {
	  debug('server disconnect (%s)', this.nsp);
	  this.destroy();
	  this.onclose('io server disconnect');
	};

	/**
	 * Called upon forced client/server side disconnections,
	 * this method ensures the manager stops tracking us and
	 * that reconnections don't get triggered for this.
	 *
	 * @api private.
	 */

	Socket.prototype.destroy = function () {
	  if (this.subs) {
	    // clean subscriptions to avoid reconnections
	    for (var i = 0; i < this.subs.length; i++) {
	      this.subs[i].destroy();
	    }
	    this.subs = null;
	  }

	  this.io.destroy(this);
	};

	/**
	 * Disconnects the socket manually.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.close =
	Socket.prototype.disconnect = function () {
	  if (this.connected) {
	    debug('performing disconnect (%s)', this.nsp);
	    this.packet({ type: parser.DISCONNECT });
	  }

	  // remove socket from pool
	  this.destroy();

	  if (this.connected) {
	    // fire events
	    this.onclose('io client disconnect');
	  }
	  return this;
	};

	/**
	 * Sets the compress flag.
	 *
	 * @param {Boolean} if `true`, compresses the sending data
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.compress = function (compress) {
	  this.flags.compress = compress;
	  return this;
	};

	/**
	 * Sets the binary flag
	 *
	 * @param {Boolean} whether the emitted data contains binary
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.binary = function (binary) {
	  this.flags.binary = binary;
	  return this;
	};


/***/ }),
/* 151 */
/***/ (function(module, exports) {

	module.exports = toArray

	function toArray(list, index) {
	    var array = []

	    index = index || 0

	    for (var i = index || 0; i < list.length; i++) {
	        array[i - index] = list[i]
	    }

	    return array
	}


/***/ }),
/* 152 */
/***/ (function(module, exports) {

	
	/**
	 * Module exports.
	 */

	module.exports = on;

	/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */

	function on (obj, ev, fn) {
	  obj.on(ev, fn);
	  return {
	    destroy: function () {
	      obj.removeListener(ev, fn);
	    }
	  };
	}


/***/ }),
/* 153 */
/***/ (function(module, exports) {

	/**
	 * Slice reference.
	 */

	var slice = [].slice;

	/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */

	module.exports = function(obj, fn){
	  if ('string' == typeof fn) fn = obj[fn];
	  if ('function' != typeof fn) throw new Error('bind() requires a function');
	  var args = slice.call(arguments, 2);
	  return function(){
	    return fn.apply(obj, args.concat(slice.call(arguments)));
	  }
	};


/***/ }),
/* 154 */
/***/ (function(module, exports) {

	
	/**
	 * Expose `Backoff`.
	 */

	module.exports = Backoff;

	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function Backoff(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}

	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */

	Backoff.prototype.duration = function(){
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand =  Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};

	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */

	Backoff.prototype.reset = function(){
	  this.attempts = 0;
	};

	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMin = function(min){
	  this.ms = min;
	};

	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMax = function(max){
	  this.max = max;
	};

	/**
	 * Set the jitter
	 *
	 * @api public
	 */

	Backoff.prototype.setJitter = function(jitter){
	  this.jitter = jitter;
	};



/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _receiver = __webpack_require__(156);

	var _receiver2 = _interopRequireDefault(_receiver);

	var _socket = __webpack_require__(157);

	var _socket2 = _interopRequireDefault(_socket);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	/**
	 * @class SocketManager
	 * @description
	 */
	var SocketManager = function () {
	  function SocketManager(socket, store) {
	    _classCallCheck(this, SocketManager);

	    this.socket = socket;
	    this.store = store;
	    (0, _receiver2.default)(this.socket, this.store);
	  }

	  /**
	   * Joins random room
	   */

	  _createClass(SocketManager, [{
	    key: "joinRandomRoom",
	    value: function joinRandomRoom(username) {
	      this.socket.emit(_socket2.default.EMITTER.PLAYER_JOIN_RANDOM_GAMEROOM, username);
	    }

	    /**
	     * Joins random room
	     */

	  }, {
	    key: "joinPrivateRoom",
	    value: function joinPrivateRoom(username, roomId) {
	      this.socket.emit(_socket2.default.EMITTER.PLAYER_JOIN_PRIVATE_GAMEROOM, username, roomId);
	    }

	    /**
	     * Player Creates room
	     */

	  }, {
	    key: "createRoom",
	    value: function createRoom(settings) {
	      this.socket.emit(_socket2.default.EMITTER.PLAYER_CREATES_GAME, settings);
	    }

	    /**
	     * Sends a message to the general chat
	     * @param {*} msg
	     */

	  }, {
	    key: "sendMessage",
	    value: function sendMessage(msg) {
	      this.socket.emit(_socket2.default.EMITTER.PLAYER_SEND_MESSAGE, msg);
	    }

	    /**
	     * 
	     * @param {*} data 
	     */

	  }, {
	    key: "voteDraw",
	    value: function voteDraw(data) {
	      this.socket.emit(_socket2.default.EMITTER.PLAYER_VOTES_DRAW, data);
	    }

	    /**
	     * Makes a draw action over the canvas
	     * @param {*} data
	     */

	  }, {
	    key: "drawCanvas",
	    value: function drawCanvas(data) {
	      this.socket.emit(_socket2.default.EMITTER.PLAYER_DRAWING, data);
	    }

	    /**
	     * cleans whole canvas
	     */

	  }, {
	    key: "clearCanvas",
	    value: function clearCanvas() {
	      this.socket.emit(_socket2.default.EMITTER.CLEAR_CANVAS);
	    }
	  }]);

	  return SocketManager;
	}();

	exports.default = SocketManager;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _socket = __webpack_require__(157);

	var _socket2 = _interopRequireDefault(_socket);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Helper function to make socket.on bind calls
	 * @param {*} event 
	 * @param {*} action 
	 * @param {*} socket 
	 * @param {*} store 
	 */
	var socketOn = function socketOn(event, action, socket, store) {
	  socket.on(event, function (data) {
	    store.dispatch(action(data));
	  });
	};

	/**
	 * Opens socket listeners for every possible event
	 * @param {*} socket
	 * @param {*} store
	 */
	var receiver = function receiver(socket, store) {
	  var messages = Object.keys(_socket2.default.RECEIVER);
	  messages.forEach(function name(item) {
	    socketOn(_socket2.default.RECEIVER[item][0], _socket2.default.RECEIVER[item][1], socket, store);
	  });
	};

	exports.default = receiver;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _gameActions = __webpack_require__(158);

	var _playerActions = __webpack_require__(159);

	var SOCKET_EVENTS = {
	  RECEIVER: {
	    DISCONNECT: ["disconnect", _gameActions.disconnectGameRoom],
	    RETRIEVE_GAME_INFO: ["retrieveGameInfo", _gameActions.retrieveGameInfo],
	    UPDATE_CHAT_PLAYER_MESSAGE: ["playerMessage", _gameActions.addMessageToChat],
	    UPDATE_CHAT_INFORM_MESSAGE: ["generalMessage", _gameActions.addMessageToChat],
	    UPDATE_USER_LIST: ["updateUserList", _gameActions.updatePlayerList],
	    UPDATE_CANVAS: ["updateCanvas", _gameActions.updateCanvas],
	    UPDATE_TIMER: ["updateTimer", _gameActions.updateTimer],
	    UPDATE_GAME_STATE: ["updateGameState", _gameActions.updateGameState],
	    DISPLAY_PLAYERS_DRAW: ["playerDraws", _gameActions.fetchPlayersDraw],
	    DISPLAY_CURRENT_WORD: ["currentWord", _gameActions.displayCurrentWord],
	    CONNECTION_RESULT: ["connectionResult", _playerActions.setConnection]
	  },
	  EMITTER: {
	    PLAYER_JOIN_RANDOM_GAMEROOM: "joinRandomRoom",
	    PLAYER_JOIN_PRIVATE_GAMEROOM: "joinPrivateRoom",
	    PLAYER_CREATES_GAME: "playerCreatesGame",
	    PLAYER_LEAVE_GAMEROOM: "leaveGameRoom",
	    PLAYER_SEND_MESSAGE: "sendMessage",
	    PLAYER_DRAWING: "drawing",
	    PLAYER_VOTES_DRAW: 'playerVotesDraw',
	    CLEAR_CANVAS: "clearCanvas",
	    PLAYER_DISCONNECT: "disconnect"
	  }
	};

	exports.default = SOCKET_EVENTS;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.retrieveGameInfo = retrieveGameInfo;
	exports.updateCanvas = updateCanvas;
	exports.updateTimer = updateTimer;
	exports.updateGameState = updateGameState;
	exports.displayCurrentWord = displayCurrentWord;
	exports.fetchPlayersDraw = fetchPlayersDraw;
	exports.setColorPicked = setColorPicked;
	exports.selectTool = selectTool;
	exports.setPenWidth = setPenWidth;
	exports.updatePlayerList = updatePlayerList;
	exports.addMessageToChat = addMessageToChat;
	exports.playerSendMessage = playerSendMessage;
	exports.playerDrawCanvas = playerDrawCanvas;
	exports.clearCanvas = clearCanvas;
	exports.voteDraw = voteDraw;
	exports.disconnectGameRoom = disconnectGameRoom;
	exports.toggleExpand = toggleExpand;

	var _actions = __webpack_require__(99);

	var ACTIONS = _interopRequireWildcard(_actions);

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	function retrieveGameInfo(data) {
	  return {
	    type: ACTIONS.RETRIEVE_GAME_INFO,
	    payload: data
	  };
	}

	/**
	 * Updates the canvas
	 * @param {*} data
	 */
	function updateCanvas(data) {
	  return {
	    type: ACTIONS.UPDATE_CANVAS,
	    payload: data
	  };
	}

	/**
	 * 
	 * @param {*} data 
	 */
	function updateTimer(data) {
	  return {
	    type: ACTIONS.UPDATE_TIMER,
	    payload: data
	  };
	}

	/**
	 * 
	 * @param {*} data 
	 */
	function updateGameState(data) {
	  return {
	    type: ACTIONS.UPDATE_GAME_STATE,
	    payload: data
	  };
	}

	/**
	 * 
	 */
	function displayCurrentWord(data) {
	  return {
	    type: ACTIONS.DISPLAY_CURRENT_WORD,
	    payload: data
	  };
	}

	/**
	 * 
	 * @param {*} data 
	 */
	function fetchPlayersDraw(data) {
	  return {
	    type: ACTIONS.DISPLAY_PLAYERS_DRAW,
	    payload: data
	  };
	}

	/**
	 * Sets the color tool pencil
	 * @param {*} data
	 */
	function setColorPicked(color) {
	  return {
	    type: ACTIONS.CHANGE_COLOR_PICKED,
	    payload: color
	  };
	}

	/**
	 * Selects a tool
	 * @param {string} data
	 */
	function selectTool(tool) {
	  return {
	    type: ACTIONS.SELECT_TOOL_PICKED,
	    payload: tool
	  };
	}

	/**
	 * Selects a pen width from a width range
	 * @param {Number} data
	 */
	function setPenWidth(width) {
	  return {
	    type: ACTIONS.SELECT_PEN_WIDTH,
	    payload: width
	  };
	}

	/**
	 * 
	 * @param {*} playerList 
	 */
	function updatePlayerList(playerList) {
	  return {
	    type: ACTIONS.UPDATE_USERLIST,
	    payload: playerList
	  };
	}

	/**
	 * 
	 * @param {*} message 
	 */
	function addMessageToChat(message) {
	  return {
	    type: ACTIONS.ADD_NEW_CHAT_MESSAGE,
	    payload: message
	  };
	}

	/**
	 * 
	 * @param {*} message 
	 */
	function playerSendMessage(message) {
	  return {
	    type: ACTIONS.PLAYER_SEND_MESSAGE,
	    payload: message
	  };
	}

	/**
	 * 
	 * @param {*} message 
	 */
	function playerDrawCanvas(data) {
	  return {
	    type: ACTIONS.PLAYER_DRAW_CANVAS,
	    payload: data
	  };
	}

	/**
	 * 
	 * @param {*} message 
	 */
	function clearCanvas() {
	  return {
	    type: ACTIONS.PLAYER_CLEAR_CANVAS
	  };
	}

	/**
	 * 
	 * @param {*} draw 
	 * @param {*} feedback 
	 */
	function voteDraw(draw, feedback) {
	  return {
	    type: ACTIONS.PLAYER_VOTE_DRAW,
	    payload: { draw: draw, feedback: feedback }
	  };
	}

	/**
	 * 
	 */
	function disconnectGameRoom() {
	  return {
	    type: ACTIONS.DISCONNECT_GAME_ROOM
	  };
	}

	/**
	 * 
	 */
	function toggleExpand() {
	  return {
	    type: ACTIONS.TOGGLE_EXPAND
	  };
	}

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.setUsername = setUsername;
	exports.createRoom = createRoom;
	exports.openPlayerSocketConnection = openPlayerSocketConnection;
	exports.joinPrivateGame = joinPrivateGame;
	exports.setConnection = setConnection;

	var _actions = __webpack_require__(96);

	var ACTIONS = _interopRequireWildcard(_actions);

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	/**
	 * Sets the username value
	 * @param {String} username
	 */
	function setUsername(username) {
	  return {
	    type: ACTIONS.CHANGE_USERNAME,
	    payload: username
	  };
	}

	/**
	 *
	 * @param {*} settings
	 */
	function createRoom(settings) {
	  return {
	    type: ACTIONS.CREATE_ROOM,
	    payload: settings
	  };
	}

	/**
	 * Opens a socket conn for the player
	 */
	function openPlayerSocketConnection() {
	  return {
	    type: ACTIONS.SOCKET_CONNECTION,
	    payload: false
	  };
	}

	/**
	 * Join private game
	 * @param {*} id
	 */
	function joinPrivateGame(id) {
	  return {
	    type: ACTIONS.CONNECT_PRIVATE_ROOM,
	    payload: id
	  };
	}

	/**
	 * 
	 * @param {*} result 
	 */
	function setConnection(result) {
	  return {
	    type: ACTIONS.SET_CONNECTION,
	    payload: result
	  };
	}

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HowToPlayPage = exports.PolicyPage = exports.SettingsPage = exports.SearchPage = exports.PrivateGame = exports.CreatePage = exports.PublicGame = exports.HomePage = undefined;

	var _Home = __webpack_require__(161);

	var _Home2 = _interopRequireDefault(_Home);

	var _Search = __webpack_require__(865);

	var _Search2 = _interopRequireDefault(_Search);

	var _play = __webpack_require__(892);

	var _Create = __webpack_require__(955);

	var _Create2 = _interopRequireDefault(_Create);

	var _Settings = __webpack_require__(956);

	var _Settings2 = _interopRequireDefault(_Settings);

	var _Policy = __webpack_require__(957);

	var _Policy2 = _interopRequireDefault(_Policy);

	var _HowToPlay = __webpack_require__(958);

	var _HowToPlay2 = _interopRequireDefault(_HowToPlay);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.HomePage = _Home2.default;
	exports.PublicGame = _play.PublicGame;
	exports.CreatePage = _Create2.default;
	exports.PrivateGame = _play.PrivateGame;
	exports.SearchPage = _Search2.default;
	exports.SettingsPage = _Settings2.default;
	exports.PolicyPage = _Policy2.default;
	exports.HowToPlayPage = _HowToPlay2.default;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _semanticUiReact = __webpack_require__(162);

	var _browser = __webpack_require__(790);

	var Sentry = _interopRequireWildcard(_browser);

	var _playerActions = __webpack_require__(159);

	var _components = __webpack_require__(824);

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var SAMPLE_DRAWS_ENDPOINT = "/api/sample/draws";

	Sentry.init({
	  dsn: "https://0bf6ab16edaf42b687dba1a4cdb01548@sentry.io/1406806"
	});

	/**
	 * HOMEPAGE COMPONENT VIEW
	 */

	var HomePage = function (_Component) {
	  _inherits(HomePage, _Component);

	  function HomePage(props) {
	    _classCallCheck(this, HomePage);

	    var _this = _possibleConstructorReturn(this, (HomePage.__proto__ || Object.getPrototypeOf(HomePage)).call(this, props));

	    _this.state = {
	      error: null,
	      title: "Home",
	      placeholder: "Introduce a nickname",
	      username: _this.props.username,
	      buttonTxt: "Play now!",
	      privateTxt: "Create Private room",
	      searchTxt: "Find game",
	      samples: [],
	      loadingSamples: true
	    };

	    // Events listeners
	    _this.onInputChange = _this.onInputChange.bind(_this);
	    _this.onPlayButtonClick = _this.onPlayButtonClick.bind(_this);
	    _this.onSearchButtonClick = _this.onSearchButtonClick.bind(_this);
	    _this.onCreateButtonClick = _this.onCreateButtonClick.bind(_this);
	    _this.onSettingsButtonClick = _this.onSettingsButtonClick.bind(_this);
	    _this.onSubmit = _this.onSubmit.bind(_this);
	    return _this;
	  }

	  _createClass(HomePage, [{
	    key: "componentDidCatch",
	    value: function componentDidCatch(error, errorInfo) {
	      this.setState({ error: error });
	      Sentry.withScope(function (scope) {
	        Object.keys(errorInfo).forEach(function (key) {
	          scope.setExtra(key, errorInfo[key]);
	        });
	        Sentry.captureException(error);
	      });
	    }

	    /**
	     * Detecs user input changes
	     * @param {Object} e
	     */

	  }, {
	    key: "onInputChange",
	    value: function onInputChange(e) {
	      var newUsername = e.target.value;
	      this.setState({
	        username: newUsername
	      });
	    }

	    /**
	     * If play button is clicked it will take you
	     * to a random room to play!
	     */

	  }, {
	    key: "onPlayButtonClick",
	    value: function onPlayButtonClick() {
	      this.props.setUsername(this.state.username);
	      this.props.openPlayerSocketConnection();
	      this.props.history.push("/play");
	    }

	    /**
	     * Find existing games!
	     */

	  }, {
	    key: "onSearchButtonClick",
	    value: function onSearchButtonClick() {
	      this.props.history.push("/search");
	    }

	    /**
	     * Create new game!
	     */

	  }, {
	    key: "onCreateButtonClick",
	    value: function onCreateButtonClick() {
	      this.props.history.push("/create");
	    }

	    /**
	     * Set your config games!
	     */

	  }, {
	    key: "onSettingsButtonClick",
	    value: function onSettingsButtonClick() {
	      this.props.history.push("/settings");
	    }

	    /**
	     * If enter key button has been pressed it will trigger
	     * the play button
	     * @param {Object} e
	     */

	  }, {
	    key: "onSubmit",
	    value: function onSubmit(e) {
	      if (e.key === "Enter") this.onPlayButtonClick();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      // let renderSamples;

	      // if (this.state.loadingSamples) {
	      //   renderSamples = <Loader active inline='centered' />;
	      // }
	      // else {
	      //   if (!this.state.samples.size) {
	      //     renderSamples = <div>
	      //       <Header as='h2' icon textAlign='center'>
	      //         <Icon name='images' circular />
	      //         <Header.Content>Not draws available!</Header.Content>
	      //       </Header>
	      //     </div>
	      //   }
	      //   else {
	      //     renderSamples = this.state.samples.map(draw => {
	      //       return (
	      //         <div className="sample four columns">
	      //           <Image src={`data:image/png;base64, ${draw}`} size='medium' bordered />
	      //         </div>
	      //       );
	      //     });
	      //   }
	      // }

	      return _react2.default.createElement("div", { id: "home-site" }, _react2.default.createElement(_components.Navbar, { className: "center" }), _react2.default.createElement("div", { className: "home-menu" }, _react2.default.createElement(_semanticUiReact.Grid, null, _react2.default.createElement(_semanticUiReact.Grid.Row, null, _react2.default.createElement(_semanticUiReact.Grid.Column, { mobile: 16, tablet: 16, computer: 16 }, _react2.default.createElement(_components.InputText, {
	        className: "input",
	        placeholder: "home.input",
	        onInputChange: this.onInputChange,
	        username: this.state.username,
	        onKeyPress: this.onSubmit
	      })), _react2.default.createElement(_semanticUiReact.Grid.Column, { mobile: 16, tablet: 16, computer: 16 }, _react2.default.createElement(_components.PrimaryButton, {
	        color: "red",
	        className: "btn-roundy",
	        value: "home.btn1",
	        onClick: this.onPlayButtonClick
	      })), _react2.default.createElement(_semanticUiReact.Grid.Column, { mobile: 16, tablet: 16, computer: 16 }, _react2.default.createElement(_components.PrimaryButton, {
	        color: "green",
	        className: "btn-roundy",
	        value: "home.btn2",
	        onClick: this.onSearchButtonClick
	      }), _react2.default.createElement(_components.PrimaryButton, {
	        color: "blue",
	        className: "btn-roundy",
	        value: "home.btn3",
	        onClick: this.onCreateButtonClick
	      }), _react2.default.createElement(_components.PrimaryButton, {
	        color: "grey",
	        className: "btn-roundy",
	        value: "home.btn4",
	        onClick: this.onSettingsButtonClick
	      }))))), _react2.default.createElement("div", { className: "center img-responsive" }, _react2.default.createElement("a", { href: "https://discord.gg/NuNGe4" }, _react2.default.createElement("img", { src: "assets/img/join-discord.png", style: { width: "30vh" } }))), _react2.default.createElement("div", { className: "center" }, _react2.default.createElement(_components.Footer, { links: [{ action: "mailto", value: "picas.iohelp@gmail.com" }, { value: "policy", action: "link", url: "/policy" }, { value: "How to play", action: "link", url: "/howtoplay" }] })));
	    }
	  }]);

	  return HomePage;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	 * @param {store}
	 */

	function mapStateToProps(state) {
	  return { username: state.playerReducer.username };
	}

	/**
	 *
	 * @param {*} dispatch
	 */
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    setUsername: function setUsername(name) {
	      dispatch((0, _playerActions.setUsername)(name));
	    },
	    openPlayerSocketConnection: function openPlayerSocketConnection(data) {
	      dispatch((0, _playerActions.openPlayerSocketConnection)(data));
	    }
	  };
	};

	exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(HomePage);

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "Confirm", {
	  enumerable: true,
	  get: function get() {
	    return _Confirm2.default;
	  }
	});
	Object.defineProperty(exports, "MountNode", {
	  enumerable: true,
	  get: function get() {
	    return _MountNode2.default;
	  }
	});
	Object.defineProperty(exports, "Pagination", {
	  enumerable: true,
	  get: function get() {
	    return _Pagination2.default;
	  }
	});
	Object.defineProperty(exports, "PaginationItem", {
	  enumerable: true,
	  get: function get() {
	    return _PaginationItem2.default;
	  }
	});
	Object.defineProperty(exports, "Portal", {
	  enumerable: true,
	  get: function get() {
	    return _Portal2.default;
	  }
	});
	Object.defineProperty(exports, "PortalInner", {
	  enumerable: true,
	  get: function get() {
	    return _PortalInner2.default;
	  }
	});
	Object.defineProperty(exports, "Radio", {
	  enumerable: true,
	  get: function get() {
	    return _Radio2.default;
	  }
	});
	Object.defineProperty(exports, "Ref", {
	  enumerable: true,
	  get: function get() {
	    return _Ref2.default;
	  }
	});
	Object.defineProperty(exports, "Responsive", {
	  enumerable: true,
	  get: function get() {
	    return _Responsive2.default;
	  }
	});
	Object.defineProperty(exports, "Select", {
	  enumerable: true,
	  get: function get() {
	    return _Select2.default;
	  }
	});
	Object.defineProperty(exports, "TextArea", {
	  enumerable: true,
	  get: function get() {
	    return _TextArea2.default;
	  }
	});
	Object.defineProperty(exports, "TransitionablePortal", {
	  enumerable: true,
	  get: function get() {
	    return _TransitionablePortal2.default;
	  }
	});
	Object.defineProperty(exports, "Visibility", {
	  enumerable: true,
	  get: function get() {
	    return _Visibility2.default;
	  }
	});
	Object.defineProperty(exports, "Breadcrumb", {
	  enumerable: true,
	  get: function get() {
	    return _Breadcrumb2.default;
	  }
	});
	Object.defineProperty(exports, "BreadcrumbDivider", {
	  enumerable: true,
	  get: function get() {
	    return _BreadcrumbDivider2.default;
	  }
	});
	Object.defineProperty(exports, "BreadcrumbSection", {
	  enumerable: true,
	  get: function get() {
	    return _BreadcrumbSection2.default;
	  }
	});
	Object.defineProperty(exports, "Form", {
	  enumerable: true,
	  get: function get() {
	    return _Form2.default;
	  }
	});
	Object.defineProperty(exports, "FormButton", {
	  enumerable: true,
	  get: function get() {
	    return _FormButton2.default;
	  }
	});
	Object.defineProperty(exports, "FormCheckbox", {
	  enumerable: true,
	  get: function get() {
	    return _FormCheckbox2.default;
	  }
	});
	Object.defineProperty(exports, "FormDropdown", {
	  enumerable: true,
	  get: function get() {
	    return _FormDropdown2.default;
	  }
	});
	Object.defineProperty(exports, "FormField", {
	  enumerable: true,
	  get: function get() {
	    return _FormField2.default;
	  }
	});
	Object.defineProperty(exports, "FormGroup", {
	  enumerable: true,
	  get: function get() {
	    return _FormGroup2.default;
	  }
	});
	Object.defineProperty(exports, "FormInput", {
	  enumerable: true,
	  get: function get() {
	    return _FormInput2.default;
	  }
	});
	Object.defineProperty(exports, "FormRadio", {
	  enumerable: true,
	  get: function get() {
	    return _FormRadio2.default;
	  }
	});
	Object.defineProperty(exports, "FormSelect", {
	  enumerable: true,
	  get: function get() {
	    return _FormSelect2.default;
	  }
	});
	Object.defineProperty(exports, "FormTextArea", {
	  enumerable: true,
	  get: function get() {
	    return _FormTextArea2.default;
	  }
	});
	Object.defineProperty(exports, "Grid", {
	  enumerable: true,
	  get: function get() {
	    return _Grid2.default;
	  }
	});
	Object.defineProperty(exports, "GridColumn", {
	  enumerable: true,
	  get: function get() {
	    return _GridColumn2.default;
	  }
	});
	Object.defineProperty(exports, "GridRow", {
	  enumerable: true,
	  get: function get() {
	    return _GridRow2.default;
	  }
	});
	Object.defineProperty(exports, "Menu", {
	  enumerable: true,
	  get: function get() {
	    return _Menu2.default;
	  }
	});
	Object.defineProperty(exports, "MenuHeader", {
	  enumerable: true,
	  get: function get() {
	    return _MenuHeader2.default;
	  }
	});
	Object.defineProperty(exports, "MenuItem", {
	  enumerable: true,
	  get: function get() {
	    return _MenuItem2.default;
	  }
	});
	Object.defineProperty(exports, "MenuMenu", {
	  enumerable: true,
	  get: function get() {
	    return _MenuMenu2.default;
	  }
	});
	Object.defineProperty(exports, "Message", {
	  enumerable: true,
	  get: function get() {
	    return _Message2.default;
	  }
	});
	Object.defineProperty(exports, "MessageContent", {
	  enumerable: true,
	  get: function get() {
	    return _MessageContent2.default;
	  }
	});
	Object.defineProperty(exports, "MessageHeader", {
	  enumerable: true,
	  get: function get() {
	    return _MessageHeader2.default;
	  }
	});
	Object.defineProperty(exports, "MessageItem", {
	  enumerable: true,
	  get: function get() {
	    return _MessageItem2.default;
	  }
	});
	Object.defineProperty(exports, "MessageList", {
	  enumerable: true,
	  get: function get() {
	    return _MessageList2.default;
	  }
	});
	Object.defineProperty(exports, "Table", {
	  enumerable: true,
	  get: function get() {
	    return _Table2.default;
	  }
	});
	Object.defineProperty(exports, "TableBody", {
	  enumerable: true,
	  get: function get() {
	    return _TableBody2.default;
	  }
	});
	Object.defineProperty(exports, "TableCell", {
	  enumerable: true,
	  get: function get() {
	    return _TableCell2.default;
	  }
	});
	Object.defineProperty(exports, "TableFooter", {
	  enumerable: true,
	  get: function get() {
	    return _TableFooter2.default;
	  }
	});
	Object.defineProperty(exports, "TableHeader", {
	  enumerable: true,
	  get: function get() {
	    return _TableHeader2.default;
	  }
	});
	Object.defineProperty(exports, "TableHeaderCell", {
	  enumerable: true,
	  get: function get() {
	    return _TableHeaderCell2.default;
	  }
	});
	Object.defineProperty(exports, "TableRow", {
	  enumerable: true,
	  get: function get() {
	    return _TableRow2.default;
	  }
	});
	Object.defineProperty(exports, "Button", {
	  enumerable: true,
	  get: function get() {
	    return _Button2.default;
	  }
	});
	Object.defineProperty(exports, "ButtonContent", {
	  enumerable: true,
	  get: function get() {
	    return _ButtonContent2.default;
	  }
	});
	Object.defineProperty(exports, "ButtonGroup", {
	  enumerable: true,
	  get: function get() {
	    return _ButtonGroup2.default;
	  }
	});
	Object.defineProperty(exports, "ButtonOr", {
	  enumerable: true,
	  get: function get() {
	    return _ButtonOr2.default;
	  }
	});
	Object.defineProperty(exports, "Container", {
	  enumerable: true,
	  get: function get() {
	    return _Container2.default;
	  }
	});
	Object.defineProperty(exports, "Divider", {
	  enumerable: true,
	  get: function get() {
	    return _Divider2.default;
	  }
	});
	Object.defineProperty(exports, "Flag", {
	  enumerable: true,
	  get: function get() {
	    return _Flag2.default;
	  }
	});
	Object.defineProperty(exports, "Header", {
	  enumerable: true,
	  get: function get() {
	    return _Header2.default;
	  }
	});
	Object.defineProperty(exports, "HeaderContent", {
	  enumerable: true,
	  get: function get() {
	    return _HeaderContent2.default;
	  }
	});
	Object.defineProperty(exports, "HeaderSubheader", {
	  enumerable: true,
	  get: function get() {
	    return _HeaderSubheader2.default;
	  }
	});
	Object.defineProperty(exports, "Icon", {
	  enumerable: true,
	  get: function get() {
	    return _Icon2.default;
	  }
	});
	Object.defineProperty(exports, "IconGroup", {
	  enumerable: true,
	  get: function get() {
	    return _IconGroup2.default;
	  }
	});
	Object.defineProperty(exports, "Image", {
	  enumerable: true,
	  get: function get() {
	    return _Image2.default;
	  }
	});
	Object.defineProperty(exports, "ImageGroup", {
	  enumerable: true,
	  get: function get() {
	    return _ImageGroup2.default;
	  }
	});
	Object.defineProperty(exports, "Input", {
	  enumerable: true,
	  get: function get() {
	    return _Input2.default;
	  }
	});
	Object.defineProperty(exports, "Label", {
	  enumerable: true,
	  get: function get() {
	    return _Label2.default;
	  }
	});
	Object.defineProperty(exports, "LabelDetail", {
	  enumerable: true,
	  get: function get() {
	    return _LabelDetail2.default;
	  }
	});
	Object.defineProperty(exports, "LabelGroup", {
	  enumerable: true,
	  get: function get() {
	    return _LabelGroup2.default;
	  }
	});
	Object.defineProperty(exports, "List", {
	  enumerable: true,
	  get: function get() {
	    return _List2.default;
	  }
	});
	Object.defineProperty(exports, "ListContent", {
	  enumerable: true,
	  get: function get() {
	    return _ListContent2.default;
	  }
	});
	Object.defineProperty(exports, "ListDescription", {
	  enumerable: true,
	  get: function get() {
	    return _ListDescription2.default;
	  }
	});
	Object.defineProperty(exports, "ListHeader", {
	  enumerable: true,
	  get: function get() {
	    return _ListHeader2.default;
	  }
	});
	Object.defineProperty(exports, "ListIcon", {
	  enumerable: true,
	  get: function get() {
	    return _ListIcon2.default;
	  }
	});
	Object.defineProperty(exports, "ListItem", {
	  enumerable: true,
	  get: function get() {
	    return _ListItem2.default;
	  }
	});
	Object.defineProperty(exports, "ListList", {
	  enumerable: true,
	  get: function get() {
	    return _ListList2.default;
	  }
	});
	Object.defineProperty(exports, "Loader", {
	  enumerable: true,
	  get: function get() {
	    return _Loader2.default;
	  }
	});
	Object.defineProperty(exports, "Placeholder", {
	  enumerable: true,
	  get: function get() {
	    return _Placeholder2.default;
	  }
	});
	Object.defineProperty(exports, "PlaceholderHeader", {
	  enumerable: true,
	  get: function get() {
	    return _PlaceholderHeader2.default;
	  }
	});
	Object.defineProperty(exports, "PlaceholderImage", {
	  enumerable: true,
	  get: function get() {
	    return _PlaceholderImage2.default;
	  }
	});
	Object.defineProperty(exports, "PlaceholderLine", {
	  enumerable: true,
	  get: function get() {
	    return _PlaceholderLine2.default;
	  }
	});
	Object.defineProperty(exports, "PlaceholderParagraph", {
	  enumerable: true,
	  get: function get() {
	    return _PlaceholderParagraph2.default;
	  }
	});
	Object.defineProperty(exports, "Rail", {
	  enumerable: true,
	  get: function get() {
	    return _Rail2.default;
	  }
	});
	Object.defineProperty(exports, "Reveal", {
	  enumerable: true,
	  get: function get() {
	    return _Reveal2.default;
	  }
	});
	Object.defineProperty(exports, "RevealContent", {
	  enumerable: true,
	  get: function get() {
	    return _RevealContent2.default;
	  }
	});
	Object.defineProperty(exports, "Segment", {
	  enumerable: true,
	  get: function get() {
	    return _Segment2.default;
	  }
	});
	Object.defineProperty(exports, "SegmentGroup", {
	  enumerable: true,
	  get: function get() {
	    return _SegmentGroup2.default;
	  }
	});
	Object.defineProperty(exports, "SegmentInline", {
	  enumerable: true,
	  get: function get() {
	    return _SegmentInline2.default;
	  }
	});
	Object.defineProperty(exports, "Step", {
	  enumerable: true,
	  get: function get() {
	    return _Step2.default;
	  }
	});
	Object.defineProperty(exports, "StepContent", {
	  enumerable: true,
	  get: function get() {
	    return _StepContent2.default;
	  }
	});
	Object.defineProperty(exports, "StepDescription", {
	  enumerable: true,
	  get: function get() {
	    return _StepDescription2.default;
	  }
	});
	Object.defineProperty(exports, "StepGroup", {
	  enumerable: true,
	  get: function get() {
	    return _StepGroup2.default;
	  }
	});
	Object.defineProperty(exports, "StepTitle", {
	  enumerable: true,
	  get: function get() {
	    return _StepTitle2.default;
	  }
	});
	Object.defineProperty(exports, "Accordion", {
	  enumerable: true,
	  get: function get() {
	    return _Accordion2.default;
	  }
	});
	Object.defineProperty(exports, "AccordionAccordion", {
	  enumerable: true,
	  get: function get() {
	    return _AccordionAccordion2.default;
	  }
	});
	Object.defineProperty(exports, "AccordionContent", {
	  enumerable: true,
	  get: function get() {
	    return _AccordionContent2.default;
	  }
	});
	Object.defineProperty(exports, "AccordionPanel", {
	  enumerable: true,
	  get: function get() {
	    return _AccordionPanel2.default;
	  }
	});
	Object.defineProperty(exports, "AccordionTitle", {
	  enumerable: true,
	  get: function get() {
	    return _AccordionTitle2.default;
	  }
	});
	Object.defineProperty(exports, "Checkbox", {
	  enumerable: true,
	  get: function get() {
	    return _Checkbox2.default;
	  }
	});
	Object.defineProperty(exports, "Dimmer", {
	  enumerable: true,
	  get: function get() {
	    return _Dimmer2.default;
	  }
	});
	Object.defineProperty(exports, "DimmerDimmable", {
	  enumerable: true,
	  get: function get() {
	    return _DimmerDimmable2.default;
	  }
	});
	Object.defineProperty(exports, "DimmerInner", {
	  enumerable: true,
	  get: function get() {
	    return _DimmerInner2.default;
	  }
	});
	Object.defineProperty(exports, "Dropdown", {
	  enumerable: true,
	  get: function get() {
	    return _Dropdown2.default;
	  }
	});
	Object.defineProperty(exports, "DropdownDivider", {
	  enumerable: true,
	  get: function get() {
	    return _DropdownDivider2.default;
	  }
	});
	Object.defineProperty(exports, "DropdownHeader", {
	  enumerable: true,
	  get: function get() {
	    return _DropdownHeader2.default;
	  }
	});
	Object.defineProperty(exports, "DropdownItem", {
	  enumerable: true,
	  get: function get() {
	    return _DropdownItem2.default;
	  }
	});
	Object.defineProperty(exports, "DropdownMenu", {
	  enumerable: true,
	  get: function get() {
	    return _DropdownMenu2.default;
	  }
	});
	Object.defineProperty(exports, "DropdownSearchInput", {
	  enumerable: true,
	  get: function get() {
	    return _DropdownSearchInput2.default;
	  }
	});
	Object.defineProperty(exports, "Embed", {
	  enumerable: true,
	  get: function get() {
	    return _Embed2.default;
	  }
	});
	Object.defineProperty(exports, "Modal", {
	  enumerable: true,
	  get: function get() {
	    return _Modal2.default;
	  }
	});
	Object.defineProperty(exports, "ModalActions", {
	  enumerable: true,
	  get: function get() {
	    return _ModalActions2.default;
	  }
	});
	Object.defineProperty(exports, "ModalContent", {
	  enumerable: true,
	  get: function get() {
	    return _ModalContent2.default;
	  }
	});
	Object.defineProperty(exports, "ModalDescription", {
	  enumerable: true,
	  get: function get() {
	    return _ModalDescription2.default;
	  }
	});
	Object.defineProperty(exports, "ModalHeader", {
	  enumerable: true,
	  get: function get() {
	    return _ModalHeader2.default;
	  }
	});
	Object.defineProperty(exports, "Popup", {
	  enumerable: true,
	  get: function get() {
	    return _Popup2.default;
	  }
	});
	Object.defineProperty(exports, "PopupContent", {
	  enumerable: true,
	  get: function get() {
	    return _PopupContent2.default;
	  }
	});
	Object.defineProperty(exports, "PopupHeader", {
	  enumerable: true,
	  get: function get() {
	    return _PopupHeader2.default;
	  }
	});
	Object.defineProperty(exports, "Progress", {
	  enumerable: true,
	  get: function get() {
	    return _Progress2.default;
	  }
	});
	Object.defineProperty(exports, "Rating", {
	  enumerable: true,
	  get: function get() {
	    return _Rating2.default;
	  }
	});
	Object.defineProperty(exports, "RatingIcon", {
	  enumerable: true,
	  get: function get() {
	    return _RatingIcon2.default;
	  }
	});
	Object.defineProperty(exports, "Search", {
	  enumerable: true,
	  get: function get() {
	    return _Search2.default;
	  }
	});
	Object.defineProperty(exports, "SearchCategory", {
	  enumerable: true,
	  get: function get() {
	    return _SearchCategory2.default;
	  }
	});
	Object.defineProperty(exports, "SearchResult", {
	  enumerable: true,
	  get: function get() {
	    return _SearchResult2.default;
	  }
	});
	Object.defineProperty(exports, "SearchResults", {
	  enumerable: true,
	  get: function get() {
	    return _SearchResults2.default;
	  }
	});
	Object.defineProperty(exports, "Sidebar", {
	  enumerable: true,
	  get: function get() {
	    return _Sidebar2.default;
	  }
	});
	Object.defineProperty(exports, "SidebarPushable", {
	  enumerable: true,
	  get: function get() {
	    return _SidebarPushable2.default;
	  }
	});
	Object.defineProperty(exports, "SidebarPusher", {
	  enumerable: true,
	  get: function get() {
	    return _SidebarPusher2.default;
	  }
	});
	Object.defineProperty(exports, "Sticky", {
	  enumerable: true,
	  get: function get() {
	    return _Sticky2.default;
	  }
	});
	Object.defineProperty(exports, "Tab", {
	  enumerable: true,
	  get: function get() {
	    return _Tab2.default;
	  }
	});
	Object.defineProperty(exports, "TabPane", {
	  enumerable: true,
	  get: function get() {
	    return _TabPane2.default;
	  }
	});
	Object.defineProperty(exports, "Transition", {
	  enumerable: true,
	  get: function get() {
	    return _Transition2.default;
	  }
	});
	Object.defineProperty(exports, "TransitionGroup", {
	  enumerable: true,
	  get: function get() {
	    return _TransitionGroup2.default;
	  }
	});
	Object.defineProperty(exports, "Advertisement", {
	  enumerable: true,
	  get: function get() {
	    return _Advertisement2.default;
	  }
	});
	Object.defineProperty(exports, "Card", {
	  enumerable: true,
	  get: function get() {
	    return _Card2.default;
	  }
	});
	Object.defineProperty(exports, "CardContent", {
	  enumerable: true,
	  get: function get() {
	    return _CardContent2.default;
	  }
	});
	Object.defineProperty(exports, "CardDescription", {
	  enumerable: true,
	  get: function get() {
	    return _CardDescription2.default;
	  }
	});
	Object.defineProperty(exports, "CardGroup", {
	  enumerable: true,
	  get: function get() {
	    return _CardGroup2.default;
	  }
	});
	Object.defineProperty(exports, "CardHeader", {
	  enumerable: true,
	  get: function get() {
	    return _CardHeader2.default;
	  }
	});
	Object.defineProperty(exports, "CardMeta", {
	  enumerable: true,
	  get: function get() {
	    return _CardMeta2.default;
	  }
	});
	Object.defineProperty(exports, "Comment", {
	  enumerable: true,
	  get: function get() {
	    return _Comment2.default;
	  }
	});
	Object.defineProperty(exports, "CommentAction", {
	  enumerable: true,
	  get: function get() {
	    return _CommentAction2.default;
	  }
	});
	Object.defineProperty(exports, "CommentActions", {
	  enumerable: true,
	  get: function get() {
	    return _CommentActions2.default;
	  }
	});
	Object.defineProperty(exports, "CommentAuthor", {
	  enumerable: true,
	  get: function get() {
	    return _CommentAuthor2.default;
	  }
	});
	Object.defineProperty(exports, "CommentAvatar", {
	  enumerable: true,
	  get: function get() {
	    return _CommentAvatar2.default;
	  }
	});
	Object.defineProperty(exports, "CommentContent", {
	  enumerable: true,
	  get: function get() {
	    return _CommentContent2.default;
	  }
	});
	Object.defineProperty(exports, "CommentGroup", {
	  enumerable: true,
	  get: function get() {
	    return _CommentGroup2.default;
	  }
	});
	Object.defineProperty(exports, "CommentMetadata", {
	  enumerable: true,
	  get: function get() {
	    return _CommentMetadata2.default;
	  }
	});
	Object.defineProperty(exports, "CommentText", {
	  enumerable: true,
	  get: function get() {
	    return _CommentText2.default;
	  }
	});
	Object.defineProperty(exports, "Feed", {
	  enumerable: true,
	  get: function get() {
	    return _Feed2.default;
	  }
	});
	Object.defineProperty(exports, "FeedContent", {
	  enumerable: true,
	  get: function get() {
	    return _FeedContent2.default;
	  }
	});
	Object.defineProperty(exports, "FeedDate", {
	  enumerable: true,
	  get: function get() {
	    return _FeedDate2.default;
	  }
	});
	Object.defineProperty(exports, "FeedEvent", {
	  enumerable: true,
	  get: function get() {
	    return _FeedEvent2.default;
	  }
	});
	Object.defineProperty(exports, "FeedExtra", {
	  enumerable: true,
	  get: function get() {
	    return _FeedExtra2.default;
	  }
	});
	Object.defineProperty(exports, "FeedLabel", {
	  enumerable: true,
	  get: function get() {
	    return _FeedLabel2.default;
	  }
	});
	Object.defineProperty(exports, "FeedLike", {
	  enumerable: true,
	  get: function get() {
	    return _FeedLike2.default;
	  }
	});
	Object.defineProperty(exports, "FeedMeta", {
	  enumerable: true,
	  get: function get() {
	    return _FeedMeta2.default;
	  }
	});
	Object.defineProperty(exports, "FeedSummary", {
	  enumerable: true,
	  get: function get() {
	    return _FeedSummary2.default;
	  }
	});
	Object.defineProperty(exports, "FeedUser", {
	  enumerable: true,
	  get: function get() {
	    return _FeedUser2.default;
	  }
	});
	Object.defineProperty(exports, "Item", {
	  enumerable: true,
	  get: function get() {
	    return _Item2.default;
	  }
	});
	Object.defineProperty(exports, "ItemContent", {
	  enumerable: true,
	  get: function get() {
	    return _ItemContent2.default;
	  }
	});
	Object.defineProperty(exports, "ItemDescription", {
	  enumerable: true,
	  get: function get() {
	    return _ItemDescription2.default;
	  }
	});
	Object.defineProperty(exports, "ItemExtra", {
	  enumerable: true,
	  get: function get() {
	    return _ItemExtra2.default;
	  }
	});
	Object.defineProperty(exports, "ItemGroup", {
	  enumerable: true,
	  get: function get() {
	    return _ItemGroup2.default;
	  }
	});
	Object.defineProperty(exports, "ItemHeader", {
	  enumerable: true,
	  get: function get() {
	    return _ItemHeader2.default;
	  }
	});
	Object.defineProperty(exports, "ItemImage", {
	  enumerable: true,
	  get: function get() {
	    return _ItemImage2.default;
	  }
	});
	Object.defineProperty(exports, "ItemMeta", {
	  enumerable: true,
	  get: function get() {
	    return _ItemMeta2.default;
	  }
	});
	Object.defineProperty(exports, "Statistic", {
	  enumerable: true,
	  get: function get() {
	    return _Statistic2.default;
	  }
	});
	Object.defineProperty(exports, "StatisticGroup", {
	  enumerable: true,
	  get: function get() {
	    return _StatisticGroup2.default;
	  }
	});
	Object.defineProperty(exports, "StatisticLabel", {
	  enumerable: true,
	  get: function get() {
	    return _StatisticLabel2.default;
	  }
	});
	Object.defineProperty(exports, "StatisticValue", {
	  enumerable: true,
	  get: function get() {
	    return _StatisticValue2.default;
	  }
	});

	var _Confirm2 = _interopRequireDefault(__webpack_require__(164));

	var _MountNode2 = _interopRequireDefault(__webpack_require__(548));

	var _Pagination2 = _interopRequireDefault(__webpack_require__(571));

	var _PaginationItem2 = _interopRequireDefault(__webpack_require__(589));

	var _Portal2 = _interopRequireDefault(__webpack_require__(528));

	var _PortalInner2 = _interopRequireDefault(__webpack_require__(533));

	var _Radio2 = _interopRequireDefault(__webpack_require__(590));

	var _Ref2 = _interopRequireDefault(__webpack_require__(531));

	var _Responsive2 = _interopRequireDefault(__webpack_require__(594));

	var _Select2 = _interopRequireDefault(__webpack_require__(597));

	var _TextArea2 = _interopRequireDefault(__webpack_require__(623));

	var _TransitionablePortal2 = _interopRequireDefault(__webpack_require__(625));

	var _Visibility2 = _interopRequireDefault(__webpack_require__(631));

	var _Breadcrumb2 = _interopRequireDefault(__webpack_require__(633));

	var _BreadcrumbDivider2 = _interopRequireDefault(__webpack_require__(635));

	var _BreadcrumbSection2 = _interopRequireDefault(__webpack_require__(636));

	var _Form2 = _interopRequireDefault(__webpack_require__(637));

	var _FormButton2 = _interopRequireDefault(__webpack_require__(639));

	var _FormCheckbox2 = _interopRequireDefault(__webpack_require__(641));

	var _FormDropdown2 = _interopRequireDefault(__webpack_require__(642));

	var _FormField2 = _interopRequireDefault(__webpack_require__(640));

	var _FormGroup2 = _interopRequireDefault(__webpack_require__(643));

	var _FormInput2 = _interopRequireDefault(__webpack_require__(644));

	var _FormRadio2 = _interopRequireDefault(__webpack_require__(647));

	var _FormSelect2 = _interopRequireDefault(__webpack_require__(648));

	var _FormTextArea2 = _interopRequireDefault(__webpack_require__(649));

	var _Grid2 = _interopRequireDefault(__webpack_require__(650));

	var _GridColumn2 = _interopRequireDefault(__webpack_require__(652));

	var _GridRow2 = _interopRequireDefault(__webpack_require__(653));

	var _Menu2 = _interopRequireDefault(__webpack_require__(573));

	var _MenuHeader2 = _interopRequireDefault(__webpack_require__(575));

	var _MenuItem2 = _interopRequireDefault(__webpack_require__(576));

	var _MenuMenu2 = _interopRequireDefault(__webpack_require__(588));

	var _Message2 = _interopRequireDefault(__webpack_require__(654));

	var _MessageContent2 = _interopRequireDefault(__webpack_require__(656));

	var _MessageHeader2 = _interopRequireDefault(__webpack_require__(657));

	var _MessageItem2 = _interopRequireDefault(__webpack_require__(659));

	var _MessageList2 = _interopRequireDefault(__webpack_require__(658));

	var _Table2 = _interopRequireDefault(__webpack_require__(660));

	var _TableBody2 = _interopRequireDefault(__webpack_require__(662));

	var _TableCell2 = _interopRequireDefault(__webpack_require__(663));

	var _TableFooter2 = _interopRequireDefault(__webpack_require__(664));

	var _TableHeader2 = _interopRequireDefault(__webpack_require__(665));

	var _TableHeaderCell2 = _interopRequireDefault(__webpack_require__(666));

	var _TableRow2 = _interopRequireDefault(__webpack_require__(667));

	var _Button2 = _interopRequireDefault(__webpack_require__(520));

	var _ButtonContent2 = _interopRequireDefault(__webpack_require__(539));

	var _ButtonGroup2 = _interopRequireDefault(__webpack_require__(540));

	var _ButtonOr2 = _interopRequireDefault(__webpack_require__(541));

	var _Container2 = _interopRequireDefault(__webpack_require__(668));

	var _Divider2 = _interopRequireDefault(__webpack_require__(670));

	var _Flag2 = _interopRequireDefault(__webpack_require__(617));

	var _Header2 = _interopRequireDefault(__webpack_require__(672));

	var _HeaderContent2 = _interopRequireDefault(__webpack_require__(675));

	var _HeaderSubheader2 = _interopRequireDefault(__webpack_require__(674));

	var _Icon2 = _interopRequireDefault(__webpack_require__(547));

	var _IconGroup2 = _interopRequireDefault(__webpack_require__(523));

	var _Image2 = _interopRequireDefault(__webpack_require__(619));

	var _ImageGroup2 = _interopRequireDefault(__webpack_require__(536));

	var _Input2 = _interopRequireDefault(__webpack_require__(645));

	var _Label2 = _interopRequireDefault(__webpack_require__(614));

	var _LabelDetail2 = _interopRequireDefault(__webpack_require__(537));

	var _LabelGroup2 = _interopRequireDefault(__webpack_require__(538));

	var _List2 = _interopRequireDefault(__webpack_require__(676));

	var _ListContent2 = _interopRequireDefault(__webpack_require__(678));

	var _ListDescription2 = _interopRequireDefault(__webpack_require__(679));

	var _ListHeader2 = _interopRequireDefault(__webpack_require__(680));

	var _ListIcon2 = _interopRequireDefault(__webpack_require__(681));

	var _ListItem2 = _interopRequireDefault(__webpack_require__(682));

	var _ListList2 = _interopRequireDefault(__webpack_require__(683));

	var _Loader2 = _interopRequireDefault(__webpack_require__(684));

	var _Placeholder2 = _interopRequireDefault(__webpack_require__(686));

	var _PlaceholderHeader2 = _interopRequireDefault(__webpack_require__(688));

	var _PlaceholderImage2 = _interopRequireDefault(__webpack_require__(689));

	var _PlaceholderLine2 = _interopRequireDefault(__webpack_require__(690));

	var _PlaceholderParagraph2 = _interopRequireDefault(__webpack_require__(691));

	var _Rail2 = _interopRequireDefault(__webpack_require__(692));

	var _Reveal2 = _interopRequireDefault(__webpack_require__(694));

	var _RevealContent2 = _interopRequireDefault(__webpack_require__(696));

	var _Segment2 = _interopRequireDefault(__webpack_require__(697));

	var _SegmentGroup2 = _interopRequireDefault(__webpack_require__(699));

	var _SegmentInline2 = _interopRequireDefault(__webpack_require__(700));

	var _Step2 = _interopRequireDefault(__webpack_require__(701));

	var _StepContent2 = _interopRequireDefault(__webpack_require__(703));

	var _StepDescription2 = _interopRequireDefault(__webpack_require__(704));

	var _StepGroup2 = _interopRequireDefault(__webpack_require__(706));

	var _StepTitle2 = _interopRequireDefault(__webpack_require__(705));

	var _Accordion2 = _interopRequireDefault(__webpack_require__(708));

	var _AccordionAccordion2 = _interopRequireDefault(__webpack_require__(709));

	var _AccordionContent2 = _interopRequireDefault(__webpack_require__(712));

	var _AccordionPanel2 = _interopRequireDefault(__webpack_require__(710));

	var _AccordionTitle2 = _interopRequireDefault(__webpack_require__(711));

	var _Checkbox2 = _interopRequireDefault(__webpack_require__(592));

	var _Dimmer2 = _interopRequireDefault(__webpack_require__(526));

	var _DimmerDimmable2 = _interopRequireDefault(__webpack_require__(534));

	var _DimmerInner2 = _interopRequireDefault(__webpack_require__(535));

	var _Dropdown2 = _interopRequireDefault(__webpack_require__(599));

	var _DropdownDivider2 = _interopRequireDefault(__webpack_require__(615));

	var _DropdownHeader2 = _interopRequireDefault(__webpack_require__(620));

	var _DropdownItem2 = _interopRequireDefault(__webpack_require__(616));

	var _DropdownMenu2 = _interopRequireDefault(__webpack_require__(621));

	var _DropdownSearchInput2 = _interopRequireDefault(__webpack_require__(622));

	var _Embed2 = _interopRequireDefault(__webpack_require__(713));

	var _Modal2 = _interopRequireDefault(__webpack_require__(542));

	var _ModalActions2 = _interopRequireDefault(__webpack_require__(569));

	var _ModalContent2 = _interopRequireDefault(__webpack_require__(568));

	var _ModalDescription2 = _interopRequireDefault(__webpack_require__(570));

	var _ModalHeader2 = _interopRequireDefault(__webpack_require__(567));

	var _Popup2 = _interopRequireDefault(__webpack_require__(715));

	var _PopupContent2 = _interopRequireDefault(__webpack_require__(719));

	var _PopupHeader2 = _interopRequireDefault(__webpack_require__(720));

	var _Progress2 = _interopRequireDefault(__webpack_require__(721));

	var _Rating2 = _interopRequireDefault(__webpack_require__(726));

	var _RatingIcon2 = _interopRequireDefault(__webpack_require__(729));

	var _Search2 = _interopRequireDefault(__webpack_require__(730));

	var _SearchCategory2 = _interopRequireDefault(__webpack_require__(735));

	var _SearchResult2 = _interopRequireDefault(__webpack_require__(736));

	var _SearchResults2 = _interopRequireDefault(__webpack_require__(737));

	var _Sidebar2 = _interopRequireDefault(__webpack_require__(738));

	var _SidebarPushable2 = _interopRequireDefault(__webpack_require__(740));

	var _SidebarPusher2 = _interopRequireDefault(__webpack_require__(741));

	var _Sticky2 = _interopRequireDefault(__webpack_require__(742));

	var _Tab2 = _interopRequireDefault(__webpack_require__(744));

	var _TabPane2 = _interopRequireDefault(__webpack_require__(746));

	var _Transition2 = _interopRequireDefault(__webpack_require__(627));

	var _TransitionGroup2 = _interopRequireDefault(__webpack_require__(629));

	var _Advertisement2 = _interopRequireDefault(__webpack_require__(747));

	var _Card2 = _interopRequireDefault(__webpack_require__(749));

	var _CardContent2 = _interopRequireDefault(__webpack_require__(750));

	var _CardDescription2 = _interopRequireDefault(__webpack_require__(751));

	var _CardGroup2 = _interopRequireDefault(__webpack_require__(754));

	var _CardHeader2 = _interopRequireDefault(__webpack_require__(752));

	var _CardMeta2 = _interopRequireDefault(__webpack_require__(753));

	var _Comment2 = _interopRequireDefault(__webpack_require__(755));

	var _CommentAction2 = _interopRequireDefault(__webpack_require__(757));

	var _CommentActions2 = _interopRequireDefault(__webpack_require__(758));

	var _CommentAuthor2 = _interopRequireDefault(__webpack_require__(759));

	var _CommentAvatar2 = _interopRequireDefault(__webpack_require__(760));

	var _CommentContent2 = _interopRequireDefault(__webpack_require__(761));

	var _CommentGroup2 = _interopRequireDefault(__webpack_require__(762));

	var _CommentMetadata2 = _interopRequireDefault(__webpack_require__(763));

	var _CommentText2 = _interopRequireDefault(__webpack_require__(764));

	var _Feed2 = _interopRequireDefault(__webpack_require__(765));

	var _FeedContent2 = _interopRequireDefault(__webpack_require__(767));

	var _FeedDate2 = _interopRequireDefault(__webpack_require__(768));

	var _FeedEvent2 = _interopRequireDefault(__webpack_require__(774));

	var _FeedExtra2 = _interopRequireDefault(__webpack_require__(769));

	var _FeedLabel2 = _interopRequireDefault(__webpack_require__(775));

	var _FeedLike2 = _interopRequireDefault(__webpack_require__(771));

	var _FeedMeta2 = _interopRequireDefault(__webpack_require__(770));

	var _FeedSummary2 = _interopRequireDefault(__webpack_require__(772));

	var _FeedUser2 = _interopRequireDefault(__webpack_require__(773));

	var _Item2 = _interopRequireDefault(__webpack_require__(776));

	var _ItemContent2 = _interopRequireDefault(__webpack_require__(778));

	var _ItemDescription2 = _interopRequireDefault(__webpack_require__(780));

	var _ItemExtra2 = _interopRequireDefault(__webpack_require__(781));

	var _ItemGroup2 = _interopRequireDefault(__webpack_require__(783));

	var _ItemHeader2 = _interopRequireDefault(__webpack_require__(779));

	var _ItemImage2 = _interopRequireDefault(__webpack_require__(784));

	var _ItemMeta2 = _interopRequireDefault(__webpack_require__(782));

	var _Statistic2 = _interopRequireDefault(__webpack_require__(785));

	var _StatisticGroup2 = _interopRequireDefault(__webpack_require__(787));

	var _StatisticLabel2 = _interopRequireDefault(__webpack_require__(788));

	var _StatisticValue2 = _interopRequireDefault(__webpack_require__(789));

/***/ }),
/* 163 */
/***/ (function(module, exports) {

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    default: obj
	  };
	}

	module.exports = _interopRequireDefault;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Confirm.default;
	  }
	});

	var _Confirm = _interopRequireDefault(__webpack_require__(165));

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _has2 = _interopRequireDefault(__webpack_require__(177));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Button = _interopRequireDefault(__webpack_require__(519));

	var _Modal = _interopRequireDefault(__webpack_require__(542));

	/**
	 * A Confirm modal gives the user a choice to confirm or cancel an action/
	 * @see Modal
	 */
	var Confirm =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Confirm, _Component);

	  function Confirm() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Confirm);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Confirm)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleCancel", function (e) {
	      (0, _invoke2.default)(_this.props, 'onCancel', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleCancelOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, buttonProps) {
	          (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);

	          _this.handleCancel(e);
	        }
	      };
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleConfirmOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, buttonProps) {
	          (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);
	          (0, _invoke2.default)(_this.props, 'onConfirm', e, _this.props);
	        }
	      };
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Confirm, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          cancelButton = _this$props.cancelButton,
	          confirmButton = _this$props.confirmButton,
	          content = _this$props.content,
	          header = _this$props.header,
	          open = _this$props.open,
	          size = _this$props.size;
	      var rest = (0, _lib.getUnhandledProps)(Confirm, this.props); // `open` is auto controlled by the Modal
	      // It cannot be present (even undefined) with `defaultOpen`
	      // only apply it if the user provided an open prop

	      var openProp = {};
	      if ((0, _has2.default)(this.props, 'open')) openProp.open = open;
	      return _react.default.createElement(_Modal.default, (0, _extends2.default)({}, rest, openProp, {
	        size: size,
	        onClose: this.handleCancel
	      }), _Modal.default.Header.create(header, {
	        autoGenerateKey: false
	      }), _Modal.default.Content.create(content, {
	        autoGenerateKey: false
	      }), _react.default.createElement(_Modal.default.Actions, null, _Button.default.create(cancelButton, {
	        autoGenerateKey: false,
	        overrideProps: this.handleCancelOverrides
	      }), _Button.default.create(confirmButton, {
	        autoGenerateKey: false,
	        defaultProps: {
	          primary: true
	        },
	        overrideProps: this.handleConfirmOverrides
	      })));
	    }
	  }]);
	  return Confirm;
	}(_react.Component);

	(0, _defineProperty2.default)(Confirm, "defaultProps", {
	  cancelButton: 'Cancel',
	  confirmButton: 'OK',
	  content: 'Are you sure?',
	  size: 'small'
	});
	(0, _defineProperty2.default)(Confirm, "handledProps", ["cancelButton", "confirmButton", "content", "header", "onCancel", "onConfirm", "open", "size"]);
	Confirm.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** The cancel button text. */
	  cancelButton: _lib.customPropTypes.itemShorthand,

	  /** The OK button text. */
	  confirmButton: _lib.customPropTypes.itemShorthand,

	  /** The ModalContent text. */
	  content: _lib.customPropTypes.itemShorthand,

	  /** The ModalHeader text. */
	  header: _lib.customPropTypes.itemShorthand,

	  /**
	   * Called when the Modal is closed without clicking confirm.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onCancel: _propTypes.default.func,

	  /**
	   * Called when the OK button is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onConfirm: _propTypes.default.func,

	  /** Whether or not the modal is visible. */
	  open: _propTypes.default.bool,

	  /** A Confirm can vary in size */
	  size: _propTypes.default.oneOf(['mini', 'tiny', 'small', 'large', 'fullscreen'])
	} : {};
	var _default = Confirm;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 166 */
/***/ (function(module, exports) {

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

	          if (desc.get || desc.set) {
	            Object.defineProperty(newObj, key, desc);
	          } else {
	            newObj[key] = obj[key];
	          }
	        }
	      }
	    }

	    newObj.default = obj;
	    return newObj;
	  }
	}

	module.exports = _interopRequireWildcard;

/***/ }),
/* 167 */
/***/ (function(module, exports) {

	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;

/***/ }),
/* 168 */
/***/ (function(module, exports) {

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	module.exports = _classCallCheck;

/***/ }),
/* 169 */
/***/ (function(module, exports) {

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	module.exports = _createClass;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	var _typeof = __webpack_require__(171);

	var assertThisInitialized = __webpack_require__(172);

	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return assertThisInitialized(self);
	}

	module.exports = _possibleConstructorReturn;

/***/ }),
/* 171 */
/***/ (function(module, exports) {

	function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

	function _typeof(obj) {
	  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
	    module.exports = _typeof = function _typeof(obj) {
	      return _typeof2(obj);
	    };
	  } else {
	    module.exports = _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
	    };
	  }

	  return _typeof(obj);
	}

	module.exports = _typeof;

/***/ }),
/* 172 */
/***/ (function(module, exports) {

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	module.exports = _assertThisInitialized;

/***/ }),
/* 173 */
/***/ (function(module, exports) {

	function _getPrototypeOf(o) {
	  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	module.exports = _getPrototypeOf;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	var setPrototypeOf = __webpack_require__(175);

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) setPrototypeOf(subClass, superClass);
	}

	module.exports = _inherits;

/***/ }),
/* 175 */
/***/ (function(module, exports) {

	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	module.exports = _setPrototypeOf;

/***/ }),
/* 176 */
/***/ (function(module, exports) {

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	module.exports = _defineProperty;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	var baseHas = __webpack_require__(178),
	    hasPath = __webpack_require__(179);

	/**
	 * Checks if `path` is a direct property of `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': 2 } };
	 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b');
	 * // => true
	 *
	 * _.has(object, ['a', 'b']);
	 * // => true
	 *
	 * _.has(other, 'a');
	 * // => false
	 */
	function has(object, path) {
	  return object != null && hasPath(object, path, baseHas);
	}

	module.exports = has;


/***/ }),
/* 178 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHas(object, key) {
	  return object != null && hasOwnProperty.call(object, key);
	}

	module.exports = baseHas;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(180),
	    isArguments = __webpack_require__(222),
	    isArray = __webpack_require__(181),
	    isIndex = __webpack_require__(224),
	    isLength = __webpack_require__(225),
	    toKey = __webpack_require__(226);

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = castPath(path, object);

	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex(key, length) &&
	    (isArray(object) || isArguments(object));
	}

	module.exports = hasPath;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(181),
	    isKey = __webpack_require__(182),
	    stringToPath = __webpack_require__(184),
	    toString = __webpack_require__(219);

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray(value)) {
	    return value;
	  }
	  return isKey(value, object) ? [value] : stringToPath(toString(value));
	}

	module.exports = castPath;


/***/ }),
/* 181 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(181),
	    isSymbol = __webpack_require__(183);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	module.exports = isKey;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(34),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}

	module.exports = isSymbol;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	var memoizeCapped = __webpack_require__(185);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function(string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	module.exports = stringToPath;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(186);

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	module.exports = memoizeCapped;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(187);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = MapCache;

	module.exports = memoize;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(188),
	    mapCacheDelete = __webpack_require__(213),
	    mapCacheGet = __webpack_require__(216),
	    mapCacheHas = __webpack_require__(217),
	    mapCacheSet = __webpack_require__(218);

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	module.exports = MapCache;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(189),
	    ListCache = __webpack_require__(204),
	    Map = __webpack_require__(212);

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	module.exports = mapCacheClear;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(190),
	    hashDelete = __webpack_require__(200),
	    hashGet = __webpack_require__(201),
	    hashHas = __webpack_require__(202),
	    hashSet = __webpack_require__(203);

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	module.exports = Hash;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(191);

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	module.exports = hashClear;


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(192);

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	module.exports = nativeCreate;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(193),
	    getValue = __webpack_require__(199);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(194),
	    isMasked = __webpack_require__(196),
	    isObject = __webpack_require__(195),
	    toSource = __webpack_require__(198);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	module.exports = baseIsNative;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(34),
	    isObject = __webpack_require__(195);

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	module.exports = isFunction;


/***/ }),
/* 195 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(197);

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	module.exports = isMasked;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(36);

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	module.exports = coreJsData;


/***/ }),
/* 198 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	module.exports = toSource;


/***/ }),
/* 199 */
/***/ (function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	module.exports = getValue;


/***/ }),
/* 200 */
/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = hashDelete;


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(191);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	module.exports = hashGet;


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(191);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	}

	module.exports = hashHas;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(191);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	module.exports = hashSet;


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(205),
	    listCacheDelete = __webpack_require__(206),
	    listCacheGet = __webpack_require__(209),
	    listCacheHas = __webpack_require__(210),
	    listCacheSet = __webpack_require__(211);

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	module.exports = ListCache;


/***/ }),
/* 205 */
/***/ (function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	module.exports = listCacheClear;


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(207);

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	module.exports = listCacheDelete;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(208);

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	module.exports = assocIndexOf;


/***/ }),
/* 208 */
/***/ (function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	module.exports = eq;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(207);

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	module.exports = listCacheGet;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(207);

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	module.exports = listCacheHas;


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(207);

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	module.exports = listCacheSet;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(192),
	    root = __webpack_require__(36);

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	module.exports = Map;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(214);

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = mapCacheDelete;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(215);

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	module.exports = getMapData;


/***/ }),
/* 215 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	module.exports = isKeyable;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(214);

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	module.exports = mapCacheGet;


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(214);

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	module.exports = mapCacheHas;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(214);

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	module.exports = mapCacheSet;


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(220);

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	module.exports = toString;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(35),
	    arrayMap = __webpack_require__(221),
	    isArray = __webpack_require__(181),
	    isSymbol = __webpack_require__(183);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = baseToString;


/***/ }),
/* 221 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsArguments = __webpack_require__(223),
	    isObjectLike = __webpack_require__(42);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	module.exports = isArguments;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(34),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}

	module.exports = baseIsArguments;


/***/ }),
/* 224 */
/***/ (function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	module.exports = isIndex;


/***/ }),
/* 225 */
/***/ (function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(183);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = toKey;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	var baseInvoke = __webpack_require__(228),
	    baseRest = __webpack_require__(234);

	/**
	 * Invokes the method at `path` of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the method to invoke.
	 * @param {...*} [args] The arguments to invoke the method with.
	 * @returns {*} Returns the result of the invoked method.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	 *
	 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	 * // => [2, 3]
	 */
	var invoke = baseRest(baseInvoke);

	module.exports = invoke;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(229),
	    castPath = __webpack_require__(180),
	    last = __webpack_require__(230),
	    parent = __webpack_require__(231),
	    toKey = __webpack_require__(226);

	/**
	 * The base implementation of `_.invoke` without support for individual
	 * method arguments.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the method to invoke.
	 * @param {Array} args The arguments to invoke the method with.
	 * @returns {*} Returns the result of the invoked method.
	 */
	function baseInvoke(object, path, args) {
	  path = castPath(path, object);
	  object = parent(object, path);
	  var func = object == null ? object : object[toKey(last(path))];
	  return func == null ? undefined : apply(func, object, args);
	}

	module.exports = baseInvoke;


/***/ }),
/* 229 */
/***/ (function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	module.exports = apply;


/***/ }),
/* 230 */
/***/ (function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(232),
	    baseSlice = __webpack_require__(233);

	/**
	 * Gets the parent value at `path` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path to get the parent value of.
	 * @returns {*} Returns the parent value.
	 */
	function parent(object, path) {
	  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	}

	module.exports = parent;


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(180),
	    toKey = __webpack_require__(226);

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ }),
/* 233 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(235),
	    overRest = __webpack_require__(236),
	    setToString = __webpack_require__(237);

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}

	module.exports = baseRest;


/***/ }),
/* 235 */
/***/ (function(module, exports) {

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(229);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	module.exports = overRest;


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSetToString = __webpack_require__(238),
	    shortOut = __webpack_require__(241);

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);

	module.exports = setToString;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(239),
	    defineProperty = __webpack_require__(240),
	    identity = __webpack_require__(235);

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity : function(func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	module.exports = baseSetToString;


/***/ }),
/* 239 */
/***/ (function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	module.exports = constant;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(192);

	var defineProperty = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	module.exports = defineProperty;


/***/ }),
/* 241 */
/***/ (function(module, exports) {

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	module.exports = shortOut;


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _exportNames = {
	  AutoControlledComponent: true,
	  getChildMapping: true,
	  mergeChildMappings: true,
	  childrenUtils: true,
	  useKeyOnly: true,
	  useKeyOrValueAndKey: true,
	  useValueAndKey: true,
	  useMultipleProp: true,
	  useTextAlignProp: true,
	  useVerticalAlignProp: true,
	  useWidthProp: true,
	  customPropTypes: true,
	  debug: true,
	  makeDebugger: true,
	  eventStack: true,
	  getUnhandledProps: true,
	  getElementType: true,
	  handleRef: true,
	  htmlInputAttrs: true,
	  htmlInputEvents: true,
	  htmlInputProps: true,
	  htmlImageProps: true,
	  partitionHTMLProps: true,
	  isBrowser: true,
	  doesNodeContainClick: true,
	  leven: true,
	  createPaginationItems: true,
	  SUI: true,
	  numberToWordMap: true,
	  numberToWord: true,
	  normalizeOffset: true,
	  normalizeTransitionDuration: true,
	  objectDiff: true
	};
	Object.defineProperty(exports, "AutoControlledComponent", {
	  enumerable: true,
	  get: function get() {
	    return _AutoControlledComponent2.default;
	  }
	});
	Object.defineProperty(exports, "getChildMapping", {
	  enumerable: true,
	  get: function get() {
	    return _childMapping.getChildMapping;
	  }
	});
	Object.defineProperty(exports, "mergeChildMappings", {
	  enumerable: true,
	  get: function get() {
	    return _childMapping.mergeChildMappings;
	  }
	});
	Object.defineProperty(exports, "useKeyOnly", {
	  enumerable: true,
	  get: function get() {
	    return _classNameBuilders.useKeyOnly;
	  }
	});
	Object.defineProperty(exports, "useKeyOrValueAndKey", {
	  enumerable: true,
	  get: function get() {
	    return _classNameBuilders.useKeyOrValueAndKey;
	  }
	});
	Object.defineProperty(exports, "useValueAndKey", {
	  enumerable: true,
	  get: function get() {
	    return _classNameBuilders.useValueAndKey;
	  }
	});
	Object.defineProperty(exports, "useMultipleProp", {
	  enumerable: true,
	  get: function get() {
	    return _classNameBuilders.useMultipleProp;
	  }
	});
	Object.defineProperty(exports, "useTextAlignProp", {
	  enumerable: true,
	  get: function get() {
	    return _classNameBuilders.useTextAlignProp;
	  }
	});
	Object.defineProperty(exports, "useVerticalAlignProp", {
	  enumerable: true,
	  get: function get() {
	    return _classNameBuilders.useVerticalAlignProp;
	  }
	});
	Object.defineProperty(exports, "useWidthProp", {
	  enumerable: true,
	  get: function get() {
	    return _classNameBuilders.useWidthProp;
	  }
	});
	Object.defineProperty(exports, "debug", {
	  enumerable: true,
	  get: function get() {
	    return _debug.debug;
	  }
	});
	Object.defineProperty(exports, "makeDebugger", {
	  enumerable: true,
	  get: function get() {
	    return _debug.makeDebugger;
	  }
	});
	Object.defineProperty(exports, "eventStack", {
	  enumerable: true,
	  get: function get() {
	    return _eventStack2.default;
	  }
	});
	Object.defineProperty(exports, "getUnhandledProps", {
	  enumerable: true,
	  get: function get() {
	    return _getUnhandledProps2.default;
	  }
	});
	Object.defineProperty(exports, "getElementType", {
	  enumerable: true,
	  get: function get() {
	    return _getElementType2.default;
	  }
	});
	Object.defineProperty(exports, "handleRef", {
	  enumerable: true,
	  get: function get() {
	    return _handleRef2.default;
	  }
	});
	Object.defineProperty(exports, "htmlInputAttrs", {
	  enumerable: true,
	  get: function get() {
	    return _htmlPropsUtils.htmlInputAttrs;
	  }
	});
	Object.defineProperty(exports, "htmlInputEvents", {
	  enumerable: true,
	  get: function get() {
	    return _htmlPropsUtils.htmlInputEvents;
	  }
	});
	Object.defineProperty(exports, "htmlInputProps", {
	  enumerable: true,
	  get: function get() {
	    return _htmlPropsUtils.htmlInputProps;
	  }
	});
	Object.defineProperty(exports, "htmlImageProps", {
	  enumerable: true,
	  get: function get() {
	    return _htmlPropsUtils.htmlImageProps;
	  }
	});
	Object.defineProperty(exports, "partitionHTMLProps", {
	  enumerable: true,
	  get: function get() {
	    return _htmlPropsUtils.partitionHTMLProps;
	  }
	});
	Object.defineProperty(exports, "isBrowser", {
	  enumerable: true,
	  get: function get() {
	    return _isBrowser2.default;
	  }
	});
	Object.defineProperty(exports, "doesNodeContainClick", {
	  enumerable: true,
	  get: function get() {
	    return _doesNodeContainClick2.default;
	  }
	});
	Object.defineProperty(exports, "leven", {
	  enumerable: true,
	  get: function get() {
	    return _leven2.default;
	  }
	});
	Object.defineProperty(exports, "createPaginationItems", {
	  enumerable: true,
	  get: function get() {
	    return _createPaginationItems2.default;
	  }
	});
	Object.defineProperty(exports, "numberToWordMap", {
	  enumerable: true,
	  get: function get() {
	    return _numberToWord.numberToWordMap;
	  }
	});
	Object.defineProperty(exports, "numberToWord", {
	  enumerable: true,
	  get: function get() {
	    return _numberToWord.numberToWord;
	  }
	});
	Object.defineProperty(exports, "normalizeOffset", {
	  enumerable: true,
	  get: function get() {
	    return _normalizeOffset2.default;
	  }
	});
	Object.defineProperty(exports, "normalizeTransitionDuration", {
	  enumerable: true,
	  get: function get() {
	    return _normalizeTransitionDuration2.default;
	  }
	});
	Object.defineProperty(exports, "objectDiff", {
	  enumerable: true,
	  get: function get() {
	    return _objectDiff2.default;
	  }
	});
	exports.SUI = exports.customPropTypes = exports.childrenUtils = void 0;

	var _AutoControlledComponent2 = _interopRequireDefault(__webpack_require__(243));

	var _childMapping = __webpack_require__(333);

	var _childrenUtils = _interopRequireWildcard(__webpack_require__(343));

	exports.childrenUtils = _childrenUtils;

	var _classNameBuilders = __webpack_require__(350);

	var _customPropTypes = _interopRequireWildcard(__webpack_require__(352));

	exports.customPropTypes = _customPropTypes;

	var _debug = __webpack_require__(477);

	var _eventStack2 = _interopRequireDefault(__webpack_require__(479));

	var _factories = __webpack_require__(484);

	Object.keys(_factories).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _factories[key];
	    }
	  });
	});

	var _getUnhandledProps2 = _interopRequireDefault(__webpack_require__(492));

	var _getElementType2 = _interopRequireDefault(__webpack_require__(493));

	var _handleRef2 = _interopRequireDefault(__webpack_require__(494));

	var _htmlPropsUtils = __webpack_require__(495);

	var _isBrowser2 = _interopRequireDefault(__webpack_require__(478));

	var _doesNodeContainClick2 = _interopRequireDefault(__webpack_require__(499));

	var _leven2 = _interopRequireDefault(__webpack_require__(476));

	var _createPaginationItems2 = _interopRequireDefault(__webpack_require__(504));

	var _SUI = _interopRequireWildcard(__webpack_require__(513));

	exports.SUI = _SUI;

	var _numberToWord = __webpack_require__(351);

	var _normalizeOffset2 = _interopRequireDefault(__webpack_require__(514));

	var _normalizeTransitionDuration2 = _interopRequireDefault(__webpack_require__(515));

	var _objectDiff2 = _interopRequireDefault(__webpack_require__(516));

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.getAutoControlledStateValue = void 0;

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _difference2 = _interopRequireDefault(__webpack_require__(245));

	var _isUndefined2 = _interopRequireDefault(__webpack_require__(263));

	var _startsWith2 = _interopRequireDefault(__webpack_require__(264));

	var _filter2 = _interopRequireDefault(__webpack_require__(269));

	var _isEmpty2 = _interopRequireDefault(__webpack_require__(325));

	var _keys2 = _interopRequireDefault(__webpack_require__(276));

	var _intersection2 = _interopRequireDefault(__webpack_require__(326));

	var _has2 = _interopRequireDefault(__webpack_require__(177));

	var _each2 = _interopRequireDefault(__webpack_require__(329));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _react = __webpack_require__(4);

	var getDefaultPropName = function getDefaultPropName(prop) {
	  return "default".concat(prop[0].toUpperCase() + prop.slice(1));
	};
	/**
	 * Return the auto controlled state value for a give prop. The initial value is chosen in this order:
	 *  - regular props
	 *  - then, default props
	 *  - then, initial state
	 *  - then, `checked` defaults to false
	 *  - then, `value` defaults to '' or [] if props.multiple
	 *  - else, undefined
	 *
	 *  @param {string} propName A prop name
	 *  @param {object} [props] A props object
	 *  @param {object} [state] A state object
	 *  @param {boolean} [includeDefaults=false] Whether or not to heed the default props or initial state
	 */


	var getAutoControlledStateValue = function getAutoControlledStateValue(propName, props, state) {
	  var includeDefaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	  // regular props
	  var propValue = props[propName];
	  if (propValue !== undefined) return propValue;

	  if (includeDefaults) {
	    // defaultProps
	    var defaultProp = props[getDefaultPropName(propName)];
	    if (defaultProp !== undefined) return defaultProp; // initial state - state may be null or undefined

	    if (state) {
	      var initialState = state[propName];
	      if (initialState !== undefined) return initialState;
	    }
	  } // React doesn't allow changing from uncontrolled to controlled components,
	  // default checked/value if they were not present.


	  if (propName === 'checked') return false;
	  if (propName === 'value') return props.multiple ? [] : ''; // otherwise, undefined
	};

	exports.getAutoControlledStateValue = getAutoControlledStateValue;

	var AutoControlledComponent =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(AutoControlledComponent, _Component);

	  function AutoControlledComponent() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, AutoControlledComponent);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(AutoControlledComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "trySetState", function (maybeState, state) {
	      var autoControlledProps = _this.constructor.autoControlledProps;

	      if (process.env.NODE_ENV !== 'production') {
	        var name = _this.constructor.name; // warn about failed attempts to setState for keys not listed in autoControlledProps

	        var illegalKeys = (0, _difference2.default)((0, _keys2.default)(maybeState), autoControlledProps);

	        if (!(0, _isEmpty2.default)(illegalKeys)) {
	          console.error(["".concat(name, " called trySetState() with controlled props: \"").concat(illegalKeys, "\"."), 'State will not be set.', 'Only props in static autoControlledProps will be set on state.'].join(' '));
	        }
	      }

	      var newState = Object.keys(maybeState).reduce(function (acc, prop) {
	        // ignore props defined by the parent
	        if (_this.props[prop] !== undefined) return acc; // ignore props not listed in auto controlled props

	        if (autoControlledProps.indexOf(prop) === -1) return acc;
	        acc[prop] = maybeState[prop];
	        return acc;
	      }, {});
	      if (state) newState = (0, _objectSpread2.default)({}, newState, state);
	      if (Object.keys(newState).length > 0) _this.setState(newState);
	    });
	    var _autoControlledProps = _this.constructor.autoControlledProps;

	    var _state = (0, _invoke2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), 'getInitialAutoControlledState', _this.props) || {};

	    if (process.env.NODE_ENV !== 'production') {
	      var _this$constructor = _this.constructor,
	          defaultProps = _this$constructor.defaultProps,
	          name = _this$constructor.name,
	          propTypes = _this$constructor.propTypes; // require static autoControlledProps

	      if (!_autoControlledProps) {
	        console.error("Auto controlled ".concat(name, " must specify a static autoControlledProps array."));
	      } // require propTypes


	      (0, _each2.default)(_autoControlledProps, function (prop) {
	        var defaultProp = getDefaultPropName(prop); // regular prop

	        if (!(0, _has2.default)(propTypes, defaultProp)) {
	          console.error("".concat(name, " is missing \"").concat(defaultProp, "\" propTypes validation for auto controlled prop \"").concat(prop, "\"."));
	        } // its default prop


	        if (!(0, _has2.default)(propTypes, prop)) {
	          console.error("".concat(name, " is missing propTypes validation for auto controlled prop \"").concat(prop, "\"."));
	        }
	      }); // prevent autoControlledProps in defaultProps
	      //
	      // When setting state, auto controlled props values always win (so the parent can manage them).
	      // It is not reasonable to decipher the difference between props from the parent and defaultProps.
	      // Allowing defaultProps results in trySetState always deferring to the defaultProp value.
	      // Auto controlled props also listed in defaultProps can never be updated.
	      //
	      // To set defaults for an AutoControlled prop, you can set the initial state in the
	      // constructor or by using an ES7 property initializer:
	      // https://babeljs.io/blog/2015/06/07/react-on-es6-plus#property-initializers

	      var illegalDefaults = (0, _intersection2.default)(_autoControlledProps, (0, _keys2.default)(defaultProps));

	      if (!(0, _isEmpty2.default)(illegalDefaults)) {
	        console.error(['Do not set defaultProps for autoControlledProps. You can set defaults by', 'setting state in the constructor or using an ES7 property initializer', '(https://babeljs.io/blog/2015/06/07/react-on-es6-plus#property-initializers)', "See ".concat(name, " props: \"").concat(illegalDefaults, "\".")].join(' '));
	      } // prevent listing defaultProps in autoControlledProps
	      //
	      // Default props are automatically handled.
	      // Listing defaults in autoControlledProps would result in allowing defaultDefaultValue props.


	      var illegalAutoControlled = (0, _filter2.default)(_autoControlledProps, function (prop) {
	        return (0, _startsWith2.default)(prop, 'default');
	      });

	      if (!(0, _isEmpty2.default)(illegalAutoControlled)) {
	        console.error(['Do not add default props to autoControlledProps.', 'Default props are automatically handled.', "See ".concat(name, " autoControlledProps: \"").concat(illegalAutoControlled, "\".")].join(' '));
	      }
	    } // Auto controlled props are copied to state.
	    // Set initial state by copying auto controlled props to state.
	    // Also look for the default prop for any auto controlled props (foo => defaultFoo)
	    // so we can set initial values from defaults.


	    var initialAutoControlledState = _autoControlledProps.reduce(function (acc, prop) {
	      acc[prop] = getAutoControlledStateValue(prop, _this.props, _state, true);

	      if (process.env.NODE_ENV !== 'production') {
	        var defaultPropName = getDefaultPropName(prop);
	        var _name = _this.constructor.name; // prevent defaultFoo={} along side foo={}

	        if (!(0, _isUndefined2.default)(_this.props[defaultPropName]) && !(0, _isUndefined2.default)(_this.props[prop])) {
	          console.error("".concat(_name, " prop \"").concat(prop, "\" is auto controlled. Specify either ").concat(defaultPropName, " or ").concat(prop, ", but not both."));
	        }
	      }

	      return acc;
	    }, {});

	    _this.state = (0, _objectSpread2.default)({}, _state, initialAutoControlledState);
	    return _this;
	  }

	  (0, _createClass2.default)(AutoControlledComponent, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var autoControlledProps = this.constructor.autoControlledProps; // Solve the next state for autoControlledProps

	      var newState = autoControlledProps.reduce(function (acc, prop) {
	        var isNextDefined = !(0, _isUndefined2.default)(nextProps[prop]); // if next is defined then use its value

	        if (isNextDefined) acc[prop] = nextProps[prop];
	        return acc;
	      }, {});
	      if (Object.keys(newState).length > 0) this.setState(newState);
	    }
	    /**
	     * Safely attempt to set state for props that might be controlled by the user.
	     * Second argument is a state object that is always passed to setState.
	     * @param {object} maybeState State that corresponds to controlled props.
	     * @param {object} [state] Actual state, useful when you also need to setState.
	     */

	  }]);
	  return AutoControlledComponent;
	}(_react.Component);

	exports.default = AutoControlledComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	var defineProperty = __webpack_require__(176);

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};
	    var ownKeys = Object.keys(source);

	    if (typeof Object.getOwnPropertySymbols === 'function') {
	      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	      }));
	    }

	    ownKeys.forEach(function (key) {
	      defineProperty(target, key, source[key]);
	    });
	  }

	  return target;
	}

	module.exports = _objectSpread;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	var baseDifference = __webpack_require__(246),
	    baseFlatten = __webpack_require__(258),
	    baseRest = __webpack_require__(234),
	    isArrayLikeObject = __webpack_require__(261);

	/**
	 * Creates an array of `array` values not included in the other given arrays
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons. The order and references of result values are
	 * determined by the first array.
	 *
	 * **Note:** Unlike `_.pullAll`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {...Array} [values] The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 * @see _.without, _.xor
	 * @example
	 *
	 * _.difference([2, 1], [2, 3]);
	 * // => [1]
	 */
	var difference = baseRest(function(array, values) {
	  return isArrayLikeObject(array)
	    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	    : [];
	});

	module.exports = difference;


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(247),
	    arrayIncludes = __webpack_require__(250),
	    arrayIncludesWith = __webpack_require__(255),
	    arrayMap = __webpack_require__(221),
	    baseUnary = __webpack_require__(256),
	    cacheHas = __webpack_require__(257);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of methods like `_.difference` without support
	 * for excluding multiple arrays or iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 */
	function baseDifference(array, values, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      isCommon = true,
	      length = array.length,
	      result = [],
	      valuesLength = values.length;

	  if (!length) {
	    return result;
	  }
	  if (iteratee) {
	    values = arrayMap(values, baseUnary(iteratee));
	  }
	  if (comparator) {
	    includes = arrayIncludesWith;
	    isCommon = false;
	  }
	  else if (values.length >= LARGE_ARRAY_SIZE) {
	    includes = cacheHas;
	    isCommon = false;
	    values = new SetCache(values);
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee == null ? value : iteratee(value);

	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var valuesIndex = valuesLength;
	      while (valuesIndex--) {
	        if (values[valuesIndex] === computed) {
	          continue outer;
	        }
	      }
	      result.push(value);
	    }
	    else if (!includes(values, computed, comparator)) {
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseDifference;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(187),
	    setCacheAdd = __webpack_require__(248),
	    setCacheHas = __webpack_require__(249);

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	module.exports = SetCache;


/***/ }),
/* 248 */
/***/ (function(module, exports) {

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	module.exports = setCacheAdd;


/***/ }),
/* 249 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	module.exports = setCacheHas;


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(251);

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	module.exports = arrayIncludes;


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFindIndex = __webpack_require__(252),
	    baseIsNaN = __webpack_require__(253),
	    strictIndexOf = __webpack_require__(254);

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  return value === value
	    ? strictIndexOf(array, value, fromIndex)
	    : baseFindIndex(array, baseIsNaN, fromIndex);
	}

	module.exports = baseIndexOf;


/***/ }),
/* 252 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseFindIndex;


/***/ }),
/* 253 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}

	module.exports = baseIsNaN;


/***/ }),
/* 254 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = strictIndexOf;


/***/ }),
/* 255 */
/***/ (function(module, exports) {

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arrayIncludesWith;


/***/ }),
/* 256 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;


/***/ }),
/* 257 */
/***/ (function(module, exports) {

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	module.exports = cacheHas;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(259),
	    isFlattenable = __webpack_require__(260);

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;


/***/ }),
/* 259 */
/***/ (function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(35),
	    isArguments = __webpack_require__(222),
	    isArray = __webpack_require__(181);

	/** Built-in value references. */
	var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	module.exports = isFlattenable;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(262),
	    isObjectLike = __webpack_require__(42);

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	module.exports = isArrayLikeObject;


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(194),
	    isLength = __webpack_require__(225);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	module.exports = isArrayLike;


/***/ }),
/* 263 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is `undefined`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	 * @example
	 *
	 * _.isUndefined(void 0);
	 * // => true
	 *
	 * _.isUndefined(null);
	 * // => false
	 */
	function isUndefined(value) {
	  return value === undefined;
	}

	module.exports = isUndefined;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClamp = __webpack_require__(265),
	    baseToString = __webpack_require__(220),
	    toInteger = __webpack_require__(266),
	    toString = __webpack_require__(219);

	/**
	 * Checks if `string` starts with the given target string.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {string} [target] The string to search for.
	 * @param {number} [position=0] The position to search from.
	 * @returns {boolean} Returns `true` if `string` starts with `target`,
	 *  else `false`.
	 * @example
	 *
	 * _.startsWith('abc', 'a');
	 * // => true
	 *
	 * _.startsWith('abc', 'b');
	 * // => false
	 *
	 * _.startsWith('abc', 'b', 1);
	 * // => true
	 */
	function startsWith(string, target, position) {
	  string = toString(string);
	  position = position == null
	    ? 0
	    : baseClamp(toInteger(position), 0, string.length);

	  target = baseToString(target);
	  return string.slice(position, position + target.length) == target;
	}

	module.exports = startsWith;


/***/ }),
/* 265 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.clamp` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {number} number The number to clamp.
	 * @param {number} [lower] The lower bound.
	 * @param {number} upper The upper bound.
	 * @returns {number} Returns the clamped number.
	 */
	function baseClamp(number, lower, upper) {
	  if (number === number) {
	    if (upper !== undefined) {
	      number = number <= upper ? number : upper;
	    }
	    if (lower !== undefined) {
	      number = number >= lower ? number : lower;
	    }
	  }
	  return number;
	}

	module.exports = baseClamp;


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	var toFinite = __webpack_require__(267);

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;

	  return result === result ? (remainder ? result - remainder : result) : 0;
	}

	module.exports = toInteger;


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	var toNumber = __webpack_require__(268);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	module.exports = toFinite;


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(195),
	    isSymbol = __webpack_require__(183);

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	module.exports = toNumber;


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(270),
	    baseFilter = __webpack_require__(271),
	    baseIteratee = __webpack_require__(288),
	    isArray = __webpack_require__(181);

	/**
	 * Iterates over elements of `collection`, returning an array of all elements
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * **Note:** Unlike `_.remove`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 * @see _.reject
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * _.filter(users, function(o) { return !o.active; });
	 * // => objects for ['fred']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, { 'age': 36, 'active': true });
	 * // => objects for ['barney']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, ['active', false]);
	 * // => objects for ['fred']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.filter(users, 'active');
	 * // => objects for ['barney']
	 */
	function filter(collection, predicate) {
	  var func = isArray(collection) ? arrayFilter : baseFilter;
	  return func(collection, baseIteratee(predicate, 3));
	}

	module.exports = filter;


/***/ }),
/* 270 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	module.exports = arrayFilter;


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(272);

	/**
	 * The base implementation of `_.filter` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function baseFilter(collection, predicate) {
	  var result = [];
	  baseEach(collection, function(value, index, collection) {
	    if (predicate(value, index, collection)) {
	      result.push(value);
	    }
	  });
	  return result;
	}

	module.exports = baseFilter;


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(273),
	    createBaseEach = __webpack_require__(287);

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(274),
	    keys = __webpack_require__(276);

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(275);

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ }),
/* 275 */
/***/ (function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(277),
	    baseKeys = __webpack_require__(284),
	    isArrayLike = __webpack_require__(262);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	module.exports = keys;


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(278),
	    isArguments = __webpack_require__(222),
	    isArray = __webpack_require__(181),
	    isBuffer = __webpack_require__(279),
	    isIndex = __webpack_require__(224),
	    isTypedArray = __webpack_require__(281);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = arrayLikeKeys;


/***/ }),
/* 278 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(36),
	    stubFalse = __webpack_require__(280);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(44)(module)))

/***/ }),
/* 280 */
/***/ (function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = stubFalse;


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(282),
	    baseUnary = __webpack_require__(256),
	    nodeUtil = __webpack_require__(283);

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	module.exports = isTypedArray;


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(34),
	    isLength = __webpack_require__(225),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	module.exports = baseIsTypedArray;


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(37);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(44)(module)))

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(285),
	    nativeKeys = __webpack_require__(286);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeys;


/***/ }),
/* 285 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(41);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	module.exports = nativeKeys;


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(262);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(289),
	    baseMatchesProperty = __webpack_require__(318),
	    identity = __webpack_require__(235),
	    isArray = __webpack_require__(181),
	    property = __webpack_require__(322);

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (typeof value == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}

	module.exports = baseIteratee;


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(290),
	    getMatchData = __webpack_require__(315),
	    matchesStrictComparable = __webpack_require__(317);

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(291),
	    baseIsEqual = __webpack_require__(297);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(204),
	    stackClear = __webpack_require__(292),
	    stackDelete = __webpack_require__(293),
	    stackGet = __webpack_require__(294),
	    stackHas = __webpack_require__(295),
	    stackSet = __webpack_require__(296);

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = Stack;


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(204);

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}

	module.exports = stackClear;


/***/ }),
/* 293 */
/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	module.exports = stackDelete;


/***/ }),
/* 294 */
/***/ (function(module, exports) {

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	module.exports = stackGet;


/***/ }),
/* 295 */
/***/ (function(module, exports) {

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	module.exports = stackHas;


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(204),
	    Map = __webpack_require__(212),
	    MapCache = __webpack_require__(187);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	module.exports = stackSet;


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(298),
	    isObjectLike = __webpack_require__(42);

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	module.exports = baseIsEqual;


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(291),
	    equalArrays = __webpack_require__(299),
	    equalByTag = __webpack_require__(301),
	    equalObjects = __webpack_require__(305),
	    getTag = __webpack_require__(310),
	    isArray = __webpack_require__(181),
	    isBuffer = __webpack_require__(279),
	    isTypedArray = __webpack_require__(281);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = objIsArr ? arrayTag : getTag(object),
	      othTag = othIsArr ? arrayTag : getTag(other);

	  objTag = objTag == argsTag ? objectTag : objTag;
	  othTag = othTag == argsTag ? objectTag : othTag;

	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	module.exports = baseIsEqualDeep;


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(247),
	    arraySome = __webpack_require__(300),
	    cacheHas = __webpack_require__(257);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalArrays;


/***/ }),
/* 300 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(35),
	    Uint8Array = __webpack_require__(302),
	    eq = __webpack_require__(208),
	    equalArrays = __webpack_require__(299),
	    mapToArray = __webpack_require__(303),
	    setToArray = __webpack_require__(304);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(36);

	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;

	module.exports = Uint8Array;


/***/ }),
/* 303 */
/***/ (function(module, exports) {

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	module.exports = mapToArray;


/***/ }),
/* 304 */
/***/ (function(module, exports) {

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	module.exports = setToArray;


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	var getAllKeys = __webpack_require__(306);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalObjects;


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(307),
	    getSymbols = __webpack_require__(308),
	    keys = __webpack_require__(276);

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	module.exports = getAllKeys;


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(259),
	    isArray = __webpack_require__(181);

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	module.exports = baseGetAllKeys;


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(270),
	    stubArray = __webpack_require__(309);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols(object), function(symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};

	module.exports = getSymbols;


/***/ }),
/* 309 */
/***/ (function(module, exports) {

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	module.exports = stubArray;


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(311),
	    Map = __webpack_require__(212),
	    Promise = __webpack_require__(312),
	    Set = __webpack_require__(313),
	    WeakMap = __webpack_require__(314),
	    baseGetTag = __webpack_require__(34),
	    toSource = __webpack_require__(198);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';

	var dataViewTag = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = baseGetTag(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	module.exports = getTag;


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(192),
	    root = __webpack_require__(36);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');

	module.exports = DataView;


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(192),
	    root = __webpack_require__(36);

	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');

	module.exports = Promise;


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(192),
	    root = __webpack_require__(36);

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	module.exports = Set;


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(192),
	    root = __webpack_require__(36);

	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');

	module.exports = WeakMap;


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(316),
	    keys = __webpack_require__(276);

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];

	    result[length] = [key, value, isStrictComparable(value)];
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(195);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ }),
/* 317 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	module.exports = matchesStrictComparable;


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(297),
	    get = __webpack_require__(319),
	    hasIn = __webpack_require__(320),
	    isKey = __webpack_require__(182),
	    isStrictComparable = __webpack_require__(316),
	    matchesStrictComparable = __webpack_require__(317),
	    toKey = __webpack_require__(226);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(232);

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	module.exports = get;


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(321),
	    hasPath = __webpack_require__(179);

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	module.exports = hasIn;


/***/ }),
/* 321 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	module.exports = baseHasIn;


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(323),
	    basePropertyDeep = __webpack_require__(324),
	    isKey = __webpack_require__(182),
	    toKey = __webpack_require__(226);

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ }),
/* 323 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(232);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}

	module.exports = basePropertyDeep;


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	var baseKeys = __webpack_require__(284),
	    getTag = __webpack_require__(310),
	    isArguments = __webpack_require__(222),
	    isArray = __webpack_require__(181),
	    isArrayLike = __webpack_require__(262),
	    isBuffer = __webpack_require__(279),
	    isPrototype = __webpack_require__(285),
	    isTypedArray = __webpack_require__(281);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty(value) {
	  if (value == null) {
	    return true;
	  }
	  if (isArrayLike(value) &&
	      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	    return !value.length;
	  }
	  var tag = getTag(value);
	  if (tag == mapTag || tag == setTag) {
	    return !value.size;
	  }
	  if (isPrototype(value)) {
	    return !baseKeys(value).length;
	  }
	  for (var key in value) {
	    if (hasOwnProperty.call(value, key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = isEmpty;


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(221),
	    baseIntersection = __webpack_require__(327),
	    baseRest = __webpack_require__(234),
	    castArrayLikeObject = __webpack_require__(328);

	/**
	 * Creates an array of unique values that are included in all given arrays
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons. The order and references of result values are
	 * determined by the first array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of intersecting values.
	 * @example
	 *
	 * _.intersection([2, 1], [2, 3]);
	 * // => [2]
	 */
	var intersection = baseRest(function(arrays) {
	  var mapped = arrayMap(arrays, castArrayLikeObject);
	  return (mapped.length && mapped[0] === arrays[0])
	    ? baseIntersection(mapped)
	    : [];
	});

	module.exports = intersection;


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(247),
	    arrayIncludes = __webpack_require__(250),
	    arrayIncludesWith = __webpack_require__(255),
	    arrayMap = __webpack_require__(221),
	    baseUnary = __webpack_require__(256),
	    cacheHas = __webpack_require__(257);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * The base implementation of methods like `_.intersection`, without support
	 * for iteratee shorthands, that accepts an array of arrays to inspect.
	 *
	 * @private
	 * @param {Array} arrays The arrays to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of shared values.
	 */
	function baseIntersection(arrays, iteratee, comparator) {
	  var includes = comparator ? arrayIncludesWith : arrayIncludes,
	      length = arrays[0].length,
	      othLength = arrays.length,
	      othIndex = othLength,
	      caches = Array(othLength),
	      maxLength = Infinity,
	      result = [];

	  while (othIndex--) {
	    var array = arrays[othIndex];
	    if (othIndex && iteratee) {
	      array = arrayMap(array, baseUnary(iteratee));
	    }
	    maxLength = nativeMin(array.length, maxLength);
	    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	      ? new SetCache(othIndex && array)
	      : undefined;
	  }
	  array = arrays[0];

	  var index = -1,
	      seen = caches[0];

	  outer:
	  while (++index < length && result.length < maxLength) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = (comparator || value !== 0) ? value : 0;
	    if (!(seen
	          ? cacheHas(seen, computed)
	          : includes(result, computed, comparator)
	        )) {
	      othIndex = othLength;
	      while (--othIndex) {
	        var cache = caches[othIndex];
	        if (!(cache
	              ? cacheHas(cache, computed)
	              : includes(arrays[othIndex], computed, comparator))
	            ) {
	          continue outer;
	        }
	      }
	      if (seen) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseIntersection;


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLikeObject = __webpack_require__(261);

	/**
	 * Casts `value` to an empty array if it's not an array like object.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array|Object} Returns the cast array-like object.
	 */
	function castArrayLikeObject(value) {
	  return isArrayLikeObject(value) ? value : [];
	}

	module.exports = castArrayLikeObject;


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(330);


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(331),
	    baseEach = __webpack_require__(272),
	    castFunction = __webpack_require__(332),
	    isArray = __webpack_require__(181);

	/**
	 * Iterates over elements of `collection` and invokes `iteratee` for each element.
	 * The iteratee is invoked with three arguments: (value, index|key, collection).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length"
	 * property are iterated like arrays. To avoid this behavior use `_.forIn`
	 * or `_.forOwn` for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @alias each
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 * @see _.forEachRight
	 * @example
	 *
	 * _.forEach([1, 2], function(value) {
	 *   console.log(value);
	 * });
	 * // => Logs `1` then `2`.
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */
	function forEach(collection, iteratee) {
	  var func = isArray(collection) ? arrayEach : baseEach;
	  return func(collection, castFunction(iteratee));
	}

	module.exports = forEach;


/***/ }),
/* 331 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(235);

	/**
	 * Casts `value` to `identity` if it's not a function.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Function} Returns cast function.
	 */
	function castFunction(value) {
	  return typeof value == 'function' ? value : identity;
	}

	module.exports = castFunction;


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.mergeChildMappings = exports.getChildMapping = void 0;

	var _slicedToArray2 = _interopRequireDefault(__webpack_require__(334));

	var _has2 = _interopRequireDefault(__webpack_require__(177));

	var _keys2 = _interopRequireDefault(__webpack_require__(276));

	var _forEach2 = _interopRequireDefault(__webpack_require__(330));

	var _filter2 = _interopRequireDefault(__webpack_require__(269));

	var _keyBy2 = _interopRequireDefault(__webpack_require__(338));

	var _react = __webpack_require__(4);

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {object} children Element's children
	 * @return {object} Mapping of key to child
	 */
	var getChildMapping = function getChildMapping(children) {
	  return (0, _keyBy2.default)((0, _filter2.default)(_react.Children.toArray(children), _react.isValidElement), 'key');
	};

	exports.getChildMapping = getChildMapping;

	var getPendingKeys = function getPendingKeys(prev, next) {
	  var nextKeysPending = {};
	  var pendingKeys = [];
	  (0, _forEach2.default)((0, _keys2.default)(prev), function (prevKey) {
	    if (!(0, _has2.default)(next, prevKey)) {
	      pendingKeys.push(prevKey);
	      return;
	    }

	    if (pendingKeys.length) {
	      nextKeysPending[prevKey] = pendingKeys;
	      pendingKeys = [];
	    }
	  });
	  return [nextKeysPending, pendingKeys];
	};

	var getValue = function getValue(key, prev, next) {
	  return (0, _has2.default)(next, key) ? next[key] : prev[key];
	};
	/**
	 * When you're adding or removing children some may be added or removed in the same render pass. We want to show *both*
	 * since we want to simultaneously animate elements in and out. This function takes a previous set of keys and a new set
	 * of keys and merges them with its best guess of the correct ordering.
	 *
	 * @param {object} prev Prev children as returned from `getChildMapping()`
	 * @param {object} next Next children as returned from `getChildMapping()`
	 * @return {object} A key set that contains all keys in `prev` and all keys in `next` in a reasonable order
	 */


	var mergeChildMappings = function mergeChildMappings() {
	  var prev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var childMapping = {};

	  var _getPendingKeys = getPendingKeys(prev, next),
	      _getPendingKeys2 = (0, _slicedToArray2.default)(_getPendingKeys, 2),
	      nextKeysPending = _getPendingKeys2[0],
	      pendingKeys = _getPendingKeys2[1];

	  (0, _forEach2.default)((0, _keys2.default)(next), function (nextKey) {
	    if ((0, _has2.default)(nextKeysPending, nextKey)) {
	      (0, _forEach2.default)(nextKeysPending[nextKey], function (pendingKey) {
	        childMapping[pendingKey] = getValue(pendingKey, prev, next);
	      });
	    }

	    childMapping[nextKey] = getValue(nextKey, prev, next);
	  });
	  (0, _forEach2.default)(pendingKeys, function (pendingKey) {
	    childMapping[pendingKey] = getValue(pendingKey, prev, next);
	  });
	  return childMapping;
	};

	exports.mergeChildMappings = mergeChildMappings;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayWithHoles = __webpack_require__(335);

	var iterableToArrayLimit = __webpack_require__(336);

	var nonIterableRest = __webpack_require__(337);

	function _slicedToArray(arr, i) {
	  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
	}

	module.exports = _slicedToArray;

/***/ }),
/* 335 */
/***/ (function(module, exports) {

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	module.exports = _arrayWithHoles;

/***/ }),
/* 336 */
/***/ (function(module, exports) {

	function _iterableToArrayLimit(arr, i) {
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	module.exports = _iterableToArrayLimit;

/***/ }),
/* 337 */
/***/ (function(module, exports) {

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	module.exports = _nonIterableRest;

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(339),
	    createAggregator = __webpack_require__(340);

	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` thru `iteratee`. The corresponding value of
	 * each key is the last element responsible for generating the key. The
	 * iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * var array = [
	 *   { 'dir': 'left', 'code': 97 },
	 *   { 'dir': 'right', 'code': 100 }
	 * ];
	 *
	 * _.keyBy(array, function(o) {
	 *   return String.fromCharCode(o.code);
	 * });
	 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	 *
	 * _.keyBy(array, 'dir');
	 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	 */
	var keyBy = createAggregator(function(result, value, key) {
	  baseAssignValue(result, key, value);
	});

	module.exports = keyBy;


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	var defineProperty = __webpack_require__(240);

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	module.exports = baseAssignValue;


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayAggregator = __webpack_require__(341),
	    baseAggregator = __webpack_require__(342),
	    baseIteratee = __webpack_require__(288),
	    isArray = __webpack_require__(181);

	/**
	 * Creates a function like `_.groupBy`.
	 *
	 * @private
	 * @param {Function} setter The function to set accumulator values.
	 * @param {Function} [initializer] The accumulator object initializer.
	 * @returns {Function} Returns the new aggregator function.
	 */
	function createAggregator(setter, initializer) {
	  return function(collection, iteratee) {
	    var func = isArray(collection) ? arrayAggregator : baseAggregator,
	        accumulator = initializer ? initializer() : {};

	    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
	  };
	}

	module.exports = createAggregator;


/***/ }),
/* 341 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `baseAggregator` for arrays.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function arrayAggregator(array, setter, iteratee, accumulator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    var value = array[index];
	    setter(accumulator, value, iteratee(value), array);
	  }
	  return accumulator;
	}

	module.exports = arrayAggregator;


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(272);

	/**
	 * Aggregates elements of `collection` on `accumulator` with keys transformed
	 * by `iteratee` and values set by `setter`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function baseAggregator(collection, setter, iteratee, accumulator) {
	  baseEach(collection, function(value, key, collection) {
	    setter(accumulator, value, iteratee(value), collection);
	  });
	  return accumulator;
	}

	module.exports = baseAggregator;


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isNil = exports.findByType = exports.someByType = void 0;

	var _find2 = _interopRequireDefault(__webpack_require__(344));

	var _some2 = _interopRequireDefault(__webpack_require__(347));

	var _react = __webpack_require__(4);

	/**
	 * Determine if child by type exists in children.
	 * @param {Object} children The children prop of a component.
	 * @param {string|Function} type An html tag name string or React component.
	 * @returns {Boolean}
	 */
	var someByType = function someByType(children, type) {
	  return (0, _some2.default)(_react.Children.toArray(children), {
	    type: type
	  });
	};
	/**
	 * Find child by type.
	 * @param {Object} children The children prop of a component.
	 * @param {string|Function} type An html tag name string or React component.
	 * @returns {undefined|Object}
	 */


	exports.someByType = someByType;

	var findByType = function findByType(children, type) {
	  return (0, _find2.default)(_react.Children.toArray(children), {
	    type: type
	  });
	};
	/**
	 * Tests if children are nil in React and Preact.
	 * @param {Object} children The children prop of a component.
	 * @returns {Boolean}
	 */


	exports.findByType = findByType;

	var isNil = function isNil(children) {
	  return children === null || children === undefined || Array.isArray(children) && children.length === 0;
	};

	exports.isNil = isNil;

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	var createFind = __webpack_require__(345),
	    findIndex = __webpack_require__(346);

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.find(users, function(o) { return o.age < 40; });
	 * // => object for 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.find(users, { 'age': 1, 'active': true });
	 * // => object for 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.find(users, ['active', false]);
	 * // => object for 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.find(users, 'active');
	 * // => object for 'barney'
	 */
	var find = createFind(findIndex);

	module.exports = find;


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIteratee = __webpack_require__(288),
	    isArrayLike = __webpack_require__(262),
	    keys = __webpack_require__(276);

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} findIndexFunc The function to find the collection index.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(findIndexFunc) {
	  return function(collection, predicate, fromIndex) {
	    var iterable = Object(collection);
	    if (!isArrayLike(collection)) {
	      var iteratee = baseIteratee(predicate, 3);
	      collection = keys(collection);
	      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	    }
	    var index = findIndexFunc(collection, predicate, fromIndex);
	    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	  };
	}

	module.exports = createFind;


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFindIndex = __webpack_require__(252),
	    baseIteratee = __webpack_require__(288),
	    toInteger = __webpack_require__(266);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(o) { return o.user == 'barney'; });
	 * // => 0
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findIndex(users, ['active', false]);
	 * // => 0
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findIndex(users, 'active');
	 * // => 2
	 */
	function findIndex(array, predicate, fromIndex) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return -1;
	  }
	  var index = fromIndex == null ? 0 : toInteger(fromIndex);
	  if (index < 0) {
	    index = nativeMax(length + index, 0);
	  }
	  return baseFindIndex(array, baseIteratee(predicate, 3), index);
	}

	module.exports = findIndex;


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	var arraySome = __webpack_require__(300),
	    baseIteratee = __webpack_require__(288),
	    baseSome = __webpack_require__(348),
	    isArray = __webpack_require__(181),
	    isIterateeCall = __webpack_require__(349);

	/**
	 * Checks if `predicate` returns truthy for **any** element of `collection`.
	 * Iteration is stopped once `predicate` returns truthy. The predicate is
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.some([null, 0, 'yes', false], Boolean);
	 * // => true
	 *
	 * var users = [
	 *   { 'user': 'barney', 'active': true },
	 *   { 'user': 'fred',   'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.some(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.some(users, ['active', false]);
	 * // => true
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.some(users, 'active');
	 * // => true
	 */
	function some(collection, predicate, guard) {
	  var func = isArray(collection) ? arraySome : baseSome;
	  if (guard && isIterateeCall(collection, predicate, guard)) {
	    predicate = undefined;
	  }
	  return func(collection, baseIteratee(predicate, 3));
	}

	module.exports = some;


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(272);

	/**
	 * The base implementation of `_.some` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function baseSome(collection, predicate) {
	  var result;

	  baseEach(collection, function(value, index, collection) {
	    result = predicate(value, index, collection);
	    return !result;
	  });
	  return !!result;
	}

	module.exports = baseSome;


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(208),
	    isArrayLike = __webpack_require__(262),
	    isIndex = __webpack_require__(224),
	    isObject = __webpack_require__(195);

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	module.exports = isIterateeCall;


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.useWidthProp = exports.useVerticalAlignProp = exports.useTextAlignProp = exports.useMultipleProp = exports.useKeyOrValueAndKey = exports.useValueAndKey = exports.useKeyOnly = void 0;

	var _typeof2 = _interopRequireDefault(__webpack_require__(171));

	var _numberToWord = __webpack_require__(351);

	/*
	 * There are 3 prop patterns used to build up the className for a component.
	 * Each utility here is meant for use in a classnames() argument.
	 *
	 * There is no util for valueOnly() because it would simply return val.
	 * Use the prop value inline instead.
	 *   <Label size='big' />
	 *   <div class="ui big label"></div>
	 */

	/**
	 * Props where only the prop key is used in the className.
	 * @param {*} val A props value
	 * @param {string} key A props key
	 *
	 * @example
	 * <Label tag />
	 * <div class="ui tag label"></div>
	 */
	var useKeyOnly = function useKeyOnly(val, key) {
	  return val && key;
	};
	/**
	 * Props that require both a key and value to create a className.
	 * @param {*} val A props value
	 * @param {string} key A props key
	 *
	 * @example
	 * <Label corner='left' />
	 * <div class="ui left corner label"></div>
	 */


	exports.useKeyOnly = useKeyOnly;

	var useValueAndKey = function useValueAndKey(val, key) {
	  return val && val !== true && "".concat(val, " ").concat(key);
	};
	/**
	 * Props whose key will be used in className, or value and key.
	 * @param {*} val A props value
	 * @param {string} key A props key
	 *
	 * @example Key Only
	 * <Label pointing />
	 * <div class="ui pointing label"></div>
	 *
	 * @example Key and Value
	 * <Label pointing='left' />
	 * <div class="ui left pointing label"></div>
	 */


	exports.useValueAndKey = useValueAndKey;

	var useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {
	  return val && (val === true ? key : "".concat(val, " ").concat(key));
	}; //
	// Prop to className exceptions
	//

	/**
	 * The "multiple" prop implements control of visibility and reserved classes for Grid subcomponents.
	 *
	 * @param {*} val The value of the "multiple" prop
	 * @param {*} key A props key
	 *
	 * @example
	 * <Grid.Row only='mobile' />
	 * <Grid.Row only='mobile tablet' />
	 * <div class="mobile only row"></div>
	 * <div class="mobile only tablet only row"></div>
	 */


	exports.useKeyOrValueAndKey = useKeyOrValueAndKey;

	var useMultipleProp = function useMultipleProp(val, key) {
	  if (!val || val === true) return null;
	  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {
	    return "".concat(prop.replace('-', ' '), " ").concat(key);
	  }).join(' ');
	};
	/**
	 * The "textAlign" prop follows the useValueAndKey except when the value is "justified'.
	 * In this case, only the class "justified" is used, ignoring the "aligned" class.
	 * @param {*} val The value of the "textAlign" prop
	 *
	 * @example
	 * <Container textAlign='justified' />
	 * <div class="ui justified container"></div>
	 *
	 * @example
	 * <Container textAlign='left' />
	 * <div class="ui left aligned container"></div>
	 */


	exports.useMultipleProp = useMultipleProp;

	var useTextAlignProp = function useTextAlignProp(val) {
	  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');
	};
	/**
	 * The "verticalAlign" prop follows the useValueAndKey.
	 *
	 * @param {*} val The value of the "verticalAlign" prop
	 *
	 * @example
	 * <Grid verticalAlign='middle' />
	 * <div class="ui middle aligned grid"></div>
	 */


	exports.useTextAlignProp = useTextAlignProp;

	var useVerticalAlignProp = function useVerticalAlignProp(val) {
	  return useValueAndKey(val, 'aligned');
	};
	/**
	 * Create "X", "X wide" and "equal width" classNames.
	 * "X" is a numberToWord value and "wide" is configurable.
	 * @param {*} val The prop value
	 * @param {string} [widthClass=''] The class
	 * @param {boolean} [canEqual=false] Flag that indicates possibility of "equal" value
	 *
	 * @example
	 * <Grid columns='equal' />
	 * <div class="ui equal width grid"></div>
	 *
	 * <Form widths='equal' />
	 * <div class="ui equal width form"></div>
	 *
	 * <FieldGroup widths='equal' />
	 * <div class="equal width fields"></div>
	 *
	 * @example
	 * <Grid columns={4} />
	 * <div class="ui four column grid"></div>
	 */


	exports.useVerticalAlignProp = useVerticalAlignProp;

	var useWidthProp = function useWidthProp(val) {
	  var widthClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	  var canEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	  if (canEqual && val === 'equal') {
	    return 'equal width';
	  }

	  var valType = (0, _typeof2.default)(val);

	  if ((valType === 'string' || valType === 'number') && widthClass) {
	    return "".concat((0, _numberToWord.numberToWord)(val), " ").concat(widthClass);
	  }

	  return (0, _numberToWord.numberToWord)(val);
	};

	exports.useWidthProp = useWidthProp;

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.numberToWord = numberToWord;
	exports.numberToWordMap = void 0;

	var _typeof2 = _interopRequireDefault(__webpack_require__(171));

	var numberToWordMap = {
	  1: 'one',
	  2: 'two',
	  3: 'three',
	  4: 'four',
	  5: 'five',
	  6: 'six',
	  7: 'seven',
	  8: 'eight',
	  9: 'nine',
	  10: 'ten',
	  11: 'eleven',
	  12: 'twelve',
	  13: 'thirteen',
	  14: 'fourteen',
	  15: 'fifteen',
	  16: 'sixteen'
	  /**
	   * Return the number word for numbers 1-16.
	   * Returns strings or numbers as is if there is no corresponding word.
	   * Returns an empty string if value is not a string or number.
	   * @param {string|number} value The value to convert to a word.
	   * @returns {string}
	   */

	};
	exports.numberToWordMap = numberToWordMap;

	function numberToWord(value) {
	  var type = (0, _typeof2.default)(value);

	  if (type === 'string' || type === 'number') {
	    return numberToWordMap[value] || value;
	  }

	  return '';
	}

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.deprecate = exports.collectionShorthand = exports.itemShorthand = exports.contentShorthand = exports.multipleProp = exports.demand = exports.givenProps = exports.some = exports.every = exports.disallow = exports.suggest = exports.domNode = exports.as = void 0;

	var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(353));

	var _difference2 = _interopRequireDefault(__webpack_require__(357));

	var _trim2 = _interopRequireDefault(__webpack_require__(431));

	var _isObject2 = _interopRequireDefault(__webpack_require__(440));

	var _pick2 = _interopRequireDefault(__webpack_require__(442));

	var _keys2 = _interopRequireDefault(__webpack_require__(447));

	var _isPlainObject2 = _interopRequireDefault(__webpack_require__(448));

	var _isFunction2 = _interopRequireDefault(__webpack_require__(449));

	var _compact2 = _interopRequireDefault(__webpack_require__(450));

	var _isNil2 = _interopRequireDefault(__webpack_require__(452));

	var _take2 = _interopRequireDefault(__webpack_require__(454));

	var _sortBy2 = _interopRequireDefault(__webpack_require__(456));

	var _sum2 = _interopRequireDefault(__webpack_require__(463));

	var _min2 = _interopRequireDefault(__webpack_require__(466));

	var _map2 = _interopRequireDefault(__webpack_require__(470));

	var _flow2 = _interopRequireDefault(__webpack_require__(472));

	var _memoize2 = _interopRequireDefault(__webpack_require__(475));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _leven = _interopRequireDefault(__webpack_require__(476));

	var typeOf = function typeOf() {
	  var _Object$prototype$toS;

	  return (_Object$prototype$toS = Object.prototype.toString).call.apply(_Object$prototype$toS, arguments);
	};
	/**
	 * Ensure a component can render as a give prop value.
	 */


	var as = function as() {
	  return _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.string, _propTypes.default.symbol]).apply(void 0, arguments);
	};
	/**
	 * Ensure a prop is a valid DOM node.
	 */


	exports.as = as;

	var domNode = function domNode(props, propName) {
	  // skip if prop is undefined
	  if (props[propName] === undefined) return; // skip if prop is valid

	  if (props[propName] instanceof Element) return;
	  throw new Error("Invalid prop \"".concat(propName, "\" supplied, expected a DOM node."));
	};
	/**
	 * Similar to PropTypes.oneOf but shows closest matches.
	 * Word order is ignored allowing `left chevron` to match `chevron left`.
	 * Useful for very large lists of options (e.g. Icon name, Flag name, etc.)
	 * @param {string[]} suggestions An array of allowed values.
	 */


	exports.domNode = domNode;

	var suggest = function suggest(suggestions) {
	  if (!Array.isArray(suggestions)) {
	    throw new Error('Invalid argument supplied to suggest, expected an instance of array.');
	  }
	  /* eslint-disable max-nested-callbacks */


	  var findBestSuggestions = (0, _memoize2.default)(function (str) {
	    var propValueWords = str.split(' ');
	    return (0, _flow2.default)((0, _map2.default)(function (suggestion) {
	      var suggestionWords = suggestion.split(' ');
	      var propValueScore = (0, _flow2.default)((0, _map2.default)(function (x) {
	        return (0, _map2.default)(function (y) {
	          return (0, _leven.default)(x, y);
	        }, suggestionWords);
	      }), (0, _map2.default)(_min2.default), _sum2.default)(propValueWords);
	      var suggestionScore = (0, _flow2.default)((0, _map2.default)(function (x) {
	        return (0, _map2.default)(function (y) {
	          return (0, _leven.default)(x, y);
	        }, propValueWords);
	      }), (0, _map2.default)(_min2.default), _sum2.default)(suggestionWords);
	      return {
	        suggestion: suggestion,
	        score: propValueScore + suggestionScore
	      };
	    }), (0, _sortBy2.default)(['score', 'suggestion']), (0, _take2.default)(3))(suggestions);
	  });
	  /* eslint-enable max-nested-callbacks */
	  // Convert the suggestions list into a hash map for O(n) lookup times. Ensure
	  // the words in each key are sorted alphabetically so that we have a consistent
	  // way of looking up a value in the map, i.e. we can sort the words in the
	  // incoming propValue and look that up without having to check all permutations.

	  var suggestionsLookup = suggestions.reduce(function (acc, key) {
	    acc[key.split(' ').sort().join(' ')] = true;
	    return acc;
	  }, {});
	  return function (props, propName, componentName) {
	    var propValue = props[propName]; // skip if prop is undefined or is included in the suggestions

	    if (!propValue || suggestionsLookup[propValue]) return; // check if the words were correct but ordered differently.
	    // Since we're matching for classNames we need to allow any word order
	    // to pass validation, e.g. `left chevron` vs `chevron left`.

	    var propValueSorted = propValue.split(' ').sort().join(' ');
	    if (suggestionsLookup[propValueSorted]) return; // find best suggestions

	    var bestMatches = findBestSuggestions(propValue); // skip if a match scored 0

	    if (bestMatches.some(function (x) {
	      return x.score === 0;
	    })) return;
	    return new Error(["Invalid prop `".concat(propName, "` of value `").concat(propValue, "` supplied to `").concat(componentName, "`."), "\n\nInstead of `".concat(propValue, "`, did you mean:"), bestMatches.map(function (x) {
	      return "\n  - ".concat(x.suggestion);
	    }).join(''), '\n'].join(''));
	  };
	};
	/**
	 * Disallow other props from being defined with this prop.
	 * @param {string[]} disallowedProps An array of props that cannot be used with this prop.
	 */


	exports.suggest = suggest;

	var disallow = function disallow(disallowedProps) {
	  return function (props, propName, componentName) {
	    if (!Array.isArray(disallowedProps)) {
	      throw new Error(['Invalid argument supplied to disallow, expected an instance of array.', " See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(''));
	    } // skip if prop is undefined


	    if ((0, _isNil2.default)(props[propName]) || props[propName] === false) return; // find disallowed props with values

	    var disallowed = disallowedProps.reduce(function (acc, disallowedProp) {
	      if (!(0, _isNil2.default)(props[disallowedProp]) && props[disallowedProp] !== false) {
	        return (0, _toConsumableArray2.default)(acc).concat([disallowedProp]);
	      }

	      return acc;
	    }, []);

	    if (disallowed.length > 0) {
	      return new Error(["Prop `".concat(propName, "` in `").concat(componentName, "` conflicts with props: `").concat(disallowed.join('`, `'), "`."), 'They cannot be defined together, choose one or the other.'].join(' '));
	    }
	  };
	};
	/**
	 * Ensure a prop adherers to multiple prop type validators.
	 * @param {function[]} validators An array of propType functions.
	 */


	exports.disallow = disallow;

	var every = function every(validators) {
	  return function (props, propName, componentName) {
	    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	      rest[_key - 3] = arguments[_key];
	    }

	    if (!Array.isArray(validators)) {
	      throw new Error(['Invalid argument supplied to every, expected an instance of array.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    }

	    var errors = (0, _flow2.default)((0, _map2.default)(function (validator) {
	      if (typeof validator !== 'function') {
	        throw new Error("every() argument \"validators\" should contain functions, found: ".concat(typeOf(validator), "."));
	      }

	      return validator.apply(void 0, [props, propName, componentName].concat(rest));
	    }), _compact2.default)(validators); // we can only return one error at a time

	    return errors[0];
	  };
	};
	/**
	 * Ensure a prop adherers to at least one of the given prop type validators.
	 * @param {function[]} validators An array of propType functions.
	 */


	exports.every = every;

	var some = function some(validators) {
	  return function (props, propName, componentName) {
	    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	      rest[_key2 - 3] = arguments[_key2];
	    }

	    if (!Array.isArray(validators)) {
	      throw new Error(['Invalid argument supplied to some, expected an instance of array.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    }

	    var errors = (0, _compact2.default)((0, _map2.default)(validators, function (validator) {
	      if (!(0, _isFunction2.default)(validator)) {
	        throw new Error("some() argument \"validators\" should contain functions, found: ".concat(typeOf(validator), "."));
	      }

	      return validator.apply(void 0, [props, propName, componentName].concat(rest));
	    })); // fail only if all validators failed

	    if (errors.length === validators.length) {
	      var error = new Error('One of these validators must pass:');
	      error.message += "\n".concat((0, _map2.default)(errors, function (err, i) {
	        return "[".concat(i + 1, "]: ").concat(err.message);
	      }).join('\n'));
	      return error;
	    }
	  };
	};
	/**
	 * Ensure a validator passes only when a component has a given propsShape.
	 * @param {object} propsShape An object describing the prop shape.
	 * @param {function} validator A propType function.
	 */


	exports.some = some;

	var givenProps = function givenProps(propsShape, validator) {
	  return function (props, propName, componentName) {
	    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
	      rest[_key3 - 3] = arguments[_key3];
	    }

	    if (!(0, _isPlainObject2.default)(propsShape)) {
	      throw new Error(['Invalid argument supplied to givenProps, expected an object.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    }

	    if (typeof validator !== 'function') {
	      throw new Error(['Invalid argument supplied to givenProps, expected a function.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    }

	    var shouldValidate = (0, _keys2.default)(propsShape).every(function (key) {
	      var val = propsShape[key]; // require propShape validators to pass or prop values to match

	      return typeof val === 'function' ? !val.apply(void 0, [props, key, componentName].concat(rest)) : val === props[propName];
	    });
	    if (!shouldValidate) return;
	    var error = validator.apply(void 0, [props, propName, componentName].concat(rest));

	    if (error) {
	      // poor mans shallow pretty print, prevents JSON circular reference errors
	      var prettyProps = "{ ".concat((0, _keys2.default)((0, _pick2.default)((0, _keys2.default)(propsShape), props)).map(function (key) {
	        var val = props[key];
	        var renderedValue = val;
	        if (typeof val === 'string') renderedValue = "\"".concat(val, "\"");else if (Array.isArray(val)) renderedValue = "[".concat(val.join(', '), "]");else if ((0, _isObject2.default)(val)) renderedValue = '{...}';
	        return "".concat(key, ": ").concat(renderedValue);
	      }).join(', '), " }");
	      error.message = "Given props ".concat(prettyProps, ": ").concat(error.message);
	      return error;
	    }
	  };
	};
	/**
	 * Define prop dependencies by requiring other props.
	 * @param {string[]} requiredProps An array of required prop names.
	 */


	exports.givenProps = givenProps;

	var demand = function demand(requiredProps) {
	  return function (props, propName, componentName) {
	    if (!Array.isArray(requiredProps)) {
	      throw new Error(['Invalid `requiredProps` argument supplied to require, expected an instance of array.', " See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(''));
	    } // skip if prop is undefined


	    if (props[propName] === undefined) return;
	    var missingRequired = requiredProps.filter(function (requiredProp) {
	      return props[requiredProp] === undefined;
	    });

	    if (missingRequired.length > 0) {
	      return new Error("`".concat(propName, "` prop in `").concat(componentName, "` requires props: `").concat(missingRequired.join('`, `'), "`."));
	    }
	  };
	};
	/**
	 * Ensure an multiple prop contains a string with only possible values.
	 * @param {string[]} possible An array of possible values to prop.
	 */


	exports.demand = demand;

	var multipleProp = function multipleProp(possible) {
	  return function (props, propName, componentName) {
	    if (!Array.isArray(possible)) {
	      throw new Error(['Invalid argument supplied to some, expected an instance of array.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    }

	    var propValue = props[propName]; // skip if prop is undefined

	    if ((0, _isNil2.default)(propValue) || propValue === false) return;
	    var values = propValue.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (val) {
	      return (0, _trim2.default)(val).replace('-', ' ');
	    });
	    var invalid = (0, _difference2.default)(values, possible); // fail only if there are invalid values

	    if (invalid.length > 0) {
	      return new Error("`".concat(propName, "` prop in `").concat(componentName, "` has invalid values: `").concat(invalid.join('`, `'), "`."));
	    }
	  };
	};
	/**
	 * Ensure a component can render as a node passed as a prop value in place of children.
	 */


	exports.multipleProp = multipleProp;

	var contentShorthand = function contentShorthand() {
	  return every([disallow(['children']), _propTypes.default.node]).apply(void 0, arguments);
	};
	/**
	 * Item shorthand is a description of a component that can be a literal,
	 * a props object, or an element.
	 */


	exports.contentShorthand = contentShorthand;

	var itemShorthand = function itemShorthand() {
	  return every([disallow(['children']), _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node, _propTypes.default.object, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object]))])]).apply(void 0, arguments);
	};
	/**
	 * Collection shorthand ensures a prop is an array of item shorthand.
	 */


	exports.itemShorthand = itemShorthand;

	var collectionShorthand = function collectionShorthand() {
	  return every([disallow(['children']), _propTypes.default.arrayOf(itemShorthand)]).apply(void 0, arguments);
	};
	/**
	 * Show a deprecated warning for component props with a help message and optional validator.
	 * @param {string} help A help message to display with the deprecation warning.
	 * @param {function} [validator] A propType function.
	 */


	exports.collectionShorthand = collectionShorthand;

	var deprecate = function deprecate(help, validator) {
	  return function (props, propName, componentName) {
	    if (typeof help !== 'string') {
	      throw new Error(['Invalid `help` argument supplied to deprecate, expected a string.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	    } // skip if prop is undefined


	    if (props[propName] === undefined) return; // deprecation error and help

	    var error = new Error("The `".concat(propName, "` prop in `").concat(componentName, "` is deprecated."));
	    if (help) error.message += " ".concat(help); // add optional validation error message

	    if (validator) {
	      if (typeof validator === 'function') {
	        for (var _len4 = arguments.length, args = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {
	          args[_key4 - 3] = arguments[_key4];
	        }

	        var validationError = validator.apply(void 0, [props, propName, componentName].concat(args));

	        if (validationError) {
	          error.message = "".concat(error.message, " ").concat(validationError.message);
	        }
	      } else {
	        throw new Error(['Invalid argument supplied to deprecate, expected a function.', "See `".concat(propName, "` prop in `").concat(componentName, "`.")].join(' '));
	      }
	    }

	    return error;
	  };
	};

	exports.deprecate = deprecate;

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayWithoutHoles = __webpack_require__(354);

	var iterableToArray = __webpack_require__(355);

	var nonIterableSpread = __webpack_require__(356);

	function _toConsumableArray(arr) {
	  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
	}

	module.exports = _toConsumableArray;

/***/ }),
/* 354 */
/***/ (function(module, exports) {

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  }
	}

	module.exports = _arrayWithoutHoles;

/***/ }),
/* 355 */
/***/ (function(module, exports) {

	function _iterableToArray(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}

	module.exports = _iterableToArray;

/***/ }),
/* 356 */
/***/ (function(module, exports) {

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance");
	}

	module.exports = _nonIterableSpread;

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('difference', __webpack_require__(245));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	var baseConvert = __webpack_require__(359),
	    util = __webpack_require__(362);

	/**
	 * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
	 * version with conversion `options` applied. If `name` is an object its methods
	 * will be converted.
	 *
	 * @param {string} name The name of the function to wrap.
	 * @param {Function} [func] The function to wrap.
	 * @param {Object} [options] The options object. See `baseConvert` for more details.
	 * @returns {Function|Object} Returns the converted function or object.
	 */
	function convert(name, func, options) {
	  return baseConvert(util, name, func, options);
	}

	module.exports = convert;


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	var mapping = __webpack_require__(360),
	    fallbackHolder = __webpack_require__(361);

	/** Built-in value reference. */
	var push = Array.prototype.push;

	/**
	 * Creates a function, with an arity of `n`, that invokes `func` with the
	 * arguments it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} n The arity of the new function.
	 * @returns {Function} Returns the new function.
	 */
	function baseArity(func, n) {
	  return n == 2
	    ? function(a, b) { return func.apply(undefined, arguments); }
	    : function(a) { return func.apply(undefined, arguments); };
	}

	/**
	 * Creates a function that invokes `func`, with up to `n` arguments, ignoring
	 * any additional arguments.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @param {number} n The arity cap.
	 * @returns {Function} Returns the new function.
	 */
	function baseAry(func, n) {
	  return n == 2
	    ? function(a, b) { return func(a, b); }
	    : function(a) { return func(a); };
	}

	/**
	 * Creates a clone of `array`.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the cloned array.
	 */
	function cloneArray(array) {
	  var length = array ? array.length : 0,
	      result = Array(length);

	  while (length--) {
	    result[length] = array[length];
	  }
	  return result;
	}

	/**
	 * Creates a function that clones a given object using the assignment `func`.
	 *
	 * @private
	 * @param {Function} func The assignment function.
	 * @returns {Function} Returns the new cloner function.
	 */
	function createCloner(func) {
	  return function(object) {
	    return func({}, object);
	  };
	}

	/**
	 * A specialized version of `_.spread` which flattens the spread array into
	 * the arguments of the invoked `func`.
	 *
	 * @private
	 * @param {Function} func The function to spread arguments over.
	 * @param {number} start The start position of the spread.
	 * @returns {Function} Returns the new function.
	 */
	function flatSpread(func, start) {
	  return function() {
	    var length = arguments.length,
	        lastIndex = length - 1,
	        args = Array(length);

	    while (length--) {
	      args[length] = arguments[length];
	    }
	    var array = args[start],
	        otherArgs = args.slice(0, start);

	    if (array) {
	      push.apply(otherArgs, array);
	    }
	    if (start != lastIndex) {
	      push.apply(otherArgs, args.slice(start + 1));
	    }
	    return func.apply(this, otherArgs);
	  };
	}

	/**
	 * Creates a function that wraps `func` and uses `cloner` to clone the first
	 * argument it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} cloner The function to clone arguments.
	 * @returns {Function} Returns the new immutable function.
	 */
	function wrapImmutable(func, cloner) {
	  return function() {
	    var length = arguments.length;
	    if (!length) {
	      return;
	    }
	    var args = Array(length);
	    while (length--) {
	      args[length] = arguments[length];
	    }
	    var result = args[0] = cloner.apply(undefined, args);
	    func.apply(undefined, args);
	    return result;
	  };
	}

	/**
	 * The base implementation of `convert` which accepts a `util` object of methods
	 * required to perform conversions.
	 *
	 * @param {Object} util The util object.
	 * @param {string} name The name of the function to convert.
	 * @param {Function} func The function to convert.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
	 * @param {boolean} [options.curry=true] Specify currying.
	 * @param {boolean} [options.fixed=true] Specify fixed arity.
	 * @param {boolean} [options.immutable=true] Specify immutable operations.
	 * @param {boolean} [options.rearg=true] Specify rearranging arguments.
	 * @returns {Function|Object} Returns the converted function or object.
	 */
	function baseConvert(util, name, func, options) {
	  var isLib = typeof name == 'function',
	      isObj = name === Object(name);

	  if (isObj) {
	    options = func;
	    func = name;
	    name = undefined;
	  }
	  if (func == null) {
	    throw new TypeError;
	  }
	  options || (options = {});

	  var config = {
	    'cap': 'cap' in options ? options.cap : true,
	    'curry': 'curry' in options ? options.curry : true,
	    'fixed': 'fixed' in options ? options.fixed : true,
	    'immutable': 'immutable' in options ? options.immutable : true,
	    'rearg': 'rearg' in options ? options.rearg : true
	  };

	  var defaultHolder = isLib ? func : fallbackHolder,
	      forceCurry = ('curry' in options) && options.curry,
	      forceFixed = ('fixed' in options) && options.fixed,
	      forceRearg = ('rearg' in options) && options.rearg,
	      pristine = isLib ? func.runInContext() : undefined;

	  var helpers = isLib ? func : {
	    'ary': util.ary,
	    'assign': util.assign,
	    'clone': util.clone,
	    'curry': util.curry,
	    'forEach': util.forEach,
	    'isArray': util.isArray,
	    'isError': util.isError,
	    'isFunction': util.isFunction,
	    'isWeakMap': util.isWeakMap,
	    'iteratee': util.iteratee,
	    'keys': util.keys,
	    'rearg': util.rearg,
	    'toInteger': util.toInteger,
	    'toPath': util.toPath
	  };

	  var ary = helpers.ary,
	      assign = helpers.assign,
	      clone = helpers.clone,
	      curry = helpers.curry,
	      each = helpers.forEach,
	      isArray = helpers.isArray,
	      isError = helpers.isError,
	      isFunction = helpers.isFunction,
	      isWeakMap = helpers.isWeakMap,
	      keys = helpers.keys,
	      rearg = helpers.rearg,
	      toInteger = helpers.toInteger,
	      toPath = helpers.toPath;

	  var aryMethodKeys = keys(mapping.aryMethod);

	  var wrappers = {
	    'castArray': function(castArray) {
	      return function() {
	        var value = arguments[0];
	        return isArray(value)
	          ? castArray(cloneArray(value))
	          : castArray.apply(undefined, arguments);
	      };
	    },
	    'iteratee': function(iteratee) {
	      return function() {
	        var func = arguments[0],
	            arity = arguments[1],
	            result = iteratee(func, arity),
	            length = result.length;

	        if (config.cap && typeof arity == 'number') {
	          arity = arity > 2 ? (arity - 2) : 1;
	          return (length && length <= arity) ? result : baseAry(result, arity);
	        }
	        return result;
	      };
	    },
	    'mixin': function(mixin) {
	      return function(source) {
	        var func = this;
	        if (!isFunction(func)) {
	          return mixin(func, Object(source));
	        }
	        var pairs = [];
	        each(keys(source), function(key) {
	          if (isFunction(source[key])) {
	            pairs.push([key, func.prototype[key]]);
	          }
	        });

	        mixin(func, Object(source));

	        each(pairs, function(pair) {
	          var value = pair[1];
	          if (isFunction(value)) {
	            func.prototype[pair[0]] = value;
	          } else {
	            delete func.prototype[pair[0]];
	          }
	        });
	        return func;
	      };
	    },
	    'nthArg': function(nthArg) {
	      return function(n) {
	        var arity = n < 0 ? 1 : (toInteger(n) + 1);
	        return curry(nthArg(n), arity);
	      };
	    },
	    'rearg': function(rearg) {
	      return function(func, indexes) {
	        var arity = indexes ? indexes.length : 0;
	        return curry(rearg(func, indexes), arity);
	      };
	    },
	    'runInContext': function(runInContext) {
	      return function(context) {
	        return baseConvert(util, runInContext(context), options);
	      };
	    }
	  };

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Casts `func` to a function with an arity capped iteratee if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @returns {Function} Returns the cast function.
	   */
	  function castCap(name, func) {
	    if (config.cap) {
	      var indexes = mapping.iterateeRearg[name];
	      if (indexes) {
	        return iterateeRearg(func, indexes);
	      }
	      var n = !isLib && mapping.iterateeAry[name];
	      if (n) {
	        return iterateeAry(func, n);
	      }
	    }
	    return func;
	  }

	  /**
	   * Casts `func` to a curried function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity of `func`.
	   * @returns {Function} Returns the cast function.
	   */
	  function castCurry(name, func, n) {
	    return (forceCurry || (config.curry && n > 1))
	      ? curry(func, n)
	      : func;
	  }

	  /**
	   * Casts `func` to a fixed arity function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity cap.
	   * @returns {Function} Returns the cast function.
	   */
	  function castFixed(name, func, n) {
	    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
	      var data = mapping.methodSpread[name],
	          start = data && data.start;

	      return start  === undefined ? ary(func, n) : flatSpread(func, start);
	    }
	    return func;
	  }

	  /**
	   * Casts `func` to an rearged function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity of `func`.
	   * @returns {Function} Returns the cast function.
	   */
	  function castRearg(name, func, n) {
	    return (config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]))
	      ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n])
	      : func;
	  }

	  /**
	   * Creates a clone of `object` by `path`.
	   *
	   * @private
	   * @param {Object} object The object to clone.
	   * @param {Array|string} path The path to clone by.
	   * @returns {Object} Returns the cloned object.
	   */
	  function cloneByPath(object, path) {
	    path = toPath(path);

	    var index = -1,
	        length = path.length,
	        lastIndex = length - 1,
	        result = clone(Object(object)),
	        nested = result;

	    while (nested != null && ++index < length) {
	      var key = path[index],
	          value = nested[key];

	      if (value != null &&
	          !(isFunction(value) || isError(value) || isWeakMap(value))) {
	        nested[key] = clone(index == lastIndex ? value : Object(value));
	      }
	      nested = nested[key];
	    }
	    return result;
	  }

	  /**
	   * Converts `lodash` to an immutable auto-curried iteratee-first data-last
	   * version with conversion `options` applied.
	   *
	   * @param {Object} [options] The options object. See `baseConvert` for more details.
	   * @returns {Function} Returns the converted `lodash`.
	   */
	  function convertLib(options) {
	    return _.runInContext.convert(options)(undefined);
	  }

	  /**
	   * Create a converter function for `func` of `name`.
	   *
	   * @param {string} name The name of the function to convert.
	   * @param {Function} func The function to convert.
	   * @returns {Function} Returns the new converter function.
	   */
	  function createConverter(name, func) {
	    var realName = mapping.aliasToReal[name] || name,
	        methodName = mapping.remap[realName] || realName,
	        oldOptions = options;

	    return function(options) {
	      var newUtil = isLib ? pristine : helpers,
	          newFunc = isLib ? pristine[methodName] : func,
	          newOptions = assign(assign({}, oldOptions), options);

	      return baseConvert(newUtil, realName, newFunc, newOptions);
	    };
	  }

	  /**
	   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
	   * arguments, ignoring any additional arguments.
	   *
	   * @private
	   * @param {Function} func The function to cap iteratee arguments for.
	   * @param {number} n The arity cap.
	   * @returns {Function} Returns the new function.
	   */
	  function iterateeAry(func, n) {
	    return overArg(func, function(func) {
	      return typeof func == 'function' ? baseAry(func, n) : func;
	    });
	  }

	  /**
	   * Creates a function that wraps `func` to invoke its iteratee with arguments
	   * arranged according to the specified `indexes` where the argument value at
	   * the first index is provided as the first argument, the argument value at
	   * the second index is provided as the second argument, and so on.
	   *
	   * @private
	   * @param {Function} func The function to rearrange iteratee arguments for.
	   * @param {number[]} indexes The arranged argument indexes.
	   * @returns {Function} Returns the new function.
	   */
	  function iterateeRearg(func, indexes) {
	    return overArg(func, function(func) {
	      var n = indexes.length;
	      return baseArity(rearg(baseAry(func, n), indexes), n);
	    });
	  }

	  /**
	   * Creates a function that invokes `func` with its first argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function() {
	      var length = arguments.length;
	      if (!length) {
	        return func();
	      }
	      var args = Array(length);
	      while (length--) {
	        args[length] = arguments[length];
	      }
	      var index = config.rearg ? 0 : (length - 1);
	      args[index] = transform(args[index]);
	      return func.apply(undefined, args);
	    };
	  }

	  /**
	   * Creates a function that wraps `func` and applys the conversions
	   * rules by `name`.
	   *
	   * @private
	   * @param {string} name The name of the function to wrap.
	   * @param {Function} func The function to wrap.
	   * @returns {Function} Returns the converted function.
	   */
	  function wrap(name, func, placeholder) {
	    var result,
	        realName = mapping.aliasToReal[name] || name,
	        wrapped = func,
	        wrapper = wrappers[realName];

	    if (wrapper) {
	      wrapped = wrapper(func);
	    }
	    else if (config.immutable) {
	      if (mapping.mutate.array[realName]) {
	        wrapped = wrapImmutable(func, cloneArray);
	      }
	      else if (mapping.mutate.object[realName]) {
	        wrapped = wrapImmutable(func, createCloner(func));
	      }
	      else if (mapping.mutate.set[realName]) {
	        wrapped = wrapImmutable(func, cloneByPath);
	      }
	    }
	    each(aryMethodKeys, function(aryKey) {
	      each(mapping.aryMethod[aryKey], function(otherName) {
	        if (realName == otherName) {
	          var data = mapping.methodSpread[realName],
	              afterRearg = data && data.afterRearg;

	          result = afterRearg
	            ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey)
	            : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);

	          result = castCap(realName, result);
	          result = castCurry(realName, result, aryKey);
	          return false;
	        }
	      });
	      return !result;
	    });

	    result || (result = wrapped);
	    if (result == func) {
	      result = forceCurry ? curry(result, 1) : function() {
	        return func.apply(this, arguments);
	      };
	    }
	    result.convert = createConverter(realName, func);
	    result.placeholder = func.placeholder = placeholder;

	    return result;
	  }

	  /*--------------------------------------------------------------------------*/

	  if (!isObj) {
	    return wrap(name, func, defaultHolder);
	  }
	  var _ = func;

	  // Convert methods by ary cap.
	  var pairs = [];
	  each(aryMethodKeys, function(aryKey) {
	    each(mapping.aryMethod[aryKey], function(key) {
	      var func = _[mapping.remap[key] || key];
	      if (func) {
	        pairs.push([key, wrap(key, func, _)]);
	      }
	    });
	  });

	  // Convert remaining methods.
	  each(keys(_), function(key) {
	    var func = _[key];
	    if (typeof func == 'function') {
	      var length = pairs.length;
	      while (length--) {
	        if (pairs[length][0] == key) {
	          return;
	        }
	      }
	      func.convert = createConverter(key, func);
	      pairs.push([key, func]);
	    }
	  });

	  // Assign to `_` leaving `_.prototype` unchanged to allow chaining.
	  each(pairs, function(pair) {
	    _[pair[0]] = pair[1];
	  });

	  _.convert = convertLib;
	  _.placeholder = _;

	  // Assign aliases.
	  each(keys(_), function(key) {
	    each(mapping.realToAlias[key] || [], function(alias) {
	      _[alias] = _[key];
	    });
	  });

	  return _;
	}

	module.exports = baseConvert;


/***/ }),
/* 360 */
/***/ (function(module, exports) {

	/** Used to map aliases to their real names. */
	exports.aliasToReal = {

	  // Lodash aliases.
	  'each': 'forEach',
	  'eachRight': 'forEachRight',
	  'entries': 'toPairs',
	  'entriesIn': 'toPairsIn',
	  'extend': 'assignIn',
	  'extendAll': 'assignInAll',
	  'extendAllWith': 'assignInAllWith',
	  'extendWith': 'assignInWith',
	  'first': 'head',

	  // Methods that are curried variants of others.
	  'conforms': 'conformsTo',
	  'matches': 'isMatch',
	  'property': 'get',

	  // Ramda aliases.
	  '__': 'placeholder',
	  'F': 'stubFalse',
	  'T': 'stubTrue',
	  'all': 'every',
	  'allPass': 'overEvery',
	  'always': 'constant',
	  'any': 'some',
	  'anyPass': 'overSome',
	  'apply': 'spread',
	  'assoc': 'set',
	  'assocPath': 'set',
	  'complement': 'negate',
	  'compose': 'flowRight',
	  'contains': 'includes',
	  'dissoc': 'unset',
	  'dissocPath': 'unset',
	  'dropLast': 'dropRight',
	  'dropLastWhile': 'dropRightWhile',
	  'equals': 'isEqual',
	  'identical': 'eq',
	  'indexBy': 'keyBy',
	  'init': 'initial',
	  'invertObj': 'invert',
	  'juxt': 'over',
	  'omitAll': 'omit',
	  'nAry': 'ary',
	  'path': 'get',
	  'pathEq': 'matchesProperty',
	  'pathOr': 'getOr',
	  'paths': 'at',
	  'pickAll': 'pick',
	  'pipe': 'flow',
	  'pluck': 'map',
	  'prop': 'get',
	  'propEq': 'matchesProperty',
	  'propOr': 'getOr',
	  'props': 'at',
	  'symmetricDifference': 'xor',
	  'symmetricDifferenceBy': 'xorBy',
	  'symmetricDifferenceWith': 'xorWith',
	  'takeLast': 'takeRight',
	  'takeLastWhile': 'takeRightWhile',
	  'unapply': 'rest',
	  'unnest': 'flatten',
	  'useWith': 'overArgs',
	  'where': 'conformsTo',
	  'whereEq': 'isMatch',
	  'zipObj': 'zipObject'
	};

	/** Used to map ary to method names. */
	exports.aryMethod = {
	  '1': [
	    'assignAll', 'assignInAll', 'attempt', 'castArray', 'ceil', 'create',
	    'curry', 'curryRight', 'defaultsAll', 'defaultsDeepAll', 'floor', 'flow',
	    'flowRight', 'fromPairs', 'invert', 'iteratee', 'memoize', 'method', 'mergeAll',
	    'methodOf', 'mixin', 'nthArg', 'over', 'overEvery', 'overSome','rest', 'reverse',
	    'round', 'runInContext', 'spread', 'template', 'trim', 'trimEnd', 'trimStart',
	    'uniqueId', 'words', 'zipAll'
	  ],
	  '2': [
	    'add', 'after', 'ary', 'assign', 'assignAllWith', 'assignIn', 'assignInAllWith',
	    'at', 'before', 'bind', 'bindAll', 'bindKey', 'chunk', 'cloneDeepWith',
	    'cloneWith', 'concat', 'conformsTo', 'countBy', 'curryN', 'curryRightN',
	    'debounce', 'defaults', 'defaultsDeep', 'defaultTo', 'delay', 'difference',
	    'divide', 'drop', 'dropRight', 'dropRightWhile', 'dropWhile', 'endsWith', 'eq',
	    'every', 'filter', 'find', 'findIndex', 'findKey', 'findLast', 'findLastIndex',
	    'findLastKey', 'flatMap', 'flatMapDeep', 'flattenDepth', 'forEach',
	    'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'get',
	    'groupBy', 'gt', 'gte', 'has', 'hasIn', 'includes', 'indexOf', 'intersection',
	    'invertBy', 'invoke', 'invokeMap', 'isEqual', 'isMatch', 'join', 'keyBy',
	    'lastIndexOf', 'lt', 'lte', 'map', 'mapKeys', 'mapValues', 'matchesProperty',
	    'maxBy', 'meanBy', 'merge', 'mergeAllWith', 'minBy', 'multiply', 'nth', 'omit',
	    'omitBy', 'overArgs', 'pad', 'padEnd', 'padStart', 'parseInt', 'partial',
	    'partialRight', 'partition', 'pick', 'pickBy', 'propertyOf', 'pull', 'pullAll',
	    'pullAt', 'random', 'range', 'rangeRight', 'rearg', 'reject', 'remove',
	    'repeat', 'restFrom', 'result', 'sampleSize', 'some', 'sortBy', 'sortedIndex',
	    'sortedIndexOf', 'sortedLastIndex', 'sortedLastIndexOf', 'sortedUniqBy',
	    'split', 'spreadFrom', 'startsWith', 'subtract', 'sumBy', 'take', 'takeRight',
	    'takeRightWhile', 'takeWhile', 'tap', 'throttle', 'thru', 'times', 'trimChars',
	    'trimCharsEnd', 'trimCharsStart', 'truncate', 'union', 'uniqBy', 'uniqWith',
	    'unset', 'unzipWith', 'without', 'wrap', 'xor', 'zip', 'zipObject',
	    'zipObjectDeep'
	  ],
	  '3': [
	    'assignInWith', 'assignWith', 'clamp', 'differenceBy', 'differenceWith',
	    'findFrom', 'findIndexFrom', 'findLastFrom', 'findLastIndexFrom', 'getOr',
	    'includesFrom', 'indexOfFrom', 'inRange', 'intersectionBy', 'intersectionWith',
	    'invokeArgs', 'invokeArgsMap', 'isEqualWith', 'isMatchWith', 'flatMapDepth',
	    'lastIndexOfFrom', 'mergeWith', 'orderBy', 'padChars', 'padCharsEnd',
	    'padCharsStart', 'pullAllBy', 'pullAllWith', 'rangeStep', 'rangeStepRight',
	    'reduce', 'reduceRight', 'replace', 'set', 'slice', 'sortedIndexBy',
	    'sortedLastIndexBy', 'transform', 'unionBy', 'unionWith', 'update', 'xorBy',
	    'xorWith', 'zipWith'
	  ],
	  '4': [
	    'fill', 'setWith', 'updateWith'
	  ]
	};

	/** Used to map ary to rearg configs. */
	exports.aryRearg = {
	  '2': [1, 0],
	  '3': [2, 0, 1],
	  '4': [3, 2, 0, 1]
	};

	/** Used to map method names to their iteratee ary. */
	exports.iterateeAry = {
	  'dropRightWhile': 1,
	  'dropWhile': 1,
	  'every': 1,
	  'filter': 1,
	  'find': 1,
	  'findFrom': 1,
	  'findIndex': 1,
	  'findIndexFrom': 1,
	  'findKey': 1,
	  'findLast': 1,
	  'findLastFrom': 1,
	  'findLastIndex': 1,
	  'findLastIndexFrom': 1,
	  'findLastKey': 1,
	  'flatMap': 1,
	  'flatMapDeep': 1,
	  'flatMapDepth': 1,
	  'forEach': 1,
	  'forEachRight': 1,
	  'forIn': 1,
	  'forInRight': 1,
	  'forOwn': 1,
	  'forOwnRight': 1,
	  'map': 1,
	  'mapKeys': 1,
	  'mapValues': 1,
	  'partition': 1,
	  'reduce': 2,
	  'reduceRight': 2,
	  'reject': 1,
	  'remove': 1,
	  'some': 1,
	  'takeRightWhile': 1,
	  'takeWhile': 1,
	  'times': 1,
	  'transform': 2
	};

	/** Used to map method names to iteratee rearg configs. */
	exports.iterateeRearg = {
	  'mapKeys': [1],
	  'reduceRight': [1, 0]
	};

	/** Used to map method names to rearg configs. */
	exports.methodRearg = {
	  'assignInAllWith': [1, 0],
	  'assignInWith': [1, 2, 0],
	  'assignAllWith': [1, 0],
	  'assignWith': [1, 2, 0],
	  'differenceBy': [1, 2, 0],
	  'differenceWith': [1, 2, 0],
	  'getOr': [2, 1, 0],
	  'intersectionBy': [1, 2, 0],
	  'intersectionWith': [1, 2, 0],
	  'isEqualWith': [1, 2, 0],
	  'isMatchWith': [2, 1, 0],
	  'mergeAllWith': [1, 0],
	  'mergeWith': [1, 2, 0],
	  'padChars': [2, 1, 0],
	  'padCharsEnd': [2, 1, 0],
	  'padCharsStart': [2, 1, 0],
	  'pullAllBy': [2, 1, 0],
	  'pullAllWith': [2, 1, 0],
	  'rangeStep': [1, 2, 0],
	  'rangeStepRight': [1, 2, 0],
	  'setWith': [3, 1, 2, 0],
	  'sortedIndexBy': [2, 1, 0],
	  'sortedLastIndexBy': [2, 1, 0],
	  'unionBy': [1, 2, 0],
	  'unionWith': [1, 2, 0],
	  'updateWith': [3, 1, 2, 0],
	  'xorBy': [1, 2, 0],
	  'xorWith': [1, 2, 0],
	  'zipWith': [1, 2, 0]
	};

	/** Used to map method names to spread configs. */
	exports.methodSpread = {
	  'assignAll': { 'start': 0 },
	  'assignAllWith': { 'start': 0 },
	  'assignInAll': { 'start': 0 },
	  'assignInAllWith': { 'start': 0 },
	  'defaultsAll': { 'start': 0 },
	  'defaultsDeepAll': { 'start': 0 },
	  'invokeArgs': { 'start': 2 },
	  'invokeArgsMap': { 'start': 2 },
	  'mergeAll': { 'start': 0 },
	  'mergeAllWith': { 'start': 0 },
	  'partial': { 'start': 1 },
	  'partialRight': { 'start': 1 },
	  'without': { 'start': 1 },
	  'zipAll': { 'start': 0 }
	};

	/** Used to identify methods which mutate arrays or objects. */
	exports.mutate = {
	  'array': {
	    'fill': true,
	    'pull': true,
	    'pullAll': true,
	    'pullAllBy': true,
	    'pullAllWith': true,
	    'pullAt': true,
	    'remove': true,
	    'reverse': true
	  },
	  'object': {
	    'assign': true,
	    'assignAll': true,
	    'assignAllWith': true,
	    'assignIn': true,
	    'assignInAll': true,
	    'assignInAllWith': true,
	    'assignInWith': true,
	    'assignWith': true,
	    'defaults': true,
	    'defaultsAll': true,
	    'defaultsDeep': true,
	    'defaultsDeepAll': true,
	    'merge': true,
	    'mergeAll': true,
	    'mergeAllWith': true,
	    'mergeWith': true,
	  },
	  'set': {
	    'set': true,
	    'setWith': true,
	    'unset': true,
	    'update': true,
	    'updateWith': true
	  }
	};

	/** Used to map real names to their aliases. */
	exports.realToAlias = (function() {
	  var hasOwnProperty = Object.prototype.hasOwnProperty,
	      object = exports.aliasToReal,
	      result = {};

	  for (var key in object) {
	    var value = object[key];
	    if (hasOwnProperty.call(result, value)) {
	      result[value].push(key);
	    } else {
	      result[value] = [key];
	    }
	  }
	  return result;
	}());

	/** Used to map method names to other names. */
	exports.remap = {
	  'assignAll': 'assign',
	  'assignAllWith': 'assignWith',
	  'assignInAll': 'assignIn',
	  'assignInAllWith': 'assignInWith',
	  'curryN': 'curry',
	  'curryRightN': 'curryRight',
	  'defaultsAll': 'defaults',
	  'defaultsDeepAll': 'defaultsDeep',
	  'findFrom': 'find',
	  'findIndexFrom': 'findIndex',
	  'findLastFrom': 'findLast',
	  'findLastIndexFrom': 'findLastIndex',
	  'getOr': 'get',
	  'includesFrom': 'includes',
	  'indexOfFrom': 'indexOf',
	  'invokeArgs': 'invoke',
	  'invokeArgsMap': 'invokeMap',
	  'lastIndexOfFrom': 'lastIndexOf',
	  'mergeAll': 'merge',
	  'mergeAllWith': 'mergeWith',
	  'padChars': 'pad',
	  'padCharsEnd': 'padEnd',
	  'padCharsStart': 'padStart',
	  'propertyOf': 'get',
	  'rangeStep': 'range',
	  'rangeStepRight': 'rangeRight',
	  'restFrom': 'rest',
	  'spreadFrom': 'spread',
	  'trimChars': 'trim',
	  'trimCharsEnd': 'trimEnd',
	  'trimCharsStart': 'trimStart',
	  'zipAll': 'zip'
	};

	/** Used to track methods that skip fixing their arity. */
	exports.skipFixed = {
	  'castArray': true,
	  'flow': true,
	  'flowRight': true,
	  'iteratee': true,
	  'mixin': true,
	  'rearg': true,
	  'runInContext': true
	};

	/** Used to track methods that skip rearranging arguments. */
	exports.skipRearg = {
	  'add': true,
	  'assign': true,
	  'assignIn': true,
	  'bind': true,
	  'bindKey': true,
	  'concat': true,
	  'difference': true,
	  'divide': true,
	  'eq': true,
	  'gt': true,
	  'gte': true,
	  'isEqual': true,
	  'lt': true,
	  'lte': true,
	  'matchesProperty': true,
	  'merge': true,
	  'multiply': true,
	  'overArgs': true,
	  'partial': true,
	  'partialRight': true,
	  'propertyOf': true,
	  'random': true,
	  'range': true,
	  'rangeRight': true,
	  'subtract': true,
	  'zip': true,
	  'zipObject': true,
	  'zipObjectDeep': true
	};


/***/ }),
/* 361 */
/***/ (function(module, exports) {

	/**
	 * The default argument placeholder value for methods.
	 *
	 * @type {Object}
	 */
	module.exports = {};


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  'ary': __webpack_require__(363),
	  'assign': __webpack_require__(397),
	  'clone': __webpack_require__(400),
	  'curry': __webpack_require__(423),
	  'forEach': __webpack_require__(331),
	  'isArray': __webpack_require__(181),
	  'isError': __webpack_require__(424),
	  'isFunction': __webpack_require__(194),
	  'isWeakMap': __webpack_require__(425),
	  'iteratee': __webpack_require__(426),
	  'keys': __webpack_require__(284),
	  'rearg': __webpack_require__(427),
	  'toInteger': __webpack_require__(266),
	  'toPath': __webpack_require__(430)
	};


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	var createWrap = __webpack_require__(364);

	/** Used to compose bitmasks for function metadata. */
	var WRAP_ARY_FLAG = 128;

	/**
	 * Creates a function that invokes `func`, with up to `n` arguments,
	 * ignoring any additional arguments.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {Function} func The function to cap arguments for.
	 * @param {number} [n=func.length] The arity cap.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Function} Returns the new capped function.
	 * @example
	 *
	 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	 * // => [6, 8, 10]
	 */
	function ary(func, n, guard) {
	  n = guard ? undefined : n;
	  n = (func && n == null) ? func.length : n;
	  return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
	}

	module.exports = ary;


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSetData = __webpack_require__(365),
	    createBind = __webpack_require__(367),
	    createCurry = __webpack_require__(370),
	    createHybrid = __webpack_require__(371),
	    createPartial = __webpack_require__(395),
	    getData = __webpack_require__(379),
	    mergeData = __webpack_require__(396),
	    setData = __webpack_require__(387),
	    setWrapToString = __webpack_require__(388),
	    toInteger = __webpack_require__(266);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG = 1,
	    WRAP_BIND_KEY_FLAG = 2,
	    WRAP_CURRY_FLAG = 8,
	    WRAP_CURRY_RIGHT_FLAG = 16,
	    WRAP_PARTIAL_FLAG = 32,
	    WRAP_PARTIAL_RIGHT_FLAG = 64;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that either curries or invokes `func` with optional
	 * `this` binding and partially applied arguments.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags.
	 *    1 - `_.bind`
	 *    2 - `_.bindKey`
	 *    4 - `_.curry` or `_.curryRight` of a bound function
	 *    8 - `_.curry`
	 *   16 - `_.curryRight`
	 *   32 - `_.partial`
	 *   64 - `_.partialRight`
	 *  128 - `_.rearg`
	 *  256 - `_.ary`
	 *  512 - `_.flip`
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to be partially applied.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	  if (!isBindKey && typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var length = partials ? partials.length : 0;
	  if (!length) {
	    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	    partials = holders = undefined;
	  }
	  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	  arity = arity === undefined ? arity : toInteger(arity);
	  length -= holders ? holders.length : 0;

	  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	    var partialsRight = partials,
	        holdersRight = holders;

	    partials = holders = undefined;
	  }
	  var data = isBindKey ? undefined : getData(func);

	  var newData = [
	    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	    argPos, ary, arity
	  ];

	  if (data) {
	    mergeData(newData, data);
	  }
	  func = newData[0];
	  bitmask = newData[1];
	  thisArg = newData[2];
	  partials = newData[3];
	  holders = newData[4];
	  arity = newData[9] = newData[9] === undefined
	    ? (isBindKey ? 0 : func.length)
	    : nativeMax(newData[9] - length, 0);

	  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	  }
	  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	    var result = createBind(func, bitmask, thisArg);
	  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	    result = createCurry(func, bitmask, arity);
	  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	    result = createPartial(func, bitmask, thisArg, partials);
	  } else {
	    result = createHybrid.apply(undefined, newData);
	  }
	  var setter = data ? baseSetData : setData;
	  return setWrapToString(setter(result, newData), func, bitmask);
	}

	module.exports = createWrap;


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(235),
	    metaMap = __webpack_require__(366);

	/**
	 * The base implementation of `setData` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to associate metadata with.
	 * @param {*} data The metadata.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetData = !metaMap ? identity : function(func, data) {
	  metaMap.set(func, data);
	  return func;
	};

	module.exports = baseSetData;


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	var WeakMap = __webpack_require__(314);

	/** Used to store function metadata. */
	var metaMap = WeakMap && new WeakMap;

	module.exports = metaMap;


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	var createCtor = __webpack_require__(368),
	    root = __webpack_require__(36);

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG = 1;

	/**
	 * Creates a function that wraps `func` to invoke it with the optional `this`
	 * binding of `thisArg`.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createBind(func, bitmask, thisArg) {
	  var isBind = bitmask & WRAP_BIND_FLAG,
	      Ctor = createCtor(func);

	  function wrapper() {
	    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	    return fn.apply(isBind ? thisArg : this, arguments);
	  }
	  return wrapper;
	}

	module.exports = createBind;


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(369),
	    isObject = __webpack_require__(195);

	/**
	 * Creates a function that produces an instance of `Ctor` regardless of
	 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	 *
	 * @private
	 * @param {Function} Ctor The constructor to wrap.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCtor(Ctor) {
	  return function() {
	    // Use a `switch` statement to work with class constructors. See
	    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	    // for more details.
	    var args = arguments;
	    switch (args.length) {
	      case 0: return new Ctor;
	      case 1: return new Ctor(args[0]);
	      case 2: return new Ctor(args[0], args[1]);
	      case 3: return new Ctor(args[0], args[1], args[2]);
	      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	    }
	    var thisBinding = baseCreate(Ctor.prototype),
	        result = Ctor.apply(thisBinding, args);

	    // Mimic the constructor's `return` behavior.
	    // See https://es5.github.io/#x13.2.2 for more details.
	    return isObject(result) ? result : thisBinding;
	  };
	}

	module.exports = createCtor;


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(195);

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = (function() {
	  function object() {}
	  return function(proto) {
	    if (!isObject(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object;
	    object.prototype = undefined;
	    return result;
	  };
	}());

	module.exports = baseCreate;


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(229),
	    createCtor = __webpack_require__(368),
	    createHybrid = __webpack_require__(371),
	    createRecurry = __webpack_require__(375),
	    getHolder = __webpack_require__(392),
	    replaceHolders = __webpack_require__(394),
	    root = __webpack_require__(36);

	/**
	 * Creates a function that wraps `func` to enable currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {number} arity The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCurry(func, bitmask, arity) {
	  var Ctor = createCtor(func);

	  function wrapper() {
	    var length = arguments.length,
	        args = Array(length),
	        index = length,
	        placeholder = getHolder(wrapper);

	    while (index--) {
	      args[index] = arguments[index];
	    }
	    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	      ? []
	      : replaceHolders(args, placeholder);

	    length -= holders.length;
	    if (length < arity) {
	      return createRecurry(
	        func, bitmask, createHybrid, wrapper.placeholder, undefined,
	        args, holders, undefined, undefined, arity - length);
	    }
	    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	    return apply(fn, this, args);
	  }
	  return wrapper;
	}

	module.exports = createCurry;


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	var composeArgs = __webpack_require__(372),
	    composeArgsRight = __webpack_require__(373),
	    countHolders = __webpack_require__(374),
	    createCtor = __webpack_require__(368),
	    createRecurry = __webpack_require__(375),
	    getHolder = __webpack_require__(392),
	    reorder = __webpack_require__(393),
	    replaceHolders = __webpack_require__(394),
	    root = __webpack_require__(36);

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG = 1,
	    WRAP_BIND_KEY_FLAG = 2,
	    WRAP_CURRY_FLAG = 8,
	    WRAP_CURRY_RIGHT_FLAG = 16,
	    WRAP_ARY_FLAG = 128,
	    WRAP_FLIP_FLAG = 512;

	/**
	 * Creates a function that wraps `func` to invoke it with optional `this`
	 * binding of `thisArg`, partial application, and currying.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [partialsRight] The arguments to append to those provided
	 *  to the new function.
	 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	  var isAry = bitmask & WRAP_ARY_FLAG,
	      isBind = bitmask & WRAP_BIND_FLAG,
	      isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	      isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	      isFlip = bitmask & WRAP_FLIP_FLAG,
	      Ctor = isBindKey ? undefined : createCtor(func);

	  function wrapper() {
	    var length = arguments.length,
	        args = Array(length),
	        index = length;

	    while (index--) {
	      args[index] = arguments[index];
	    }
	    if (isCurried) {
	      var placeholder = getHolder(wrapper),
	          holdersCount = countHolders(args, placeholder);
	    }
	    if (partials) {
	      args = composeArgs(args, partials, holders, isCurried);
	    }
	    if (partialsRight) {
	      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	    }
	    length -= holdersCount;
	    if (isCurried && length < arity) {
	      var newHolders = replaceHolders(args, placeholder);
	      return createRecurry(
	        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	        args, newHolders, argPos, ary, arity - length
	      );
	    }
	    var thisBinding = isBind ? thisArg : this,
	        fn = isBindKey ? thisBinding[func] : func;

	    length = args.length;
	    if (argPos) {
	      args = reorder(args, argPos);
	    } else if (isFlip && length > 1) {
	      args.reverse();
	    }
	    if (isAry && ary < length) {
	      args.length = ary;
	    }
	    if (this && this !== root && this instanceof wrapper) {
	      fn = Ctor || createCtor(fn);
	    }
	    return fn.apply(thisBinding, args);
	  }
	  return wrapper;
	}

	module.exports = createHybrid;


/***/ }),
/* 372 */
/***/ (function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates an array that is the composition of partially applied arguments,
	 * placeholders, and provided arguments into a single array of arguments.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to prepend to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgs(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	      argsLength = args.length,
	      holdersLength = holders.length,
	      leftIndex = -1,
	      leftLength = partials.length,
	      rangeLength = nativeMax(argsLength - holdersLength, 0),
	      result = Array(leftLength + rangeLength),
	      isUncurried = !isCurried;

	  while (++leftIndex < leftLength) {
	    result[leftIndex] = partials[leftIndex];
	  }
	  while (++argsIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[holders[argsIndex]] = args[argsIndex];
	    }
	  }
	  while (rangeLength--) {
	    result[leftIndex++] = args[argsIndex++];
	  }
	  return result;
	}

	module.exports = composeArgs;


/***/ }),
/* 373 */
/***/ (function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * This function is like `composeArgs` except that the arguments composition
	 * is tailored for `_.partialRight`.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to append to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgsRight(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	      argsLength = args.length,
	      holdersIndex = -1,
	      holdersLength = holders.length,
	      rightIndex = -1,
	      rightLength = partials.length,
	      rangeLength = nativeMax(argsLength - holdersLength, 0),
	      result = Array(rangeLength + rightLength),
	      isUncurried = !isCurried;

	  while (++argsIndex < rangeLength) {
	    result[argsIndex] = args[argsIndex];
	  }
	  var offset = argsIndex;
	  while (++rightIndex < rightLength) {
	    result[offset + rightIndex] = partials[rightIndex];
	  }
	  while (++holdersIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[offset + holders[holdersIndex]] = args[argsIndex++];
	    }
	  }
	  return result;
	}

	module.exports = composeArgsRight;


/***/ }),
/* 374 */
/***/ (function(module, exports) {

	/**
	 * Gets the number of `placeholder` occurrences in `array`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} placeholder The placeholder to search for.
	 * @returns {number} Returns the placeholder count.
	 */
	function countHolders(array, placeholder) {
	  var length = array.length,
	      result = 0;

	  while (length--) {
	    if (array[length] === placeholder) {
	      ++result;
	    }
	  }
	  return result;
	}

	module.exports = countHolders;


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	var isLaziable = __webpack_require__(376),
	    setData = __webpack_require__(387),
	    setWrapToString = __webpack_require__(388);

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG = 1,
	    WRAP_BIND_KEY_FLAG = 2,
	    WRAP_CURRY_BOUND_FLAG = 4,
	    WRAP_CURRY_FLAG = 8,
	    WRAP_PARTIAL_FLAG = 32,
	    WRAP_PARTIAL_RIGHT_FLAG = 64;

	/**
	 * Creates a function that wraps `func` to continue currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {Function} wrapFunc The function to create the `func` wrapper.
	 * @param {*} placeholder The placeholder value.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	  var isCurry = bitmask & WRAP_CURRY_FLAG,
	      newHolders = isCurry ? holders : undefined,
	      newHoldersRight = isCurry ? undefined : holders,
	      newPartials = isCurry ? partials : undefined,
	      newPartialsRight = isCurry ? undefined : partials;

	  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

	  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	  }
	  var newData = [
	    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	    newHoldersRight, argPos, ary, arity
	  ];

	  var result = wrapFunc.apply(undefined, newData);
	  if (isLaziable(func)) {
	    setData(result, newData);
	  }
	  result.placeholder = placeholder;
	  return setWrapToString(result, func, bitmask);
	}

	module.exports = createRecurry;


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	var LazyWrapper = __webpack_require__(377),
	    getData = __webpack_require__(379),
	    getFuncName = __webpack_require__(381),
	    lodash = __webpack_require__(383);

	/**
	 * Checks if `func` has a lazy counterpart.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	 *  else `false`.
	 */
	function isLaziable(func) {
	  var funcName = getFuncName(func),
	      other = lodash[funcName];

	  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	    return false;
	  }
	  if (func === other) {
	    return true;
	  }
	  var data = getData(other);
	  return !!data && func === data[0];
	}

	module.exports = isLaziable;


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(369),
	    baseLodash = __webpack_require__(378);

	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295;

	/**
	 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	 *
	 * @private
	 * @constructor
	 * @param {*} value The value to wrap.
	 */
	function LazyWrapper(value) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__dir__ = 1;
	  this.__filtered__ = false;
	  this.__iteratees__ = [];
	  this.__takeCount__ = MAX_ARRAY_LENGTH;
	  this.__views__ = [];
	}

	// Ensure `LazyWrapper` is an instance of `baseLodash`.
	LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	LazyWrapper.prototype.constructor = LazyWrapper;

	module.exports = LazyWrapper;


/***/ }),
/* 378 */
/***/ (function(module, exports) {

	/**
	 * The function whose prototype chain sequence wrappers inherit from.
	 *
	 * @private
	 */
	function baseLodash() {
	  // No operation performed.
	}

	module.exports = baseLodash;


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	var metaMap = __webpack_require__(366),
	    noop = __webpack_require__(380);

	/**
	 * Gets metadata for `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {*} Returns the metadata for `func`.
	 */
	var getData = !metaMap ? noop : function(func) {
	  return metaMap.get(func);
	};

	module.exports = getData;


/***/ }),
/* 380 */
/***/ (function(module, exports) {

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop() {
	  // No operation performed.
	}

	module.exports = noop;


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	var realNames = __webpack_require__(382);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the name of `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {string} Returns the function name.
	 */
	function getFuncName(func) {
	  var result = (func.name + ''),
	      array = realNames[result],
	      length = hasOwnProperty.call(realNames, result) ? array.length : 0;

	  while (length--) {
	    var data = array[length],
	        otherFunc = data.func;
	    if (otherFunc == null || otherFunc == func) {
	      return data.name;
	    }
	  }
	  return result;
	}

	module.exports = getFuncName;


/***/ }),
/* 382 */
/***/ (function(module, exports) {

	/** Used to lookup unminified function names. */
	var realNames = {};

	module.exports = realNames;


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	var LazyWrapper = __webpack_require__(377),
	    LodashWrapper = __webpack_require__(384),
	    baseLodash = __webpack_require__(378),
	    isArray = __webpack_require__(181),
	    isObjectLike = __webpack_require__(42),
	    wrapperClone = __webpack_require__(385);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates a `lodash` object which wraps `value` to enable implicit method
	 * chain sequences. Methods that operate on and return arrays, collections,
	 * and functions can be chained together. Methods that retrieve a single value
	 * or may return a primitive value will automatically end the chain sequence
	 * and return the unwrapped value. Otherwise, the value must be unwrapped
	 * with `_#value`.
	 *
	 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	 * enabled using `_.chain`.
	 *
	 * The execution of chained methods is lazy, that is, it's deferred until
	 * `_#value` is implicitly or explicitly called.
	 *
	 * Lazy evaluation allows several methods to support shortcut fusion.
	 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	 * the creation of intermediate arrays and can greatly reduce the number of
	 * iteratee executions. Sections of a chain sequence qualify for shortcut
	 * fusion if the section is applied to an array and iteratees accept only
	 * one argument. The heuristic for whether a section qualifies for shortcut
	 * fusion is subject to change.
	 *
	 * Chaining is supported in custom builds as long as the `_#value` method is
	 * directly or indirectly included in the build.
	 *
	 * In addition to lodash methods, wrappers have `Array` and `String` methods.
	 *
	 * The wrapper `Array` methods are:
	 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	 *
	 * The wrapper `String` methods are:
	 * `replace` and `split`
	 *
	 * The wrapper methods that support shortcut fusion are:
	 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	 *
	 * The chainable wrapper methods are:
	 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	 * `zipObject`, `zipObjectDeep`, and `zipWith`
	 *
	 * The wrapper methods that are **not** chainable by default are:
	 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	 * `upperFirst`, `value`, and `words`
	 *
	 * @name _
	 * @constructor
	 * @category Seq
	 * @param {*} value The value to wrap in a `lodash` instance.
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var wrapped = _([1, 2, 3]);
	 *
	 * // Returns an unwrapped value.
	 * wrapped.reduce(_.add);
	 * // => 6
	 *
	 * // Returns a wrapped value.
	 * var squares = wrapped.map(square);
	 *
	 * _.isArray(squares);
	 * // => false
	 *
	 * _.isArray(squares.value());
	 * // => true
	 */
	function lodash(value) {
	  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	    if (value instanceof LodashWrapper) {
	      return value;
	    }
	    if (hasOwnProperty.call(value, '__wrapped__')) {
	      return wrapperClone(value);
	    }
	  }
	  return new LodashWrapper(value);
	}

	// Ensure wrappers are instances of `baseLodash`.
	lodash.prototype = baseLodash.prototype;
	lodash.prototype.constructor = lodash;

	module.exports = lodash;


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(369),
	    baseLodash = __webpack_require__(378);

	/**
	 * The base constructor for creating `lodash` wrapper objects.
	 *
	 * @private
	 * @param {*} value The value to wrap.
	 * @param {boolean} [chainAll] Enable explicit method chain sequences.
	 */
	function LodashWrapper(value, chainAll) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__chain__ = !!chainAll;
	  this.__index__ = 0;
	  this.__values__ = undefined;
	}

	LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	LodashWrapper.prototype.constructor = LodashWrapper;

	module.exports = LodashWrapper;


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	var LazyWrapper = __webpack_require__(377),
	    LodashWrapper = __webpack_require__(384),
	    copyArray = __webpack_require__(386);

	/**
	 * Creates a clone of `wrapper`.
	 *
	 * @private
	 * @param {Object} wrapper The wrapper to clone.
	 * @returns {Object} Returns the cloned wrapper.
	 */
	function wrapperClone(wrapper) {
	  if (wrapper instanceof LazyWrapper) {
	    return wrapper.clone();
	  }
	  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	  result.__actions__ = copyArray(wrapper.__actions__);
	  result.__index__  = wrapper.__index__;
	  result.__values__ = wrapper.__values__;
	  return result;
	}

	module.exports = wrapperClone;


/***/ }),
/* 386 */
/***/ (function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = copyArray;


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSetData = __webpack_require__(365),
	    shortOut = __webpack_require__(241);

	/**
	 * Sets metadata for `func`.
	 *
	 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	 * period of time, it will trip its breaker and transition to an identity
	 * function to avoid garbage collection pauses in V8. See
	 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	 * for more details.
	 *
	 * @private
	 * @param {Function} func The function to associate metadata with.
	 * @param {*} data The metadata.
	 * @returns {Function} Returns `func`.
	 */
	var setData = shortOut(baseSetData);

	module.exports = setData;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	var getWrapDetails = __webpack_require__(389),
	    insertWrapDetails = __webpack_require__(390),
	    setToString = __webpack_require__(237),
	    updateWrapDetails = __webpack_require__(391);

	/**
	 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	 * with wrapper details in a comment at the top of the source body.
	 *
	 * @private
	 * @param {Function} wrapper The function to modify.
	 * @param {Function} reference The reference function.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Function} Returns `wrapper`.
	 */
	function setWrapToString(wrapper, reference, bitmask) {
	  var source = (reference + '');
	  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	}

	module.exports = setWrapToString;


/***/ }),
/* 389 */
/***/ (function(module, exports) {

	/** Used to match wrap detail comments. */
	var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	    reSplitDetails = /,? & /;

	/**
	 * Extracts wrapper details from the `source` body comment.
	 *
	 * @private
	 * @param {string} source The source to inspect.
	 * @returns {Array} Returns the wrapper details.
	 */
	function getWrapDetails(source) {
	  var match = source.match(reWrapDetails);
	  return match ? match[1].split(reSplitDetails) : [];
	}

	module.exports = getWrapDetails;


/***/ }),
/* 390 */
/***/ (function(module, exports) {

	/** Used to match wrap detail comments. */
	var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

	/**
	 * Inserts wrapper `details` in a comment at the top of the `source` body.
	 *
	 * @private
	 * @param {string} source The source to modify.
	 * @returns {Array} details The details to insert.
	 * @returns {string} Returns the modified source.
	 */
	function insertWrapDetails(source, details) {
	  var length = details.length;
	  if (!length) {
	    return source;
	  }
	  var lastIndex = length - 1;
	  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	  details = details.join(length > 2 ? ', ' : ' ');
	  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	}

	module.exports = insertWrapDetails;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(331),
	    arrayIncludes = __webpack_require__(250);

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG = 1,
	    WRAP_BIND_KEY_FLAG = 2,
	    WRAP_CURRY_FLAG = 8,
	    WRAP_CURRY_RIGHT_FLAG = 16,
	    WRAP_PARTIAL_FLAG = 32,
	    WRAP_PARTIAL_RIGHT_FLAG = 64,
	    WRAP_ARY_FLAG = 128,
	    WRAP_REARG_FLAG = 256,
	    WRAP_FLIP_FLAG = 512;

	/** Used to associate wrap methods with their bit flags. */
	var wrapFlags = [
	  ['ary', WRAP_ARY_FLAG],
	  ['bind', WRAP_BIND_FLAG],
	  ['bindKey', WRAP_BIND_KEY_FLAG],
	  ['curry', WRAP_CURRY_FLAG],
	  ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	  ['flip', WRAP_FLIP_FLAG],
	  ['partial', WRAP_PARTIAL_FLAG],
	  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	  ['rearg', WRAP_REARG_FLAG]
	];

	/**
	 * Updates wrapper `details` based on `bitmask` flags.
	 *
	 * @private
	 * @returns {Array} details The details to modify.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Array} Returns `details`.
	 */
	function updateWrapDetails(details, bitmask) {
	  arrayEach(wrapFlags, function(pair) {
	    var value = '_.' + pair[0];
	    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	      details.push(value);
	    }
	  });
	  return details.sort();
	}

	module.exports = updateWrapDetails;


/***/ }),
/* 392 */
/***/ (function(module, exports) {

	/**
	 * Gets the argument placeholder value for `func`.
	 *
	 * @private
	 * @param {Function} func The function to inspect.
	 * @returns {*} Returns the placeholder value.
	 */
	function getHolder(func) {
	  var object = func;
	  return object.placeholder;
	}

	module.exports = getHolder;


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	var copyArray = __webpack_require__(386),
	    isIndex = __webpack_require__(224);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * Reorder `array` according to the specified indexes where the element at
	 * the first index is assigned as the first element, the element at
	 * the second index is assigned as the second element, and so on.
	 *
	 * @private
	 * @param {Array} array The array to reorder.
	 * @param {Array} indexes The arranged array indexes.
	 * @returns {Array} Returns `array`.
	 */
	function reorder(array, indexes) {
	  var arrLength = array.length,
	      length = nativeMin(indexes.length, arrLength),
	      oldArray = copyArray(array);

	  while (length--) {
	    var index = indexes[length];
	    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	  }
	  return array;
	}

	module.exports = reorder;


/***/ }),
/* 394 */
/***/ (function(module, exports) {

	/** Used as the internal argument placeholder. */
	var PLACEHOLDER = '__lodash_placeholder__';

	/**
	 * Replaces all `placeholder` elements in `array` with an internal placeholder
	 * and returns an array of their indexes.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {*} placeholder The placeholder to replace.
	 * @returns {Array} Returns the new array of placeholder indexes.
	 */
	function replaceHolders(array, placeholder) {
	  var index = -1,
	      length = array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (value === placeholder || value === PLACEHOLDER) {
	      array[index] = PLACEHOLDER;
	      result[resIndex++] = index;
	    }
	  }
	  return result;
	}

	module.exports = replaceHolders;


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(229),
	    createCtor = __webpack_require__(368),
	    root = __webpack_require__(36);

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG = 1;

	/**
	 * Creates a function that wraps `func` to invoke it with the `this` binding
	 * of `thisArg` and `partials` prepended to the arguments it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} partials The arguments to prepend to those provided to
	 *  the new function.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createPartial(func, bitmask, thisArg, partials) {
	  var isBind = bitmask & WRAP_BIND_FLAG,
	      Ctor = createCtor(func);

	  function wrapper() {
	    var argsIndex = -1,
	        argsLength = arguments.length,
	        leftIndex = -1,
	        leftLength = partials.length,
	        args = Array(leftLength + argsLength),
	        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	    while (++leftIndex < leftLength) {
	      args[leftIndex] = partials[leftIndex];
	    }
	    while (argsLength--) {
	      args[leftIndex++] = arguments[++argsIndex];
	    }
	    return apply(fn, isBind ? thisArg : this, args);
	  }
	  return wrapper;
	}

	module.exports = createPartial;


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	var composeArgs = __webpack_require__(372),
	    composeArgsRight = __webpack_require__(373),
	    replaceHolders = __webpack_require__(394);

	/** Used as the internal argument placeholder. */
	var PLACEHOLDER = '__lodash_placeholder__';

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG = 1,
	    WRAP_BIND_KEY_FLAG = 2,
	    WRAP_CURRY_BOUND_FLAG = 4,
	    WRAP_CURRY_FLAG = 8,
	    WRAP_ARY_FLAG = 128,
	    WRAP_REARG_FLAG = 256;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * Merges the function metadata of `source` into `data`.
	 *
	 * Merging metadata reduces the number of wrappers used to invoke a function.
	 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	 * may be applied regardless of execution order. Methods like `_.ary` and
	 * `_.rearg` modify function arguments, making the order in which they are
	 * executed important, preventing the merging of metadata. However, we make
	 * an exception for a safe combined case where curried functions have `_.ary`
	 * and or `_.rearg` applied.
	 *
	 * @private
	 * @param {Array} data The destination metadata.
	 * @param {Array} source The source metadata.
	 * @returns {Array} Returns `data`.
	 */
	function mergeData(data, source) {
	  var bitmask = data[1],
	      srcBitmask = source[1],
	      newBitmask = bitmask | srcBitmask,
	      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

	  var isCombo =
	    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

	  // Exit early if metadata can't be merged.
	  if (!(isCommon || isCombo)) {
	    return data;
	  }
	  // Use source `thisArg` if available.
	  if (srcBitmask & WRAP_BIND_FLAG) {
	    data[2] = source[2];
	    // Set when currying a bound function.
	    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	  }
	  // Compose partial arguments.
	  var value = source[3];
	  if (value) {
	    var partials = data[3];
	    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	  }
	  // Compose partial right arguments.
	  value = source[5];
	  if (value) {
	    partials = data[5];
	    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	  }
	  // Use source `argPos` if available.
	  value = source[7];
	  if (value) {
	    data[7] = value;
	  }
	  // Use source `ary` if it's smaller.
	  if (srcBitmask & WRAP_ARY_FLAG) {
	    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	  }
	  // Use source `arity` if one is not provided.
	  if (data[9] == null) {
	    data[9] = source[9];
	  }
	  // Use source `func` and merge bitmasks.
	  data[0] = source[0];
	  data[1] = newBitmask;

	  return data;
	}

	module.exports = mergeData;


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(398),
	    keys = __webpack_require__(276);

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(399),
	    baseAssignValue = __webpack_require__(339);

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}

	module.exports = copyObject;


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(339),
	    eq = __webpack_require__(208);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}

	module.exports = assignValue;


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(401);

	/** Used to compose bitmasks for cloning. */
	var CLONE_SYMBOLS_FLAG = 4;

	/**
	 * Creates a shallow clone of `value`.
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	 * and supports cloning arrays, array buffers, booleans, date objects, maps,
	 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	 * arrays. The own enumerable properties of `arguments` objects are cloned
	 * as plain objects. An empty object is returned for uncloneable values such
	 * as error objects, functions, DOM nodes, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to clone.
	 * @returns {*} Returns the cloned value.
	 * @see _.cloneDeep
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var shallow = _.clone(objects);
	 * console.log(shallow[0] === objects[0]);
	 * // => true
	 */
	function clone(value) {
	  return baseClone(value, CLONE_SYMBOLS_FLAG);
	}

	module.exports = clone;


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(291),
	    arrayEach = __webpack_require__(331),
	    assignValue = __webpack_require__(399),
	    baseAssign = __webpack_require__(397),
	    baseAssignIn = __webpack_require__(402),
	    cloneBuffer = __webpack_require__(406),
	    copyArray = __webpack_require__(386),
	    copySymbols = __webpack_require__(407),
	    copySymbolsIn = __webpack_require__(408),
	    getAllKeys = __webpack_require__(306),
	    getAllKeysIn = __webpack_require__(410),
	    getTag = __webpack_require__(310),
	    initCloneArray = __webpack_require__(411),
	    initCloneByTag = __webpack_require__(412),
	    initCloneObject = __webpack_require__(418),
	    isArray = __webpack_require__(181),
	    isBuffer = __webpack_require__(279),
	    isMap = __webpack_require__(419),
	    isObject = __webpack_require__(195),
	    isSet = __webpack_require__(421),
	    keys = __webpack_require__(276);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_FLAT_FLAG = 2,
	    CLONE_SYMBOLS_FLAG = 4;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Deep clone
	 *  2 - Flatten inherited properties
	 *  4 - Clone symbols
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, bitmask, customizer, key, object, stack) {
	  var result,
	      isDeep = bitmask & CLONE_DEEP_FLAG,
	      isFlat = bitmask & CLONE_FLAT_FLAG,
	      isFull = bitmask & CLONE_SYMBOLS_FLAG;

	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      result = (isFlat || isFunc) ? {} : initCloneObject(value);
	      if (!isDeep) {
	        return isFlat
	          ? copySymbolsIn(value, baseAssignIn(result, value))
	          : copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (isSet(value)) {
	    value.forEach(function(subValue) {
	      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	    });

	    return result;
	  }

	  if (isMap(value)) {
	    value.forEach(function(subValue, key) {
	      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	    });

	    return result;
	  }

	  var keysFunc = isFull
	    ? (isFlat ? getAllKeysIn : getAllKeys)
	    : (isFlat ? keysIn : keys);

	  var props = isArr ? undefined : keysFunc(value);
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	  });
	  return result;
	}

	module.exports = baseClone;


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(398),
	    keysIn = __webpack_require__(403);

	/**
	 * The base implementation of `_.assignIn` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssignIn(object, source) {
	  return object && copyObject(source, keysIn(source), object);
	}

	module.exports = baseAssignIn;


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(277),
	    baseKeysIn = __webpack_require__(404),
	    isArrayLike = __webpack_require__(262);

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	module.exports = keysIn;


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(195),
	    isPrototype = __webpack_require__(285),
	    nativeKeysIn = __webpack_require__(405);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeysIn;


/***/ }),
/* 405 */
/***/ (function(module, exports) {

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = nativeKeysIn;


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(36);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(44)(module)))

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(398),
	    getSymbols = __webpack_require__(308);

	/**
	 * Copies own symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	module.exports = copySymbols;


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(398),
	    getSymbolsIn = __webpack_require__(409);

	/**
	 * Copies own and inherited symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbolsIn(source, object) {
	  return copyObject(source, getSymbolsIn(source), object);
	}

	module.exports = copySymbolsIn;


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(259),
	    getPrototype = __webpack_require__(40),
	    getSymbols = __webpack_require__(308),
	    stubArray = __webpack_require__(309);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own and inherited enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	  var result = [];
	  while (object) {
	    arrayPush(result, getSymbols(object));
	    object = getPrototype(object);
	  }
	  return result;
	};

	module.exports = getSymbolsIn;


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(307),
	    getSymbolsIn = __webpack_require__(409),
	    keysIn = __webpack_require__(403);

	/**
	 * Creates an array of own and inherited enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeysIn(object) {
	  return baseGetAllKeys(object, keysIn, getSymbolsIn);
	}

	module.exports = getAllKeysIn;


/***/ }),
/* 411 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	module.exports = initCloneArray;


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(413),
	    cloneDataView = __webpack_require__(414),
	    cloneRegExp = __webpack_require__(415),
	    cloneSymbol = __webpack_require__(416),
	    cloneTypedArray = __webpack_require__(417);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return new Ctor;

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return new Ctor;

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	module.exports = initCloneByTag;


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	var Uint8Array = __webpack_require__(302);

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	module.exports = cloneArrayBuffer;


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(413);

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	module.exports = cloneDataView;


/***/ }),
/* 415 */
/***/ (function(module, exports) {

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	module.exports = cloneRegExp;


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(35);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	module.exports = cloneSymbol;


/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(413);

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	module.exports = cloneTypedArray;


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(369),
	    getPrototype = __webpack_require__(40),
	    isPrototype = __webpack_require__(285);

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	module.exports = initCloneObject;


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsMap = __webpack_require__(420),
	    baseUnary = __webpack_require__(256),
	    nodeUtil = __webpack_require__(283);

	/* Node.js helper references. */
	var nodeIsMap = nodeUtil && nodeUtil.isMap;

	/**
	 * Checks if `value` is classified as a `Map` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 * @example
	 *
	 * _.isMap(new Map);
	 * // => true
	 *
	 * _.isMap(new WeakMap);
	 * // => false
	 */
	var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	module.exports = isMap;


/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(310),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]';

	/**
	 * The base implementation of `_.isMap` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 */
	function baseIsMap(value) {
	  return isObjectLike(value) && getTag(value) == mapTag;
	}

	module.exports = baseIsMap;


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsSet = __webpack_require__(422),
	    baseUnary = __webpack_require__(256),
	    nodeUtil = __webpack_require__(283);

	/* Node.js helper references. */
	var nodeIsSet = nodeUtil && nodeUtil.isSet;

	/**
	 * Checks if `value` is classified as a `Set` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 * @example
	 *
	 * _.isSet(new Set);
	 * // => true
	 *
	 * _.isSet(new WeakSet);
	 * // => false
	 */
	var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	module.exports = isSet;


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(310),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var setTag = '[object Set]';

	/**
	 * The base implementation of `_.isSet` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 */
	function baseIsSet(value) {
	  return isObjectLike(value) && getTag(value) == setTag;
	}

	module.exports = baseIsSet;


/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

	var createWrap = __webpack_require__(364);

	/** Used to compose bitmasks for function metadata. */
	var WRAP_CURRY_FLAG = 8;

	/**
	 * Creates a function that accepts arguments of `func` and either invokes
	 * `func` returning its result, if at least `arity` number of arguments have
	 * been provided, or returns a function that accepts the remaining `func`
	 * arguments, and so on. The arity of `func` may be specified if `func.length`
	 * is not sufficient.
	 *
	 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	 * may be used as a placeholder for provided arguments.
	 *
	 * **Note:** This method doesn't set the "length" property of curried functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Function
	 * @param {Function} func The function to curry.
	 * @param {number} [arity=func.length] The arity of `func`.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Function} Returns the new curried function.
	 * @example
	 *
	 * var abc = function(a, b, c) {
	 *   return [a, b, c];
	 * };
	 *
	 * var curried = _.curry(abc);
	 *
	 * curried(1)(2)(3);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2)(3);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2, 3);
	 * // => [1, 2, 3]
	 *
	 * // Curried with placeholders.
	 * curried(1)(_, 3)(2);
	 * // => [1, 2, 3]
	 */
	function curry(func, arity, guard) {
	  arity = guard ? undefined : arity;
	  var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	  result.placeholder = curry.placeholder;
	  return result;
	}

	// Assign default placeholders.
	curry.placeholder = {};

	module.exports = curry;


/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(34),
	    isObjectLike = __webpack_require__(42),
	    isPlainObject = __webpack_require__(33);

	/** `Object#toString` result references. */
	var domExcTag = '[object DOMException]',
	    errorTag = '[object Error]';

	/**
	 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	 * `SyntaxError`, `TypeError`, or `URIError` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	 * @example
	 *
	 * _.isError(new Error);
	 * // => true
	 *
	 * _.isError(Error);
	 * // => false
	 */
	function isError(value) {
	  if (!isObjectLike(value)) {
	    return false;
	  }
	  var tag = baseGetTag(value);
	  return tag == errorTag || tag == domExcTag ||
	    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	}

	module.exports = isError;


/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(310),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var weakMapTag = '[object WeakMap]';

	/**
	 * Checks if `value` is classified as a `WeakMap` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	 * @example
	 *
	 * _.isWeakMap(new WeakMap);
	 * // => true
	 *
	 * _.isWeakMap(new Map);
	 * // => false
	 */
	function isWeakMap(value) {
	  return isObjectLike(value) && getTag(value) == weakMapTag;
	}

	module.exports = isWeakMap;


/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(401),
	    baseIteratee = __webpack_require__(288);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1;

	/**
	 * Creates a function that invokes `func` with the arguments of the created
	 * function. If `func` is a property name, the created function returns the
	 * property value for a given element. If `func` is an array or object, the
	 * created function returns `true` for elements that contain the equivalent
	 * source properties, otherwise it returns `false`.
	 *
	 * @static
	 * @since 4.0.0
	 * @memberOf _
	 * @category Util
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @returns {Function} Returns the callback.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, _.iteratee(['user', 'fred']));
	 * // => [{ 'user': 'fred', 'age': 40 }]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, _.iteratee('user'));
	 * // => ['barney', 'fred']
	 *
	 * // Create custom iteratee shorthands.
	 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	 *     return func.test(string);
	 *   };
	 * });
	 *
	 * _.filter(['abc', 'def'], /ef/);
	 * // => ['def']
	 */
	function iteratee(func) {
	  return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	}

	module.exports = iteratee;


/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	var createWrap = __webpack_require__(364),
	    flatRest = __webpack_require__(428);

	/** Used to compose bitmasks for function metadata. */
	var WRAP_REARG_FLAG = 256;

	/**
	 * Creates a function that invokes `func` with arguments arranged according
	 * to the specified `indexes` where the argument value at the first index is
	 * provided as the first argument, the argument value at the second index is
	 * provided as the second argument, and so on.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {Function} func The function to rearrange arguments for.
	 * @param {...(number|number[])} indexes The arranged argument indexes.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var rearged = _.rearg(function(a, b, c) {
	 *   return [a, b, c];
	 * }, [2, 0, 1]);
	 *
	 * rearged('b', 'c', 'a')
	 * // => ['a', 'b', 'c']
	 */
	var rearg = flatRest(function(func, indexes) {
	  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
	});

	module.exports = rearg;


/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

	var flatten = __webpack_require__(429),
	    overRest = __webpack_require__(236),
	    setToString = __webpack_require__(237);

	/**
	 * A specialized version of `baseRest` which flattens the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */
	function flatRest(func) {
	  return setToString(overRest(func, undefined, flatten), func + '');
	}

	module.exports = flatRest;


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(258);

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */
	function flatten(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten(array, 1) : [];
	}

	module.exports = flatten;


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(221),
	    copyArray = __webpack_require__(386),
	    isArray = __webpack_require__(181),
	    isSymbol = __webpack_require__(183),
	    stringToPath = __webpack_require__(184),
	    toKey = __webpack_require__(226),
	    toString = __webpack_require__(219);

	/**
	 * Converts `value` to a property path array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {*} value The value to convert.
	 * @returns {Array} Returns the new property path array.
	 * @example
	 *
	 * _.toPath('a.b.c');
	 * // => ['a', 'b', 'c']
	 *
	 * _.toPath('a[0].b.c');
	 * // => ['a', '0', 'b', 'c']
	 */
	function toPath(value) {
	  if (isArray(value)) {
	    return arrayMap(value, toKey);
	  }
	  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	}

	module.exports = toPath;


/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('trim', __webpack_require__(432));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(220),
	    castSlice = __webpack_require__(433),
	    charsEndIndex = __webpack_require__(434),
	    charsStartIndex = __webpack_require__(435),
	    stringToArray = __webpack_require__(436),
	    toString = __webpack_require__(219);

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/**
	 * Removes leading and trailing whitespace or specified characters from `string`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to trim.
	 * @param {string} [chars=whitespace] The characters to trim.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {string} Returns the trimmed string.
	 * @example
	 *
	 * _.trim('  abc  ');
	 * // => 'abc'
	 *
	 * _.trim('-_-abc-_-', '_-');
	 * // => 'abc'
	 *
	 * _.map(['  foo  ', '  bar  '], _.trim);
	 * // => ['foo', 'bar']
	 */
	function trim(string, chars, guard) {
	  string = toString(string);
	  if (string && (guard || chars === undefined)) {
	    return string.replace(reTrim, '');
	  }
	  if (!string || !(chars = baseToString(chars))) {
	    return string;
	  }
	  var strSymbols = stringToArray(string),
	      chrSymbols = stringToArray(chars),
	      start = charsStartIndex(strSymbols, chrSymbols),
	      end = charsEndIndex(strSymbols, chrSymbols) + 1;

	  return castSlice(strSymbols, start, end).join('');
	}

	module.exports = trim;


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(233);

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	function castSlice(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return (!start && end >= length) ? array : baseSlice(array, start, end);
	}

	module.exports = castSlice;


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(251);

	/**
	 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	 * that is not found in the character symbols.
	 *
	 * @private
	 * @param {Array} strSymbols The string symbols to inspect.
	 * @param {Array} chrSymbols The character symbols to find.
	 * @returns {number} Returns the index of the last unmatched string symbol.
	 */
	function charsEndIndex(strSymbols, chrSymbols) {
	  var index = strSymbols.length;

	  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	  return index;
	}

	module.exports = charsEndIndex;


/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(251);

	/**
	 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	 * that is not found in the character symbols.
	 *
	 * @private
	 * @param {Array} strSymbols The string symbols to inspect.
	 * @param {Array} chrSymbols The character symbols to find.
	 * @returns {number} Returns the index of the first unmatched string symbol.
	 */
	function charsStartIndex(strSymbols, chrSymbols) {
	  var index = -1,
	      length = strSymbols.length;

	  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	  return index;
	}

	module.exports = charsStartIndex;


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

	var asciiToArray = __webpack_require__(437),
	    hasUnicode = __webpack_require__(438),
	    unicodeToArray = __webpack_require__(439);

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray(string) {
	  return hasUnicode(string)
	    ? unicodeToArray(string)
	    : asciiToArray(string);
	}

	module.exports = stringToArray;


/***/ }),
/* 437 */
/***/ (function(module, exports) {

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function asciiToArray(string) {
	  return string.split('');
	}

	module.exports = asciiToArray;


/***/ }),
/* 438 */
/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsZWJ = '\\u200d';

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode(string) {
	  return reHasUnicode.test(string);
	}

	module.exports = hasUnicode;


/***/ }),
/* 439 */
/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange + ']',
	    rsCombo = '[' + rsComboRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray(string) {
	  return string.match(reUnicode) || [];
	}

	module.exports = unicodeToArray;


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('isObject', __webpack_require__(195), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 441 */
/***/ (function(module, exports) {

	module.exports = {
	  'cap': false,
	  'curry': false,
	  'fixed': false,
	  'immutable': false,
	  'rearg': false
	};


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('pick', __webpack_require__(443));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

	var basePick = __webpack_require__(444),
	    flatRest = __webpack_require__(428);

	/**
	 * Creates an object composed of the picked `object` properties.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [paths] The property paths to pick.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pick(object, ['a', 'c']);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var pick = flatRest(function(object, paths) {
	  return object == null ? {} : basePick(object, paths);
	});

	module.exports = pick;


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

	var basePickBy = __webpack_require__(445),
	    hasIn = __webpack_require__(320);

	/**
	 * The base implementation of `_.pick` without support for individual
	 * property identifiers.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @returns {Object} Returns the new object.
	 */
	function basePick(object, paths) {
	  return basePickBy(object, paths, function(value, path) {
	    return hasIn(object, path);
	  });
	}

	module.exports = basePick;


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(232),
	    baseSet = __webpack_require__(446),
	    castPath = __webpack_require__(180);

	/**
	 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @param {Function} predicate The function invoked per property.
	 * @returns {Object} Returns the new object.
	 */
	function basePickBy(object, paths, predicate) {
	  var index = -1,
	      length = paths.length,
	      result = {};

	  while (++index < length) {
	    var path = paths[index],
	        value = baseGet(object, path);

	    if (predicate(value, path)) {
	      baseSet(result, castPath(path, object), value);
	    }
	  }
	  return result;
	}

	module.exports = basePickBy;


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(399),
	    castPath = __webpack_require__(180),
	    isIndex = __webpack_require__(224),
	    isObject = __webpack_require__(195),
	    toKey = __webpack_require__(226);

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!isObject(object)) {
	    return object;
	  }
	  path = castPath(path, object);

	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = toKey(path[index]),
	        newValue = value;

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject(objValue)
	          ? objValue
	          : (isIndex(path[index + 1]) ? [] : {});
	      }
	    }
	    assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}

	module.exports = baseSet;


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('keys', __webpack_require__(276), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('isPlainObject', __webpack_require__(33), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('isFunction', __webpack_require__(194), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('compact', __webpack_require__(451), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 451 */
/***/ (function(module, exports) {

	/**
	 * Creates an array with all falsey values removed. The values `false`, `null`,
	 * `0`, `""`, `undefined`, and `NaN` are falsey.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to compact.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.compact([0, 1, false, 2, '', 3]);
	 * // => [1, 2, 3]
	 */
	function compact(array) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (value) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	module.exports = compact;


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('isNil', __webpack_require__(453), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 453 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is `null` or `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	 * @example
	 *
	 * _.isNil(null);
	 * // => true
	 *
	 * _.isNil(void 0);
	 * // => true
	 *
	 * _.isNil(NaN);
	 * // => false
	 */
	function isNil(value) {
	  return value == null;
	}

	module.exports = isNil;


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('take', __webpack_require__(455));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(233),
	    toInteger = __webpack_require__(266);

	/**
	 * Creates a slice of `array` with `n` elements taken from the beginning.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=1] The number of elements to take.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.take([1, 2, 3]);
	 * // => [1]
	 *
	 * _.take([1, 2, 3], 2);
	 * // => [1, 2]
	 *
	 * _.take([1, 2, 3], 5);
	 * // => [1, 2, 3]
	 *
	 * _.take([1, 2, 3], 0);
	 * // => []
	 */
	function take(array, n, guard) {
	  if (!(array && array.length)) {
	    return [];
	  }
	  n = (guard || n === undefined) ? 1 : toInteger(n);
	  return baseSlice(array, 0, n < 0 ? 0 : n);
	}

	module.exports = take;


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('sortBy', __webpack_require__(457));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(258),
	    baseOrderBy = __webpack_require__(458),
	    baseRest = __webpack_require__(234),
	    isIterateeCall = __webpack_require__(349);

	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection thru each iteratee. This method
	 * performs a stable sort, that is, it preserves the original sort order of
	 * equal elements. The iteratees are invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {...(Function|Function[])} [iteratees=[_.identity]]
	 *  The iteratees to sort by.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 },
	 *   { 'user': 'barney', 'age': 34 }
	 * ];
	 *
	 * _.sortBy(users, [function(o) { return o.user; }]);
	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	 *
	 * _.sortBy(users, ['user', 'age']);
	 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	 */
	var sortBy = baseRest(function(collection, iteratees) {
	  if (collection == null) {
	    return [];
	  }
	  var length = iteratees.length;
	  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	    iteratees = [];
	  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	    iteratees = [iteratees[0]];
	  }
	  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	});

	module.exports = sortBy;


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(221),
	    baseIteratee = __webpack_require__(288),
	    baseMap = __webpack_require__(459),
	    baseSortBy = __webpack_require__(460),
	    baseUnary = __webpack_require__(256),
	    compareMultiple = __webpack_require__(461),
	    identity = __webpack_require__(235);

	/**
	 * The base implementation of `_.orderBy` without param guards.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	 * @param {string[]} orders The sort orders of `iteratees`.
	 * @returns {Array} Returns the new sorted array.
	 */
	function baseOrderBy(collection, iteratees, orders) {
	  var index = -1;
	  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));

	  var result = baseMap(collection, function(value, key, collection) {
	    var criteria = arrayMap(iteratees, function(iteratee) {
	      return iteratee(value);
	    });
	    return { 'criteria': criteria, 'index': ++index, 'value': value };
	  });

	  return baseSortBy(result, function(object, other) {
	    return compareMultiple(object, other, orders);
	  });
	}

	module.exports = baseOrderBy;


/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(272),
	    isArrayLike = __webpack_require__(262);

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	module.exports = baseMap;


/***/ }),
/* 460 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define the
	 * sort order of `array` and replaces criteria objects with their corresponding
	 * values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;

	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}

	module.exports = baseSortBy;


/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

	var compareAscending = __webpack_require__(462);

	/**
	 * Used by `_.orderBy` to compare multiple properties of a value to another
	 * and stable sort them.
	 *
	 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	 * specify an order of "desc" for descending or "asc" for ascending sort order
	 * of corresponding values.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {boolean[]|string[]} orders The order to sort by for each property.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareMultiple(object, other, orders) {
	  var index = -1,
	      objCriteria = object.criteria,
	      othCriteria = other.criteria,
	      length = objCriteria.length,
	      ordersLength = orders.length;

	  while (++index < length) {
	    var result = compareAscending(objCriteria[index], othCriteria[index]);
	    if (result) {
	      if (index >= ordersLength) {
	        return result;
	      }
	      var order = orders[index];
	      return result * (order == 'desc' ? -1 : 1);
	    }
	  }
	  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	  // that causes it, under certain circumstances, to provide the same value for
	  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	  // for more details.
	  //
	  // This also ensures a stable sort in V8 and other engines.
	  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	  return object.index - other.index;
	}

	module.exports = compareMultiple;


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(183);

	/**
	 * Compares values to sort them in ascending order.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function compareAscending(value, other) {
	  if (value !== other) {
	    var valIsDefined = value !== undefined,
	        valIsNull = value === null,
	        valIsReflexive = value === value,
	        valIsSymbol = isSymbol(value);

	    var othIsDefined = other !== undefined,
	        othIsNull = other === null,
	        othIsReflexive = other === other,
	        othIsSymbol = isSymbol(other);

	    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	        (valIsNull && othIsDefined && othIsReflexive) ||
	        (!valIsDefined && othIsReflexive) ||
	        !valIsReflexive) {
	      return 1;
	    }
	    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	        (othIsNull && valIsDefined && valIsReflexive) ||
	        (!othIsDefined && valIsReflexive) ||
	        !othIsReflexive) {
	      return -1;
	    }
	  }
	  return 0;
	}

	module.exports = compareAscending;


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('sum', __webpack_require__(464), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSum = __webpack_require__(465),
	    identity = __webpack_require__(235);

	/**
	 * Computes the sum of the values in `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.4.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {number} Returns the sum.
	 * @example
	 *
	 * _.sum([4, 2, 8, 6]);
	 * // => 20
	 */
	function sum(array) {
	  return (array && array.length)
	    ? baseSum(array, identity)
	    : 0;
	}

	module.exports = sum;


/***/ }),
/* 465 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.sum` and `_.sumBy` without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {number} Returns the sum.
	 */
	function baseSum(array, iteratee) {
	  var result,
	      index = -1,
	      length = array.length;

	  while (++index < length) {
	    var current = iteratee(array[index]);
	    if (current !== undefined) {
	      result = result === undefined ? current : (result + current);
	    }
	  }
	  return result;
	}

	module.exports = baseSum;


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('min', __webpack_require__(467), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	var baseExtremum = __webpack_require__(468),
	    baseLt = __webpack_require__(469),
	    identity = __webpack_require__(235);

	/**
	 * Computes the minimum value of `array`. If `array` is empty or falsey,
	 * `undefined` is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * _.min([4, 2, 8, 6]);
	 * // => 2
	 *
	 * _.min([]);
	 * // => undefined
	 */
	function min(array) {
	  return (array && array.length)
	    ? baseExtremum(array, identity, baseLt)
	    : undefined;
	}

	module.exports = min;


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(183);

	/**
	 * The base implementation of methods like `_.max` and `_.min` which accepts a
	 * `comparator` to determine the extremum value.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The iteratee invoked per iteration.
	 * @param {Function} comparator The comparator used to compare values.
	 * @returns {*} Returns the extremum value.
	 */
	function baseExtremum(array, iteratee, comparator) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index],
	        current = iteratee(value);

	    if (current != null && (computed === undefined
	          ? (current === current && !isSymbol(current))
	          : comparator(current, computed)
	        )) {
	      var computed = current,
	          result = value;
	    }
	  }
	  return result;
	}

	module.exports = baseExtremum;


/***/ }),
/* 469 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.lt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is less than `other`,
	 *  else `false`.
	 */
	function baseLt(value, other) {
	  return value < other;
	}

	module.exports = baseLt;


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('map', __webpack_require__(471));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(221),
	    baseIteratee = __webpack_require__(288),
	    baseMap = __webpack_require__(459),
	    isArray = __webpack_require__(181);

	/**
	 * Creates an array of values by running each element in `collection` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  return func(collection, baseIteratee(iteratee, 3));
	}

	module.exports = map;


/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('flow', __webpack_require__(473));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	var createFlow = __webpack_require__(474);

	/**
	 * Creates a function that returns the result of invoking the given functions
	 * with the `this` binding of the created function, where each successive
	 * invocation is supplied the return value of the previous.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Util
	 * @param {...(Function|Function[])} [funcs] The functions to invoke.
	 * @returns {Function} Returns the new composite function.
	 * @see _.flowRight
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var addSquare = _.flow([_.add, square]);
	 * addSquare(1, 2);
	 * // => 9
	 */
	var flow = createFlow();

	module.exports = flow;


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

	var LodashWrapper = __webpack_require__(384),
	    flatRest = __webpack_require__(428),
	    getData = __webpack_require__(379),
	    getFuncName = __webpack_require__(381),
	    isArray = __webpack_require__(181),
	    isLaziable = __webpack_require__(376);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used to compose bitmasks for function metadata. */
	var WRAP_CURRY_FLAG = 8,
	    WRAP_PARTIAL_FLAG = 32,
	    WRAP_ARY_FLAG = 128,
	    WRAP_REARG_FLAG = 256;

	/**
	 * Creates a `_.flow` or `_.flowRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new flow function.
	 */
	function createFlow(fromRight) {
	  return flatRest(function(funcs) {
	    var length = funcs.length,
	        index = length,
	        prereq = LodashWrapper.prototype.thru;

	    if (fromRight) {
	      funcs.reverse();
	    }
	    while (index--) {
	      var func = funcs[index];
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	        var wrapper = new LodashWrapper([], true);
	      }
	    }
	    index = wrapper ? index : length;
	    while (++index < length) {
	      func = funcs[index];

	      var funcName = getFuncName(func),
	          data = funcName == 'wrapper' ? getData(func) : undefined;

	      if (data && isLaziable(data[0]) &&
	            data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	            !data[4].length && data[9] == 1
	          ) {
	        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	      } else {
	        wrapper = (func.length == 1 && isLaziable(func))
	          ? wrapper[funcName]()
	          : wrapper.thru(func);
	      }
	    }
	    return function() {
	      var args = arguments,
	          value = args[0];

	      if (wrapper && args.length == 1 && isArray(value)) {
	        return wrapper.plant(value).value();
	      }
	      var index = 0,
	          result = length ? funcs[index].apply(this, args) : value;

	      while (++index < length) {
	        result = funcs[index].call(this, result);
	      }
	      return result;
	    };
	  });
	}

	module.exports = createFlow;


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('memoize', __webpack_require__(186));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	// Copy of sindre's leven, wrapped in dead code elimination for production
	// https://github.com/sindresorhus/leven/blob/master/index.js

	/* eslint-disable complexity, import/no-mutable-exports, no-multi-assign, no-nested-ternary, no-plusplus */
	var leven = function leven() {
	  return 0;
	};

	if (process.env.NODE_ENV !== 'production') {
	  var arr = [];
	  var charCodeCache = [];

	  leven = function leven(a, b) {
	    if (a === b) return 0;
	    var aLen = a.length;
	    var bLen = b.length;
	    if (aLen === 0) return bLen;
	    if (bLen === 0) return aLen;
	    var bCharCode;
	    var ret;
	    var tmp;
	    var tmp2;
	    var i = 0;
	    var j = 0;

	    while (i < aLen) {
	      charCodeCache[i] = a.charCodeAt(i);
	      arr[i] = ++i;
	    }

	    while (j < bLen) {
	      bCharCode = b.charCodeAt(j);
	      tmp = j++;
	      ret = j;

	      for (i = 0; i < aLen; i++) {
	        tmp2 = bCharCode === charCodeCache[i] ? tmp : tmp + 1;
	        tmp = arr[i];
	        ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;
	      }
	    }

	    return ret;
	  };
	}

	var _default = leven;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.debug = exports.makeDebugger = void 0;

	var _isBrowser = _interopRequireDefault(__webpack_require__(478));

	if ((0, _isBrowser.default)() && process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
	  // Heads Up!
	  // https://github.com/visionmedia/debug/pull/331
	  //
	  // debug now clears storage on load, grab the debug settings before require('debug').
	  // We try/catch here as Safari throws on localStorage access in private mode or with cookies disabled.
	  var DEBUG;

	  try {
	    DEBUG = window.localStorage.debug;
	  } catch (e) {
	    /* eslint-disable no-console */
	    console.error('Semantic-UI-React could not enable debug.');
	    console.error(e);
	    /* eslint-enable no-console */
	  } // enable what ever settings we got from storage

	}
	/**
	 * Create a namespaced debug function.
	 * @param {String} namespace Usually a component name.
	 * @example
	 * import { makeDebugger } from 'src/lib'
	 * const debug = makeDebugger('namespace')
	 *
	 * debug('Some message')
	 * @returns {Function}
	 */


	var makeDebugger = function makeDebugger(namespace) {};
	/**
	 * Default debugger, simple log.
	 * @example
	 * import { debug } from 'src/lib'
	 * debug('Some message')
	 */


	exports.makeDebugger = makeDebugger;
	var debug = makeDebugger('log');
	exports.debug = debug;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _typeof2 = _interopRequireDefault(__webpack_require__(171));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var hasDocument = (typeof document === "undefined" ? "undefined" : (0, _typeof2.default)(document)) === 'object' && document !== null;
	var hasWindow = (typeof window === "undefined" ? "undefined" : (0, _typeof2.default)(window)) === 'object' && window !== null && window.self === window; // eslint-disable-next-line no-confusing-arrow

	var isBrowser = function isBrowser() {
	  return !(0, _isNil2.default)(isBrowser.override) ? isBrowser.override : hasDocument && hasWindow;
	};

	var _default = isBrowser;
	exports.default = _default;

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _eventStack = __webpack_require__(480);

	var _default = _eventStack.instance;
	exports.default = _default;

/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	'use strict';

	var stack;

	if (process.env.NODE_ENV === 'production') {
	  stack = __webpack_require__(481);
	} else {
	  stack = __webpack_require__(483);
	}

	module.exports = stack.default;
	module.exports.instance = stack.instance;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var env=__webpack_require__(482);__webpack_require__(20);var React=__webpack_require__(4);function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}var EventSet=function(){function e(t){_classCallCheck(this,e),_defineProperty(this,"handlers",void 0),this.handlers=t.slice(0)}return _createClass(e,[{key:"addHandlers",value:function(t){for(var n=this.handlers.slice(0),r=t.length,o=0;o<r;o+=1)n.push(t[o]);return new e(n)}},{key:"dispatchEvent",value:function(e,t){var n=this.handlers.length-1;if(t){for(var r=n;r>=0;r-=1)this.handlers[r].called||(this.handlers[r].called=!0,this.handlers[r](e));for(var o=n;o>=0;o-=1)this.handlers[o].called=!1}else{(0,this.handlers[n])(e)}}},{key:"hasHandlers",value:function(){return this.handlers.length>0}},{key:"removeHandlers",value:function(t){for(var n=[],r=this.handlers.length,o=0;o<r;o+=1){var a=this.handlers[o];-1===t.indexOf(a)&&n.push(a)}return new e(n)}}]),e}();function cloneMap(e){var t=new Map;return e.forEach(function(e,n){t.set(n,e)}),t}function normalizeHandlers(e){return Array.isArray(e)?e:[e]}var isRefObject=function(e){return null!==e&&"object"===_typeof(e)&&e.hasOwnProperty("current")};function normalizeTarget(e){return"document"===e?document:"window"===e?window:isRefObject(e)?e.current||document:e||document}var EventPool=function(){function e(t,n){_classCallCheck(this,e),_defineProperty(this,"handlerSets",void 0),_defineProperty(this,"poolName",void 0),this.handlerSets=n,this.poolName=t}return _createClass(e,[{key:"addHandlers",value:function(t,n){var r=cloneMap(this.handlerSets);if(r.has(t)){var o=r.get(t);r.set(t,o.addHandlers(n))}else r.set(t,new EventSet(n));return new e(this.poolName,r)}},{key:"dispatchEvent",value:function(e,t){var n=this.handlerSets.get(e),r="default"===this.poolName;n&&n.dispatchEvent(t,r)}},{key:"hasHandlers",value:function(){return this.handlerSets.size>0}},{key:"removeHandlers",value:function(t,n){var r=cloneMap(this.handlerSets);if(!r.has(t))return new e(this.poolName,r);var o=r.get(t).removeHandlers(n);return o.hasHandlers()?r.set(t,o):r.delete(t),new e(this.poolName,r)}}]),e}();_defineProperty(EventPool,"createByType",function(e,t,n){var r=new Map;return r.set(t,new EventSet(n)),new EventPool(e,r)});var EventTarget=function(){function e(t){var n=this;_classCallCheck(this,e),_defineProperty(this,"handlers",new Map),_defineProperty(this,"pools",new Map),_defineProperty(this,"target",void 0),_defineProperty(this,"createEmitter",function(e){return function(t){n.pools.forEach(function(n){n.dispatchEvent(e,t)})}}),this.target=t}return _createClass(e,[{key:"addHandlers",value:function(e,t,n){if(this.pools.has(e)){var r=this.pools.get(e);this.pools.set(e,r.addHandlers(t,n))}else this.pools.set(e,EventPool.createByType(e,t,n));this.handlers.has(t)||this.addTargetHandler(t)}},{key:"hasHandlers",value:function(){return this.handlers.size>0}},{key:"removeHandlers",value:function(e,t,n){if(this.pools.has(e)){var r=this.pools.get(e).removeHandlers(t,n);r.hasHandlers()?this.pools.set(e,r):this.pools.delete(e),0===this.pools.size&&this.removeTargetHandler(t)}}},{key:"addTargetHandler",value:function(e){var t=this.createEmitter(e);this.handlers.set(e,t),this.target.addEventListener(e,t,!0)}},{key:"removeTargetHandler",value:function(e){this.handlers.has(e)&&(this.target.removeEventListener(e,this.handlers.get(e),!0),this.handlers.delete(e))}}]),e}(),EventStack=function(){function e(){var t=this;_classCallCheck(this,e),_defineProperty(this,"targets",new Map),_defineProperty(this,"getTarget",function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=normalizeTarget(e);if(t.targets.has(r))return t.targets.get(r);if(!n)return null;var o=new EventTarget(r);return t.targets.set(r,o),o}),_defineProperty(this,"removeTarget",function(e){t.targets.delete(normalizeTarget(e))})}return _createClass(e,[{key:"sub",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(env.canUseDOM){var r=n.target,o=void 0===r?document:r,a=n.pool,s=void 0===a?"default":a;this.getTarget(o).addHandlers(s,e,normalizeHandlers(t))}}},{key:"unsub",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(env.canUseDOM){var r=n.target,o=void 0===r?document:r,a=n.pool,s=void 0===a?"default":a,i=this.getTarget(o,!1);i&&(i.removeHandlers(s,e,normalizeHandlers(t)),i.hasHandlers()||this.removeTarget(o))}}}]),e}(),instance=new EventStack,EventStack$1=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).apply(this,arguments))}return _inherits(t,React.PureComponent),_createClass(t,[{key:"componentDidMount",value:function(){this.subscribe(this.props)}},{key:"componentDidUpdate",value:function(e){this.unsubscribe(e),this.subscribe(this.props)}},{key:"componentWillUnmount",value:function(){this.unsubscribe(this.props)}},{key:"subscribe",value:function(e){var t=e.name,n=e.on,r=e.pool,o=e.target;instance.sub(t,n,{pool:r,target:o})}},{key:"unsubscribe",value:function(e){var t=e.name,n=e.on,r=e.pool,o=e.target;instance.unsub(t,n,{pool:r,target:o})}},{key:"render",value:function(){return null}}]),t}();_defineProperty(EventStack$1,"defaultProps",{pool:"default",target:"document"}),EventStack$1.propTypes={},exports.instance=instance,exports.default=EventStack$1;


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2015 Jed Watson.
	  Based on code that is Copyright 2013-2015, Facebook, Inc.
	  All rights reserved.
	*/
	/* global define */

	(function () {
		'use strict';

		var canUseDOM = !!(
			typeof window !== 'undefined' &&
			window.document &&
			window.document.createElement
		);

		var ExecutionEnvironment = {

			canUseDOM: canUseDOM,

			canUseWorkers: typeof Worker !== 'undefined',

			canUseEventListeners:
				canUseDOM && !!(window.addEventListener || window.attachEvent),

			canUseViewport: canUseDOM && !!window.screen

		};

		if (true) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return ExecutionEnvironment;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = ExecutionEnvironment;
		} else {
			window.ExecutionEnvironment = ExecutionEnvironment;
		}

	}());


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	var env = __webpack_require__(482);
	var PropTypes = __webpack_require__(20);
	var React = __webpack_require__(4);

	function _typeof(obj) {
	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function (obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function (obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized(self);
	}

	/**
	 * The current implementation was chosen by performance and compatibility reasons, feel free to play
	 * with benchmarks and submit PR with faster alternative. Each method contains links to benchmarks.
	 */
	var EventSet =
	/*#__PURE__*/
	function () {
	  /**
	   * @see https://jsperf.com/suir-eventset-constructor
	   */
	  function EventSet(eventHandlers) {
	    _classCallCheck(this, EventSet);

	    _defineProperty(this, "handlers", void 0);

	    this.handlers = eventHandlers.slice(0);
	  }
	  /**
	   * @see https://jsperf.com/suir-eventset-addhandlers
	   */


	  _createClass(EventSet, [{
	    key: "addHandlers",
	    value: function addHandlers(additionalHandlers) {
	      var newHandlers = this.handlers.slice(0);
	      var length = additionalHandlers.length; // Heads up!
	      // Previously we use Set there, it granted uniqueness of handlers, now dispatchEvent() is
	      // responsible for this.

	      for (var i = 0; i < length; i += 1) {
	        newHandlers.push(additionalHandlers[i]);
	      }

	      return new EventSet(newHandlers);
	    }
	    /**
	     * @see https://jsperf.com/suir-eventset-dispatchsingle
	     * @see https://jsperf.com/suir-eventset-dispatchmultiple2
	     */

	  }, {
	    key: "dispatchEvent",
	    value: function dispatchEvent(event, dispatchAll) {
	      var count = this.handlers.length - 1;

	      if (!dispatchAll) {
	        // Heads up!
	        // We don't use .pop() there because it will mutate the array.
	        var recentHandler = this.handlers[count];
	        recentHandler(event);
	        return;
	      }

	      for (var i = count; i >= 0; i -= 1) {
	        if (!this.handlers[i].called) {
	          this.handlers[i].called = true;
	          this.handlers[i](event);
	        }
	      }

	      for (var _i = count; _i >= 0; _i -= 1) {
	        this.handlers[_i].called = false;
	      }
	    }
	  }, {
	    key: "hasHandlers",
	    value: function hasHandlers() {
	      return this.handlers.length > 0;
	    }
	    /**
	     * @see https://jsperf.com/suir-eventset-removehandlers
	     */

	  }, {
	    key: "removeHandlers",
	    value: function removeHandlers(removalHandlers) {
	      var newHandlers = [];
	      var length = this.handlers.length;

	      for (var i = 0; i < length; i += 1) {
	        var handler = this.handlers[i];

	        if (removalHandlers.indexOf(handler) === -1) {
	          newHandlers.push(handler);
	        }
	      }

	      return new EventSet(newHandlers);
	    }
	  }]);

	  return EventSet;
	}();

	/**
	 * An IE11-compatible function.
	 *
	 * @see https://jsperf.com/suir-clone-map
	 */
	function cloneMap(map) {
	  var newMap = new Map();
	  map.forEach(function (value, key) {
	    newMap.set(key, value);
	  });
	  return newMap;
	}
	function normalizeHandlers(handlers) {
	  return Array.isArray(handlers) ? handlers : [handlers];
	}
	/**
	 * Asserts that the passed value is React.RefObject
	 *
	 * @see https://github.com/facebook/react/blob/v16.8.2/packages/react-reconciler/src/ReactFiberCommitWork.js#L665
	 */

	var isRefObject = function isRefObject(ref // eslint-disable-next-line
	) {
	  return ref !== null && _typeof(ref) === 'object' && ref.hasOwnProperty('current');
	};
	/**
	 * Normalizes `target` for EventStack, because `target` can be passed as `boolean` or `string`.
	 *
	 * @see https://jsperf.com/suir-normalize-target
	 */

	function normalizeTarget(target) {
	  if (target === 'document') return document;
	  if (target === 'window') return window;
	  if (isRefObject(target)) return target.current || document;
	  return target || document;
	}

	var EventPool =
	/*#__PURE__*/
	function () {
	  function EventPool(poolName, handlerSets) {
	    _classCallCheck(this, EventPool);

	    _defineProperty(this, "handlerSets", void 0);

	    _defineProperty(this, "poolName", void 0);

	    this.handlerSets = handlerSets;
	    this.poolName = poolName;
	  }

	  _createClass(EventPool, [{
	    key: "addHandlers",
	    value: function addHandlers(eventType, eventHandlers) {
	      var handlerSets = cloneMap(this.handlerSets);

	      if (handlerSets.has(eventType)) {
	        var eventSet = handlerSets.get(eventType);
	        handlerSets.set(eventType, eventSet.addHandlers(eventHandlers));
	      } else {
	        handlerSets.set(eventType, new EventSet(eventHandlers));
	      }

	      return new EventPool(this.poolName, handlerSets);
	    }
	  }, {
	    key: "dispatchEvent",
	    value: function dispatchEvent(eventType, event) {
	      var handlerSet = this.handlerSets.get(eventType);
	      var shouldDispatchAll = this.poolName === 'default';

	      if (handlerSet) {
	        handlerSet.dispatchEvent(event, shouldDispatchAll);
	      }
	    }
	  }, {
	    key: "hasHandlers",
	    value: function hasHandlers() {
	      return this.handlerSets.size > 0;
	    }
	  }, {
	    key: "removeHandlers",
	    value: function removeHandlers(eventType, eventHandlers) {
	      var handlerSets = cloneMap(this.handlerSets);

	      if (!handlerSets.has(eventType)) {
	        return new EventPool(this.poolName, handlerSets);
	      }

	      var currentSet = handlerSets.get(eventType);
	      var nextSet = currentSet.removeHandlers(eventHandlers);

	      if (nextSet.hasHandlers()) {
	        handlerSets.set(eventType, nextSet);
	      } else {
	        handlerSets.delete(eventType);
	      }

	      return new EventPool(this.poolName, handlerSets);
	    }
	  }]);

	  return EventPool;
	}();

	_defineProperty(EventPool, "createByType", function (poolName, eventType, eventHandlers) {
	  var handlerSets = new Map();
	  handlerSets.set(eventType, new EventSet(eventHandlers));
	  return new EventPool(poolName, handlerSets);
	});

	var EventTarget =
	/*#__PURE__*/
	function () {
	  function EventTarget(target) {
	    var _this = this;

	    _classCallCheck(this, EventTarget);

	    _defineProperty(this, "handlers", new Map());

	    _defineProperty(this, "pools", new Map());

	    _defineProperty(this, "target", void 0);

	    _defineProperty(this, "createEmitter", function (eventType) {
	      return function (event) {
	        _this.pools.forEach(function (pool) {
	          pool.dispatchEvent(eventType, event);
	        });
	      };
	    });

	    this.target = target;
	  }

	  _createClass(EventTarget, [{
	    key: "addHandlers",
	    value: function addHandlers(poolName, eventType, eventHandlers) {
	      if (this.pools.has(poolName)) {
	        var eventPool = this.pools.get(poolName);
	        this.pools.set(poolName, eventPool.addHandlers(eventType, eventHandlers));
	      } else {
	        this.pools.set(poolName, EventPool.createByType(poolName, eventType, eventHandlers));
	      }

	      if (!this.handlers.has(eventType)) {
	        this.addTargetHandler(eventType);
	      }
	    }
	  }, {
	    key: "hasHandlers",
	    value: function hasHandlers() {
	      return this.handlers.size > 0;
	    }
	  }, {
	    key: "removeHandlers",
	    value: function removeHandlers(poolName, eventType, eventHandlers) {
	      if (!this.pools.has(poolName)) {
	        return;
	      }

	      var pool = this.pools.get(poolName);
	      var newPool = pool.removeHandlers(eventType, eventHandlers);

	      if (newPool.hasHandlers()) {
	        this.pools.set(poolName, newPool);
	      } else {
	        this.pools.delete(poolName);
	      }

	      if (this.pools.size === 0) {
	        this.removeTargetHandler(eventType);
	      }
	    }
	  }, {
	    key: "addTargetHandler",
	    value: function addTargetHandler(eventType) {
	      var handler = this.createEmitter(eventType);
	      this.handlers.set(eventType, handler);
	      this.target.addEventListener(eventType, handler, true);
	    }
	  }, {
	    key: "removeTargetHandler",
	    value: function removeTargetHandler(eventType) {
	      if (this.handlers.has(eventType)) {
	        this.target.removeEventListener(eventType, this.handlers.get(eventType), true);
	        this.handlers.delete(eventType);
	      }
	    }
	  }]);

	  return EventTarget;
	}();

	var EventStack =
	/*#__PURE__*/
	function () {
	  function EventStack() {
	    var _this = this;

	    _classCallCheck(this, EventStack);

	    _defineProperty(this, "targets", new Map());

	    _defineProperty(this, "getTarget", function (target) {
	      var autoCreate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var normalized = normalizeTarget(target);

	      if (_this.targets.has(normalized)) {
	        return _this.targets.get(normalized);
	      }

	      if (!autoCreate) return null;
	      var eventTarget = new EventTarget(normalized);

	      _this.targets.set(normalized, eventTarget);

	      return eventTarget;
	    });

	    _defineProperty(this, "removeTarget", function (target) {
	      _this.targets.delete(normalizeTarget(target));
	    });
	  }

	  _createClass(EventStack, [{
	    key: "sub",
	    value: function sub(eventName, eventHandlers) {
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      if (!env.canUseDOM) return;
	      var _options$target = options.target,
	          target = _options$target === void 0 ? document : _options$target,
	          _options$pool = options.pool,
	          pool = _options$pool === void 0 ? 'default' : _options$pool;
	      var eventTarget = this.getTarget(target);
	      eventTarget.addHandlers(pool, eventName, normalizeHandlers(eventHandlers));
	    }
	  }, {
	    key: "unsub",
	    value: function unsub(eventName, eventHandlers) {
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      if (!env.canUseDOM) return;
	      var _options$target2 = options.target,
	          target = _options$target2 === void 0 ? document : _options$target2,
	          _options$pool2 = options.pool,
	          pool = _options$pool2 === void 0 ? 'default' : _options$pool2;
	      var eventTarget = this.getTarget(target, false);

	      if (eventTarget) {
	        eventTarget.removeHandlers(pool, eventName, normalizeHandlers(eventHandlers));
	        if (!eventTarget.hasHandlers()) this.removeTarget(target);
	      }
	    }
	  }]);

	  return EventStack;
	}();

	var instance = new EventStack();

	/**
	 * This component exposes the EventStack API as public and provides a declarative way to manage it.
	 */
	var EventStack$1 =
	/*#__PURE__*/
	function (_React$PureComponent) {
	  _inherits(EventStack, _React$PureComponent);

	  function EventStack() {
	    _classCallCheck(this, EventStack);

	    return _possibleConstructorReturn(this, _getPrototypeOf(EventStack).apply(this, arguments));
	  }

	  _createClass(EventStack, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.subscribe(this.props);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      this.unsubscribe(prevProps);
	      this.subscribe(this.props);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.unsubscribe(this.props);
	    }
	  }, {
	    key: "subscribe",
	    value: function subscribe(props) {
	      var name = props.name,
	          on = props.on,
	          pool = props.pool,
	          target = props.target;
	      instance.sub(name, on, {
	        pool: pool,
	        target: target
	      });
	    }
	  }, {
	    key: "unsubscribe",
	    value: function unsubscribe(props) {
	      var name = props.name,
	          on = props.on,
	          pool = props.pool,
	          target = props.target;
	      instance.unsub(name, on, {
	        pool: pool,
	        target: target
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return null;
	    }
	  }]);

	  return EventStack;
	}(React.PureComponent);

	_defineProperty(EventStack$1, "defaultProps", {
	  pool: 'default',
	  target: 'document'
	});
	EventStack$1.propTypes = {
	  /** An event name on which we will subscribe. */
	  name: PropTypes.string.isRequired,

	  /** An event handler or array of event handlers. */
	  on: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)]).isRequired,

	  /** A name of pool. */
	  pool: PropTypes.string,

	  /** A DOM element on which we will subscribe. */
	  target: PropTypes.oneOfType([PropTypes.oneOf(['document', 'window']), // Heads up!
	  // This condition for SSR safety.
	  PropTypes.instanceOf(env.canUseDOM ? HTMLElement : Object), PropTypes.shape({
	    current: PropTypes.object
	  })])
	};

	exports.instance = instance;
	exports.default = EventStack$1;


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createShorthand = createShorthand;
	exports.createShorthandFactory = createShorthandFactory;
	exports.createHTMLParagraph = exports.createHTMLLabel = exports.createHTMLInput = exports.createHTMLImage = exports.createHTMLIframe = exports.createHTMLDivision = void 0;

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _typeof2 = _interopRequireDefault(__webpack_require__(171));

	var _uniq2 = _interopRequireDefault(__webpack_require__(485));

	var _isArray2 = _interopRequireDefault(__webpack_require__(181));

	var _isPlainObject2 = _interopRequireDefault(__webpack_require__(33));

	var _isFunction2 = _interopRequireDefault(__webpack_require__(194));

	var _isNumber2 = _interopRequireDefault(__webpack_require__(488));

	var _isString2 = _interopRequireDefault(__webpack_require__(489));

	var _isBoolean2 = _interopRequireDefault(__webpack_require__(490));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	// ============================================================
	// Factories
	// ============================================================

	/**
	 * A more robust React.createElement. It can create elements from primitive values.
	 *
	 * @param {function|string} Component A ReactClass or string
	 * @param {function} mapValueToProps A function that maps a primitive value to the Component props
	 * @param {string|object|function} val The value to create a ReactElement from
	 * @param {Object} [options={}]
	 * @param {object} [options.defaultProps={}] Default props object
	 * @param {object|function} [options.overrideProps={}] Override props object or function (called with regular props)
	 * @param {boolean} [options.autoGenerateKey=true] Whether or not automatic key generation is allowed
	 * @returns {object|null}
	 */
	function createShorthand(Component, mapValueToProps, val) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	  if (typeof Component !== 'function' && typeof Component !== 'string') {
	    throw new Error('createShorthand() Component must be a string or function.');
	  } // short circuit noop values


	  if ((0, _isNil2.default)(val) || (0, _isBoolean2.default)(val)) return null;
	  var valIsString = (0, _isString2.default)(val);
	  var valIsNumber = (0, _isNumber2.default)(val);
	  var valIsFunction = (0, _isFunction2.default)(val);
	  var valIsReactElement = (0, _react.isValidElement)(val);
	  var valIsPropsObject = (0, _isPlainObject2.default)(val);
	  var valIsPrimitiveValue = valIsString || valIsNumber || (0, _isArray2.default)(val); // unhandled type return null

	  /* eslint-disable no-console */

	  if (!valIsFunction && !valIsReactElement && !valIsPropsObject && !valIsPrimitiveValue) {
	    if (process.env.NODE_ENV !== 'production') {
	      console.error(['Shorthand value must be a string|number|array|object|ReactElement|function.', ' Use null|undefined|boolean for none', " Received ".concat((0, _typeof2.default)(val), ".")].join(''));
	    }

	    return null;
	  }
	  /* eslint-enable no-console */
	  // ----------------------------------------
	  // Build up props
	  // ----------------------------------------


	  var _options$defaultProps = options.defaultProps,
	      defaultProps = _options$defaultProps === void 0 ? {} : _options$defaultProps; // User's props

	  var usersProps = valIsReactElement && val.props || valIsPropsObject && val || valIsPrimitiveValue && mapValueToProps(val); // Override props

	  var _options$overrideProp = options.overrideProps,
	      overrideProps = _options$overrideProp === void 0 ? {} : _options$overrideProp;
	  overrideProps = (0, _isFunction2.default)(overrideProps) ? overrideProps((0, _objectSpread2.default)({}, defaultProps, usersProps)) : overrideProps; // Merge props

	  /* eslint-disable react/prop-types */

	  var props = (0, _objectSpread2.default)({}, defaultProps, usersProps, overrideProps); // Merge className

	  if (defaultProps.className || overrideProps.className || usersProps.className) {
	    var mergedClassesNames = (0, _classnames.default)(defaultProps.className, overrideProps.className, usersProps.className);
	    props.className = (0, _uniq2.default)(mergedClassesNames.split(' ')).join(' ');
	  } // Merge style


	  if (defaultProps.style || overrideProps.style || usersProps.style) {
	    props.style = (0, _objectSpread2.default)({}, defaultProps.style, usersProps.style, overrideProps.style);
	  } // ----------------------------------------
	  // Get key
	  // ----------------------------------------
	  // Use key, childKey, or generate key


	  if ((0, _isNil2.default)(props.key)) {
	    var childKey = props.childKey;
	    var _options$autoGenerate = options.autoGenerateKey,
	        autoGenerateKey = _options$autoGenerate === void 0 ? true : _options$autoGenerate;

	    if (!(0, _isNil2.default)(childKey)) {
	      // apply and consume the childKey
	      props.key = typeof childKey === 'function' ? childKey(props) : childKey;
	      delete props.childKey;
	    } else if (autoGenerateKey && (valIsString || valIsNumber)) {
	      // use string/number shorthand values as the key
	      props.key = val;
	    }
	  } // ----------------------------------------
	  // Create Element
	  // ----------------------------------------
	  // Clone ReactElements


	  if (valIsReactElement) return (0, _react.cloneElement)(val, props); // Create ReactElements from built up props

	  if (valIsPrimitiveValue || valIsPropsObject) return _react.default.createElement(Component, props); // Call functions with args similar to createElement()

	  if (valIsFunction) return val(Component, props, props.children);
	  /* eslint-enable react/prop-types */
	} // ============================================================
	// Factory Creators
	// ============================================================

	/**
	 * Creates a `createShorthand` function that is waiting for a value and options.
	 *
	 * @param {function|string} Component A ReactClass or string
	 * @param {function} mapValueToProps A function that maps a primitive value to the Component props
	 * @returns {function} A shorthand factory function waiting for `val` and `defaultProps`.
	 */


	createShorthand.handledProps = [];

	function createShorthandFactory(Component, mapValueToProps) {
	  if (typeof Component !== 'function' && typeof Component !== 'string') {
	    throw new Error('createShorthandFactory() Component must be a string or function.');
	  }

	  return function (val, options) {
	    return createShorthand(Component, mapValueToProps, val, options);
	  };
	} // ============================================================
	// HTML Factories
	// ============================================================


	var createHTMLDivision = createShorthandFactory('div', function (val) {
	  return {
	    children: val
	  };
	});
	exports.createHTMLDivision = createHTMLDivision;
	var createHTMLIframe = createShorthandFactory('iframe', function (src) {
	  return {
	    src: src
	  };
	});
	exports.createHTMLIframe = createHTMLIframe;
	var createHTMLImage = createShorthandFactory('img', function (val) {
	  return {
	    src: val
	  };
	});
	exports.createHTMLImage = createHTMLImage;
	var createHTMLInput = createShorthandFactory('input', function (val) {
	  return {
	    type: val
	  };
	});
	exports.createHTMLInput = createHTMLInput;
	var createHTMLLabel = createShorthandFactory('label', function (val) {
	  return {
	    children: val
	  };
	});
	exports.createHTMLLabel = createHTMLLabel;
	var createHTMLParagraph = createShorthandFactory('p', function (val) {
	  return {
	    children: val
	  };
	});
	exports.createHTMLParagraph = createHTMLParagraph;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

	var baseUniq = __webpack_require__(486);

	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurrence of each element
	 * is kept. The order of result values is determined by the order they occur
	 * in the array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 */
	function uniq(array) {
	  return (array && array.length) ? baseUniq(array) : [];
	}

	module.exports = uniq;


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(247),
	    arrayIncludes = __webpack_require__(250),
	    arrayIncludesWith = __webpack_require__(255),
	    cacheHas = __webpack_require__(257),
	    createSet = __webpack_require__(487),
	    setToArray = __webpack_require__(304);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  }
	  else if (length >= LARGE_ARRAY_SIZE) {
	    var set = iteratee ? null : createSet(array);
	    if (set) {
	      return setToArray(set);
	    }
	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache;
	  }
	  else {
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseUniq;


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	var Set = __webpack_require__(313),
	    noop = __webpack_require__(380),
	    setToArray = __webpack_require__(304);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	  return new Set(values);
	};

	module.exports = createSet;


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(34),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var numberTag = '[object Number]';

	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	 * classified as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	 * @example
	 *
	 * _.isNumber(3);
	 * // => true
	 *
	 * _.isNumber(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isNumber(Infinity);
	 * // => true
	 *
	 * _.isNumber('3');
	 * // => false
	 */
	function isNumber(value) {
	  return typeof value == 'number' ||
	    (isObjectLike(value) && baseGetTag(value) == numberTag);
	}

	module.exports = isNumber;


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(34),
	    isArray = __webpack_require__(181),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' ||
	    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	}

	module.exports = isString;


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(34),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]';

	/**
	 * Checks if `value` is classified as a boolean primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	 * @example
	 *
	 * _.isBoolean(false);
	 * // => true
	 *
	 * _.isBoolean(null);
	 * // => false
	 */
	function isBoolean(value) {
	  return value === true || value === false ||
	    (isObjectLike(value) && baseGetTag(value) == boolTag);
	}

	module.exports = isBoolean;


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ }),
/* 492 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	/**
	 * Returns an object consisting of props beyond the scope of the Component.
	 * Useful for getting and spreading unknown props from the user.
	 * @param {function} Component A function or ReactClass.
	 * @param {object} props A ReactElement props object
	 * @returns {{}} A shallow copy of the prop object
	 */
	var getUnhandledProps = function getUnhandledProps(Component, props) {
	  // Note that `handledProps` are generated automatically during build with `babel-plugin-transform-react-handled-props`
	  var _Component$handledPro = Component.handledProps,
	      handledProps = _Component$handledPro === void 0 ? [] : _Component$handledPro;
	  return Object.keys(props).reduce(function (acc, prop) {
	    if (prop === 'childKey') return acc;
	    if (handledProps.indexOf(prop) === -1) acc[prop] = props[prop];
	    return acc;
	  }, {});
	};

	var _default = getUnhandledProps;
	exports.default = _default;

/***/ }),
/* 493 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	/**
	 * Returns a createElement() type based on the props of the Component.
	 * Useful for calculating what type a component should render as.
	 *
	 * @param {function} Component A function or ReactClass.
	 * @param {object} props A ReactElement props object
	 * @param {function} [getDefault] A function that returns a default element type.
	 * @returns {string|function} A ReactElement type
	 */
	function getElementType(Component, props, getDefault) {
	  var _Component$defaultPro = Component.defaultProps,
	      defaultProps = _Component$defaultPro === void 0 ? {} : _Component$defaultPro; // ----------------------------------------
	  // user defined "as" element type

	  if (props.as && props.as !== defaultProps.as) return props.as; // ----------------------------------------
	  // computed default element type

	  if (getDefault) {
	    var computedDefault = getDefault();
	    if (computedDefault) return computedDefault;
	  } // ----------------------------------------
	  // infer anchor links


	  if (props.href) return 'a'; // ----------------------------------------
	  // use defaultProp or 'div'

	  return defaultProps.as || 'div';
	}

	var _default = getElementType;
	exports.default = _default;

/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _typeof2 = _interopRequireDefault(__webpack_require__(171));

	/**
	 * The function that correctly handles passing refs.
	 *
	 * @param {Function|Object} ref An ref object or function
	 * @param {HTMLElement} node A node that should be passed by ref
	 */
	var handleRef = function handleRef(ref, node) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (typeof ref === 'string') {
	      throw new Error(['We do not support refs as string, this is a legacy API and will be likely to be removed in', 'one of the future releases of React.'].join(' '));
	    }
	  }

	  if (typeof ref === 'function') {
	    ref(node);
	    return;
	  }

	  if (ref !== null && (0, _typeof2.default)(ref) === 'object') {
	    // The `current` property is defined as readonly, however it's a valid way because `ref` is a mutable object
	    // eslint-disable-next-line no-param-reassign
	    ref.current = node;
	  }
	};

	var _default = handleRef;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.partitionHTMLProps = exports.htmlImageProps = exports.htmlInputProps = exports.htmlInputEvents = exports.htmlInputAttrs = void 0;

	var _includes2 = _interopRequireDefault(__webpack_require__(496));

	var _forEach2 = _interopRequireDefault(__webpack_require__(330));

	var htmlInputAttrs = [// REACT
	'selected', 'defaultValue', 'defaultChecked', // LIMITED HTML PROPS
	'accept', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFocus', 'checked', 'disabled', 'form', 'id', 'lang', 'list', 'max', 'maxLength', 'min', 'minLength', 'multiple', 'name', 'pattern', 'placeholder', 'readOnly', 'required', 'step', 'title', 'type', 'value'];
	exports.htmlInputAttrs = htmlInputAttrs;
	var htmlInputEvents = [// EVENTS
	// keyboard
	'onKeyDown', 'onKeyPress', 'onKeyUp', // focus
	'onFocus', 'onBlur', // form
	'onChange', 'onInput', // mouse
	'onClick', 'onContextMenu', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', // selection
	'onSelect', // touch
	'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart'];
	exports.htmlInputEvents = htmlInputEvents;
	var htmlInputProps = htmlInputAttrs.concat(htmlInputEvents);
	exports.htmlInputProps = htmlInputProps;
	var htmlImageProps = ['alt', 'height', 'src', 'srcSet', 'width'];
	/**
	 * Returns an array of objects consisting of: props of html input element and rest.
	 * @param {object} props A ReactElement props object
	 * @param {Object} [options={}]
	 * @param {Array} [options.htmlProps] An array of html input props
	 * @param {boolean} [options.includeAria] Includes all input props that starts with "aria-"
	 * @returns {[{}, {}]} An array of objects
	 */

	exports.htmlImageProps = htmlImageProps;

	var partitionHTMLProps = function partitionHTMLProps(props) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var _options$htmlProps = options.htmlProps,
	      htmlProps = _options$htmlProps === void 0 ? htmlInputProps : _options$htmlProps,
	      _options$includeAria = options.includeAria,
	      includeAria = _options$includeAria === void 0 ? true : _options$includeAria;
	  var inputProps = {};
	  var rest = {};
	  (0, _forEach2.default)(props, function (val, prop) {
	    var possibleAria = includeAria && (/^aria-.*$/.test(prop) || prop === 'role');
	    var target = (0, _includes2.default)(htmlProps, prop) || possibleAria ? inputProps : rest;
	    target[prop] = val;
	  });
	  return [inputProps, rest];
	};

	exports.partitionHTMLProps = partitionHTMLProps;

/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(251),
	    isArrayLike = __webpack_require__(262),
	    isString = __webpack_require__(489),
	    toInteger = __webpack_require__(266),
	    values = __webpack_require__(497);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Checks if `value` is in `collection`. If `collection` is a string, it's
	 * checked for a substring of `value`, otherwise
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * is used for equality comparisons. If `fromIndex` is negative, it's used as
	 * the offset from the end of `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	 * @returns {boolean} Returns `true` if `value` is found, else `false`.
	 * @example
	 *
	 * _.includes([1, 2, 3], 1);
	 * // => true
	 *
	 * _.includes([1, 2, 3], 1, 2);
	 * // => false
	 *
	 * _.includes({ 'a': 1, 'b': 2 }, 1);
	 * // => true
	 *
	 * _.includes('abcd', 'bc');
	 * // => true
	 */
	function includes(collection, value, fromIndex, guard) {
	  collection = isArrayLike(collection) ? collection : values(collection);
	  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

	  var length = collection.length;
	  if (fromIndex < 0) {
	    fromIndex = nativeMax(length + fromIndex, 0);
	  }
	  return isString(collection)
	    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	}

	module.exports = includes;


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	var baseValues = __webpack_require__(498),
	    keys = __webpack_require__(276);

	/**
	 * Creates an array of the own enumerable string keyed property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values(object) {
	  return object == null ? [] : baseValues(object, keys(object));
	}

	module.exports = values;


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(221);

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
	  return arrayMap(props, function(key) {
	    return object[key];
	  });
	}

	module.exports = baseValues;


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _inRange2 = _interopRequireDefault(__webpack_require__(500));

	var _first3 = _interopRequireDefault(__webpack_require__(502));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _some2 = _interopRequireDefault(__webpack_require__(347));

	/**
	 * Determines if a click's coordinates are within the bounds of a node.
	 *
	 * @see https://github.com/Semantic-Org/Semantic-UI-React/pull/2384
	 *
	 * @param {object} node - A DOM node.
	 * @param {object} e - A SyntheticEvent or DOM Event.
	 * @returns {boolean}
	 */
	var doesNodeContainClick = function doesNodeContainClick(node, e) {
	  if ((0, _some2.default)([e, node], _isNil2.default)) return false; // if there is an e.target and it is in the document, use a simple node.contains() check

	  if (e.target) {
	    (0, _invoke2.default)(e.target, 'setAttribute', 'data-suir-click-target', true);

	    if (document.querySelector('[data-suir-click-target=true]')) {
	      (0, _invoke2.default)(e.target, 'removeAttribute', 'data-suir-click-target');
	      return node.contains(e.target);
	    }
	  } // Below logic handles cases where the e.target is no longer in the document.
	  // The result of the click likely has removed the e.target node.
	  // Instead of node.contains(), we'll identify the click by X/Y position.
	  // return early if the event properties aren't available
	  // prevent measuring the node and repainting if we don't need to


	  var clientX = e.clientX,
	      clientY = e.clientY;
	  if ((0, _some2.default)([clientX, clientY], _isNil2.default)) return false; // false if the node is not visible

	  var clientRects = node.getClientRects(); // Heads Up!
	  // getClientRects returns a DOMRectList, not an array nor a plain object
	  // We explicitly avoid _.isEmpty and check .length to cover all possible shapes

	  if (!node.offsetWidth || !node.offsetHeight || !clientRects || !clientRects.length) return false; // false if the node doesn't have a valid bounding rect

	  var _first2 = (0, _first3.default)(clientRects),
	      top = _first2.top,
	      bottom = _first2.bottom,
	      left = _first2.left,
	      right = _first2.right;

	  if ((0, _some2.default)([top, bottom, left, right], _isNil2.default)) return false; // we add a small decimal to the upper bound just to make it inclusive
	  // don't add an whole pixel (1) as the event/node values may be decimal sensitive

	  return (0, _inRange2.default)(clientY, top, bottom + 0.001) && (0, _inRange2.default)(clientX, left, right + 0.001);
	};

	var _default = doesNodeContainClick;
	exports.default = _default;

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

	var baseInRange = __webpack_require__(501),
	    toFinite = __webpack_require__(267),
	    toNumber = __webpack_require__(268);

	/**
	 * Checks if `n` is between `start` and up to, but not including, `end`. If
	 * `end` is not specified, it's set to `start` with `start` then set to `0`.
	 * If `start` is greater than `end` the params are swapped to support
	 * negative ranges.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.3.0
	 * @category Number
	 * @param {number} number The number to check.
	 * @param {number} [start=0] The start of the range.
	 * @param {number} end The end of the range.
	 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	 * @see _.range, _.rangeRight
	 * @example
	 *
	 * _.inRange(3, 2, 4);
	 * // => true
	 *
	 * _.inRange(4, 8);
	 * // => true
	 *
	 * _.inRange(4, 2);
	 * // => false
	 *
	 * _.inRange(2, 2);
	 * // => false
	 *
	 * _.inRange(1.2, 2);
	 * // => true
	 *
	 * _.inRange(5.2, 4);
	 * // => false
	 *
	 * _.inRange(-3, -2, -6);
	 * // => true
	 */
	function inRange(number, start, end) {
	  start = toFinite(start);
	  if (end === undefined) {
	    end = start;
	    start = 0;
	  } else {
	    end = toFinite(end);
	  }
	  number = toNumber(number);
	  return baseInRange(number, start, end);
	}

	module.exports = inRange;


/***/ }),
/* 501 */
/***/ (function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * The base implementation of `_.inRange` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {number} number The number to check.
	 * @param {number} start The start of the range.
	 * @param {number} end The end of the range.
	 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	 */
	function baseInRange(number, start, end) {
	  return number >= nativeMin(start, end) && number < nativeMax(start, end);
	}

	module.exports = baseInRange;


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(503);


/***/ }),
/* 503 */
/***/ (function(module, exports) {

	/**
	 * Gets the first element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @alias first
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the first element of `array`.
	 * @example
	 *
	 * _.head([1, 2, 3]);
	 * // => 1
	 *
	 * _.head([]);
	 * // => undefined
	 */
	function head(array) {
	  return (array && array.length) ? array[0] : undefined;
	}

	module.exports = head;


/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _createPaginationItems.default;
	  }
	});

	var _createPaginationItems = _interopRequireDefault(__webpack_require__(505));

/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(353));

	var _itemFactories = __webpack_require__(506);

	var _rangeFactories = __webpack_require__(507);

	var _paginationUtils = __webpack_require__(512);

	/**
	 * @param {object} rawOptions
	 * @param {number|string} rawOptions.activePage
	 * @param {number|string} rawOptions.boundaryRange Number of always visible pages at the beginning and end.
	 * @param {boolean} rawOptions.hideEllipsis Marks if ellipsis should be hidden.
	 * @param {number|string} rawOptions.siblingRange Number of always visible pages before and after the current one.
	 * @param {number|string} rawOptions.totalPages Total number of pages.
	 */
	var createPaginationItems = function createPaginationItems(rawOptions) {
	  var options = (0, _paginationUtils.typifyOptions)(rawOptions);
	  var activePage = options.activePage,
	      totalPages = options.totalPages;
	  var pageFactory = (0, _itemFactories.createPageFactory)(activePage);
	  var innerRange = (0, _paginationUtils.isSimplePagination)(options) ? (0, _rangeFactories.createSimpleRange)(1, totalPages, pageFactory) : (0, _rangeFactories.createComplexRange)(options, pageFactory);
	  return [(0, _itemFactories.createFirstPage)(), (0, _itemFactories.createPrevItem)(activePage)].concat((0, _toConsumableArray2.default)(innerRange), [(0, _itemFactories.createNextItem)(activePage, totalPages), (0, _itemFactories.createLastItem)(totalPages)]);
	};

	var _default = createPaginationItems;
	exports.default = _default;

/***/ }),
/* 506 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createLastItem = exports.createNextItem = exports.createPageFactory = exports.createPrevItem = exports.createFirstPage = exports.createEllipsisItem = void 0;

	/**
	 * @param {number} pageNumber
	 * @return {Object}
	 */
	var createEllipsisItem = function createEllipsisItem(pageNumber) {
	  return {
	    active: false,
	    type: 'ellipsisItem',
	    value: pageNumber
	  };
	};
	/**
	 * @return {Object}
	 */


	exports.createEllipsisItem = createEllipsisItem;

	var createFirstPage = function createFirstPage() {
	  return {
	    active: false,
	    type: 'firstItem',
	    value: 1
	  };
	};
	/**
	 * @param {number} activePage
	 * @return {Object}
	 */


	exports.createFirstPage = createFirstPage;

	var createPrevItem = function createPrevItem(activePage) {
	  return {
	    active: false,
	    type: 'prevItem',
	    value: Math.max(1, activePage - 1)
	  };
	};
	/**
	 * @param {number} activePage
	 * @return {function}
	 */


	exports.createPrevItem = createPrevItem;

	var createPageFactory = function createPageFactory(activePage) {
	  return function (pageNumber) {
	    return {
	      active: activePage === pageNumber,
	      type: 'pageItem',
	      value: pageNumber
	    };
	  };
	};
	/**
	 * @param {number} activePage
	 * @param {number} totalPages
	 * @return {Object}
	 */


	exports.createPageFactory = createPageFactory;

	var createNextItem = function createNextItem(activePage, totalPages) {
	  return {
	    active: false,
	    type: 'nextItem',
	    value: Math.min(activePage + 1, totalPages)
	  };
	};
	/**
	 * @param {number} totalPages
	 * @return {Object}
	 */


	exports.createNextItem = createNextItem;

	var createLastItem = function createLastItem(totalPages) {
	  return {
	    active: false,
	    type: 'lastItem',
	    value: totalPages
	  };
	};

	exports.createLastItem = createLastItem;

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createComplexRange = exports.createSimpleRange = void 0;

	var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(353));

	var _range2 = _interopRequireDefault(__webpack_require__(508));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _suffixFactories = __webpack_require__(511);

	var createSimpleRange = function createSimpleRange(start, end, pageFactory) {
	  return (0, _map2.default)((0, _range2.default)(start, end + 1), pageFactory);
	};

	exports.createSimpleRange = createSimpleRange;

	var createComplexRange = function createComplexRange(options, pageFactory) {
	  var activePage = options.activePage,
	      boundaryRange = options.boundaryRange,
	      hideEllipsis = options.hideEllipsis,
	      siblingRange = options.siblingRange,
	      totalPages = options.totalPages;
	  var ellipsisSize = hideEllipsis ? 0 : 1;
	  var firstGroupEnd = boundaryRange;
	  var firstGroup = createSimpleRange(1, firstGroupEnd, pageFactory);
	  var lastGroupStart = totalPages + 1 - boundaryRange;
	  var lastGroup = createSimpleRange(lastGroupStart, totalPages, pageFactory);
	  var innerGroupStart = Math.min(Math.max(activePage - siblingRange, firstGroupEnd + ellipsisSize + 1), lastGroupStart - ellipsisSize - 2 * siblingRange - 1);
	  var innerGroupEnd = innerGroupStart + 2 * siblingRange;
	  var innerGroup = createSimpleRange(innerGroupStart, innerGroupEnd, pageFactory);
	  return (0, _toConsumableArray2.default)(firstGroup).concat([!hideEllipsis && (0, _suffixFactories.createInnerPrefix)(firstGroupEnd, innerGroupStart, pageFactory)], (0, _toConsumableArray2.default)(innerGroup), [!hideEllipsis && (0, _suffixFactories.createInnerSuffix)(innerGroupEnd, lastGroupStart, pageFactory)], (0, _toConsumableArray2.default)(lastGroup)).filter(Boolean);
	};

	exports.createComplexRange = createComplexRange;

/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

	var createRange = __webpack_require__(509);

	/**
	 * Creates an array of numbers (positive and/or negative) progressing from
	 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	 * `start` is specified without an `end` or `step`. If `end` is not specified,
	 * it's set to `start` with `start` then set to `0`.
	 *
	 * **Note:** JavaScript follows the IEEE-754 standard for resolving
	 * floating-point values which can produce unexpected results.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {number} [start=0] The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} [step=1] The value to increment or decrement by.
	 * @returns {Array} Returns the range of numbers.
	 * @see _.inRange, _.rangeRight
	 * @example
	 *
	 * _.range(4);
	 * // => [0, 1, 2, 3]
	 *
	 * _.range(-4);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 5);
	 * // => [1, 2, 3, 4]
	 *
	 * _.range(0, 20, 5);
	 * // => [0, 5, 10, 15]
	 *
	 * _.range(0, -4, -1);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 4, 0);
	 * // => [1, 1, 1]
	 *
	 * _.range(0);
	 * // => []
	 */
	var range = createRange();

	module.exports = range;


/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

	var baseRange = __webpack_require__(510),
	    isIterateeCall = __webpack_require__(349),
	    toFinite = __webpack_require__(267);

	/**
	 * Creates a `_.range` or `_.rangeRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new range function.
	 */
	function createRange(fromRight) {
	  return function(start, end, step) {
	    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	      end = step = undefined;
	    }
	    // Ensure the sign of `-0` is preserved.
	    start = toFinite(start);
	    if (end === undefined) {
	      end = start;
	      start = 0;
	    } else {
	      end = toFinite(end);
	    }
	    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
	    return baseRange(start, end, step, fromRight);
	  };
	}

	module.exports = createRange;


/***/ }),
/* 510 */
/***/ (function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeCeil = Math.ceil,
	    nativeMax = Math.max;

	/**
	 * The base implementation of `_.range` and `_.rangeRight` which doesn't
	 * coerce arguments.
	 *
	 * @private
	 * @param {number} start The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} step The value to increment or decrement by.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Array} Returns the range of numbers.
	 */
	function baseRange(start, end, step, fromRight) {
	  var index = -1,
	      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	      result = Array(length);

	  while (length--) {
	    result[fromRight ? length : ++index] = start;
	    start += step;
	  }
	  return result;
	}

	module.exports = baseRange;


/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.createInnerSuffix = exports.createInnerPrefix = void 0;

	var _itemFactories = __webpack_require__(506);

	var createInnerPrefix = function createInnerPrefix(firstGroupEnd, innerGroupStart, pageFactory) {
	  var prefixPage = innerGroupStart - 1;
	  var showEllipsis = prefixPage !== firstGroupEnd + 1;
	  var prefixFactory = showEllipsis ? _itemFactories.createEllipsisItem : pageFactory;
	  return prefixFactory(prefixPage);
	};

	exports.createInnerPrefix = createInnerPrefix;

	var createInnerSuffix = function createInnerSuffix(innerGroupEnd, lastGroupStart, pageFactory) {
	  var suffixPage = innerGroupEnd + 1;
	  var showEllipsis = suffixPage !== lastGroupStart - 1;
	  var suffixFactory = showEllipsis ? _itemFactories.createEllipsisItem : pageFactory;
	  return suffixFactory(suffixPage);
	};

	exports.createInnerSuffix = createInnerSuffix;

/***/ }),
/* 512 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.typifyOptions = exports.isSimplePagination = void 0;

	/**
	 * Checks the possibility of using simple range generation, if number of generated pages is equal
	 * or greater than total pages to show.
	 *
	 * @param {object} options
	 * @param {number} options.boundaryRange Number of always visible pages at the beginning and end.
	 * @param {number} options.siblingRange Number of always visible pages before and after the current one.
	 * @param {number} options.totalPages Total number of pages.
	 * @return {boolean}
	 */
	var isSimplePagination = function isSimplePagination(_ref) {
	  var boundaryRange = _ref.boundaryRange,
	      hideEllipsis = _ref.hideEllipsis,
	      siblingRange = _ref.siblingRange,
	      totalPages = _ref.totalPages;
	  var boundaryRangeSize = 2 * boundaryRange;
	  var ellipsisSize = hideEllipsis ? 0 : 2;
	  var siblingRangeSize = 2 * siblingRange;
	  return 1 + ellipsisSize + siblingRangeSize + boundaryRangeSize >= totalPages;
	};

	exports.isSimplePagination = isSimplePagination;

	var typifyOptions = function typifyOptions(_ref2) {
	  var activePage = _ref2.activePage,
	      boundaryRange = _ref2.boundaryRange,
	      hideEllipsis = _ref2.hideEllipsis,
	      siblingRange = _ref2.siblingRange,
	      totalPages = _ref2.totalPages;
	  return {
	    activePage: +activePage,
	    boundaryRange: +boundaryRange,
	    hideEllipsis: !!hideEllipsis,
	    siblingRange: +siblingRange,
	    totalPages: +totalPages
	  };
	};

	exports.typifyOptions = typifyOptions;

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ALL_ICONS_IN_ALL_CONTEXTS = exports.COMPONENT_CONTEXT_SPECIFIC_ICONS = exports.ICONS_AND_ALIASES = exports.ICON_ALIASES = exports.ICONS = exports.BRANDS = exports.WRITING = exports.VEHICLES = exports.USERS_PEOPLE = exports.STATUS = exports.SPORTS = exports.SPINNERS = exports.SHAPES = exports.PAYMENTS_SHOPPING = exports.OBJECTS = exports.MEDICAL = exports.MAPS = exports.LOGISTICS = exports.INTERFACES = exports.IMAGES = exports.HEALTH = exports.HANDS_GESTURES = exports.GENDERS = exports.FILES = exports.EDITORS = exports.DESIGN = exports.DATE_TIME = exports.CURRENCY = exports.COMPUTERS = exports.COMMUNICATION = exports.CODE = exports.CHESS = exports.BUSINESS = exports.AUDIO_VIDEO = exports.ARROWS = exports.ACCESSIBILITY = exports.TRANSITIONS = exports.STATIC_TRANSITIONS = exports.DIRECTIONAL_TRANSITIONS = exports.WIDTHS = exports.VISIBILITY = exports.VERTICAL_ALIGNMENTS = exports.TEXT_ALIGNMENTS = exports.SIZES = exports.FLOATS = exports.COLORS = void 0;

	var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(353));

	var _uniq2 = _interopRequireDefault(__webpack_require__(485));

	var _values2 = _interopRequireDefault(__webpack_require__(497));

	var _keys2 = _interopRequireDefault(__webpack_require__(276));

	var _numberToWord = __webpack_require__(351);

	var COLORS = ['red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'grey', 'black'];
	exports.COLORS = COLORS;
	var FLOATS = ['left', 'right'];
	exports.FLOATS = FLOATS;
	var SIZES = ['mini', 'tiny', 'small', 'medium', 'large', 'big', 'huge', 'massive'];
	exports.SIZES = SIZES;
	var TEXT_ALIGNMENTS = ['left', 'center', 'right', 'justified'];
	exports.TEXT_ALIGNMENTS = TEXT_ALIGNMENTS;
	var VERTICAL_ALIGNMENTS = ['bottom', 'middle', 'top'];
	exports.VERTICAL_ALIGNMENTS = VERTICAL_ALIGNMENTS;
	var VISIBILITY = ['mobile', 'tablet', 'computer', 'large screen', 'widescreen'];
	exports.VISIBILITY = VISIBILITY;
	var WIDTHS = (0, _toConsumableArray2.default)((0, _keys2.default)(_numberToWord.numberToWordMap)).concat((0, _toConsumableArray2.default)((0, _keys2.default)(_numberToWord.numberToWordMap).map(Number)), (0, _toConsumableArray2.default)((0, _values2.default)(_numberToWord.numberToWordMap)));
	exports.WIDTHS = WIDTHS;
	var DIRECTIONAL_TRANSITIONS = ['browse', 'browse right', 'drop', 'fade', 'fade up', 'fade down', 'fade left', 'fade right', 'fly up', 'fly down', 'fly left', 'fly right', 'horizontal flip', 'vertical flip', 'scale', 'slide up', 'slide down', 'slide left', 'slide right', 'swing up', 'swing down', 'swing left', 'swing right', 'zoom'];
	exports.DIRECTIONAL_TRANSITIONS = DIRECTIONAL_TRANSITIONS;
	var STATIC_TRANSITIONS = ['jiggle', 'flash', 'shake', 'pulse', 'tada', 'bounce', 'glow'];
	exports.STATIC_TRANSITIONS = STATIC_TRANSITIONS;
	var TRANSITIONS = DIRECTIONAL_TRANSITIONS.concat(STATIC_TRANSITIONS); // Generated from:
	// https://github.com/Semantic-Org/Semantic-UI/blob/master/dist/components/icon.css

	exports.TRANSITIONS = TRANSITIONS;
	var ACCESSIBILITY = ['american sign language interpreting', 'assistive listening systems', 'audio description', 'blind', 'braille', 'closed captioning', 'closed captioning outline', 'deaf', 'low vision', 'phone volume', 'question circle', 'question circle outline', 'sign language', 'tty', 'universal access', 'wheelchair'];
	exports.ACCESSIBILITY = ACCESSIBILITY;
	var ARROWS = ['angle double down', 'angle double left', 'angle double right', 'angle double up', 'angle down', 'angle left', 'angle right', 'angle up', 'arrow alternate circle down', 'arrow alternate circle down outline', 'arrow alternate circle left', 'arrow alternate circle left outline', 'arrow alternate circle right', 'arrow alternate circle right outline', 'arrow alternate circle up', 'arrow alternate circle up outline', 'arrow circle down', 'arrow circle left', 'arrow circle right', 'arrow circle up', 'arrow down', 'arrow left', 'arrow right', 'arrow up', 'arrows alternate', 'arrows alternate horizontal', 'arrows alternate vertical', 'caret down', 'caret left', 'caret right', 'caret square down', 'caret square down outline', 'caret square left', 'caret square left outline', 'caret square right', 'caret square right outline', 'caret square up', 'caret square up outline', 'caret up', 'cart arrow down', 'chart line', 'chevron circle down', 'chevron circle left', 'chevron circle right', 'chevron circle up', 'chevron down', 'chevron left', 'chevron right', 'chevron up', 'cloud download', 'cloud upload', 'download', 'exchange', 'expand arrows alternate', 'external alternate', 'external square alternate', 'hand point down', 'hand point down outline', 'hand point left', 'hand point left outline', 'hand point right', 'hand point right outline', 'hand point up', 'hand point up outline', 'hand pointer', 'hand pointer outline', 'history', 'level down alternate', 'level up alternate', 'location arrow', 'long arrow alternate down', 'long arrow alternate left', 'long arrow alternate right', 'long arrow alternate up', 'mouse pointer', 'play', 'random', 'recycle', 'redo', 'redo alternate', 'reply', 'reply all', 'retweet', 'share', 'share square', 'share square outline', 'sign-in', 'sign-out', 'sign-in alternate', 'sign-out alternate', 'sort', 'sort alphabet down', 'sort alphabet up', 'sort amount down', 'sort amount up', 'sort down', 'sort numeric down', 'sort numeric up', 'sort up', 'sync', 'sync alternate', 'text height', 'text width', 'undo', 'undo alternate', 'upload', 'zoom-in', 'zoom-out'];
	exports.ARROWS = ARROWS;
	var AUDIO_VIDEO = ['audio description', 'backward', 'circle', 'circle outline', 'closed captioning', 'closed captioning outline', 'compress', 'eject', 'expand', 'expand arrows alternate', 'fast backward', 'fast forward', 'file audio', 'file audio outline', 'file video', 'file video outline', 'film', 'forward', 'headphones', 'microphone', 'microphone slash', 'music', 'pause', 'pause circle', 'pause circle outline', 'phone volume', 'play', 'play circle', 'play circle outline', 'podcast', 'random', 'redo', 'redo alternate', 'rss', 'rss square', 'step backward', 'step forward', 'stop', 'stop circle', 'stop circle outline', 'sync', 'sync alternate', 'undo', 'undo alternate', 'video', 'volume down', 'volume off', 'volume up'];
	exports.AUDIO_VIDEO = AUDIO_VIDEO;
	var BUSINESS = ['address book', 'address book outline', 'address card', 'address card outline', 'archive', 'balance scale', 'birthday cake', 'book', 'briefcase', 'building', 'building outline', 'bullhorn', 'bullseye', 'calculator', 'calendar', 'calendar outline', 'calendar alternate', 'calendar alternate outline', 'certificate', 'chart area', 'chart bar', 'chart bar outline', 'chart line', 'chart pie', 'clipboard', 'clipboard outline', 'coffee', 'columns', 'compass', 'compass outline', 'copy', 'copy outline', 'copyright', 'copyright outline', 'cut', 'edit', 'edit outline', 'envelope', 'envelope outline', 'envelope open', 'envelope open outline', 'envelope square', 'eraser', 'fax', 'file', 'file outline', 'file alternate', 'file alternate outline', 'folder', 'folder outline', 'folder open', 'folder open outline', 'globe', 'industry', 'paperclip', 'paste', 'pen square', 'pencil alternate', 'percent', 'phone', 'phone square', 'phone volume', 'registered', 'registered outline', 'save', 'save outline', 'sitemap', 'sticky note', 'sticky note outline', 'suitcase', 'table', 'tag', 'tags', 'tasks', 'thumbtack', 'trademark'];
	exports.BUSINESS = BUSINESS;
	var CHESS = ['chess', 'chess bishop', 'chess board', 'chess king', 'chess knight', 'chess pawn', 'chess queen', 'chess rook', 'square full'];
	exports.CHESS = CHESS;
	var CODE = ['archive', 'barcode', 'bath', 'bug', 'code', 'code branch', 'coffee', 'file', 'file outline', 'file alternate', 'file alternate outline', 'file code', 'file code outline', 'filter', 'fire extinguisher', 'folder', 'folder outline', 'folder open', 'folder open outline', 'keyboard', 'keyboard outline', 'microchip', 'qrcode', 'shield alternate', 'sitemap', 'terminal', 'user secret', 'window close', 'window close outline', 'window maximize', 'window maximize outline', 'window minimize', 'window minimize outline', 'window restore', 'window restore outline'];
	exports.CODE = CODE;
	var COMMUNICATION = ['address book', 'address book outline', 'address card', 'address card outline', 'american sign language interpreting', 'assistive listening systems', 'at', 'bell', 'bell outline', 'bell slash', 'bell slash outline', 'bullhorn', 'comment', 'comment outline', 'comment alternate', 'comment alternate outline', 'comments', 'comments outline', 'envelope', 'envelope outline', 'envelope open', 'envelope open outline', 'envelope square', 'fax', 'inbox', 'language', 'microphone', 'microphone slash', 'mobile', 'mobile alternate', 'paper plane', 'paper plane outline', 'phone', 'phone square', 'phone volume', 'rss', 'rss square', 'tty', 'wifi'];
	exports.COMMUNICATION = COMMUNICATION;
	var COMPUTERS = ['desktop', 'download', 'hdd', 'hdd outline', 'headphones', 'keyboard', 'keyboard outline', 'laptop', 'microchip', 'mobile', 'mobile alternate', 'plug', 'power off', 'print', 'save', 'save outline', 'server', 'tablet', 'tablet alternate', 'tv', 'upload'];
	exports.COMPUTERS = COMPUTERS;
	var CURRENCY = ['dollar sign', 'euro sign', 'lira sign', 'money bill alternate', 'money bill alternate outline', 'pound sign', 'ruble sign', 'rupee sign', 'shekel sign', 'won sign', 'yen sign'];
	exports.CURRENCY = CURRENCY;
	var DATE_TIME = ['bell', 'bell outline', 'bell slash', 'bell slash outline', 'calendar', 'calendar outline', 'calendar alternate', 'calendar alternate outline', 'calendar check', 'calendar check outline', 'calendar minus', 'calendar minus outline', 'calendar plus', 'calendar plus outline', 'calendar times', 'calendar times outline', 'clock', 'clock outline', 'hourglass', 'hourglass outline', 'hourglass end', 'hourglass half', 'hourglass start', 'stopwatch'];
	exports.DATE_TIME = DATE_TIME;
	var DESIGN = ['adjust', 'clone', 'clone outline', 'copy', 'copy outline', 'crop', 'crosshairs', 'cut', 'edit', 'edit outline', 'eraser', 'eye', 'eye dropper', 'eye slash', 'eye slash outline', 'object group', 'object group outline', 'object ungroup', 'object ungroup outline', 'paint brush', 'paste', 'pencil alternate', 'save', 'save outline', 'tint'];
	exports.DESIGN = DESIGN;
	var EDITORS = ['align center', 'align justify', 'align left', 'align right', 'bold', 'clipboard', 'clipboard outline', 'clone', 'clone outline', 'columns', 'copy', 'copy outline', 'cut', 'edit', 'edit outline', 'eraser', 'file', 'file outline', 'file alternate', 'file alternate outline', 'font', 'heading', 'i cursor', 'indent', 'italic', 'linkify', 'list', 'list alternate', 'list alternate outline', 'list ol', 'list ul', 'outdent', 'paper plane', 'paper plane outline', 'paperclip', 'paragraph', 'paste', 'pencil alternate', 'print', 'quote left', 'quote right', 'redo', 'redo alternate', 'reply', 'reply all', 'share', 'strikethrough', 'subscript', 'superscript', 'sync', 'sync alternate', 'table', 'tasks', 'text height', 'text width', 'th', 'th large', 'th list', 'trash', 'trash alternate', 'trash alternate outline', 'underline', 'undo', 'undo alternate', 'unlink'];
	exports.EDITORS = EDITORS;
	var FILES = ['archive', 'clone', 'clone outline', 'copy', 'copy outline', 'cut', 'file', 'file outline', 'file alternate', 'file alternate outline', 'file archive', 'file archive outline', 'file audio', 'file audio outline', 'file code', 'file code outline', 'file excel', 'file excel outline', 'file image', 'file image outline', 'file pdf', 'file pdf outline', 'file powerpoint', 'file powerpoint outline', 'file video', 'file video outline', 'file word', 'file word outline', 'folder', 'folder outline', 'folder open', 'folder open outline', 'paste', 'save', 'save outline', 'sticky note', 'sticky note outline'];
	exports.FILES = FILES;
	var GENDERS = ['genderless', 'mars', 'mars double', 'mars stroke', 'mars stroke horizontal', 'mars stroke vertical', 'mercury', 'neuter', 'transgender', 'transgender alternate', 'venus', 'venus double', 'venus mars'];
	exports.GENDERS = GENDERS;
	var HANDS_GESTURES = ['hand lizard', 'hand lizard outline', 'hand paper', 'hand paper outline', 'hand peace', 'hand peace outline', 'hand point down', 'hand point down outline', 'hand point left', 'hand point left outline', 'hand point right', 'hand point right outline', 'hand point up', 'hand point up outline', 'hand pointer', 'hand pointer outline', 'hand rock', 'hand rock outline', 'hand scissors', 'hand scissors outline', 'hand spock', 'hand spock outline', 'handshake', 'handshake outline', 'thumbs down', 'thumbs down outline', 'thumbs up', 'thumbs up outline'];
	exports.HANDS_GESTURES = HANDS_GESTURES;
	var HEALTH = ['ambulance', 'h square', 'heart', 'heart outline', 'heartbeat', 'hospital', 'hospital outline', 'medkit', 'plus square', 'plus square outline', 'stethoscope', 'user md', 'wheelchair'];
	exports.HEALTH = HEALTH;
	var IMAGES = ['adjust', 'bolt', 'camera', 'camera retro', 'clone', 'clone outline', 'compress', 'expand', 'eye', 'eye dropper', 'eye slash', 'eye slash outline', 'file image', 'file image outline', 'film', 'id badge', 'id badge outline', 'id card', 'id card outline', 'image', 'image outline', 'images', 'images outline', 'sliders horizontal', 'tint'];
	exports.IMAGES = IMAGES;
	var INTERFACES = ['ban', 'barcode', 'bars', 'beer', 'bell', 'bell outline', 'bell slash', 'bell slash outline', 'bug', 'bullhorn', 'bullseye', 'calculator', 'calendar', 'calendar outline', 'calendar alternate', 'calendar alternate outline', 'calendar check', 'calendar check outline', 'calendar minus', 'calendar minus outline', 'calendar plus', 'calendar plus outline', 'calendar times', 'calendar times outline', 'certificate', 'check', 'check circle', 'check circle outline', 'check square', 'check square outline', 'circle', 'circle outline', 'clipboard', 'clipboard outline', 'clone', 'clone outline', 'cloud', 'cloud download', 'cloud upload', 'coffee', 'cog', 'cogs', 'copy', 'copy outline', 'cut', 'database', 'dot circle', 'dot circle outline', 'download', 'edit', 'edit outline', 'ellipsis horizontal', 'ellipsis vertical', 'envelope', 'envelope outline', 'envelope open', 'envelope open outline', 'eraser', 'exclamation', 'exclamation circle', 'exclamation triangle', 'external alternate', 'external square alternate', 'eye', 'eye slash', 'eye slash outline', 'file', 'file outline', 'file alternate', 'file alternate outline', 'filter', 'flag', 'flag outline', 'flag checkered', 'folder', 'folder outline', 'folder open', 'folder open outline', 'frown', 'frown outline', 'hashtag', 'heart', 'heart outline', 'history', 'home', 'i cursor', 'info', 'info circle', 'language', 'magic', 'meh', 'meh outline', 'microphone', 'microphone slash', 'minus', 'minus circle', 'minus square', 'minus square outline', 'paste', 'pencil alternate', 'plus', 'plus circle', 'plus square', 'plus square outline', 'qrcode', 'question', 'question circle', 'question circle outline', 'quote left', 'quote right', 'redo', 'redo alternate', 'reply', 'reply all', 'rss', 'rss square', 'save', 'save outline', 'search', 'search minus', 'search plus', 'share', 'share alternate', 'share alternate square', 'share square', 'share square outline', 'shield alternate', 'sign-in', 'sign-out', 'signal', 'sitemap', 'sliders horizontal', 'smile', 'smile outline', 'sort', 'sort alphabet down', 'sort alphabet up', 'sort amount down', 'sort amount up', 'sort down', 'sort numeric down', 'sort numeric up', 'sort up', 'star', 'star outline', 'star half', 'star half outline', 'sync', 'sync alternate', 'thumbs down', 'thumbs down outline', 'thumbs up', 'thumbs up outline', 'times', 'times circle', 'times circle outline', 'toggle off', 'toggle on', 'trash', 'trash alternate', 'trash alternate outline', 'trophy', 'undo', 'undo alternate', 'upload', 'user', 'user outline', 'user circle', 'user circle outline', 'wifi'];
	exports.INTERFACES = INTERFACES;
	var LOGISTICS = ['box', 'boxes', 'clipboard check', 'clipboard list', 'dolly', 'dolly flatbed', 'pallet', 'shipping fast', 'truck', 'warehouse'];
	exports.LOGISTICS = LOGISTICS;
	var MAPS = ['ambulance', 'anchor', 'balance scale', 'bath', 'bed', 'beer', 'bell', 'bell outline', 'bell slash', 'bell slash outline', 'bicycle', 'binoculars', 'birthday cake', 'blind', 'bomb', 'book', 'bookmark', 'bookmark outline', 'briefcase', 'building', 'building outline', 'car', 'coffee', 'crosshairs', 'dollar sign', 'eye', 'eye slash', 'eye slash outline', 'fighter jet', 'fire', 'fire extinguisher', 'flag', 'flag outline', 'flag checkered', 'flask', 'gamepad', 'gavel', 'gift', 'glass martini', 'globe', 'graduation cap', 'h square', 'heart', 'heart outline', 'heartbeat', 'home', 'hospital', 'hospital outline', 'image', 'image outline', 'images', 'images outline', 'industry', 'info', 'info circle', 'key', 'leaf', 'lemon', 'lemon outline', 'life ring', 'life ring outline', 'lightbulb', 'lightbulb outline', 'location arrow', 'low vision', 'magnet', 'male', 'map', 'map outline', 'map marker', 'map marker alternate', 'map pin', 'map signs', 'medkit', 'money bill alternate', 'money bill alternate outline', 'motorcycle', 'music', 'newspaper', 'newspaper outline', 'paw', 'phone', 'phone square', 'phone volume', 'plane', 'plug', 'plus', 'plus square', 'plus square outline', 'print', 'recycle', 'road', 'rocket', 'search', 'search minus', 'search plus', 'ship', 'shopping bag', 'shopping basket', 'shopping cart', 'shower', 'street view', 'subway', 'suitcase', 'tag', 'tags', 'taxi', 'thumbtack', 'ticket alternate', 'tint', 'train', 'tree', 'trophy', 'truck', 'tty', 'umbrella', 'university', 'utensil spoon', 'utensils', 'wheelchair', 'wifi', 'wrench'];
	exports.MAPS = MAPS;
	var MEDICAL = ['ambulance', 'band aid', 'dna', 'first aid', 'heart', 'heart outline', 'heartbeat', 'hospital', 'hospital outline', 'hospital symbol', 'pills', 'plus', 'stethoscope', 'syringe', 'thermometer', 'user md', 'weight'];
	exports.MEDICAL = MEDICAL;
	var OBJECTS = ['ambulance', 'anchor', 'archive', 'balance scale', 'bath', 'bed', 'beer', 'bell', 'bell outline', 'bicycle', 'binoculars', 'birthday cake', 'bomb', 'book', 'bookmark', 'bookmark outline', 'briefcase', 'bug', 'building', 'building outline', 'bullhorn', 'bullseye', 'bus', 'calculator', 'calendar', 'calendar outline', 'calendar alternate', 'calendar alternate outline', 'camera', 'camera retro', 'car', 'clipboard', 'clipboard outline', 'cloud', 'coffee', 'cog', 'cogs', 'compass', 'compass outline', 'copy', 'copy outline', 'cube', 'cubes', 'cut', 'envelope', 'envelope outline', 'envelope open', 'envelope open outline', 'eraser', 'eye', 'eye dropper', 'fax', 'fighter jet', 'file', 'file outline', 'file alternate', 'file alternate outline', 'film', 'fire', 'fire extinguisher', 'flag', 'flag outline', 'flag checkered', 'flask', 'futbol', 'futbol outline', 'gamepad', 'gavel', 'gem', 'gem outline', 'gift', 'glass martini', 'globe', 'graduation cap', 'hdd', 'hdd outline', 'headphones', 'heart', 'heart outline', 'home', 'hospital', 'hospital outline', 'hourglass', 'hourglass outline', 'image', 'image outline', 'images', 'images outline', 'industry', 'key', 'keyboard', 'keyboard outline', 'laptop', 'leaf', 'lemon', 'lemon outline', 'life ring', 'life ring outline', 'lightbulb', 'lightbulb outline', 'lock', 'lock open', 'magic', 'magnet', 'map', 'map outline', 'map marker', 'map marker alternate', 'map pin', 'map signs', 'medkit', 'microchip', 'microphone', 'mobile', 'mobile alternate', 'money bill alternate', 'money bill alternate outline', 'moon', 'moon outline', 'motorcycle', 'newspaper', 'newspaper outline', 'paint brush', 'paper plane', 'paper plane outline', 'paperclip', 'paste', 'paw', 'pencil alternate', 'phone', 'plane', 'plug', 'print', 'puzzle piece', 'road', 'rocket', 'save', 'save outline', 'search', 'shield alternate', 'shopping bag', 'shopping basket', 'shopping cart', 'shower', 'snowflake', 'snowflake outline', 'space shuttle', 'star', 'star outline', 'sticky note', 'sticky note outline', 'stopwatch', 'subway', 'suitcase', 'sun', 'sun outline', 'tablet', 'tablet alternate', 'tachometer alternate', 'tag', 'tags', 'taxi', 'thumbtack', 'ticket alternate', 'train', 'trash', 'trash alternate', 'trash alternate outline', 'tree', 'trophy', 'truck', 'tv', 'umbrella', 'university', 'unlock', 'unlock alternate', 'utensil spoon', 'utensils', 'wheelchair', 'wrench'];
	exports.OBJECTS = OBJECTS;
	var PAYMENTS_SHOPPING = ['bell', 'bell outline', 'bookmark', 'bookmark outline', 'bullhorn', 'camera', 'camera retro', 'cart arrow down', 'cart plus', 'certificate', 'credit card', 'credit card outline', 'gem', 'gem outline', 'gift', 'handshake', 'handshake outline', 'heart', 'heart outline', 'key', 'shopping bag', 'shopping basket', 'shopping cart', 'star', 'star outline', 'tag', 'tags', 'thumbs down', 'thumbs down outline', 'thumbs up', 'thumbs up outline', 'trophy'];
	exports.PAYMENTS_SHOPPING = PAYMENTS_SHOPPING;
	var SHAPES = ['bookmark', 'bookmark outline', 'calendar', 'calendar outline', 'certificate', 'circle', 'circle outline', 'cloud', 'comment', 'comment outline', 'file', 'file outline', 'folder', 'folder outline', 'heart', 'heart outline', 'map marker', 'play', 'square', 'square outline', 'star', 'star outline'];
	exports.SHAPES = SHAPES;
	var SPINNERS = ['asterisk', 'certificate', 'circle notch', 'cog', 'compass', 'compass outline', 'crosshairs', 'life ring', 'life ring outline', 'snowflake', 'snowflake outline', 'spinner', 'sun', 'sun outline', 'sync'];
	exports.SPINNERS = SPINNERS;
	var SPORTS = ['baseball ball', 'basketball ball', 'bowling ball', 'football ball', 'futbol', 'futbol outline', 'golf ball', 'hockey puck', 'quidditch', 'table tennis', 'volleyball ball'];
	exports.SPORTS = SPORTS;
	var STATUS = ['ban', 'battery empty', 'battery full', 'battery half', 'battery quarter', 'battery three quarters', 'bell', 'bell outline', 'bell slash', 'bell slash outline', 'calendar', 'calendar outline', 'calendar alternate', 'calendar alternate outline', 'calendar check', 'calendar check outline', 'calendar minus', 'calendar minus outline', 'calendar plus', 'calendar plus outline', 'calendar times', 'calendar times outline', 'cart arrow down', 'cart plus', 'exclamation', 'exclamation circle', 'exclamation triangle', 'eye', 'eye slash', 'eye slash outline', 'file', 'file outline', 'file alternate', 'file alternate outline', 'folder', 'folder outline', 'folder open', 'folder open outline', 'info', 'info circle', 'lock', 'lock open', 'minus', 'minus circle', 'minus square', 'minus square outline', 'plus', 'plus circle', 'plus square', 'plus square outline', 'question', 'question circle', 'question circle outline', 'shield alternate', 'shopping cart', 'sign in alternate', 'sign out alternate', 'thermometer empty', 'thermometer full', 'thermometer half', 'thermometer quarter', 'thermometer three quarters', 'thumbs down', 'thumbs down outline', 'thumbs up', 'thumbs up outline', 'toggle off', 'toggle on', 'unlock', 'unlock alternate'];
	exports.STATUS = STATUS;
	var USERS_PEOPLE = ['address book', 'address book outline', 'address card', 'address card outline', 'bed', 'blind', 'child', 'female', 'frown', 'frown outline', 'id badge', 'id badge outline', 'id card', 'id card outline', 'male', 'meh', 'meh outline', 'power off', 'smile', 'smile outline', 'street view', 'user', 'user outline', 'user circle', 'user circle outline', 'user md', 'user plus', 'user secret', 'user times', 'users', 'wheelchair'];
	exports.USERS_PEOPLE = USERS_PEOPLE;
	var VEHICLES = ['ambulance', 'bicycle', 'bus', 'car', 'fighter jet', 'motorcycle', 'paper plane', 'paper plane outline', 'plane', 'rocket', 'ship', 'shopping cart', 'space shuttle', 'subway', 'taxi', 'train', 'truck', 'wheelchair'];
	exports.VEHICLES = VEHICLES;
	var WRITING = ['archive', 'book', 'bookmark', 'bookmark outline', 'edit', 'edit outline', 'envelope', 'envelope outline', 'envelope open', 'envelope open outline', 'eraser', 'file', 'file outline', 'file alternate', 'file alternate outline', 'folder', 'folder outline', 'folder open', 'folder open outline', 'keyboard', 'keyboard outline', 'newspaper', 'newspaper outline', 'paper plane', 'paper plane outline', 'paperclip', 'paragraph', 'pen square', 'pencil alternate', 'quote left', 'quote right', 'sticky note', 'sticky note outline', 'thumbtack'];
	exports.WRITING = WRITING;
	var BRANDS = ['500px', 'accessible', 'accusoft', 'adn', 'adversal', 'affiliatetheme', 'algolia', 'amazon', 'amazon pay', 'amilia', 'android', 'angellist', 'angrycreative', 'angular', 'app store', 'app store ios', 'apper', 'apple', 'apple pay', 'asymmetrik', 'audible', 'autoprefixer', 'avianex', 'aviato', 'aws', 'bandcamp', 'behance', 'behance square', 'bimobject', 'bitbucket', 'bitcoin', 'bity', 'black tie', 'blackberry', 'blogger', 'blogger b', 'bluetooth', 'bluetooth b', 'btc', 'buromobelexperte', 'buysellads', 'cc amazon pay', 'cc amex', 'cc apple pay', 'cc diners club', 'cc discover', 'cc jcb', 'cc mastercard', 'cc paypal', 'cc stripe', 'cc visa', 'centercode', 'chrome', 'cloudscale', 'cloudsmith', 'cloudversify', 'codepen', 'codiepie', 'connectdevelop', 'contao', 'cpanel', 'creative commons', 'css3', 'css3 alternate', 'cuttlefish', 'd and d', 'dashcube', 'delicious', 'deploydog', 'deskpro', 'deviantart', 'digg', 'digital ocean', 'discord', 'discourse', 'dochub', 'docker', 'draft2digital', 'dribbble', 'dribbble square', 'dropbox', 'drupal', 'dyalog', 'earlybirds', 'edge', 'elementor', 'ember', 'empire', 'envira', 'erlang', 'ethereum', 'etsy', 'expeditedssl', 'facebook', 'facebook f', 'facebook messenger', 'facebook square', 'firefox', 'first order', 'firstdraft', 'flickr', 'flipboard', 'fly', 'font awesome', 'font awesome alternate', 'font awesome flag', 'fonticons', 'fonticons fi', 'fort awesome', 'fort awesome alternate', 'forumbee', 'foursquare', 'free code camp', 'freebsd', 'get pocket', 'gg', 'gg circle', 'git', 'git square', 'github', 'github alternate', 'github square', 'gitkraken', 'gitlab', 'gitter', 'glide', 'glide g', 'gofore', 'goodreads', 'goodreads g', 'google', 'google drive', 'google play', 'google plus', 'google plus g', 'google plus square', 'google wallet', 'gratipay', 'grav', 'gripfire', 'grunt', 'gulp', 'hacker news', 'hacker news square', 'hips', 'hire a helper', 'hooli', 'hotjar', 'houzz', 'html5', 'hubspot', 'imdb', 'instagram', 'internet explorer', 'ioxhost', 'itunes', 'itunes note', 'jenkins', 'joget', 'joomla', 'js', 'js square', 'jsfiddle', 'keycdn', 'kickstarter', 'kickstarter k', 'korvue', 'laravel', 'lastfm', 'lastfm square', 'leanpub', 'less', 'linechat', 'linkedin', 'linkedin alternate', 'linode', 'linux', 'lyft', 'magento', 'maxcdn', 'medapps', 'medium', 'medium m', 'medrt', 'meetup', 'microsoft', 'mix', 'mixcloud', 'mizuni', 'modx', 'monero', 'napster', 'nintendo switch', 'node', 'node js', 'npm', 'ns8', 'nutritionix', 'odnoklassniki', 'odnoklassniki square', 'opencart', 'openid', 'opera', 'optin monster', 'osi', 'page4', 'pagelines', 'palfed', 'patreon', 'paypal', 'periscope', 'phabricator', 'phoenix framework', 'php', 'pied piper', 'pied piper alternate', 'pied piper pp', 'pinterest', 'pinterest p', 'pinterest square', 'playstation', 'product hunt', 'pushed', 'python', 'qq', 'quinscape', 'quora', 'ravelry', 'react', 'rebel', 'redriver', 'reddit', 'reddit alien', 'reddit square', 'rendact', 'renren', 'replyd', 'resolving', 'rocketchat', 'rockrms', 'safari', 'sass', 'schlix', 'scribd', 'searchengin', 'sellcast', 'sellsy', 'servicestack', 'shirtsinbulk', 'simplybuilt', 'sistrix', 'skyatlas', 'skype', 'slack', 'slack hash', 'slideshare', 'snapchat', 'snapchat ghost', 'snapchat square', 'soundcloud', 'speakap', 'spotify', 'stack exchange', 'stack overflow', 'staylinked', 'steam', 'steam square', 'steam symbol', 'sticker mule', 'strava', 'stripe', 'stripe s', 'studiovinari', 'stumbleupon', 'stumbleupon circle', 'superpowers', 'supple', 'telegram', 'telegram plane', 'tencent weibo', 'themeisle', 'trello', 'tripadvisor', 'tumblr', 'tumblr square', 'twitch', 'twitter', 'twitter square', 'typo3', 'uber', 'uikit', 'uniregistry', 'untappd', 'usb', 'ussunnah', 'vaadin', 'viacoin', 'viadeo', 'viadeo square', 'viber', 'vimeo', 'vimeo square', 'vimeo v', 'vine', 'vk', 'vnv', 'vuejs', 'wechat', 'weibo', 'weixin', 'whatsapp', 'whatsapp square', 'whmcs', 'wikipedia w', 'windows', 'wordpress', 'wordpress simple', 'wpbeginner', 'wpexplorer', 'wpforms', 'xbox', 'xing', 'xing square', 'y combinator', 'yahoo', 'yandex', 'yandex international', 'yelp', 'yoast', 'youtube', 'youtube square'];
	exports.BRANDS = BRANDS;
	var ICONS = (0, _uniq2.default)(ACCESSIBILITY.concat(ARROWS, AUDIO_VIDEO, BUSINESS, CHESS, CODE, COMMUNICATION, COMPUTERS, CURRENCY, DATE_TIME, DESIGN, EDITORS, FILES, GENDERS, HANDS_GESTURES, HEALTH, IMAGES, INTERFACES, LOGISTICS, MAPS, MEDICAL, OBJECTS, PAYMENTS_SHOPPING, SHAPES, SPINNERS, SPORTS, STATUS, USERS_PEOPLE, VEHICLES, WRITING, BRANDS));
	exports.ICONS = ICONS;
	var ICON_ALIASES = ['chess rock', 'ordered list', 'unordered list', 'user doctor', 'shield', 'puzzle', 'add circle', 'add square', 'add to calendar', 'add to cart', 'add user', 'add', 'alarm mute', 'alarm', 'ald', 'als', 'announcement', 'area chart', 'area graph', 'arrow down cart', 'asexual', 'asl interpreting', 'asl', 'assistive listening devices', 'attach', 'attention', 'balance', 'bar', 'bathtub', 'battery four', 'battery high', 'battery low', 'battery one', 'battery three', 'battery two', 'battery zero', 'birthday', 'block layout', 'bluetooth alternative', 'broken chain', 'browser', 'call square', 'call', 'cancel', 'cart', 'cc', 'chain', 'chat', 'checked calendar', 'checkmark', 'circle notched', 'close', 'cny', 'cocktail', 'commenting', 'computer', 'configure', 'content', 'deafness', 'delete calendar', 'delete', 'detective', 'discussions', 'doctor', 'dollar', 'dont', 'drivers license', 'dropdown', 'emergency', 'envira gallery', 'erase', 'eur', 'euro', 'eyedropper', 'factory', 'favorite', 'feed', 'female homosexual', 'file text', 'file text outline', 'find', 'first aid', 'fork', 'game', 'gay', 'gbp', 'google plus circle', 'google plus official', 'grab', 'graduation', 'grid layout', 'group', 'h', 'hand victory', 'handicap', 'hard of hearing', 'header', 'help circle', 'help', 'heterosexual', 'hide', 'hotel', 'hourglass four', 'hourglass full', 'hourglass one', 'hourglass three', 'hourglass two', 'idea', 'ils', 'in cart', 'inr', 'intergender', 'intersex', 'jpy', 'krw', 'lab', 'law', 'legal', 'lesbian', 'lightning', 'like', 'line graph', 'linkedin square', 'linkify', 'lira', 'list layout', 'magnify', 'mail forward', 'mail square', 'mail', 'male homosexual', 'man', 'marker', 'mars alternate', 'mars horizontal', 'mars vertical', 'microsoft edge', 'military', 'ms edge', 'mute', 'new pied piper', 'non binary transgender', 'numbered list', 'options', 'other gender horizontal', 'other gender vertical', 'other gender', 'payment', 'paypal card', 'pencil square', 'photo', 'picture', 'pie chart', 'pie graph', 'pied piper hat', 'pin', 'plus cart', 'point', 'pointing down', 'pointing left', 'pointing right', 'pointing up', 'pound', 'power cord', 'power', 'privacy', 'r circle', 'rain', 'record', 'refresh', 'remove circle', 'remove from calendar', 'remove user', 'remove', 'repeat', 'rmb', 'rouble', 'rub', 'ruble', 'rupee', 's15', 'selected radio', 'send', 'setting', 'settings', 'shekel', 'sheqel', 'shipping', 'shop', 'shuffle', 'shutdown', 'sidebar', 'signing', 'signup', 'sliders', 'soccer', 'sort alphabet ascending', 'sort alphabet descending', 'sort ascending', 'sort content ascending', 'sort content descending', 'sort descending', 'sort numeric ascending', 'sort numeric descending', 'sound', 'spy', 'stripe card', 'student', 'talk', 'target', 'teletype', 'television', 'text cursor', 'text telephone', 'theme', 'thermometer', 'thumb tack', 'time', 'tm', 'toggle down', 'toggle left', 'toggle right', 'toggle up', 'translate', 'travel', 'treatment', 'triangle down', 'triangle left', 'triangle right', 'triangle up', 'try', 'unhide', 'unlinkify', 'unmute', 'usd', 'user cancel', 'user close', 'user delete', 'user x', 'vcard', 'video camera', 'video play', 'volume control phone', 'wait', 'warning circle', 'warning sign', 'warning', 'wi-fi', 'winner', 'wizard', 'woman', 'won', 'wordpress beginner', 'wordpress forms', 'world', 'write square', 'x', 'yen', 'zip', 'zoom in', 'zoom out', 'zoom', 'bitbucket square', 'checkmark box', 'circle thin', 'cloud download', 'cloud upload', 'compose', 'conversation', 'credit card alternative', 'currency', 'dashboard', 'diamond', 'disk', 'exchange', 'external share', 'external square', 'external', 'facebook official', 'food', 'hourglass zero', 'level down', 'level up', 'log out', 'meanpath', 'money', 'move', 'pencil', 'protect', 'radio', 'remove bookmark', 'resize horizontal', 'resize vertical', 'sign in', 'sign out', 'spoon', 'star half empty', 'star half full', 'ticket', 'times rectangle', 'write', 'youtube play'];
	exports.ICON_ALIASES = ICON_ALIASES;
	var ICONS_AND_ALIASES = (0, _uniq2.default)((0, _toConsumableArray2.default)(ICONS).concat(ICON_ALIASES)); // Some icon names are not part of icons.css.
	// These are only valid as children of other components.
	// Their CSS rules are defined by a specific component's CSS.
	// We don't want to show name warnings for those usages so we add them as valid names here.

	exports.ICONS_AND_ALIASES = ICONS_AND_ALIASES;
	var COMPONENT_CONTEXT_SPECIFIC_ICONS = ['left dropdown'];
	exports.COMPONENT_CONTEXT_SPECIFIC_ICONS = COMPONENT_CONTEXT_SPECIFIC_ICONS;
	var ALL_ICONS_IN_ALL_CONTEXTS = (0, _uniq2.default)((0, _toConsumableArray2.default)(ICONS_AND_ALIASES).concat(COMPONENT_CONTEXT_SPECIFIC_ICONS));
	exports.ALL_ICONS_IN_ALL_CONTEXTS = ALL_ICONS_IN_ALL_CONTEXTS;

/***/ }),
/* 514 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	/**
	 * Normalizes the offset value.
	 * @param {number|array} value The value to normalize.
	 * @returns {number}
	 */
	var _default = function _default(value) {
	  return typeof value === 'number' || typeof value === 'string' ? [value, value] : value;
	};

	exports.default = _default;

/***/ }),
/* 515 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	/**
	 * Normalizes the duration of a transition.
	 * @param {number|object} duration The value to normalize.
	 * @param {'hide'|'show'} type The type of transition.
	 * @returns {number}
	 */
	var _default = function _default(duration, type) {
	  return typeof duration === 'number' || typeof duration === 'string' ? duration : duration[type];
	};

	exports.default = _default;

/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _isEqual2 = _interopRequireDefault(__webpack_require__(517));

	var _has2 = _interopRequireDefault(__webpack_require__(177));

	var _transform2 = _interopRequireDefault(__webpack_require__(518));

	/**
	 * Naive and inefficient object difference, intended for development / debugging use only.
	 * Deleted keys are shown as [DELETED].
	 * @param {{}} source The source object
	 * @param {{}} target The target object.
	 * @returns {{}} A new object containing new/modified/deleted keys.
	 * @example
	 * import { objectDiff } from 'src/lib'
	 *
	 * const a = { key: 'val', foo: 'bar' }
	 * const b = { key: 'val', foo: 'baz' }
	 *
	 * objectDiff(a, b)
	 * //=> { foo: 'baz' }
	 */
	var _default = function _default(source, target) {
	  return (0, _transform2.default)(source, function (res, val, key) {
	    // deleted keys
	    if (!(0, _has2.default)(target, key)) res[key] = '[DELETED]'; // new keys / changed values
	    // Note, we tolerate isEqual here as this is a dev only utility and not included in production code
	    else if (!(0, _isEqual2.default)(val, target[key])) res[key] = target[key];
	  }, {});
	};

	exports.default = _default;

/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(297);

	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	function isEqual(value, other) {
	  return baseIsEqual(value, other);
	}

	module.exports = isEqual;


/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(331),
	    baseCreate = __webpack_require__(369),
	    baseForOwn = __webpack_require__(273),
	    baseIteratee = __webpack_require__(288),
	    getPrototype = __webpack_require__(40),
	    isArray = __webpack_require__(181),
	    isBuffer = __webpack_require__(279),
	    isFunction = __webpack_require__(194),
	    isObject = __webpack_require__(195),
	    isTypedArray = __webpack_require__(281);

	/**
	 * An alternative to `_.reduce`; this method transforms `object` to a new
	 * `accumulator` object which is the result of running each of its own
	 * enumerable string keyed properties thru `iteratee`, with each invocation
	 * potentially mutating the `accumulator` object. If `accumulator` is not
	 * provided, a new object with the same `[[Prototype]]` will be used. The
	 * iteratee is invoked with four arguments: (accumulator, value, key, object).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The custom accumulator value.
	 * @returns {*} Returns the accumulated value.
	 * @example
	 *
	 * _.transform([2, 3, 4], function(result, n) {
	 *   result.push(n *= n);
	 *   return n % 2 == 0;
	 * }, []);
	 * // => [4, 9]
	 *
	 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] }
	 */
	function transform(object, iteratee, accumulator) {
	  var isArr = isArray(object),
	      isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	  iteratee = baseIteratee(iteratee, 4);
	  if (accumulator == null) {
	    var Ctor = object && object.constructor;
	    if (isArrLike) {
	      accumulator = isArr ? new Ctor : [];
	    }
	    else if (isObject(object)) {
	      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	    }
	    else {
	      accumulator = {};
	    }
	  }
	  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	    return iteratee(accumulator, value, index, object);
	  });
	  return accumulator;
	}

	module.exports = transform;


/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Button.default;
	  }
	});

	var _Button = _interopRequireDefault(__webpack_require__(520));

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(353));

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(521));

	var _Label = _interopRequireDefault(__webpack_require__(524));

	var _ButtonContent = _interopRequireDefault(__webpack_require__(539));

	var _ButtonGroup = _interopRequireDefault(__webpack_require__(540));

	var _ButtonOr = _interopRequireDefault(__webpack_require__(541));

	/**
	 * A Button indicates a possible user action.
	 * @see Form
	 * @see Icon
	 * @see Label
	 */
	var Button =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Button, _Component);

	  function Button() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Button);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeElementType", function () {
	      var _this$props = _this.props,
	          attached = _this$props.attached,
	          label = _this$props.label;
	      if (!(0, _isNil2.default)(attached) || !(0, _isNil2.default)(label)) return 'div';
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeTabIndex", function (ElementType) {
	      var _this$props2 = _this.props,
	          disabled = _this$props2.disabled,
	          tabIndex = _this$props2.tabIndex;
	      if (!(0, _isNil2.default)(tabIndex)) return tabIndex;
	      if (disabled) return -1;
	      if (ElementType === 'div') return 0;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "focus", function () {
	      return (0, _invoke2.default)(_this.ref, 'focus');
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var disabled = _this.props.disabled;

	      if (disabled) {
	        e.preventDefault();
	        return;
	      }

	      (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRef", function (c) {
	      return _this.ref = c;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "hasIconClass", function () {
	      var _this$props3 = _this.props,
	          labelPosition = _this$props3.labelPosition,
	          children = _this$props3.children,
	          content = _this$props3.content,
	          icon = _this$props3.icon;
	      if (icon === true) return true;
	      return icon && (labelPosition || _lib.childrenUtils.isNil(children) && (0, _isNil2.default)(content));
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Button, [{
	    key: "computeButtonAriaRole",
	    value: function computeButtonAriaRole(ElementType) {
	      var role = this.props.role;
	      if (!(0, _isNil2.default)(role)) return role;
	      if (ElementType !== 'button') return 'button';
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props4 = this.props,
	          active = _this$props4.active,
	          animated = _this$props4.animated,
	          attached = _this$props4.attached,
	          basic = _this$props4.basic,
	          children = _this$props4.children,
	          circular = _this$props4.circular,
	          className = _this$props4.className,
	          color = _this$props4.color,
	          compact = _this$props4.compact,
	          content = _this$props4.content,
	          disabled = _this$props4.disabled,
	          floated = _this$props4.floated,
	          fluid = _this$props4.fluid,
	          icon = _this$props4.icon,
	          inverted = _this$props4.inverted,
	          label = _this$props4.label,
	          labelPosition = _this$props4.labelPosition,
	          loading = _this$props4.loading,
	          negative = _this$props4.negative,
	          positive = _this$props4.positive,
	          primary = _this$props4.primary,
	          secondary = _this$props4.secondary,
	          size = _this$props4.size,
	          toggle = _this$props4.toggle;
	      var baseClasses = (0, _classnames.default)(color, size, (0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(circular, 'circular'), (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(this.hasIconClass(), 'icon'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(loading, 'loading'), (0, _lib.useKeyOnly)(negative, 'negative'), (0, _lib.useKeyOnly)(positive, 'positive'), (0, _lib.useKeyOnly)(primary, 'primary'), (0, _lib.useKeyOnly)(secondary, 'secondary'), (0, _lib.useKeyOnly)(toggle, 'toggle'), (0, _lib.useKeyOrValueAndKey)(animated, 'animated'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'));
	      var labeledClasses = (0, _classnames.default)((0, _lib.useKeyOrValueAndKey)(labelPosition || !!label, 'labeled'));
	      var wrapperClasses = (0, _classnames.default)((0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useValueAndKey)(floated, 'floated'));
	      var rest = (0, _lib.getUnhandledProps)(Button, this.props);
	      var ElementType = (0, _lib.getElementType)(Button, this.props, this.computeElementType);
	      var tabIndex = this.computeTabIndex(ElementType);

	      if (!(0, _isNil2.default)(label)) {
	        var buttonClasses = (0, _classnames.default)('ui', baseClasses, 'button', className);
	        var containerClasses = (0, _classnames.default)('ui', labeledClasses, 'button', className, wrapperClasses);

	        var labelElement = _Label.default.create(label, {
	          defaultProps: {
	            basic: true,
	            pointing: labelPosition === 'left' ? 'right' : 'left'
	          },
	          autoGenerateKey: false
	        });

	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: containerClasses,
	          onClick: this.handleClick
	        }), labelPosition === 'left' && labelElement, _react.default.createElement("button", {
	          className: buttonClasses,
	          "aria-pressed": toggle ? !!active : undefined,
	          disabled: disabled,
	          ref: this.handleRef,
	          tabIndex: tabIndex
	        }, _Icon.default.create(icon, {
	          autoGenerateKey: false
	        }), " ", content), (labelPosition === 'right' || !labelPosition) && labelElement);
	      }

	      var classes = (0, _classnames.default)('ui', baseClasses, wrapperClasses, labeledClasses, 'button', className);
	      var hasChildren = !_lib.childrenUtils.isNil(children);
	      var role = this.computeButtonAriaRole(ElementType);
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        "aria-pressed": toggle ? !!active : undefined,
	        disabled: disabled && ElementType === 'button' || undefined,
	        onClick: this.handleClick,
	        ref: this.handleRef,
	        role: role,
	        tabIndex: tabIndex
	      }), hasChildren && children, !hasChildren && _Icon.default.create(icon, {
	        autoGenerateKey: false
	      }), !hasChildren && content);
	    }
	  }]);
	  return Button;
	}(_react.Component);

	(0, _defineProperty2.default)(Button, "defaultProps", {
	  as: 'button'
	});
	(0, _defineProperty2.default)(Button, "Content", _ButtonContent.default);
	(0, _defineProperty2.default)(Button, "Group", _ButtonGroup.default);
	(0, _defineProperty2.default)(Button, "Or", _ButtonOr.default);
	(0, _defineProperty2.default)(Button, "handledProps", ["active", "animated", "as", "attached", "basic", "children", "circular", "className", "color", "compact", "content", "disabled", "floated", "fluid", "icon", "inverted", "label", "labelPosition", "loading", "negative", "onClick", "positive", "primary", "role", "secondary", "size", "tabIndex", "toggle"]);
	Button.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A button can show it is currently the active user selection. */
	  active: _propTypes.default.bool,

	  /** A button can animate to show hidden content. */
	  animated: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['fade', 'vertical'])]),

	  /** A button can be attached to other content. */
	  attached: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['left', 'right', 'top', 'bottom'])]),

	  /** A basic button is less pronounced. */
	  basic: _propTypes.default.bool,

	  /** Primary content. */
	  children: _lib.customPropTypes.every([_propTypes.default.node, _lib.customPropTypes.disallow(['label']), _lib.customPropTypes.givenProps({
	    icon: _propTypes.default.oneOfType([_propTypes.default.string.isRequired, _propTypes.default.object.isRequired, _propTypes.default.element.isRequired])
	  }, _lib.customPropTypes.disallow(['icon']))]),

	  /** A button can be circular. */
	  circular: _propTypes.default.bool,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A button can have different colors */
	  color: _propTypes.default.oneOf((0, _toConsumableArray2.default)(_lib.SUI.COLORS).concat(['facebook', 'google plus', 'instagram', 'linkedin', 'twitter', 'vk', 'youtube'])),

	  /** A button can reduce its padding to fit into tighter spaces. */
	  compact: _propTypes.default.bool,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A button can show it is currently unable to be interacted with. */
	  disabled: _propTypes.default.bool,

	  /** A button can be aligned to the left or right of its container. */
	  floated: _propTypes.default.oneOf(_lib.SUI.FLOATS),

	  /** A button can take the width of its container. */
	  fluid: _propTypes.default.bool,

	  /** Add an Icon by name, props object, or pass an <Icon />. */
	  icon: _lib.customPropTypes.some([_propTypes.default.bool, _propTypes.default.string, _propTypes.default.object, _propTypes.default.element]),

	  /** A button can be formatted to appear on dark backgrounds. */
	  inverted: _propTypes.default.bool,

	  /** Add a Label by text, props object, or pass a <Label />. */
	  label: _lib.customPropTypes.some([_propTypes.default.string, _propTypes.default.object, _propTypes.default.element]),

	  /** A labeled button can format a Label or Icon to appear on the left or right. */
	  labelPosition: _propTypes.default.oneOf(['right', 'left']),

	  /** A button can show a loading indicator. */
	  loading: _propTypes.default.bool,

	  /** A button can hint towards a negative consequence. */
	  negative: _propTypes.default.bool,

	  /**
	   * Called after user's click.
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /** A button can hint towards a positive consequence. */
	  positive: _propTypes.default.bool,

	  /** A button can be formatted to show different levels of emphasis. */
	  primary: _propTypes.default.bool,

	  /** The role of the HTML element. */
	  role: _propTypes.default.string,

	  /** A button can be formatted to show different levels of emphasis. */
	  secondary: _propTypes.default.bool,

	  /** A button can have different sizes. */
	  size: _propTypes.default.oneOf(_lib.SUI.SIZES),

	  /** A button can receive focus. */
	  tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** A button can be formatted to toggle on and off. */
	  toggle: _propTypes.default.bool
	} : {};
	Button.create = (0, _lib.createShorthandFactory)(Button, function (value) {
	  return {
	    content: value
	  };
	});
	var _default = Button;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _IconGroup = _interopRequireDefault(__webpack_require__(523));

	/**
	 * An icon is a glyph used to represent something else.
	 * @see Image
	 */
	var Icon =
	/*#__PURE__*/
	function (_PureComponent) {
	  (0, _inherits2.default)(Icon, _PureComponent);

	  function Icon() {
	    (0, _classCallCheck2.default)(this, Icon);
	    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Icon).apply(this, arguments));
	  }

	  (0, _createClass2.default)(Icon, [{
	    key: "getIconAriaOptions",
	    value: function getIconAriaOptions() {
	      var ariaOptions = {};
	      var _this$props = this.props,
	          ariaLabel = _this$props['aria-label'],
	          ariaHidden = _this$props['aria-hidden'];

	      if ((0, _isNil2.default)(ariaLabel)) {
	        ariaOptions['aria-hidden'] = 'true';
	      } else {
	        ariaOptions['aria-label'] = ariaLabel;
	      }

	      if (!(0, _isNil2.default)(ariaHidden)) {
	        ariaOptions['aria-hidden'] = ariaHidden;
	      }

	      return ariaOptions;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          bordered = _this$props2.bordered,
	          circular = _this$props2.circular,
	          className = _this$props2.className,
	          color = _this$props2.color,
	          corner = _this$props2.corner,
	          disabled = _this$props2.disabled,
	          fitted = _this$props2.fitted,
	          flipped = _this$props2.flipped,
	          inverted = _this$props2.inverted,
	          link = _this$props2.link,
	          loading = _this$props2.loading,
	          name = _this$props2.name,
	          rotated = _this$props2.rotated,
	          size = _this$props2.size;
	      var classes = (0, _classnames.default)(color, name, size, (0, _lib.useKeyOnly)(bordered, 'bordered'), (0, _lib.useKeyOnly)(circular, 'circular'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(fitted, 'fitted'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(link, 'link'), (0, _lib.useKeyOnly)(loading, 'loading'), (0, _lib.useKeyOrValueAndKey)(corner, 'corner'), (0, _lib.useValueAndKey)(flipped, 'flipped'), (0, _lib.useValueAndKey)(rotated, 'rotated'), 'icon', className);
	      var rest = (0, _lib.getUnhandledProps)(Icon, this.props);
	      var ElementType = (0, _lib.getElementType)(Icon, this.props);
	      var ariaOptions = this.getIconAriaOptions();
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, ariaOptions, {
	        className: classes
	      }));
	    }
	  }]);
	  return Icon;
	}(_react.PureComponent);

	(0, _defineProperty2.default)(Icon, "defaultProps", {
	  as: 'i'
	});
	(0, _defineProperty2.default)(Icon, "Group", _IconGroup.default);
	(0, _defineProperty2.default)(Icon, "handledProps", ["aria-hidden", "aria-label", "as", "bordered", "circular", "className", "color", "corner", "disabled", "fitted", "flipped", "inverted", "link", "loading", "name", "rotated", "size"]);
	Icon.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Formatted to appear bordered. */
	  bordered: _propTypes.default.bool,

	  /** Icon can formatted to appear circular. */
	  circular: _propTypes.default.bool,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Color of the icon. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Icons can display a smaller corner icon. */
	  corner: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['top left', 'top right', 'bottom left', 'bottom right'])]),

	  /** Show that the icon is inactive. */
	  disabled: _propTypes.default.bool,

	  /** Fitted, without space to left or right of Icon. */
	  fitted: _propTypes.default.bool,

	  /** Icon can flipped. */
	  flipped: _propTypes.default.oneOf(['horizontally', 'vertically']),

	  /** Formatted to have its colors inverted for contrast. */
	  inverted: _propTypes.default.bool,

	  /** Icon can be formatted as a link. */
	  link: _propTypes.default.bool,

	  /** Icon can be used as a simple loader. */
	  loading: _propTypes.default.bool,

	  /** Name of the icon. */
	  name: _lib.customPropTypes.suggest(_lib.SUI.ALL_ICONS_IN_ALL_CONTEXTS),

	  /** Icon can rotated. */
	  rotated: _propTypes.default.oneOf(['clockwise', 'counterclockwise']),

	  /** Size of the icon. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium')),

	  /** Icon can have an aria label. */
	  'aria-hidden': _propTypes.default.string,

	  /** Icon can have an aria label. */
	  'aria-label': _propTypes.default.string
	} : {};
	Icon.create = (0, _lib.createShorthandFactory)(Icon, function (value) {
	  return {
	    name: value
	  };
	});
	var _default = Icon;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

	var baseDifference = __webpack_require__(246),
	    baseRest = __webpack_require__(234),
	    isArrayLikeObject = __webpack_require__(261);

	/**
	 * Creates an array excluding all given values using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * **Note:** Unlike `_.pull`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {...*} [values] The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 * @see _.difference, _.xor
	 * @example
	 *
	 * _.without([2, 1, 2, 3], 1, 2);
	 * // => [3]
	 */
	var without = baseRest(function(array, values) {
	  return isArrayLikeObject(array)
	    ? baseDifference(array, values)
	    : [];
	});

	module.exports = without;


/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * Several icons can be used together as a group.
	 */
	function IconGroup(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      size = props.size;
	  var classes = (0, _classnames.default)(size, 'icons', className);
	  var rest = (0, _lib.getUnhandledProps)(IconGroup, props);
	  var ElementType = (0, _lib.getElementType)(IconGroup, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	IconGroup.handledProps = ["as", "children", "className", "content", "size"];
	IconGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Size of the icon group. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium'))
	} : {};
	IconGroup.defaultProps = {
	  as: 'i'
	};
	var _default = IconGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _isUndefined2 = _interopRequireDefault(__webpack_require__(263));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(521));

	var _Image = _interopRequireDefault(__webpack_require__(525));

	var _LabelDetail = _interopRequireDefault(__webpack_require__(537));

	var _LabelGroup = _interopRequireDefault(__webpack_require__(538));

	/**
	 * A label displays content classification.
	 */
	var Label =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Label, _Component);

	  function Label() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Label);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Label)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var onClick = _this.props.onClick;
	      if (onClick) onClick(e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleIconOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e) {
	          (0, _invoke2.default)(predefinedProps, 'onClick', e);
	          (0, _invoke2.default)(_this.props, 'onRemove', e, _this.props);
	        }
	      };
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Label, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          attached = _this$props.attached,
	          basic = _this$props.basic,
	          children = _this$props.children,
	          circular = _this$props.circular,
	          className = _this$props.className,
	          color = _this$props.color,
	          content = _this$props.content,
	          corner = _this$props.corner,
	          detail = _this$props.detail,
	          empty = _this$props.empty,
	          floating = _this$props.floating,
	          horizontal = _this$props.horizontal,
	          icon = _this$props.icon,
	          image = _this$props.image,
	          onRemove = _this$props.onRemove,
	          pointing = _this$props.pointing,
	          removeIcon = _this$props.removeIcon,
	          ribbon = _this$props.ribbon,
	          size = _this$props.size,
	          tag = _this$props.tag;
	      var pointingClass = pointing === true && 'pointing' || (pointing === 'left' || pointing === 'right') && "".concat(pointing, " pointing") || (pointing === 'above' || pointing === 'below') && "pointing ".concat(pointing);
	      var classes = (0, _classnames.default)('ui', color, pointingClass, size, (0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(circular, 'circular'), (0, _lib.useKeyOnly)(empty, 'empty'), (0, _lib.useKeyOnly)(floating, 'floating'), (0, _lib.useKeyOnly)(horizontal, 'horizontal'), (0, _lib.useKeyOnly)(image === true, 'image'), (0, _lib.useKeyOnly)(tag, 'tag'), (0, _lib.useKeyOrValueAndKey)(corner, 'corner'), (0, _lib.useKeyOrValueAndKey)(ribbon, 'ribbon'), (0, _lib.useValueAndKey)(attached, 'attached'), 'label', className);
	      var rest = (0, _lib.getUnhandledProps)(Label, this.props);
	      var ElementType = (0, _lib.getElementType)(Label, this.props);

	      if (!_lib.childrenUtils.isNil(children)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes,
	          onClick: this.handleClick
	        }), children);
	      }

	      var removeIconShorthand = (0, _isUndefined2.default)(removeIcon) ? 'delete' : removeIcon;
	      return _react.default.createElement(ElementType, (0, _extends2.default)({
	        className: classes,
	        onClick: this.handleClick
	      }, rest), _Icon.default.create(icon, {
	        autoGenerateKey: false
	      }), typeof image !== 'boolean' && _Image.default.create(image, {
	        autoGenerateKey: false
	      }), content, _LabelDetail.default.create(detail, {
	        autoGenerateKey: false
	      }), onRemove && _Icon.default.create(removeIconShorthand, {
	        autoGenerateKey: false,
	        overrideProps: this.handleIconOverrides
	      }));
	    }
	  }]);
	  return Label;
	}(_react.Component);

	exports.default = Label;
	(0, _defineProperty2.default)(Label, "Detail", _LabelDetail.default);
	(0, _defineProperty2.default)(Label, "Group", _LabelGroup.default);
	(0, _defineProperty2.default)(Label, "handledProps", ["active", "as", "attached", "basic", "children", "circular", "className", "color", "content", "corner", "detail", "empty", "floating", "horizontal", "icon", "image", "onClick", "onRemove", "pointing", "removeIcon", "ribbon", "size", "tag"]);
	Label.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A label can be active. */
	  active: _propTypes.default.bool,

	  /** A label can attach to a content segment. */
	  attached: _propTypes.default.oneOf(['top', 'bottom', 'top right', 'top left', 'bottom left', 'bottom right']),

	  /** A label can reduce its complexity. */
	  basic: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** A label can be circular. */
	  circular: _propTypes.default.bool,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Color of the label. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A label can position itself in the corner of an element. */
	  corner: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['left', 'right'])]),

	  /** Shorthand for LabelDetail. */
	  detail: _lib.customPropTypes.itemShorthand,

	  /** Formats the label as a dot. */
	  empty: _lib.customPropTypes.every([_propTypes.default.bool, _lib.customPropTypes.demand(['circular'])]),

	  /** Float above another element in the upper right corner. */
	  floating: _propTypes.default.bool,

	  /** A horizontal label is formatted to label content along-side it horizontally. */
	  horizontal: _propTypes.default.bool,

	  /** Shorthand for Icon. */
	  icon: _lib.customPropTypes.itemShorthand,

	  /** A label can be formatted to emphasize an image or prop can be used as shorthand for Image. */
	  image: _propTypes.default.oneOfType([_propTypes.default.bool, _lib.customPropTypes.itemShorthand]),

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /**
	   * Adds an "x" icon, called when "x" is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onRemove: _propTypes.default.func,

	  /** A label can point to content next to it. */
	  pointing: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['above', 'below', 'left', 'right'])]),

	  /** Shorthand for Icon to appear as the last child and trigger onRemove. */
	  removeIcon: _lib.customPropTypes.itemShorthand,

	  /** A label can appear as a ribbon attaching itself to an element. */
	  ribbon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['right'])]),

	  /** A label can have different sizes. */
	  size: _propTypes.default.oneOf(_lib.SUI.SIZES),

	  /** A label can appear as a tag. */
	  tag: _propTypes.default.bool
	} : {};
	Label.create = (0, _lib.createShorthandFactory)(Label, function (value) {
	  return {
	    content: value
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _slicedToArray2 = _interopRequireDefault(__webpack_require__(334));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Dimmer = _interopRequireDefault(__webpack_require__(526));

	var _Label = _interopRequireDefault(__webpack_require__(524));

	var _ImageGroup = _interopRequireDefault(__webpack_require__(536));

	/**
	 * An image is a graphic representation of something.
	 * @see Icon
	 */
	function Image(props) {
	  var avatar = props.avatar,
	      bordered = props.bordered,
	      centered = props.centered,
	      children = props.children,
	      circular = props.circular,
	      className = props.className,
	      content = props.content,
	      dimmer = props.dimmer,
	      disabled = props.disabled,
	      floated = props.floated,
	      fluid = props.fluid,
	      hidden = props.hidden,
	      href = props.href,
	      inline = props.inline,
	      label = props.label,
	      rounded = props.rounded,
	      size = props.size,
	      spaced = props.spaced,
	      verticalAlign = props.verticalAlign,
	      wrapped = props.wrapped,
	      ui = props.ui;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(ui, 'ui'), size, (0, _lib.useKeyOnly)(avatar, 'avatar'), (0, _lib.useKeyOnly)(bordered, 'bordered'), (0, _lib.useKeyOnly)(circular, 'circular'), (0, _lib.useKeyOnly)(centered, 'centered'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(hidden, 'hidden'), (0, _lib.useKeyOnly)(inline, 'inline'), (0, _lib.useKeyOnly)(rounded, 'rounded'), (0, _lib.useKeyOrValueAndKey)(spaced, 'spaced'), (0, _lib.useValueAndKey)(floated, 'floated'), (0, _lib.useVerticalAlignProp)(verticalAlign, 'aligned'), 'image', className);
	  var rest = (0, _lib.getUnhandledProps)(Image, props);

	  var _partitionHTMLProps = (0, _lib.partitionHTMLProps)(rest, {
	    htmlProps: _lib.htmlImageProps
	  }),
	      _partitionHTMLProps2 = (0, _slicedToArray2.default)(_partitionHTMLProps, 2),
	      imgTagProps = _partitionHTMLProps2[0],
	      rootProps = _partitionHTMLProps2[1];

	  var ElementType = (0, _lib.getElementType)(Image, props, function () {
	    if (!(0, _isNil2.default)(dimmer) || !(0, _isNil2.default)(label) || !(0, _isNil2.default)(wrapped) || !_lib.childrenUtils.isNil(children)) {
	      return 'div';
	    }
	  });

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  if (!_lib.childrenUtils.isNil(content)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), content);
	  }

	  if (ElementType === 'img') {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rootProps, imgTagProps, {
	      className: classes
	    }));
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rootProps, {
	    className: classes,
	    href: href
	  }), _Dimmer.default.create(dimmer, {
	    autoGenerateKey: false
	  }), _Label.default.create(label, {
	    autoGenerateKey: false
	  }), _react.default.createElement("img", imgTagProps));
	}

	Image.handledProps = ["as", "avatar", "bordered", "centered", "children", "circular", "className", "content", "dimmer", "disabled", "floated", "fluid", "hidden", "href", "inline", "label", "rounded", "size", "spaced", "ui", "verticalAlign", "wrapped"];
	Image.Group = _ImageGroup.default;
	Image.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** An image may be formatted to appear inline with text as an avatar. */
	  avatar: _propTypes.default.bool,

	  /** An image may include a border to emphasize the edges of white or transparent content. */
	  bordered: _propTypes.default.bool,

	  /** An image can appear centered in a content block. */
	  centered: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** An image may appear circular. */
	  circular: _propTypes.default.bool,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** An image can show that it is disabled and cannot be selected. */
	  disabled: _propTypes.default.bool,

	  /** Shorthand for Dimmer. */
	  dimmer: _lib.customPropTypes.itemShorthand,

	  /** An image can sit to the left or right of other content. */
	  floated: _propTypes.default.oneOf(_lib.SUI.FLOATS),

	  /** An image can take up the width of its container. */
	  fluid: _lib.customPropTypes.every([_propTypes.default.bool, _lib.customPropTypes.disallow(['size'])]),

	  /** An image can be hidden. */
	  hidden: _propTypes.default.bool,

	  /** Renders the Image as an <a> tag with this href. */
	  href: _propTypes.default.string,

	  /** An image may appear inline. */
	  inline: _propTypes.default.bool,

	  /** Shorthand for Label. */
	  label: _lib.customPropTypes.itemShorthand,

	  /** An image may appear rounded. */
	  rounded: _propTypes.default.bool,

	  /** An image may appear at different sizes. */
	  size: _propTypes.default.oneOf(_lib.SUI.SIZES),

	  /** An image can specify that it needs an additional spacing to separate it from nearby content. */
	  spaced: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['left', 'right'])]),

	  /** Whether or not to add the ui className. */
	  ui: _propTypes.default.bool,

	  /** An image can specify its vertical alignment. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS),

	  /** An image can render wrapped in a `div.ui.image` as alternative HTML markup. */
	  wrapped: _propTypes.default.bool
	} : {};
	Image.defaultProps = {
	  as: 'img',
	  ui: true
	};
	Image.create = (0, _lib.createShorthandFactory)(Image, function (value) {
	  return {
	    src: value
	  };
	});
	var _default = Image;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Dimmer.default;
	  }
	});

	var _Dimmer = _interopRequireDefault(__webpack_require__(527));

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Portal = _interopRequireDefault(__webpack_require__(528));

	var _DimmerDimmable = _interopRequireDefault(__webpack_require__(534));

	var _DimmerInner = _interopRequireDefault(__webpack_require__(535));

	/**
	 * A dimmer hides distractions to focus attention on particular content.
	 */
	var Dimmer =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Dimmer, _Component);

	  function Dimmer() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Dimmer);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Dimmer)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePortalMount", function () {
	      if (!(0, _lib.isBrowser)()) return; // Heads up, IE doesn't support second argument in add()

	      document.body.classList.add('dimmed');
	      document.body.classList.add('dimmable');
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePortalUnmount", function () {
	      if (!(0, _lib.isBrowser)()) return; // Heads up, IE doesn't support second argument in add()

	      document.body.classList.remove('dimmed');
	      document.body.classList.remove('dimmable');
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Dimmer, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          page = _this$props.page;
	      var rest = (0, _lib.getUnhandledProps)(Dimmer, this.props);

	      if (page) {
	        return _react.default.createElement(_Portal.default, {
	          closeOnEscape: false,
	          closeOnDocumentClick: false,
	          onMount: this.handlePortalMount,
	          onUnmount: this.handlePortalUnmount,
	          open: active,
	          openOnTriggerClick: false
	        }, _react.default.createElement(_DimmerInner.default, (0, _extends2.default)({}, rest, {
	          active: active,
	          page: page
	        })));
	      }

	      return _react.default.createElement(_DimmerInner.default, (0, _extends2.default)({}, rest, {
	        active: active,
	        page: page
	      }));
	    }
	  }]);
	  return Dimmer;
	}(_react.Component);

	exports.default = Dimmer;
	(0, _defineProperty2.default)(Dimmer, "Dimmable", _DimmerDimmable.default);
	(0, _defineProperty2.default)(Dimmer, "Inner", _DimmerInner.default);
	(0, _defineProperty2.default)(Dimmer, "handledProps", ["active", "page"]);
	Dimmer.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An active dimmer will dim its parent container. */
	  active: _propTypes.default.bool,

	  /** A dimmer can be formatted to be fixed to the page. */
	  page: _propTypes.default.bool
	} : {};
	Dimmer.create = (0, _lib.createShorthandFactory)(Dimmer, function (value) {
	  return {
	    content: value
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Portal.default;
	  }
	});

	var _Portal = _interopRequireDefault(__webpack_require__(529));

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _keyboardKey = _interopRequireDefault(__webpack_require__(530));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Ref = _interopRequireDefault(__webpack_require__(531));

	var _PortalInner = _interopRequireDefault(__webpack_require__(533));

	/**
	 * A component that allows you to render children outside their parent.
	 * @see Modal
	 * @see Popup
	 * @see Dimmer
	 * @see Confirm
	 */
	var Portal =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Portal, _Component);

	  function Portal() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Portal);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Portal)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleDocumentClick", function (e) {
	      var closeOnDocumentClick = _this.props.closeOnDocumentClick;

	      if (!_this.portalNode || // no portal
	      (0, _lib.doesNodeContainClick)(_this.triggerNode, e) || // event happened in trigger (delegate to trigger handlers)
	      (0, _lib.doesNodeContainClick)(_this.portalNode, e) // event happened in the portal
	      ) {
	          return;
	        } // ignore the click


	      if (closeOnDocumentClick) {
	        _this.close(e);
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleEscape", function (e) {
	      if (!_this.props.closeOnEscape) return;
	      if (_keyboardKey.default.getCode(e) !== _keyboardKey.default.Escape) return;

	      _this.close(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePortalMouseLeave", function (e) {
	      var _this$props = _this.props,
	          closeOnPortalMouseLeave = _this$props.closeOnPortalMouseLeave,
	          mouseLeaveDelay = _this$props.mouseLeaveDelay;
	      if (!closeOnPortalMouseLeave) return; // Do not close the portal when 'mouseleave' is triggered by children

	      if (e.target !== _this.portalNode) return;
	      _this.mouseLeaveTimer = _this.closeWithTimeout(e, mouseLeaveDelay);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePortalMouseEnter", function () {
	      // In order to enable mousing from the trigger to the portal, we need to
	      // clear the mouseleave timer that was set when leaving the trigger.
	      var closeOnPortalMouseLeave = _this.props.closeOnPortalMouseLeave;
	      if (!closeOnPortalMouseLeave) return;
	      clearTimeout(_this.mouseLeaveTimer);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTriggerBlur", function (e) {
	      var _this$props2 = _this.props,
	          trigger = _this$props2.trigger,
	          closeOnTriggerBlur = _this$props2.closeOnTriggerBlur; // Call original event handler

	      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        rest[_key2 - 1] = arguments[_key2];
	      }

	      _invoke2.default.apply(void 0, [trigger, 'props.onBlur', e].concat(rest)); // do not close if focus is given to the portal


	      var didFocusPortal = (0, _invoke2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), 'portalNode.contains', e.relatedTarget);
	      if (!closeOnTriggerBlur || didFocusPortal) return;

	      _this.close(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTriggerClick", function (e) {
	      var _this$props3 = _this.props,
	          trigger = _this$props3.trigger,
	          closeOnTriggerClick = _this$props3.closeOnTriggerClick,
	          openOnTriggerClick = _this$props3.openOnTriggerClick;
	      var open = _this.state.open; // Call original event handler

	      for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	        rest[_key3 - 1] = arguments[_key3];
	      }

	      _invoke2.default.apply(void 0, [trigger, 'props.onClick', e].concat(rest));

	      if (open && closeOnTriggerClick) {
	        _this.close(e);
	      } else if (!open && openOnTriggerClick) {
	        _this.open(e);
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTriggerFocus", function (e) {
	      var _this$props4 = _this.props,
	          trigger = _this$props4.trigger,
	          openOnTriggerFocus = _this$props4.openOnTriggerFocus; // Call original event handler

	      for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
	        rest[_key4 - 1] = arguments[_key4];
	      }

	      _invoke2.default.apply(void 0, [trigger, 'props.onFocus', e].concat(rest));

	      if (!openOnTriggerFocus) return;

	      _this.open(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTriggerMouseLeave", function (e) {
	      clearTimeout(_this.mouseEnterTimer);
	      var _this$props5 = _this.props,
	          trigger = _this$props5.trigger,
	          closeOnTriggerMouseLeave = _this$props5.closeOnTriggerMouseLeave,
	          mouseLeaveDelay = _this$props5.mouseLeaveDelay; // Call original event handler

	      for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
	        rest[_key5 - 1] = arguments[_key5];
	      }

	      _invoke2.default.apply(void 0, [trigger, 'props.onMouseLeave', e].concat(rest));

	      if (!closeOnTriggerMouseLeave) return;
	      _this.mouseLeaveTimer = _this.closeWithTimeout(e, mouseLeaveDelay);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTriggerMouseEnter", function (e) {
	      clearTimeout(_this.mouseLeaveTimer);
	      var _this$props6 = _this.props,
	          trigger = _this$props6.trigger,
	          mouseEnterDelay = _this$props6.mouseEnterDelay,
	          openOnTriggerMouseEnter = _this$props6.openOnTriggerMouseEnter; // Call original event handler

	      for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
	        rest[_key6 - 1] = arguments[_key6];
	      }

	      _invoke2.default.apply(void 0, [trigger, 'props.onMouseEnter', e].concat(rest));

	      if (!openOnTriggerMouseEnter) return;
	      _this.mouseEnterTimer = _this.openWithTimeout(e, mouseEnterDelay);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "open", function (e) {
	      var onOpen = _this.props.onOpen;
	      if (onOpen) onOpen(e, _this.props);

	      _this.trySetState({
	        open: true
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "openWithTimeout", function (e, delay) {
	      // React wipes the entire event object and suggests using e.persist() if
	      // you need the event for async access. However, even with e.persist
	      // certain required props (e.g. currentTarget) are null so we're forced to clone.
	      var eventClone = (0, _objectSpread2.default)({}, e);
	      return setTimeout(function () {
	        return _this.open(eventClone);
	      }, delay || 0);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "close", function (e) {
	      var onClose = _this.props.onClose;
	      if (onClose) onClose(e, _this.props);

	      _this.trySetState({
	        open: false
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "closeWithTimeout", function (e, delay) {
	      // React wipes the entire event object and suggests using e.persist() if
	      // you need the event for async access. However, even with e.persist
	      // certain required props (e.g. currentTarget) are null so we're forced to clone.
	      var eventClone = (0, _objectSpread2.default)({}, e);
	      return setTimeout(function () {
	        return _this.close(eventClone);
	      }, delay || 0);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMount", function (e, _ref) {
	      var target = _ref.node;
	      var eventPool = _this.props.eventPool;
	      _this.portalNode = target;

	      _lib.eventStack.sub('mouseleave', _this.handlePortalMouseLeave, {
	        pool: eventPool,
	        target: target
	      });

	      _lib.eventStack.sub('mouseenter', _this.handlePortalMouseEnter, {
	        pool: eventPool,
	        target: target
	      });

	      _lib.eventStack.sub('click', _this.handleDocumentClick, {
	        pool: eventPool
	      });

	      _lib.eventStack.sub('keydown', _this.handleEscape, {
	        pool: eventPool
	      });

	      (0, _invoke2.default)(_this.props, 'onMount', null, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleUnmount", function (e, _ref2) {
	      var target = _ref2.node;
	      var eventPool = _this.props.eventPool;
	      _this.portalNode = null;

	      _lib.eventStack.unsub('mouseleave', _this.handlePortalMouseLeave, {
	        pool: eventPool,
	        target: target
	      });

	      _lib.eventStack.unsub('mouseenter', _this.handlePortalMouseEnter, {
	        pool: eventPool,
	        target: target
	      });

	      _lib.eventStack.unsub('click', _this.handleDocumentClick, {
	        pool: eventPool
	      });

	      _lib.eventStack.unsub('keydown', _this.handleEscape, {
	        pool: eventPool
	      });

	      (0, _invoke2.default)(_this.props, 'onUnmount', null, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTriggerRef", function (c) {
	      _this.triggerNode = c;
	      (0, _lib.handleRef)(_this.props.triggerRef, c);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Portal, [{
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      // Clean up timers
	      clearTimeout(this.mouseEnterTimer);
	      clearTimeout(this.mouseLeaveTimer);
	    } // ----------------------------------------
	    // Document Event Handlers
	    // ----------------------------------------

	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props7 = this.props,
	          children = _this$props7.children,
	          mountNode = _this$props7.mountNode,
	          trigger = _this$props7.trigger;
	      var open = this.state.open;
	      return _react.default.createElement(_react.Fragment, null, open && _react.default.createElement(_PortalInner.default, {
	        mountNode: mountNode,
	        onMount: this.handleMount,
	        onUnmount: this.handleUnmount
	      }, children), trigger && _react.default.createElement(_Ref.default, {
	        innerRef: this.handleTriggerRef
	      }, (0, _react.cloneElement)(trigger, {
	        onBlur: this.handleTriggerBlur,
	        onClick: this.handleTriggerClick,
	        onFocus: this.handleTriggerFocus,
	        onMouseLeave: this.handleTriggerMouseLeave,
	        onMouseEnter: this.handleTriggerMouseEnter
	      })));
	    }
	  }]);
	  return Portal;
	}(_lib.AutoControlledComponent);

	(0, _defineProperty2.default)(Portal, "defaultProps", {
	  closeOnDocumentClick: true,
	  closeOnEscape: true,
	  eventPool: 'default',
	  openOnTriggerClick: true
	});
	(0, _defineProperty2.default)(Portal, "autoControlledProps", ['open']);
	(0, _defineProperty2.default)(Portal, "Inner", _PortalInner.default);
	(0, _defineProperty2.default)(Portal, "handledProps", ["children", "closeOnDocumentClick", "closeOnEscape", "closeOnPortalMouseLeave", "closeOnTriggerBlur", "closeOnTriggerClick", "closeOnTriggerMouseLeave", "defaultOpen", "eventPool", "mountNode", "mouseEnterDelay", "mouseLeaveDelay", "onClose", "onMount", "onOpen", "onUnmount", "open", "openOnTriggerClick", "openOnTriggerFocus", "openOnTriggerMouseEnter", "trigger", "triggerRef"]);
	Portal.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Primary content. */
	  children: _propTypes.default.node.isRequired,

	  /** Controls whether or not the portal should close when the document is clicked. */
	  closeOnDocumentClick: _propTypes.default.bool,

	  /** Controls whether or not the portal should close when escape is pressed is displayed. */
	  closeOnEscape: _propTypes.default.bool,

	  /**
	   * Controls whether or not the portal should close when mousing out of the portal.
	   * NOTE: This will prevent `closeOnTriggerMouseLeave` when mousing over the
	   * gap from the trigger to the portal.
	   */
	  closeOnPortalMouseLeave: _propTypes.default.bool,

	  /** Controls whether or not the portal should close on blur of the trigger. */
	  closeOnTriggerBlur: _propTypes.default.bool,

	  /** Controls whether or not the portal should close on click of the trigger. */
	  closeOnTriggerClick: _propTypes.default.bool,

	  /** Controls whether or not the portal should close when mousing out of the trigger. */
	  closeOnTriggerMouseLeave: _propTypes.default.bool,

	  /** Initial value of open. */
	  defaultOpen: _propTypes.default.bool,

	  /** Event pool namespace that is used to handle component events */
	  eventPool: _propTypes.default.string,

	  /** The node where the portal should mount. */
	  mountNode: _propTypes.default.any,

	  /** Milliseconds to wait before opening on mouse over */
	  mouseEnterDelay: _propTypes.default.number,

	  /** Milliseconds to wait before closing on mouse leave */
	  mouseLeaveDelay: _propTypes.default.number,

	  /**
	   * Called when a close event happens
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClose: _propTypes.default.func,

	  /**
	   * Called when the portal is mounted on the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onMount: _propTypes.default.func,

	  /**
	   * Called when an open event happens
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onOpen: _propTypes.default.func,

	  /**
	   * Called when the portal is unmounted from the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onUnmount: _propTypes.default.func,

	  /** Controls whether or not the portal is displayed. */
	  open: _propTypes.default.bool,

	  /** Controls whether or not the portal should open when the trigger is clicked. */
	  openOnTriggerClick: _propTypes.default.bool,

	  /** Controls whether or not the portal should open on focus of the trigger. */
	  openOnTriggerFocus: _propTypes.default.bool,

	  /** Controls whether or not the portal should open when mousing over the trigger. */
	  openOnTriggerMouseEnter: _propTypes.default.bool,

	  /** Element to be rendered in-place where the portal is defined. */
	  trigger: _propTypes.default.node,

	  /**
	   * Called with a ref to the trigger node.
	   *
	   * @param {HTMLElement} node - Referred node.
	   */
	  triggerRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
	} : {};
	var _default = Portal;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 530 */
/***/ (function(module, exports) {

	'use strict'

	var isObject = function isObject(val) {
	  return val !== null && !Array.isArray(val) && typeof val === 'object'
	}

	var codes = {
	  // ----------------------------------------
	  // By Code
	  // ----------------------------------------
	  3: 'Cancel',
	  6: 'Help',
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  28: 'Convert',
	  29: 'NonConvert',
	  30: 'Accept',
	  31: 'ModeChange',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  41: 'Select',
	  42: 'Print',
	  43: 'Execute',
	  44: 'PrintScreen',
	  45: 'Insert',
	  46: 'Delete',
	  48: ['0', ')'],
	  49: ['1', '!'],
	  50: ['2', '@'],
	  51: ['3', '#'],
	  52: ['4', '$'],
	  53: ['5', '%'],
	  54: ['6', '^'],
	  55: ['7', '&'],
	  56: ['8', '*'],
	  57: ['9', '('],
	  91: 'OS',
	  93: 'ContextMenu',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  181: 'VolumeMute',
	  182: 'VolumeDown',
	  183: 'VolumeUp',
	  186: [';', ':'],
	  187: ['=', '+'],
	  188: [',', '<'],
	  189: ['-', '_'],
	  190: ['.', '>'],
	  191: ['/', '?'],
	  192: ['`', '~'],
	  219: ['[', '{'],
	  220: ['\\', '|'],
	  221: [']', '}'],
	  222: ["'", '"'],
	  224: 'Meta',
	  225: 'AltGraph',
	  246: 'Attn',
	  247: 'CrSel',
	  248: 'ExSel',
	  249: 'EraseEof',
	  250: 'Play',
	  251: 'ZoomOut',
	}

	// Function Keys (F1-24)
	for (var i = 0; i < 24; i += 1) {
	  codes[112 + i] = 'F' + (i + 1)
	}

	// Alphabet (a-Z)
	for (var j = 0; j < 26; j += 1) {
	  var n = j + 65
	  codes[n] = [String.fromCharCode(n + 32), String.fromCharCode(n)]
	}

	var keyboardKey = {
	  codes: codes,

	  /**
	   * Get the `keyCode` or `which` value from a keyboard event or `key` name.
	   * @param {string|object} eventOrKey A keyboard event-like object or `key` name.
	   * @param {string} [eventOrKey.key] If object, it must have one of these keys.
	   * @param {string} [eventOrKey.keyCode] If object, it must have one of these keys.
	   * @param {string} [eventOrKey.which] If object, it must have one of these keys.
	   * @returns {*}
	   */
	  getCode: function getCode(eventOrKey) {
	    if (isObject(eventOrKey)) {
	      return eventOrKey.keyCode || eventOrKey.which || this[eventOrKey.key]
	    }
	    return this[eventOrKey]
	  },

	  /**
	   * Get the key name from a keyboard event, `keyCode`, or `which` value.
	   * @param {number|object} eventOrCode A keyboard event-like object or key code.
	   * @param {number} [eventOrCode.key] If object with a `key` name, it will be returned.
	   * @param {number} [eventOrCode.keyCode] If object, it must have one of these keys.
	   * @param {number} [eventOrCode.which] If object, it must have one of these keys.
	   * @param {number} [eventOrCode.shiftKey] If object, it must have one of these keys.
	   * @returns {*}
	   */
	  getKey: function getKey(eventOrCode) {
	    var isEvent = isObject(eventOrCode)

	    // handle events with a `key` already defined
	    if (isEvent && eventOrCode.key) {
	      return eventOrCode.key
	    }

	    var name = codes[isEvent ? eventOrCode.keyCode || eventOrCode.which : eventOrCode]

	    if (Array.isArray(name)) {
	      if (isEvent) {
	        name = name[eventOrCode.shiftKey ? 1 : 0]
	      } else {
	        name = name[0]
	      }
	    }

	    return name
	  },

	  // ----------------------------------------
	  // By Name
	  // ----------------------------------------
	  // declare these manually for static analysis
	  Cancel: 3,
	  Help: 6,
	  Backspace: 8,
	  Tab: 9,
	  Clear: 12,
	  Enter: 13,
	  Shift: 16,
	  Control: 17,
	  Alt: 18,
	  Pause: 19,
	  CapsLock: 20,
	  Escape: 27,
	  Convert: 28,
	  NonConvert: 29,
	  Accept: 30,
	  ModeChange: 31,
	  ' ': 32,
	  PageUp: 33,
	  PageDown: 34,
	  End: 35,
	  Home: 36,
	  ArrowLeft: 37,
	  ArrowUp: 38,
	  ArrowRight: 39,
	  ArrowDown: 40,
	  Select: 41,
	  Print: 42,
	  Execute: 43,
	  PrintScreen: 44,
	  Insert: 45,
	  Delete: 46,
	  0: 48,
	  ')': 48,
	  1: 49,
	  '!': 49,
	  2: 50,
	  '@': 50,
	  3: 51,
	  '#': 51,
	  4: 52,
	  $: 52,
	  5: 53,
	  '%': 53,
	  6: 54,
	  '^': 54,
	  7: 55,
	  '&': 55,
	  8: 56,
	  '*': 56,
	  9: 57,
	  '(': 57,
	  a: 65,
	  A: 65,
	  b: 66,
	  B: 66,
	  c: 67,
	  C: 67,
	  d: 68,
	  D: 68,
	  e: 69,
	  E: 69,
	  f: 70,
	  F: 70,
	  g: 71,
	  G: 71,
	  h: 72,
	  H: 72,
	  i: 73,
	  I: 73,
	  j: 74,
	  J: 74,
	  k: 75,
	  K: 75,
	  l: 76,
	  L: 76,
	  m: 77,
	  M: 77,
	  n: 78,
	  N: 78,
	  o: 79,
	  O: 79,
	  p: 80,
	  P: 80,
	  q: 81,
	  Q: 81,
	  r: 82,
	  R: 82,
	  s: 83,
	  S: 83,
	  t: 84,
	  T: 84,
	  u: 85,
	  U: 85,
	  v: 86,
	  V: 86,
	  w: 87,
	  W: 87,
	  x: 88,
	  X: 88,
	  y: 89,
	  Y: 89,
	  z: 90,
	  Z: 90,
	  OS: 91,
	  ContextMenu: 93,
	  F1: 112,
	  F2: 113,
	  F3: 114,
	  F4: 115,
	  F5: 116,
	  F6: 117,
	  F7: 118,
	  F8: 119,
	  F9: 120,
	  F10: 121,
	  F11: 122,
	  F12: 123,
	  F13: 124,
	  F14: 125,
	  F15: 126,
	  F16: 127,
	  F17: 128,
	  F18: 129,
	  F19: 130,
	  F20: 131,
	  F21: 132,
	  F22: 133,
	  F23: 134,
	  F24: 135,
	  NumLock: 144,
	  ScrollLock: 145,
	  VolumeMute: 181,
	  VolumeDown: 182,
	  VolumeUp: 183,
	  ';': 186,
	  ':': 186,
	  '=': 187,
	  '+': 187,
	  ',': 188,
	  '<': 188,
	  '-': 189,
	  _: 189,
	  '.': 190,
	  '>': 190,
	  '/': 191,
	  '?': 191,
	  '`': 192,
	  '~': 192,
	  '[': 219,
	  '{': 219,
	  '\\': 220,
	  '|': 220,
	  ']': 221,
	  '}': 221,
	  "'": 222,
	  '"': 222,
	  Meta: 224,
	  AltGraph: 225,
	  Attn: 246,
	  CrSel: 247,
	  ExSel: 248,
	  EraseEof: 249,
	  Play: 250,
	  ZoomOut: 251,
	}

	// ----------------------------------------
	// By Alias
	// ----------------------------------------
	// provide dot-notation accessible keys for all key names
	keyboardKey.Spacebar = keyboardKey[' ']
	keyboardKey.Digit0 = keyboardKey['0']
	keyboardKey.Digit1 = keyboardKey['1']
	keyboardKey.Digit2 = keyboardKey['2']
	keyboardKey.Digit3 = keyboardKey['3']
	keyboardKey.Digit4 = keyboardKey['4']
	keyboardKey.Digit5 = keyboardKey['5']
	keyboardKey.Digit6 = keyboardKey['6']
	keyboardKey.Digit7 = keyboardKey['7']
	keyboardKey.Digit8 = keyboardKey['8']
	keyboardKey.Digit9 = keyboardKey['9']
	keyboardKey.Tilde = keyboardKey['~']
	keyboardKey.GraveAccent = keyboardKey['`']
	keyboardKey.ExclamationPoint = keyboardKey['!']
	keyboardKey.AtSign = keyboardKey['@']
	keyboardKey.PoundSign = keyboardKey['#']
	keyboardKey.PercentSign = keyboardKey['%']
	keyboardKey.Caret = keyboardKey['^']
	keyboardKey.Ampersand = keyboardKey['&']
	keyboardKey.PlusSign = keyboardKey['+']
	keyboardKey.MinusSign = keyboardKey['-']
	keyboardKey.EqualsSign = keyboardKey['=']
	keyboardKey.DivisionSign = keyboardKey['/']
	keyboardKey.MultiplicationSign = keyboardKey['*']
	keyboardKey.Comma = keyboardKey[',']
	keyboardKey.Decimal = keyboardKey['.']
	keyboardKey.Colon = keyboardKey[':']
	keyboardKey.Semicolon = keyboardKey[';']
	keyboardKey.Pipe = keyboardKey['|']
	keyboardKey.BackSlash = keyboardKey['\\']
	keyboardKey.QuestionMark = keyboardKey['?']
	keyboardKey.SingleQuote = keyboardKey["'"]
	keyboardKey.DoubleQuote = keyboardKey['"']
	keyboardKey.LeftCurlyBrace = keyboardKey['{']
	keyboardKey.RightCurlyBrace = keyboardKey['}']
	keyboardKey.LeftParenthesis = keyboardKey['(']
	keyboardKey.RightParenthesis = keyboardKey[')']
	keyboardKey.LeftAngleBracket = keyboardKey['<']
	keyboardKey.RightAngleBracket = keyboardKey['>']
	keyboardKey.LeftSquareBracket = keyboardKey['[']
	keyboardKey.RightSquareBracket = keyboardKey[']']

	module.exports = keyboardKey


/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Ref.default;
	  }
	});

	var _Ref = _interopRequireDefault(__webpack_require__(532));

/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = __webpack_require__(4);

	var _reactDom = __webpack_require__(1);

	var _handleRef = _interopRequireDefault(__webpack_require__(494));

	/**
	 * This component exposes a callback prop that always returns the DOM node of both functional and class component
	 * children.
	 */
	var Ref =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Ref, _Component);

	  function Ref() {
	    (0, _classCallCheck2.default)(this, Ref);
	    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Ref).apply(this, arguments));
	  }

	  (0, _createClass2.default)(Ref, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      // eslint-disable-next-line react/no-find-dom-node
	      (0, _handleRef.default)(this.props.innerRef, (0, _reactDom.findDOMNode)(this));
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      (0, _handleRef.default)(this.props.innerRef, null);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var children = this.props.children;
	      return _react.Children.only(children);
	    }
	  }]);
	  return Ref;
	}(_react.Component);

	exports.default = Ref;
	(0, _defineProperty2.default)(Ref, "handledProps", ["children", "innerRef"]);
	Ref.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Primary content. */
	  children: _propTypes.default.element,

	  /**
	   * Called when a child component will be mounted or updated.
	   *
	   * @param {HTMLElement} node - Referred node.
	   */
	  innerRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _reactDom = __webpack_require__(1);

	var _lib = __webpack_require__(242);

	var _Ref = _interopRequireDefault(__webpack_require__(531));

	/**
	 * An inner component that allows you to render children outside their parent.
	 */
	var PortalInner =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(PortalInner, _Component);

	  function PortalInner() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, PortalInner);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PortalInner)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRef", function (c) {
	      return _this.ref = c;
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(PortalInner, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      (0, _invoke2.default)(this.props, 'onMount', null, (0, _objectSpread2.default)({}, this.props, {
	        node: this.ref
	      }));
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      (0, _invoke2.default)(this.props, 'onUnmount', null, (0, _objectSpread2.default)({}, this.props, {
	        node: this.ref
	      }));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          children = _this$props.children,
	          _this$props$mountNode = _this$props.mountNode,
	          mountNode = _this$props$mountNode === void 0 ? (0, _lib.isBrowser)() ? document.body : null : _this$props$mountNode;
	      return (0, _reactDom.createPortal)(_react.default.createElement(_Ref.default, {
	        innerRef: this.handleRef
	      }, children), mountNode);
	    }
	  }]);
	  return PortalInner;
	}(_react.Component);

	(0, _defineProperty2.default)(PortalInner, "handledProps", ["children", "mountNode", "onMount", "onUnmount"]);
	PortalInner.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Primary content. */
	  children: _propTypes.default.node.isRequired,

	  /** The node where the portal should mount. */
	  mountNode: _propTypes.default.any,

	  /**
	   * Called when the portal is mounted on the DOM
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onMount: _propTypes.default.func,

	  /**
	   * Called when the portal is unmounted from the DOM
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onUnmount: _propTypes.default.func
	} : {};
	var _default = PortalInner;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A dimmable sub-component for Dimmer.
	 */
	function DimmerDimmable(props) {
	  var blurring = props.blurring,
	      className = props.className,
	      children = props.children,
	      content = props.content,
	      dimmed = props.dimmed;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(blurring, 'blurring'), (0, _lib.useKeyOnly)(dimmed, 'dimmed'), 'dimmable', className);
	  var rest = (0, _lib.getUnhandledProps)(DimmerDimmable, props);
	  var ElementType = (0, _lib.getElementType)(DimmerDimmable, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	DimmerDimmable.handledProps = ["as", "blurring", "children", "className", "content", "dimmed"];
	DimmerDimmable.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A dimmable element can blur its contents. */
	  blurring: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Controls whether or not the dim is displayed. */
	  dimmed: _propTypes.default.bool
	} : {};
	var _default = DimmerDimmable;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * An inner element for a Dimmer.
	 */
	var DimmerInner =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(DimmerInner, _Component);

	  function DimmerInner() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, DimmerInner);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(DimmerInner)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "containerRef", (0, _react.createRef)());
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "contentRef", (0, _react.createRef)());
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var contentRef = _this.contentRef.current;
	      (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);

	      if (contentRef && contentRef !== e.target && (0, _lib.doesNodeContainClick)(contentRef, e)) {
	        return;
	      }

	      (0, _invoke2.default)(_this.props, 'onClickOutside', e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(DimmerInner, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var active = this.props.active;
	      this.toggleStyles(active);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var currentActive = this.props.active;
	      var prevActive = prevProps.active;
	      if (prevActive !== currentActive) this.toggleStyles(currentActive);
	    }
	  }, {
	    key: "toggleStyles",
	    value: function toggleStyles(active) {
	      var containerRef = this.containerRef.current;
	      if (!containerRef) return;

	      if (active) {
	        containerRef.style.setProperty('display', 'flex', 'important');
	      } else {
	        containerRef.style.removeProperty('display');
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content,
	          disabled = _this$props.disabled,
	          inverted = _this$props.inverted,
	          page = _this$props.page,
	          simple = _this$props.simple,
	          verticalAlign = _this$props.verticalAlign;
	      var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(active, 'active transition visible'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(page, 'page'), (0, _lib.useKeyOnly)(simple, 'simple'), (0, _lib.useVerticalAlignProp)(verticalAlign), 'dimmer', className);
	      var rest = (0, _lib.getUnhandledProps)(DimmerInner, this.props);
	      var ElementType = (0, _lib.getElementType)(DimmerInner, this.props);
	      var childrenContent = _lib.childrenUtils.isNil(children) ? content : children;
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        onClick: this.handleClick,
	        ref: this.containerRef
	      }), childrenContent && _react.default.createElement("div", {
	        className: "content",
	        ref: this.contentRef
	      }, childrenContent));
	    }
	  }]);
	  return DimmerInner;
	}(_react.Component);

	exports.default = DimmerInner;
	(0, _defineProperty2.default)(DimmerInner, "handledProps", ["active", "as", "children", "className", "content", "disabled", "inverted", "onClick", "onClickOutside", "page", "simple", "verticalAlign"]);
	DimmerInner.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** An active dimmer will dim its parent container. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A disabled dimmer cannot be activated */
	  disabled: _propTypes.default.bool,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /**
	   * Handles click outside Dimmer's content, but inside Dimmer area.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClickOutside: _propTypes.default.func,

	  /** A dimmer can be formatted to have its colors inverted. */
	  inverted: _propTypes.default.bool,

	  /** A dimmer can be formatted to be fixed to the page. */
	  page: _propTypes.default.bool,

	  /** A dimmer can be controlled with simple prop. */
	  simple: _propTypes.default.bool,

	  /** A dimmer can have its content top or bottom aligned. */
	  verticalAlign: _propTypes.default.oneOf(['bottom', 'top'])
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A group of images.
	 */
	function ImageGroup(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      size = props.size;
	  var classes = (0, _classnames.default)('ui', size, className, 'images');
	  var rest = (0, _lib.getUnhandledProps)(ImageGroup, props);
	  var ElementType = (0, _lib.getElementType)(ImageGroup, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ImageGroup.handledProps = ["as", "children", "className", "content", "size"];
	ImageGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A group of images can be formatted to have the same size. */
	  size: _propTypes.default.oneOf(_lib.SUI.SIZES)
	} : {};
	var _default = ImageGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	function LabelDetail(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('detail', className);
	  var rest = (0, _lib.getUnhandledProps)(LabelDetail, props);
	  var ElementType = (0, _lib.getElementType)(LabelDetail, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	LabelDetail.handledProps = ["as", "children", "className", "content"];
	LabelDetail.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	LabelDetail.create = (0, _lib.createShorthandFactory)(LabelDetail, function (val) {
	  return {
	    content: val
	  };
	});
	var _default = LabelDetail;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A label can be grouped.
	 */
	function LabelGroup(props) {
	  var children = props.children,
	      circular = props.circular,
	      className = props.className,
	      color = props.color,
	      content = props.content,
	      size = props.size,
	      tag = props.tag;
	  var classes = (0, _classnames.default)('ui', color, size, (0, _lib.useKeyOnly)(circular, 'circular'), (0, _lib.useKeyOnly)(tag, 'tag'), 'labels', className);
	  var rest = (0, _lib.getUnhandledProps)(LabelGroup, props);
	  var ElementType = (0, _lib.getElementType)(LabelGroup, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	LabelGroup.handledProps = ["as", "children", "circular", "className", "color", "content", "size", "tag"];
	LabelGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Labels can share shapes. */
	  circular: _propTypes.default.bool,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Label group can share colors together. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Label group can share sizes together. */
	  size: _propTypes.default.oneOf(_lib.SUI.SIZES),

	  /** Label group can share tag formatting. */
	  tag: _propTypes.default.bool
	} : {};
	var _default = LabelGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * Used in some Button types, such as `animated`.
	 */
	function ButtonContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      hidden = props.hidden,
	      visible = props.visible;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(visible, 'visible'), (0, _lib.useKeyOnly)(hidden, 'hidden'), 'content', className);
	  var rest = (0, _lib.getUnhandledProps)(ButtonContent, props);
	  var ElementType = (0, _lib.getElementType)(ButtonContent, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ButtonContent.handledProps = ["as", "children", "className", "content", "hidden", "visible"];
	ButtonContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Initially hidden, visible on hover. */
	  hidden: _propTypes.default.bool,

	  /** Initially visible, hidden on hover. */
	  visible: _propTypes.default.bool
	} : {};
	var _default = ButtonContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Button = _interopRequireDefault(__webpack_require__(520));

	/**
	 * Buttons can be grouped.
	 */
	function ButtonGroup(props) {
	  var attached = props.attached,
	      basic = props.basic,
	      buttons = props.buttons,
	      children = props.children,
	      className = props.className,
	      color = props.color,
	      compact = props.compact,
	      content = props.content,
	      floated = props.floated,
	      fluid = props.fluid,
	      icon = props.icon,
	      inverted = props.inverted,
	      labeled = props.labeled,
	      negative = props.negative,
	      positive = props.positive,
	      primary = props.primary,
	      secondary = props.secondary,
	      size = props.size,
	      toggle = props.toggle,
	      vertical = props.vertical,
	      widths = props.widths;
	  var classes = (0, _classnames.default)('ui', color, size, (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(icon, 'icon'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(labeled, 'labeled'), (0, _lib.useKeyOnly)(negative, 'negative'), (0, _lib.useKeyOnly)(positive, 'positive'), (0, _lib.useKeyOnly)(primary, 'primary'), (0, _lib.useKeyOnly)(secondary, 'secondary'), (0, _lib.useKeyOnly)(toggle, 'toggle'), (0, _lib.useKeyOnly)(vertical, 'vertical'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), (0, _lib.useValueAndKey)(floated, 'floated'), (0, _lib.useWidthProp)(widths), 'buttons', className);
	  var rest = (0, _lib.getUnhandledProps)(ButtonGroup, props);
	  var ElementType = (0, _lib.getElementType)(ButtonGroup, props);

	  if ((0, _isNil2.default)(buttons)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), _lib.childrenUtils.isNil(children) ? content : children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), (0, _map2.default)(buttons, function (button) {
	    return _Button.default.create(button);
	  }));
	}

	ButtonGroup.handledProps = ["as", "attached", "basic", "buttons", "children", "className", "color", "compact", "content", "floated", "fluid", "icon", "inverted", "labeled", "negative", "positive", "primary", "secondary", "size", "toggle", "vertical", "widths"];
	ButtonGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Groups can be attached to other content. */
	  attached: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['left', 'right', 'top', 'bottom'])]),

	  /** Groups can be less pronounced. */
	  basic: _propTypes.default.bool,

	  /** Array of shorthand Button values. */
	  buttons: _lib.customPropTypes.collectionShorthand,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Groups can have a shared color. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Groups can reduce their padding to fit into tighter spaces. */
	  compact: _propTypes.default.bool,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Groups can be aligned to the left or right of its container. */
	  floated: _propTypes.default.oneOf(_lib.SUI.FLOATS),

	  /** Groups can take the width of their container. */
	  fluid: _propTypes.default.bool,

	  /** Groups can be formatted as icons. */
	  icon: _propTypes.default.bool,

	  /** Groups can be formatted to appear on dark backgrounds. */
	  inverted: _propTypes.default.bool,

	  /** Groups can be formatted as labeled icon buttons. */
	  labeled: _propTypes.default.bool,

	  /** Groups can hint towards a negative consequence. */
	  negative: _propTypes.default.bool,

	  /** Groups can hint towards a positive consequence. */
	  positive: _propTypes.default.bool,

	  /** Groups can be formatted to show different levels of emphasis. */
	  primary: _propTypes.default.bool,

	  /** Groups can be formatted to show different levels of emphasis. */
	  secondary: _propTypes.default.bool,

	  /** Groups can have different sizes. */
	  size: _propTypes.default.oneOf(_lib.SUI.SIZES),

	  /** Groups can be formatted to toggle on and off. */
	  toggle: _propTypes.default.bool,

	  /** Groups can be formatted to appear vertically. */
	  vertical: _propTypes.default.bool,

	  /** Groups can have their widths divided evenly. */
	  widths: _propTypes.default.oneOf(_lib.SUI.WIDTHS)
	} : {};
	var _default = ButtonGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * Button groups can contain conditionals.
	 */
	function ButtonOr(props) {
	  var className = props.className,
	      text = props.text;
	  var classes = (0, _classnames.default)('or', className);
	  var rest = (0, _lib.getUnhandledProps)(ButtonOr, props);
	  var ElementType = (0, _lib.getElementType)(ButtonOr, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes,
	    "data-text": text
	  }));
	}

	ButtonOr.handledProps = ["as", "className", "text"];
	ButtonOr.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Or buttons can have their text localized, or adjusted by using the text prop. */
	  text: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
	} : {};
	var _default = ButtonOr;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Modal.default;
	  }
	});

	var _Modal = _interopRequireDefault(__webpack_require__(543));

/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _pick2 = _interopRequireDefault(__webpack_require__(443));

	var _includes2 = _interopRequireDefault(__webpack_require__(496));

	var _reduce2 = _interopRequireDefault(__webpack_require__(544));

	var _isEmpty2 = _interopRequireDefault(__webpack_require__(325));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	var _MountNode = _interopRequireDefault(__webpack_require__(548));

	var _Portal = _interopRequireDefault(__webpack_require__(528));

	var _ModalHeader = _interopRequireDefault(__webpack_require__(567));

	var _ModalContent = _interopRequireDefault(__webpack_require__(568));

	var _ModalActions = _interopRequireDefault(__webpack_require__(569));

	var _ModalDescription = _interopRequireDefault(__webpack_require__(570));

	var _Ref = _interopRequireDefault(__webpack_require__(531));

	/**
	 * A modal displays content that temporarily blocks interactions with the main view of a site.
	 * @see Confirm
	 * @see Portal
	 */
	var Modal =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Modal, _Component);

	  function Modal() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Modal);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getMountNode", function () {
	      return (0, _lib.isBrowser)() ? _this.props.mountNode || document.body : null;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleActionsOverrides", function (predefinedProps) {
	      return {
	        onActionClick: function onActionClick(e, actionProps) {
	          (0, _invoke2.default)(predefinedProps, 'onActionClick', e, actionProps);
	          (0, _invoke2.default)(_this.props, 'onActionClick', e, _this.props);

	          _this.handleClose(e);
	        }
	      };
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClose", function (e) {
	      (0, _invoke2.default)(_this.props, 'onClose', e, _this.props);

	      _this.trySetState({
	        open: false
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleDocumentClick", function (e) {
	      var closeOnDimmerClick = _this.props.closeOnDimmerClick;
	      if (!closeOnDimmerClick || (0, _lib.doesNodeContainClick)(_this.ref, e)) return;
	      (0, _invoke2.default)(_this.props, 'onClose', e, _this.props);

	      _this.trySetState({
	        open: false
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleIconOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e) {
	          (0, _invoke2.default)(predefinedProps, 'onClick', e);

	          _this.handleClose(e);
	        }
	      };
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleOpen", function (e) {
	      (0, _invoke2.default)(_this.props, 'onOpen', e, _this.props);

	      _this.trySetState({
	        open: true
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePortalMount", function (e) {
	      var eventPool = _this.props.eventPool;

	      _this.setState({
	        scrolling: false
	      });

	      _this.setPositionAndClassNames();

	      _lib.eventStack.sub('click', _this.handleDocumentClick, {
	        pool: eventPool,
	        target: _this.dimmerRef
	      });

	      (0, _invoke2.default)(_this.props, 'onMount', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePortalUnmount", function (e) {
	      var eventPool = _this.props.eventPool;
	      cancelAnimationFrame(_this.animationRequestId);

	      _lib.eventStack.unsub('click', _this.handleDocumentClick, {
	        pool: eventPool,
	        target: _this.dimmerRef
	      });

	      (0, _invoke2.default)(_this.props, 'onUnmount', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRef", function (c) {
	      return _this.ref = c;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleDimmerRef", function (c) {
	      return _this.dimmerRef = c;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setDimmerNodeStyle", function () {
	      if (_this.dimmerRef) {
	        _this.dimmerRef.style.setProperty('display', 'flex', 'important');
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setPositionAndClassNames", function () {
	      var dimmer = _this.props.dimmer;
	      var classes;

	      if (dimmer) {
	        classes = 'dimmable dimmed';

	        if (dimmer === 'blurring') {
	          classes += ' blurring';
	        }
	      }

	      var newState = {};

	      if (_this.ref) {
	        var _this$ref$getBounding = _this.ref.getBoundingClientRect(),
	            height = _this$ref$getBounding.height; // Leaving the old calculation here since we may need it as an older browser fallback
	        // SEE: https://github.com/Semantic-Org/Semantic-UI/issues/6185#issuecomment-376725956
	        // const marginTop = -Math.round(height / 2)


	        var marginTop = null;
	        var scrolling = height > window.innerHeight;

	        if (_this.state.marginTop !== marginTop) {
	          newState.marginTop = marginTop;
	        }

	        if (_this.state.scrolling !== scrolling) {
	          newState.scrolling = scrolling;
	        }

	        if (scrolling) classes += ' scrolling';
	      }

	      if (_this.state.mountClasses !== classes) newState.mountClasses = classes;
	      if (!(0, _isEmpty2.default)(newState)) _this.setState(newState);
	      _this.animationRequestId = requestAnimationFrame(_this.setPositionAndClassNames);

	      _this.setDimmerNodeStyle();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderContent", function (rest) {
	      var _this$props = _this.props,
	          actions = _this$props.actions,
	          basic = _this$props.basic,
	          children = _this$props.children,
	          className = _this$props.className,
	          closeIcon = _this$props.closeIcon,
	          content = _this$props.content,
	          header = _this$props.header,
	          mountNode = _this$props.mountNode,
	          size = _this$props.size,
	          style = _this$props.style;
	      var _this$state = _this.state,
	          marginTop = _this$state.marginTop,
	          mountClasses = _this$state.mountClasses,
	          scrolling = _this$state.scrolling;
	      var classes = (0, _classnames.default)('ui', size, (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(scrolling, 'scrolling'), 'modal transition visible active', className);
	      var ElementType = (0, _lib.getElementType)(Modal, _this.props);
	      var closeIconName = closeIcon === true ? 'close' : closeIcon;

	      var closeIconJSX = _Icon.default.create(closeIconName, {
	        overrideProps: _this.handleIconOverrides
	      });

	      if (!_lib.childrenUtils.isNil(children)) {
	        // TODO: remove when ref with "as" is resolved: PR #2306
	        return _react.default.createElement(_Ref.default, {
	          innerRef: _this.handleRef
	        }, _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes,
	          style: (0, _objectSpread2.default)({
	            marginTop: marginTop
	          }, style)
	        }), _react.default.createElement(_MountNode.default, {
	          className: mountClasses,
	          node: mountNode
	        }), closeIconJSX, children));
	      } // TODO: remove when ref with "as" is resolved: PR #2306


	      return _react.default.createElement(_Ref.default, {
	        innerRef: _this.handleRef
	      }, _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        style: (0, _objectSpread2.default)({
	          marginTop: marginTop
	        }, style)
	      }), _react.default.createElement(_MountNode.default, {
	        className: mountClasses,
	        node: mountNode
	      }), closeIconJSX, _ModalHeader.default.create(header, {
	        autoGenerateKey: false
	      }), _ModalContent.default.create(content, {
	        autoGenerateKey: false
	      }), _ModalActions.default.create(actions, {
	        overrideProps: _this.handleActionsOverrides
	      })));
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Modal, [{
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.handlePortalUnmount();
	    } // Do not access document when server side rendering

	  }, {
	    key: "render",
	    value: function render() {
	      var open = this.state.open;
	      var _this$props2 = this.props,
	          centered = _this$props2.centered,
	          closeOnDocumentClick = _this$props2.closeOnDocumentClick,
	          dimmer = _this$props2.dimmer,
	          eventPool = _this$props2.eventPool,
	          trigger = _this$props2.trigger;
	      var mountNode = this.getMountNode(); // Short circuit when server side rendering

	      if (!(0, _lib.isBrowser)()) {
	        return (0, _react.isValidElement)(trigger) ? trigger : null;
	      }

	      var unhandled = (0, _lib.getUnhandledProps)(Modal, this.props);
	      var portalPropNames = _Portal.default.handledProps;
	      var rest = (0, _reduce2.default)(unhandled, function (acc, val, key) {
	        if (!(0, _includes2.default)(portalPropNames, key)) acc[key] = val;
	        return acc;
	      }, {});
	      var portalProps = (0, _pick2.default)(unhandled, portalPropNames); // wrap dimmer modals

	      var dimmerClasses = (0, _classnames.default)('ui', dimmer === 'inverted' && 'inverted', !centered && 'top aligned', 'page modals dimmer transition visible active'); // Heads up!
	      //
	      // The SUI CSS selector to prevent the modal itself from blurring requires an immediate .dimmer child:
	      // .blurring.dimmed.dimmable>:not(.dimmer) { ... }
	      //
	      // The .blurring.dimmed.dimmable is the body, so that all body content inside is blurred.
	      // We need the immediate child to be the dimmer to :not() blur the modal itself!
	      // Otherwise, the portal div is also blurred, blurring the modal.
	      //
	      // We cannot them wrap the modalJSX in an actual <Dimmer /> instead, we apply the dimmer classes to the <Portal />.

	      return _react.default.createElement(_Portal.default, (0, _extends2.default)({
	        closeOnDocumentClick: closeOnDocumentClick
	      }, portalProps, {
	        trigger: trigger,
	        eventPool: eventPool,
	        mountNode: mountNode,
	        open: open,
	        onClose: this.handleClose,
	        onMount: this.handlePortalMount,
	        onOpen: this.handleOpen,
	        onUnmount: this.handlePortalUnmount
	      }), _react.default.createElement("div", {
	        className: dimmerClasses,
	        ref: this.handleDimmerRef
	      }, this.renderContent(rest)));
	    }
	  }]);
	  return Modal;
	}(_lib.AutoControlledComponent);

	(0, _defineProperty2.default)(Modal, "defaultProps", {
	  centered: true,
	  dimmer: true,
	  closeOnDimmerClick: true,
	  closeOnDocumentClick: false,
	  eventPool: 'Modal'
	});
	(0, _defineProperty2.default)(Modal, "autoControlledProps", ['open']);
	(0, _defineProperty2.default)(Modal, "Header", _ModalHeader.default);
	(0, _defineProperty2.default)(Modal, "Content", _ModalContent.default);
	(0, _defineProperty2.default)(Modal, "Description", _ModalDescription.default);
	(0, _defineProperty2.default)(Modal, "Actions", _ModalActions.default);
	(0, _defineProperty2.default)(Modal, "handledProps", ["actions", "as", "basic", "centered", "children", "className", "closeIcon", "closeOnDimmerClick", "closeOnDocumentClick", "content", "defaultOpen", "dimmer", "eventPool", "header", "mountNode", "onActionClick", "onClose", "onMount", "onOpen", "onUnmount", "open", "size", "style", "trigger"]);
	Modal.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Shorthand for Modal.Actions. Typically an array of button shorthand. */
	  actions: _lib.customPropTypes.itemShorthand,

	  /** A modal can reduce its complexity */
	  basic: _propTypes.default.bool,

	  /** A modal can be vertically centered in the viewport */
	  centered: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for the close icon. Closes the modal on click. */
	  closeIcon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object, _propTypes.default.bool]),

	  /** Whether or not the Modal should close when the dimmer is clicked. */
	  closeOnDimmerClick: _propTypes.default.bool,

	  /** Whether or not the Modal should close when the document is clicked. */
	  closeOnDocumentClick: _propTypes.default.bool,

	  /** Simple text content for the Modal. */
	  content: _lib.customPropTypes.itemShorthand,

	  /** Initial value of open. */
	  defaultOpen: _propTypes.default.bool,

	  /** A Modal can appear in a dimmer. */
	  dimmer: _propTypes.default.oneOf([true, 'inverted', 'blurring']),

	  /** Event pool namespace that is used to handle component events */
	  eventPool: _propTypes.default.string,

	  /** Modal displayed above the content in bold. */
	  header: _lib.customPropTypes.itemShorthand,

	  /** The node where the modal should mount. Defaults to document.body. */
	  mountNode: _propTypes.default.any,

	  /**
	   * Action onClick handler when using shorthand `actions`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onActionClick: _propTypes.default.func,

	  /**
	   * Called when a close event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClose: _propTypes.default.func,

	  /**
	   * Called when the portal is mounted on the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onMount: _propTypes.default.func,

	  /**
	   * Called when an open event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onOpen: _propTypes.default.func,

	  /**
	   * Called when the portal is unmounted from the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onUnmount: _propTypes.default.func,

	  /** Controls whether or not the Modal is displayed. */
	  open: _propTypes.default.bool,

	  /** A modal can vary in size */
	  size: _propTypes.default.oneOf(['mini', 'tiny', 'small', 'large', 'fullscreen']),

	  /** Custom styles. */
	  style: _propTypes.default.object,

	  /** Element to be rendered in-place where the portal is defined. */
	  trigger: _propTypes.default.node
	  /**
	   * NOTE: Any unhandled props that are defined in Portal are passed-through
	   * to the wrapping Portal.
	   */

	} : {};
	var _default = Modal;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayReduce = __webpack_require__(545),
	    baseEach = __webpack_require__(272),
	    baseIteratee = __webpack_require__(288),
	    baseReduce = __webpack_require__(546),
	    isArray = __webpack_require__(181);

	/**
	 * Reduces `collection` to a value which is the accumulated result of running
	 * each element in `collection` thru `iteratee`, where each successive
	 * invocation is supplied the return value of the previous. If `accumulator`
	 * is not given, the first element of `collection` is used as the initial
	 * value. The iteratee is invoked with four arguments:
	 * (accumulator, value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.reduce`, `_.reduceRight`, and `_.transform`.
	 *
	 * The guarded methods are:
	 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	 * and `sortBy`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @returns {*} Returns the accumulated value.
	 * @see _.reduceRight
	 * @example
	 *
	 * _.reduce([1, 2], function(sum, n) {
	 *   return sum + n;
	 * }, 0);
	 * // => 3
	 *
	 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 *   return result;
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	 */
	function reduce(collection, iteratee, accumulator) {
	  var func = isArray(collection) ? arrayReduce : baseReduce,
	      initAccum = arguments.length < 3;

	  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	}

	module.exports = reduce;


/***/ }),
/* 545 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	module.exports = arrayReduce;


/***/ }),
/* 546 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.reduce` and `_.reduceRight`, without support
	 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initAccum Specify using the first or last element of
	 *  `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */
	function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	  eachFunc(collection, function(value, index, collection) {
	    accumulator = initAccum
	      ? (initAccum = false, value)
	      : iteratee(accumulator, value, index, collection);
	  });
	  return accumulator;
	}

	module.exports = baseReduce;


/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Icon.default;
	  }
	});

	var _Icon = _interopRequireDefault(__webpack_require__(521));

/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _MountNode.default;
	  }
	});

	var _MountNode = _interopRequireDefault(__webpack_require__(549));

/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = __webpack_require__(4);

	var _lib = __webpack_require__(242);

	var _getNodeFromProps = _interopRequireDefault(__webpack_require__(550));

	var _handleClassNamesChange = _interopRequireDefault(__webpack_require__(551));

	var _NodeRegistry = _interopRequireDefault(__webpack_require__(566));

	var nodeRegistry = new _NodeRegistry.default();
	/**
	 * A component that allows to manage classNames on a DOM node in declarative manner.
	 */

	var MountNode =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(MountNode, _Component);

	  function MountNode() {
	    (0, _classCallCheck2.default)(this, MountNode);
	    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MountNode).apply(this, arguments));
	  }

	  (0, _createClass2.default)(MountNode, [{
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(_ref) {
	      var nextClassName = _ref.className;
	      var currentClassName = this.props.className;
	      return nextClassName !== currentClassName;
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var node = (0, _getNodeFromProps.default)(this.props);

	      if (node) {
	        nodeRegistry.add(node, this);
	        nodeRegistry.emit(node, _handleClassNamesChange.default);
	      }
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      var node = (0, _getNodeFromProps.default)(this.props);
	      if (node) nodeRegistry.emit(node, _handleClassNamesChange.default);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      var node = (0, _getNodeFromProps.default)(this.props);

	      if (node) {
	        nodeRegistry.del(node, this);
	        nodeRegistry.emit(node, _handleClassNamesChange.default);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return null;
	    }
	  }]);
	  return MountNode;
	}(_react.Component);

	exports.default = MountNode;
	(0, _defineProperty2.default)(MountNode, "handledProps", ["className", "node"]);
	MountNode.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** The DOM node where we will apply class names. Defaults to document.body. */
	  node: _lib.customPropTypes.domNode
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _lib = __webpack_require__(242);

	/**
	 * Given `this.props`, return a `node` value or undefined.
	 *
	 * @param {object} props Component's props
	 * @return {HTMLElement|undefined}
	 */
	var getNodeFromProps = function getNodeFromProps(props) {
	  var node = props.node;

	  if ((0, _lib.isBrowser)()) {
	    if ((0, _isNil2.default)(node)) return document.body;
	    return node;
	  }
	};

	var _default = getNodeFromProps;
	exports.default = _default;

/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _slicedToArray2 = _interopRequireDefault(__webpack_require__(334));

	var _forEach2 = _interopRequireDefault(__webpack_require__(330));

	var _computeClassNames = _interopRequireDefault(__webpack_require__(552));

	var _computeClassNamesDifference = _interopRequireDefault(__webpack_require__(565));

	var prevClassNames = new Map();

	var handleClassNamesChange = function handleClassNamesChange(node, components) {
	  var currentClassNames = (0, _computeClassNames.default)(components);

	  var _computeClassNamesDif = (0, _computeClassNamesDifference.default)(prevClassNames.get(node), currentClassNames),
	      _computeClassNamesDif2 = (0, _slicedToArray2.default)(_computeClassNamesDif, 2),
	      forAdd = _computeClassNamesDif2[0],
	      forRemoval = _computeClassNamesDif2[1];

	  (0, _forEach2.default)(forAdd, function (className) {
	    return node.classList.add(className);
	  });
	  (0, _forEach2.default)(forRemoval, function (className) {
	    return node.classList.remove(className);
	  });
	  prevClassNames.set(node, currentClassNames);
	};

	var _default = handleClassNamesChange;
	exports.default = _default;

/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _uniq2 = _interopRequireDefault(__webpack_require__(553));

	var _identity2 = _interopRequireDefault(__webpack_require__(554));

	var _filter2 = _interopRequireDefault(__webpack_require__(555));

	var _split2 = _interopRequireDefault(__webpack_require__(556));

	var _flatMap2 = _interopRequireDefault(__webpack_require__(560));

	var _map2 = _interopRequireDefault(__webpack_require__(470));

	var _toArray2 = _interopRequireDefault(__webpack_require__(562));

	var _flow2 = _interopRequireDefault(__webpack_require__(472));

	var computeClassNames = (0, _flow2.default)(_toArray2.default, (0, _map2.default)('props.className'), (0, _flatMap2.default)((0, _split2.default)(/\s+/)), (0, _filter2.default)(_identity2.default), _uniq2.default);
	var _default = computeClassNames;
	exports.default = _default;

/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('uniq', __webpack_require__(485), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('identity', __webpack_require__(235), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('filter', __webpack_require__(269));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('split', __webpack_require__(557));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(220),
	    castSlice = __webpack_require__(433),
	    hasUnicode = __webpack_require__(438),
	    isIterateeCall = __webpack_require__(349),
	    isRegExp = __webpack_require__(558),
	    stringToArray = __webpack_require__(436),
	    toString = __webpack_require__(219);

	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295;

	/**
	 * Splits `string` by `separator`.
	 *
	 * **Note:** This method is based on
	 * [`String#split`](https://mdn.io/String/split).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to split.
	 * @param {RegExp|string} separator The separator pattern to split by.
	 * @param {number} [limit] The length to truncate results to.
	 * @returns {Array} Returns the string segments.
	 * @example
	 *
	 * _.split('a-b-c', '-', 2);
	 * // => ['a', 'b']
	 */
	function split(string, separator, limit) {
	  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	    separator = limit = undefined;
	  }
	  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	  if (!limit) {
	    return [];
	  }
	  string = toString(string);
	  if (string && (
	        typeof separator == 'string' ||
	        (separator != null && !isRegExp(separator))
	      )) {
	    separator = baseToString(separator);
	    if (!separator && hasUnicode(string)) {
	      return castSlice(stringToArray(string), 0, limit);
	    }
	  }
	  return string.split(separator, limit);
	}

	module.exports = split;


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsRegExp = __webpack_require__(559),
	    baseUnary = __webpack_require__(256),
	    nodeUtil = __webpack_require__(283);

	/* Node.js helper references. */
	var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;

	/**
	 * Checks if `value` is classified as a `RegExp` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	 * @example
	 *
	 * _.isRegExp(/abc/);
	 * // => true
	 *
	 * _.isRegExp('/abc/');
	 * // => false
	 */
	var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

	module.exports = isRegExp;


/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(34),
	    isObjectLike = __webpack_require__(42);

	/** `Object#toString` result references. */
	var regexpTag = '[object RegExp]';

	/**
	 * The base implementation of `_.isRegExp` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	 */
	function baseIsRegExp(value) {
	  return isObjectLike(value) && baseGetTag(value) == regexpTag;
	}

	module.exports = baseIsRegExp;


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('flatMap', __webpack_require__(561));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(258),
	    map = __webpack_require__(471);

	/**
	 * Creates a flattened array of values by running each element in `collection`
	 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	 * with three arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * function duplicate(n) {
	 *   return [n, n];
	 * }
	 *
	 * _.flatMap([1, 2], duplicate);
	 * // => [1, 1, 2, 2]
	 */
	function flatMap(collection, iteratee) {
	  return baseFlatten(map(collection, iteratee), 1);
	}

	module.exports = flatMap;


/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(358),
	    func = convert('toArray', __webpack_require__(563), __webpack_require__(441));

	func.placeholder = __webpack_require__(361);
	module.exports = func;


/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(35),
	    copyArray = __webpack_require__(386),
	    getTag = __webpack_require__(310),
	    isArrayLike = __webpack_require__(262),
	    isString = __webpack_require__(489),
	    iteratorToArray = __webpack_require__(564),
	    mapToArray = __webpack_require__(303),
	    setToArray = __webpack_require__(304),
	    stringToArray = __webpack_require__(436),
	    values = __webpack_require__(497);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';

	/** Built-in value references. */
	var symIterator = Symbol ? Symbol.iterator : undefined;

	/**
	 * Converts `value` to an array.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Array} Returns the converted array.
	 * @example
	 *
	 * _.toArray({ 'a': 1, 'b': 2 });
	 * // => [1, 2]
	 *
	 * _.toArray('abc');
	 * // => ['a', 'b', 'c']
	 *
	 * _.toArray(1);
	 * // => []
	 *
	 * _.toArray(null);
	 * // => []
	 */
	function toArray(value) {
	  if (!value) {
	    return [];
	  }
	  if (isArrayLike(value)) {
	    return isString(value) ? stringToArray(value) : copyArray(value);
	  }
	  if (symIterator && value[symIterator]) {
	    return iteratorToArray(value[symIterator]());
	  }
	  var tag = getTag(value),
	      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

	  return func(value);
	}

	module.exports = toArray;


/***/ }),
/* 564 */
/***/ (function(module, exports) {

	/**
	 * Converts `iterator` to an array.
	 *
	 * @private
	 * @param {Object} iterator The iterator to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function iteratorToArray(iterator) {
	  var data,
	      result = [];

	  while (!(data = iterator.next()).done) {
	    result.push(data.value);
	  }
	  return result;
	}

	module.exports = iteratorToArray;


/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _difference2 = _interopRequireDefault(__webpack_require__(245));

	var computeClassNamesDifference = function computeClassNamesDifference(prevClassNames, currentClassNames) {
	  return [(0, _difference2.default)(currentClassNames, prevClassNames), (0, _difference2.default)(prevClassNames, currentClassNames)];
	};

	var _default = computeClassNamesDifference;
	exports.default = _default;

/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var NodeRegistry = function NodeRegistry() {
	  var _this = this;

	  (0, _classCallCheck2.default)(this, NodeRegistry);
	  (0, _defineProperty2.default)(this, "add", function (node, component) {
	    if (_this.nodes.has(node)) {
	      var set = _this.nodes.get(node);

	      set.add(component);
	      return;
	    }

	    _this.nodes.set(node, new Set([component]));
	  });
	  (0, _defineProperty2.default)(this, "del", function (node, component) {
	    if (!_this.nodes.has(node)) return;

	    var set = _this.nodes.get(node);

	    if (set.size === 1) {
	      _this.nodes.delete(node);

	      return;
	    }

	    set.delete(component);
	  });
	  (0, _defineProperty2.default)(this, "emit", function (node, callback) {
	    callback(node, _this.nodes.get(node));
	  });
	  this.nodes = new Map();
	};

	exports.default = NodeRegistry;

/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A modal can have a header.
	 */
	function ModalHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)(className, 'header');
	  var rest = (0, _lib.getUnhandledProps)(ModalHeader, props);
	  var ElementType = (0, _lib.getElementType)(ModalHeader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ModalHeader.handledProps = ["as", "children", "className", "content"];
	ModalHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	ModalHeader.create = (0, _lib.createShorthandFactory)(ModalHeader, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = ModalHeader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A modal can contain content.
	 */
	function ModalContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      image = props.image,
	      scrolling = props.scrolling;
	  var classes = (0, _classnames.default)(className, (0, _lib.useKeyOnly)(image, 'image'), (0, _lib.useKeyOnly)(scrolling, 'scrolling'), 'content');
	  var rest = (0, _lib.getUnhandledProps)(ModalContent, props);
	  var ElementType = (0, _lib.getElementType)(ModalContent, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ModalContent.handledProps = ["as", "children", "className", "content", "image", "scrolling"];
	ModalContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A modal can contain image content. */
	  image: _propTypes.default.bool,

	  /** A modal can use the entire size of the screen. */
	  scrolling: _propTypes.default.bool
	} : {};
	ModalContent.create = (0, _lib.createShorthandFactory)(ModalContent, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = ModalContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Button = _interopRequireDefault(__webpack_require__(519));

	/**
	 * A modal can contain a row of actions.
	 */
	var ModalActions =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(ModalActions, _Component);

	  function ModalActions() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, ModalActions);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ModalActions)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleButtonOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, buttonProps) {
	          (0, _invoke2.default)(predefinedProps, 'onClick', e, buttonProps);
	          (0, _invoke2.default)(_this.props, 'onActionClick', e, buttonProps);
	        }
	      };
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(ModalActions, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          actions = _this$props.actions,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content;
	      var classes = (0, _classnames.default)('actions', className);
	      var rest = (0, _lib.getUnhandledProps)(ModalActions, this.props);
	      var ElementType = (0, _lib.getElementType)(ModalActions, this.props);

	      if (!_lib.childrenUtils.isNil(children)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes
	        }), children);
	      }

	      if (!_lib.childrenUtils.isNil(content)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes
	        }), content);
	      }

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes
	      }), (0, _map2.default)(actions, function (action) {
	        return _Button.default.create(action, {
	          overrideProps: _this2.handleButtonOverrides
	        });
	      }));
	    }
	  }]);
	  return ModalActions;
	}(_react.Component);

	exports.default = ModalActions;
	(0, _defineProperty2.default)(ModalActions, "handledProps", ["actions", "as", "children", "className", "content", "onActionClick"]);
	ModalActions.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Array of shorthand buttons. */
	  actions: _lib.customPropTypes.collectionShorthand,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /**
	   * Action onClick handler when using shorthand `actions`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props from the clicked action.
	   */
	  onActionClick: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _propTypes.default.func])
	} : {};
	ModalActions.create = (0, _lib.createShorthandFactory)(ModalActions, function (actions) {
	  return {
	    actions: actions
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A modal can have a header.
	 */
	function ModalDescription(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('description', className);
	  var rest = (0, _lib.getUnhandledProps)(ModalDescription, props);
	  var ElementType = (0, _lib.getElementType)(ModalDescription, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ModalDescription.handledProps = ["as", "children", "className", "content"];
	ModalDescription.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = ModalDescription;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Pagination.default;
	  }
	});

	var _Pagination = _interopRequireDefault(__webpack_require__(572));

/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Menu = _interopRequireDefault(__webpack_require__(573));

	var _PaginationItem = _interopRequireDefault(__webpack_require__(589));

	/**
	 * A component to render a pagination.
	 */
	var Pagination =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Pagination, _Component);

	  function Pagination() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Pagination);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Pagination)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleItemClick", function (e, _ref) {
	      var nextActivePage = _ref.value;
	      var prevActivePage = _this.state.activePage; // Heads up! We need the cast to the "number" type there, as `activePage` can be a string

	      if (+prevActivePage === +nextActivePage) return;

	      _this.trySetState({
	        activePage: nextActivePage
	      });

	      (0, _invoke2.default)(_this.props, 'onPageChange', e, (0, _objectSpread2.default)({}, _this.props, {
	        activePage: nextActivePage
	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleItemOverrides", function (active, type, value) {
	      return function (predefinedProps) {
	        return {
	          active: active,
	          type: type,
	          key: "".concat(type, "-").concat(value),
	          onClick: function onClick(e, itemProps) {
	            (0, _invoke2.default)(predefinedProps, 'onClick', e, itemProps);

	            _this.handleItemClick(e, itemProps);
	          }
	        };
	      };
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Pagination, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          ariaLabel = _this$props['aria-label'],
	          boundaryRange = _this$props.boundaryRange,
	          disabled = _this$props.disabled,
	          ellipsisItem = _this$props.ellipsisItem,
	          siblingRange = _this$props.siblingRange,
	          totalPages = _this$props.totalPages;
	      var activePage = this.state.activePage;
	      var items = (0, _lib.createPaginationItems)({
	        activePage: activePage,
	        boundaryRange: boundaryRange,
	        hideEllipsis: (0, _isNil2.default)(ellipsisItem),
	        siblingRange: siblingRange,
	        totalPages: totalPages
	      });
	      var rest = (0, _lib.getUnhandledProps)(Pagination, this.props);
	      return _react.default.createElement(_Menu.default, (0, _extends2.default)({}, rest, {
	        "aria-label": ariaLabel,
	        pagination: true,
	        role: "navigation"
	      }), (0, _map2.default)(items, function (_ref2) {
	        var active = _ref2.active,
	            type = _ref2.type,
	            value = _ref2.value;
	        return _PaginationItem.default.create(_this2.props[type], {
	          defaultProps: {
	            content: value,
	            disabled: disabled,
	            value: value
	          },
	          overrideProps: _this2.handleItemOverrides(active, type, value)
	        });
	      }));
	    }
	  }]);
	  return Pagination;
	}(_lib.AutoControlledComponent);

	exports.default = Pagination;
	(0, _defineProperty2.default)(Pagination, "autoControlledProps", ['activePage']);
	(0, _defineProperty2.default)(Pagination, "defaultProps", {
	  'aria-label': 'Pagination Navigation',
	  boundaryRange: 1,
	  ellipsisItem: '...',
	  firstItem: {
	    'aria-label': 'First item',
	    content: '«'
	  },
	  lastItem: {
	    'aria-label': 'Last item',
	    content: '»'
	  },
	  nextItem: {
	    'aria-label': 'Next item',
	    content: '⟩'
	  },
	  pageItem: {},
	  prevItem: {
	    'aria-label': 'Previous item',
	    content: '⟨'
	  },
	  siblingRange: 1
	});
	(0, _defineProperty2.default)(Pagination, "Item", _PaginationItem.default);
	(0, _defineProperty2.default)(Pagination, "handledProps", ["activePage", "aria-label", "boundaryRange", "defaultActivePage", "disabled", "ellipsisItem", "firstItem", "lastItem", "nextItem", "onPageChange", "pageItem", "prevItem", "siblingRange", "totalPages"]);
	Pagination.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** A pagination item can have an aria label. */
	  'aria-label': _propTypes.default.string,

	  /** Initial activePage value. */
	  defaultActivePage: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** Index of the currently active page. */
	  activePage: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** Number of always visible pages at the beginning and end. */
	  boundaryRange: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** A pagination can be disabled. */
	  disabled: _propTypes.default.bool,

	  /** A shorthand for PaginationItem. */
	  ellipsisItem: _lib.customPropTypes.itemShorthand,

	  /** A shorthand for PaginationItem. */
	  firstItem: _lib.customPropTypes.itemShorthand,

	  /** A shorthand for PaginationItem. */
	  lastItem: _lib.customPropTypes.itemShorthand,

	  /** A shorthand for PaginationItem. */
	  nextItem: _lib.customPropTypes.itemShorthand,

	  /** A shorthand for PaginationItem. */
	  pageItem: _lib.customPropTypes.itemShorthand,

	  /** A shorthand for PaginationItem. */
	  prevItem: _lib.customPropTypes.itemShorthand,

	  /**
	   * Called on change of an active page.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onPageChange: _propTypes.default.func,

	  /** Number of always visible pages before and after the current one. */
	  siblingRange: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** Total number of pages. */
	  totalPages: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Menu.default;
	  }
	});

	var _Menu = _interopRequireDefault(__webpack_require__(574));

/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _MenuHeader = _interopRequireDefault(__webpack_require__(575));

	var _MenuItem = _interopRequireDefault(__webpack_require__(576));

	var _MenuMenu = _interopRequireDefault(__webpack_require__(588));

	/**
	 * A menu displays grouped navigation actions.
	 * @see Dropdown
	 */
	var Menu =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Menu, _Component);

	  function Menu() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Menu);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Menu)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleItemOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, itemProps) {
	          var index = itemProps.index;

	          _this.trySetState({
	            activeIndex: index
	          });

	          (0, _invoke2.default)(predefinedProps, 'onClick', e, itemProps);
	          (0, _invoke2.default)(_this.props, 'onItemClick', e, itemProps);
	        }
	      };
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Menu, [{
	    key: "renderItems",
	    value: function renderItems() {
	      var _this2 = this;

	      var items = this.props.items;
	      var activeIndex = this.state.activeIndex;
	      return (0, _map2.default)(items, function (item, index) {
	        return _MenuItem.default.create(item, {
	          defaultProps: {
	            active: parseInt(activeIndex, 10) === index,
	            index: index
	          },
	          overrideProps: _this2.handleItemOverrides
	        });
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          attached = _this$props.attached,
	          borderless = _this$props.borderless,
	          children = _this$props.children,
	          className = _this$props.className,
	          color = _this$props.color,
	          compact = _this$props.compact,
	          fixed = _this$props.fixed,
	          floated = _this$props.floated,
	          fluid = _this$props.fluid,
	          icon = _this$props.icon,
	          inverted = _this$props.inverted,
	          pagination = _this$props.pagination,
	          pointing = _this$props.pointing,
	          secondary = _this$props.secondary,
	          size = _this$props.size,
	          stackable = _this$props.stackable,
	          tabular = _this$props.tabular,
	          text = _this$props.text,
	          vertical = _this$props.vertical,
	          widths = _this$props.widths;
	      var classes = (0, _classnames.default)('ui', color, size, (0, _lib.useKeyOnly)(borderless, 'borderless'), (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(pagination, 'pagination'), (0, _lib.useKeyOnly)(pointing, 'pointing'), (0, _lib.useKeyOnly)(secondary, 'secondary'), (0, _lib.useKeyOnly)(stackable, 'stackable'), (0, _lib.useKeyOnly)(text, 'text'), (0, _lib.useKeyOnly)(vertical, 'vertical'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), (0, _lib.useKeyOrValueAndKey)(floated, 'floated'), (0, _lib.useKeyOrValueAndKey)(icon, 'icon'), (0, _lib.useKeyOrValueAndKey)(tabular, 'tabular'), (0, _lib.useValueAndKey)(fixed, 'fixed'), (0, _lib.useWidthProp)(widths, 'item'), className, 'menu');
	      var rest = (0, _lib.getUnhandledProps)(Menu, this.props);
	      var ElementType = (0, _lib.getElementType)(Menu, this.props);
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes
	      }), _lib.childrenUtils.isNil(children) ? this.renderItems() : children);
	    }
	  }]);
	  return Menu;
	}(_lib.AutoControlledComponent);

	(0, _defineProperty2.default)(Menu, "autoControlledProps", ['activeIndex']);
	(0, _defineProperty2.default)(Menu, "Header", _MenuHeader.default);
	(0, _defineProperty2.default)(Menu, "Item", _MenuItem.default);
	(0, _defineProperty2.default)(Menu, "Menu", _MenuMenu.default);
	(0, _defineProperty2.default)(Menu, "handledProps", ["activeIndex", "as", "attached", "borderless", "children", "className", "color", "compact", "defaultActiveIndex", "fixed", "floated", "fluid", "icon", "inverted", "items", "onItemClick", "pagination", "pointing", "secondary", "size", "stackable", "tabular", "text", "vertical", "widths"]);
	Menu.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Index of the currently active item. */
	  activeIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** A menu may be attached to other content segments. */
	  attached: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['top', 'bottom'])]),

	  /** A menu item or menu can have no borders. */
	  borderless: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Additional colors can be specified. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** A menu can take up only the space necessary to fit its content. */
	  compact: _propTypes.default.bool,

	  /** Initial activeIndex value. */
	  defaultActiveIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** A menu can be fixed to a side of its context. */
	  fixed: _propTypes.default.oneOf(['left', 'right', 'bottom', 'top']),

	  /** A menu can be floated. */
	  floated: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['right'])]),

	  /** A vertical menu may take the size of its container. */
	  fluid: _propTypes.default.bool,

	  /** A menu may have just icons (bool) or labeled icons. */
	  icon: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['labeled'])]),

	  /** A menu may have its colors inverted to show greater contrast. */
	  inverted: _propTypes.default.bool,

	  /** Shorthand array of props for Menu. */
	  items: _lib.customPropTypes.collectionShorthand,

	  /**
	   * onClick handler for MenuItem. Mutually exclusive with children.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All item props.
	   */
	  onItemClick: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _propTypes.default.func]),

	  /** A pagination menu is specially formatted to present links to pages of content. */
	  pagination: _propTypes.default.bool,

	  /** A menu can point to show its relationship to nearby content. */
	  pointing: _propTypes.default.bool,

	  /** A menu can adjust its appearance to de-emphasize its contents. */
	  secondary: _propTypes.default.bool,

	  /** A menu can vary in size. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium', 'big')),

	  /** A menu can stack at mobile resolutions. */
	  stackable: _propTypes.default.bool,

	  /** A menu can be formatted to show tabs of information. */
	  tabular: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['right'])]),

	  /** A menu can be formatted for text content. */
	  text: _propTypes.default.bool,

	  /** A vertical menu displays elements vertically. */
	  vertical: _propTypes.default.bool,

	  /** A menu can have its items divided evenly. */
	  widths: _propTypes.default.oneOf(_lib.SUI.WIDTHS)
	} : {};
	Menu.create = (0, _lib.createShorthandFactory)(Menu, function (items) {
	  return {
	    items: items
	  };
	});
	var _default = Menu;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A menu item may include a header or may itself be a header.
	 */
	function MenuHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('header', className);
	  var rest = (0, _lib.getUnhandledProps)(MenuHeader, props);
	  var ElementType = (0, _lib.getElementType)(MenuHeader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	MenuHeader.handledProps = ["as", "children", "className", "content"];
	MenuHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = MenuHeader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _startCase2 = _interopRequireDefault(__webpack_require__(577));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	/**
	 * A menu can contain an item.
	 */
	var MenuItem =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(MenuItem, _Component);

	  function MenuItem() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, MenuItem);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(MenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var disabled = _this.props.disabled;
	      if (!disabled) (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(MenuItem, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          color = _this$props.color,
	          content = _this$props.content,
	          disabled = _this$props.disabled,
	          fitted = _this$props.fitted,
	          header = _this$props.header,
	          icon = _this$props.icon,
	          link = _this$props.link,
	          name = _this$props.name,
	          onClick = _this$props.onClick,
	          position = _this$props.position;
	      var classes = (0, _classnames.default)(color, position, (0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(icon === true || icon && !(name || content), 'icon'), (0, _lib.useKeyOnly)(header, 'header'), (0, _lib.useKeyOnly)(link, 'link'), (0, _lib.useKeyOrValueAndKey)(fitted, 'fitted'), 'item', className);
	      var ElementType = (0, _lib.getElementType)(MenuItem, this.props, function () {
	        if (onClick) return 'a';
	      });
	      var rest = (0, _lib.getUnhandledProps)(MenuItem, this.props);

	      if (!_lib.childrenUtils.isNil(children)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes,
	          onClick: this.handleClick
	        }), children);
	      }

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        onClick: this.handleClick
	      }), _Icon.default.create(icon, {
	        autoGenerateKey: false
	      }), _lib.childrenUtils.isNil(content) ? (0, _startCase2.default)(name) : content);
	    }
	  }]);
	  return MenuItem;
	}(_react.Component);

	exports.default = MenuItem;
	(0, _defineProperty2.default)(MenuItem, "handledProps", ["active", "as", "children", "className", "color", "content", "disabled", "fitted", "header", "icon", "index", "link", "name", "onClick", "position"]);
	MenuItem.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A menu item can be active. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Additional colors can be specified. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A menu item can be disabled. */
	  disabled: _propTypes.default.bool,

	  /** A menu item or menu can remove element padding, vertically or horizontally. */
	  fitted: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['horizontally', 'vertically'])]),

	  /** A menu item may include a header or may itself be a header. */
	  header: _propTypes.default.bool,

	  /** MenuItem can be only icon. */
	  icon: _propTypes.default.oneOfType([_propTypes.default.bool, _lib.customPropTypes.itemShorthand]),

	  /** MenuItem index inside Menu. */
	  index: _propTypes.default.number,

	  /** A menu item can be link. */
	  link: _propTypes.default.bool,

	  /** Internal name of the MenuItem. */
	  name: _propTypes.default.string,

	  /**
	   * Called on click. When passed, the component will render as an `a`
	   * tag by default instead of a `div`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /** A menu item can take left or right position. */
	  position: _propTypes.default.oneOf(['left', 'right'])
	} : {};
	MenuItem.create = (0, _lib.createShorthandFactory)(MenuItem, function (val) {
	  return {
	    content: val,
	    name: val
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

	var createCompounder = __webpack_require__(578),
	    upperFirst = __webpack_require__(586);

	/**
	 * Converts `string` to
	 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.1.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the start cased string.
	 * @example
	 *
	 * _.startCase('--foo-bar--');
	 * // => 'Foo Bar'
	 *
	 * _.startCase('fooBar');
	 * // => 'Foo Bar'
	 *
	 * _.startCase('__FOO_BAR__');
	 * // => 'FOO BAR'
	 */
	var startCase = createCompounder(function(result, word, index) {
	  return result + (index ? ' ' : '') + upperFirst(word);
	});

	module.exports = startCase;


/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayReduce = __webpack_require__(545),
	    deburr = __webpack_require__(579),
	    words = __webpack_require__(582);

	/** Used to compose unicode capture groups. */
	var rsApos = "['\u2019]";

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, 'g');

	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder(callback) {
	  return function(string) {
	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}

	module.exports = createCompounder;


/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

	var deburrLetter = __webpack_require__(580),
	    toString = __webpack_require__(219);

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to compose unicode character classes. */
	var rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

	/** Used to compose unicode capture groups. */
	var rsCombo = '[' + rsComboRange + ']';

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo, 'g');

	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr(string) {
	  string = toString(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}

	module.exports = deburr;


/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

	var basePropertyOf = __webpack_require__(581);

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C',  '\xe7': 'c',
	  '\xd0': 'D',  '\xf0': 'd',
	  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N',  '\xf1': 'n',
	  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	  '\u0134': 'J',  '\u0135': 'j',
	  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	  '\u0174': 'W',  '\u0175': 'w',
	  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	  '\u0132': 'IJ', '\u0133': 'ij',
	  '\u0152': 'Oe', '\u0153': 'oe',
	  '\u0149': "'n", '\u017f': 's'
	};

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter = basePropertyOf(deburredLetters);

	module.exports = deburrLetter;


/***/ }),
/* 581 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
	  return function(key) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = basePropertyOf;


/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

	var asciiWords = __webpack_require__(583),
	    hasUnicodeWord = __webpack_require__(584),
	    toString = __webpack_require__(219),
	    unicodeWords = __webpack_require__(585);

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern, guard) {
	  string = toString(string);
	  pattern = guard ? undefined : pattern;

	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}

	module.exports = words;


/***/ }),
/* 583 */
/***/ (function(module, exports) {

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords(string) {
	  return string.match(reAsciiWord) || [];
	}

	module.exports = asciiWords;


/***/ }),
/* 584 */
/***/ (function(module, exports) {

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord(string) {
	  return reHasUnicodeWord.test(string);
	}

	module.exports = hasUnicodeWord;


/***/ }),
/* 585 */
/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsDingbatRange = '\\u2700-\\u27bf',
	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	    rsPunctuationRange = '\\u2000-\\u206f',
	    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	    rsVarRange = '\\ufe0e\\ufe0f',
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos = "['\u2019]",
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo = '[' + rsComboRange + ']',
	    rsDigits = '\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([
	  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	  rsUpper + '+' + rsOptContrUpper,
	  rsOrdUpper,
	  rsOrdLower,
	  rsDigits,
	  rsEmoji
	].join('|'), 'g');

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords(string) {
	  return string.match(reUnicodeWord) || [];
	}

	module.exports = unicodeWords;


/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

	var createCaseFirst = __webpack_require__(587);

	/**
	 * Converts the first character of `string` to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.upperFirst('fred');
	 * // => 'Fred'
	 *
	 * _.upperFirst('FRED');
	 * // => 'FRED'
	 */
	var upperFirst = createCaseFirst('toUpperCase');

	module.exports = upperFirst;


/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

	var castSlice = __webpack_require__(433),
	    hasUnicode = __webpack_require__(438),
	    stringToArray = __webpack_require__(436),
	    toString = __webpack_require__(219);

	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */
	function createCaseFirst(methodName) {
	  return function(string) {
	    string = toString(string);

	    var strSymbols = hasUnicode(string)
	      ? stringToArray(string)
	      : undefined;

	    var chr = strSymbols
	      ? strSymbols[0]
	      : string.charAt(0);

	    var trailing = strSymbols
	      ? castSlice(strSymbols, 1).join('')
	      : string.slice(1);

	    return chr[methodName]() + trailing;
	  };
	}

	module.exports = createCaseFirst;


/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A menu can contain a sub menu.
	 */
	function MenuMenu(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      position = props.position;
	  var classes = (0, _classnames.default)(position, 'menu', className);
	  var rest = (0, _lib.getUnhandledProps)(MenuMenu, props);
	  var ElementType = (0, _lib.getElementType)(MenuMenu, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	MenuMenu.handledProps = ["as", "children", "className", "content", "position"];
	MenuMenu.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A sub menu can take left or right position. */
	  position: _propTypes.default.oneOf(['left', 'right'])
	} : {};
	var _default = MenuMenu;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _keyboardKey = _interopRequireDefault(__webpack_require__(530));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = __webpack_require__(4);

	var _lib = __webpack_require__(242);

	var _MenuItem = _interopRequireDefault(__webpack_require__(576));

	/**
	 * An item of a pagination.
	 */
	var PaginationItem =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(PaginationItem, _Component);

	  function PaginationItem() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, PaginationItem);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PaginationItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var type = _this.props.type;
	      if (type !== 'ellipsisItem') (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleKeyDown", function (e) {
	      (0, _invoke2.default)(_this.props, 'onKeyDown', e, _this.props);
	      if (_keyboardKey.default.getCode(e) === _keyboardKey.default.Enter) (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleOverrides", function () {
	      return {
	        onClick: _this.handleClick,
	        onKeyDown: _this.handleKeyDown
	      };
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(PaginationItem, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          type = _this$props.type;
	      var disabled = this.props.disabled || type === 'ellipsisItem';
	      return _MenuItem.default.create(this.props, {
	        defaultProps: {
	          active: active,
	          'aria-current': active,
	          'aria-disabled': disabled,
	          disabled: disabled,
	          onClick: this.handleClick,
	          onKeyDown: this.handleKeyDown,
	          tabIndex: disabled ? -1 : 0
	        },
	        overrideProps: this.handleOverrides
	      });
	    }
	  }]);
	  return PaginationItem;
	}(_react.Component);

	(0, _defineProperty2.default)(PaginationItem, "handledProps", ["active", "disabled", "onClick", "onKeyDown", "type"]);
	PaginationItem.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** A pagination item can be active. */
	  active: _propTypes.default.bool,

	  /** A pagination item can be disabled. */
	  disabled: _propTypes.default.bool,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /**
	   * Called on key down.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onKeyDown: _propTypes.default.func,

	  /** A pagination should have a type. */
	  type: _propTypes.default.oneOf(['ellipsisItem', 'firstItem', 'prevItem', 'pageItem', 'nextItem', 'lastItem'])
	} : {};
	PaginationItem.create = (0, _lib.createShorthandFactory)(PaginationItem, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = PaginationItem;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Radio.default;
	  }
	});

	var _Radio = _interopRequireDefault(__webpack_require__(591));

/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Checkbox = _interopRequireDefault(__webpack_require__(592));

	/**
	 * A Radio is sugar for <Checkbox radio />.
	 * Useful for exclusive groups of sliders or toggles.
	 * @see Checkbox
	 * @see Form
	 */
	function Radio(props) {
	  var slider = props.slider,
	      toggle = props.toggle,
	      type = props.type;
	  var rest = (0, _lib.getUnhandledProps)(Radio, props); // const ElementType = getElementType(Radio, props)
	  // radio, slider, toggle are exclusive
	  // use an undefined radio if slider or toggle are present

	  var radio = !(slider || toggle) || undefined;
	  return _react.default.createElement(_Checkbox.default, (0, _extends2.default)({}, rest, {
	    type: type,
	    radio: radio,
	    slider: slider,
	    toggle: toggle
	  }));
	}

	Radio.handledProps = ["slider", "toggle", "type"];
	Radio.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Format to emphasize the current selection state. */
	  slider: _Checkbox.default.propTypes.slider,

	  /** Format to show an on or off choice. */
	  toggle: _Checkbox.default.propTypes.toggle,

	  /** HTML input type, either checkbox or radio. */
	  type: _Checkbox.default.propTypes.type
	} : {};
	Radio.defaultProps = {
	  type: 'radio'
	};
	var _default = Radio;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Checkbox.default;
	  }
	});

	var _Checkbox = _interopRequireDefault(__webpack_require__(593));

/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _slicedToArray2 = _interopRequireDefault(__webpack_require__(334));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A checkbox allows a user to select a value from a small set of options, often binary.
	 * @see Form
	 * @see Radio
	 */
	var Checkbox =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Checkbox, _Component);

	  function Checkbox() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Checkbox);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Checkbox)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "canToggle", function () {
	      var _this$props = _this.props,
	          disabled = _this$props.disabled,
	          radio = _this$props.radio,
	          readOnly = _this$props.readOnly;
	      var checked = _this.state.checked;
	      return !disabled && !readOnly && !(radio && checked);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeTabIndex", function () {
	      var _this$props2 = _this.props,
	          disabled = _this$props2.disabled,
	          tabIndex = _this$props2.tabIndex;
	      if (!(0, _isNil2.default)(tabIndex)) return tabIndex;
	      return disabled ? -1 : 0;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleInputRef", function (c) {
	      return _this.inputRef = c;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleChange", function (e, fromMouseUp) {
	      var id = _this.props.id;
	      var _this$state = _this.state,
	          checked = _this$state.checked,
	          indeterminate = _this$state.indeterminate;
	      if (!_this.canToggle()) return;
	      if (fromMouseUp && !(0, _isNil2.default)(id)) return;
	      (0, _invoke2.default)(_this.props, 'onClick', e, (0, _objectSpread2.default)({}, _this.props, {
	        checked: !checked,
	        indeterminate: !!indeterminate
	      }));
	      (0, _invoke2.default)(_this.props, 'onChange', e, (0, _objectSpread2.default)({}, _this.props, {
	        checked: !checked,
	        indeterminate: false
	      }));

	      _this.trySetState({
	        checked: !checked,
	        indeterminate: false
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      // We handle onClick in onChange if it is provided, to preserve proper call order.
	      // Don't call onClick twice if their is already an onChange handler, it calls onClick.
	      // https://github.com/Semantic-Org/Semantic-UI-React/pull/2748
	      var _this$props3 = _this.props,
	          onChange = _this$props3.onChange,
	          onClick = _this$props3.onClick;
	      if (onChange || !onClick) return;
	      onClick(e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseDown", function (e) {
	      var _this$state2 = _this.state,
	          checked = _this$state2.checked,
	          indeterminate = _this$state2.indeterminate;
	      (0, _invoke2.default)(_this.props, 'onMouseDown', e, (0, _objectSpread2.default)({}, _this.props, {
	        checked: !!checked,
	        indeterminate: !!indeterminate
	      }));
	      (0, _invoke2.default)(_this.inputRef, 'focus');
	      e.preventDefault();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseUp", function (e) {
	      var _this$state3 = _this.state,
	          checked = _this$state3.checked,
	          indeterminate = _this$state3.indeterminate;
	      (0, _invoke2.default)(_this.props, 'onMouseUp', e, (0, _objectSpread2.default)({}, _this.props, {
	        checked: !!checked,
	        indeterminate: !!indeterminate
	      }));

	      _this.handleChange(e, true);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setIndeterminate", function () {
	      var indeterminate = _this.state.indeterminate;
	      if (_this.inputRef) _this.inputRef.indeterminate = !!indeterminate;
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Checkbox, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.setIndeterminate();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      this.setIndeterminate();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props4 = this.props,
	          className = _this$props4.className,
	          disabled = _this$props4.disabled,
	          label = _this$props4.label,
	          id = _this$props4.id,
	          name = _this$props4.name,
	          radio = _this$props4.radio,
	          readOnly = _this$props4.readOnly,
	          slider = _this$props4.slider,
	          toggle = _this$props4.toggle,
	          type = _this$props4.type,
	          value = _this$props4.value;
	      var _this$state4 = this.state,
	          checked = _this$state4.checked,
	          indeterminate = _this$state4.indeterminate;
	      var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(checked, 'checked'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(indeterminate, 'indeterminate'), // auto apply fitted class to compact white space when there is no label
	      // https://semantic-ui.com/modules/checkbox.html#fitted
	      (0, _lib.useKeyOnly)((0, _isNil2.default)(label), 'fitted'), (0, _lib.useKeyOnly)(radio, 'radio'), (0, _lib.useKeyOnly)(readOnly, 'read-only'), (0, _lib.useKeyOnly)(slider, 'slider'), (0, _lib.useKeyOnly)(toggle, 'toggle'), 'checkbox', className);
	      var unhandled = (0, _lib.getUnhandledProps)(Checkbox, this.props);
	      var ElementType = (0, _lib.getElementType)(Checkbox, this.props);

	      var _partitionHTMLProps = (0, _lib.partitionHTMLProps)(unhandled, {
	        htmlProps: _lib.htmlInputAttrs
	      }),
	          _partitionHTMLProps2 = (0, _slicedToArray2.default)(_partitionHTMLProps, 2),
	          htmlInputProps = _partitionHTMLProps2[0],
	          rest = _partitionHTMLProps2[1];

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        onChange: this.handleChange,
	        onClick: this.handleClick,
	        onMouseDown: this.handleMouseDown,
	        onMouseUp: this.handleMouseUp
	      }), _react.default.createElement("input", (0, _extends2.default)({}, htmlInputProps, {
	        checked: checked,
	        className: "hidden",
	        disabled: disabled,
	        id: id,
	        name: name,
	        readOnly: true,
	        ref: this.handleInputRef,
	        tabIndex: this.computeTabIndex(),
	        type: type,
	        value: value
	      })), (0, _lib.createHTMLLabel)(label, {
	        defaultProps: {
	          htmlFor: id
	        },
	        autoGenerateKey: false
	      }) || _react.default.createElement("label", {
	        htmlFor: id
	      }));
	    }
	  }]);
	  return Checkbox;
	}(_lib.AutoControlledComponent);

	exports.default = Checkbox;
	(0, _defineProperty2.default)(Checkbox, "defaultProps", {
	  type: 'checkbox'
	});
	(0, _defineProperty2.default)(Checkbox, "autoControlledProps", ['checked', 'indeterminate']);
	(0, _defineProperty2.default)(Checkbox, "handledProps", ["as", "checked", "className", "defaultChecked", "defaultIndeterminate", "disabled", "fitted", "id", "indeterminate", "label", "name", "onChange", "onClick", "onMouseDown", "onMouseUp", "radio", "readOnly", "slider", "tabIndex", "toggle", "type", "value"]);
	Checkbox.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Whether or not checkbox is checked. */
	  checked: _propTypes.default.bool,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** The initial value of checked. */
	  defaultChecked: _propTypes.default.bool,

	  /** Whether or not checkbox is indeterminate. */
	  defaultIndeterminate: _propTypes.default.bool,

	  /** A checkbox can appear disabled and be unable to change states */
	  disabled: _propTypes.default.bool,

	  /** Removes padding for a label. Auto applied when there is no label. */
	  fitted: _propTypes.default.bool,

	  /** A unique identifier. */
	  id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** Whether or not checkbox is indeterminate. */
	  indeterminate: _propTypes.default.bool,

	  /** The text of the associated label element. */
	  label: _lib.customPropTypes.itemShorthand,

	  /** The HTML input name. */
	  name: _propTypes.default.string,

	  /**
	   * Called when the user attempts to change the checked state.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and proposed checked/indeterminate state.
	   */
	  onChange: _propTypes.default.func,

	  /**
	   * Called when the checkbox or label is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and current checked/indeterminate state.
	   */
	  onClick: _propTypes.default.func,

	  /**
	   * Called when the user presses down on the mouse.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and current checked/indeterminate state.
	   */
	  onMouseDown: _propTypes.default.func,

	  /**
	   * Called when the user releases the mouse.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and current checked/indeterminate state.
	   */
	  onMouseUp: _propTypes.default.func,

	  /** Format as a radio element. This means it is an exclusive option. */
	  radio: _lib.customPropTypes.every([_propTypes.default.bool, _lib.customPropTypes.disallow(['slider', 'toggle'])]),

	  /** A checkbox can be read-only and unable to change states. */
	  readOnly: _propTypes.default.bool,

	  /** Format to emphasize the current selection state. */
	  slider: _lib.customPropTypes.every([_propTypes.default.bool, _lib.customPropTypes.disallow(['radio', 'toggle'])]),

	  /** A checkbox can receive focus. */
	  tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** Format to show an on or off choice. */
	  toggle: _lib.customPropTypes.every([_propTypes.default.bool, _lib.customPropTypes.disallow(['radio', 'slider'])]),

	  /** HTML input type, either checkbox or radio. */
	  type: _propTypes.default.oneOf(['checkbox', 'radio']),

	  /** The HTML input value. */
	  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Responsive.default;
	  }
	});

	var _Responsive = _interopRequireDefault(__webpack_require__(595));

/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _isVisible = _interopRequireDefault(__webpack_require__(596));

	/**
	 * Responsive can control visibility of content.
	 */
	var Responsive =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Responsive, _Component);

	  function Responsive() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Responsive);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Responsive)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
	      visible: true
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleResize", function (e) {
	      if (_this.ticking) return;
	      _this.ticking = true;
	      _this.frameId = requestAnimationFrame(function () {
	        return _this.handleUpdate(e);
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleUpdate", function (e) {
	      _this.ticking = false;
	      var visible = _this.state.visible;
	      var width = (0, _invoke2.default)(_this.props, 'getWidth');
	      var nextVisible = (0, _isVisible.default)(width, _this.props);
	      if (visible !== nextVisible) _this.setState({
	        visible: nextVisible
	      });
	      (0, _invoke2.default)(_this.props, 'onUpdate', e, (0, _objectSpread2.default)({}, _this.props, {
	        width: width
	      }));
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Responsive, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var fireOnMount = this.props.fireOnMount;

	      _lib.eventStack.sub('resize', this.handleResize, {
	        target: 'window'
	      });

	      if (fireOnMount) this.handleUpdate();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      _lib.eventStack.unsub('resize', this.handleResize, {
	        target: 'window'
	      });

	      cancelAnimationFrame(this.frameId);
	    } // ----------------------------------------
	    // Event handlers
	    // ----------------------------------------

	  }, {
	    key: "render",
	    // ----------------------------------------
	    // Render
	    // ----------------------------------------
	    value: function render() {
	      var children = this.props.children;
	      var visible = this.state.visible;
	      var ElementType = (0, _lib.getElementType)(Responsive, this.props);
	      var rest = (0, _lib.getUnhandledProps)(Responsive, this.props);
	      if (visible) return _react.default.createElement(ElementType, rest, children);
	      return null;
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(props) {
	      var width = (0, _invoke2.default)(props, 'getWidth');
	      var visible = (0, _isVisible.default)(width, props);
	      return {
	        visible: visible
	      };
	    }
	  }]);
	  return Responsive;
	}(_react.Component);

	exports.default = Responsive;
	(0, _defineProperty2.default)(Responsive, "defaultProps", {
	  getWidth: function getWidth() {
	    return (0, _lib.isBrowser)() ? window.innerWidth : 0;
	  }
	});
	(0, _defineProperty2.default)(Responsive, "onlyMobile", {
	  minWidth: 320,
	  maxWidth: 767
	});
	(0, _defineProperty2.default)(Responsive, "onlyTablet", {
	  minWidth: 768,
	  maxWidth: 991
	});
	(0, _defineProperty2.default)(Responsive, "onlyComputer", {
	  minWidth: 992
	});
	(0, _defineProperty2.default)(Responsive, "onlyLargeScreen", {
	  minWidth: 1200,
	  maxWidth: 1919
	});
	(0, _defineProperty2.default)(Responsive, "onlyWidescreen", {
	  minWidth: 1920
	});
	(0, _defineProperty2.default)(Responsive, "handledProps", ["as", "children", "fireOnMount", "getWidth", "maxWidth", "minWidth", "onUpdate"]);
	Responsive.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Fires callbacks immediately after mount. */
	  fireOnMount: _propTypes.default.bool,

	  /**
	   * Called to get width of screen. Defaults to using `window.innerWidth` when in a browser;
	   * otherwise, assumes a width of 0.
	   */
	  getWidth: _propTypes.default.func,

	  /** The maximum width at which content will be displayed. */
	  maxWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** The minimum width at which content will be displayed. */
	  minWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /**
	   * Called on update.
	   *
	   * @param {SyntheticEvent} event - The React SyntheticEvent object
	   * @param {object} data - All props and the event value.
	   */
	  onUpdate: _propTypes.default.func
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var fitsMaxWidth = function fitsMaxWidth(width, maxWidth) {
	  return (0, _isNil2.default)(maxWidth) ? true : width <= maxWidth;
	};

	var fitsMinWidth = function fitsMinWidth(width, minWidth) {
	  return (0, _isNil2.default)(minWidth) ? true : width >= minWidth;
	};

	var isVisible = function isVisible(width, _ref) {
	  var maxWidth = _ref.maxWidth,
	      minWidth = _ref.minWidth;
	  return fitsMinWidth(width, minWidth) && fitsMaxWidth(width, maxWidth);
	};

	var _default = isVisible;
	exports.default = _default;

/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Select.default;
	  }
	});

	var _Select = _interopRequireDefault(__webpack_require__(598));

/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _Dropdown = _interopRequireDefault(__webpack_require__(599));

	/**
	 * A Select is sugar for <Dropdown selection />.
	 * @see Dropdown
	 * @see Form
	 */
	function Select(props) {
	  return _react.default.createElement(_Dropdown.default, (0, _extends2.default)({}, props, {
	    selection: true
	  }));
	}

	Select.handledProps = ["options"];
	Select.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Array of Dropdown.Item props e.g. `{ text: '', value: '' }` */
	  options: _propTypes.default.arrayOf(_propTypes.default.shape(_Dropdown.default.Item.propTypes)).isRequired
	} : {};
	Select.Divider = _Dropdown.default.Divider;
	Select.Header = _Dropdown.default.Header;
	Select.Item = _Dropdown.default.Item;
	Select.Menu = _Dropdown.default.Menu;
	var _default = Select;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Dropdown.default;
	  }
	});

	var _Dropdown = _interopRequireDefault(__webpack_require__(600));

/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _get3 = _interopRequireDefault(__webpack_require__(601));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _compact2 = _interopRequireDefault(__webpack_require__(451));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _every2 = _interopRequireDefault(__webpack_require__(603));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _findIndex2 = _interopRequireDefault(__webpack_require__(346));

	var _find2 = _interopRequireDefault(__webpack_require__(344));

	var _reduce2 = _interopRequireDefault(__webpack_require__(544));

	var _some2 = _interopRequireDefault(__webpack_require__(347));

	var _escapeRegExp2 = _interopRequireDefault(__webpack_require__(606));

	var _deburr2 = _interopRequireDefault(__webpack_require__(579));

	var _isFunction2 = _interopRequireDefault(__webpack_require__(194));

	var _filter2 = _interopRequireDefault(__webpack_require__(269));

	var _pick2 = _interopRequireDefault(__webpack_require__(443));

	var _dropRight2 = _interopRequireDefault(__webpack_require__(607));

	var _isEmpty2 = _interopRequireDefault(__webpack_require__(325));

	var _size2 = _interopRequireDefault(__webpack_require__(608));

	var _union2 = _interopRequireDefault(__webpack_require__(612));

	var _get4 = _interopRequireDefault(__webpack_require__(319));

	var _includes2 = _interopRequireDefault(__webpack_require__(496));

	var _isUndefined2 = _interopRequireDefault(__webpack_require__(263));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _isEqual2 = _interopRequireDefault(__webpack_require__(517));

	var _has2 = _interopRequireDefault(__webpack_require__(177));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _keyboardKey = _interopRequireDefault(__webpack_require__(530));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _shallowequal = _interopRequireDefault(__webpack_require__(613));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	var _Label = _interopRequireDefault(__webpack_require__(614));

	var _DropdownDivider = _interopRequireDefault(__webpack_require__(615));

	var _DropdownItem = _interopRequireDefault(__webpack_require__(616));

	var _DropdownHeader = _interopRequireDefault(__webpack_require__(620));

	var _DropdownMenu = _interopRequireDefault(__webpack_require__(621));

	var _DropdownSearchInput = _interopRequireDefault(__webpack_require__(622));

	var getKeyOrValue = function getKeyOrValue(key, value) {
	  return (0, _isNil2.default)(key) ? value : key;
	};
	/**
	 * A dropdown allows a user to select a value from a series of options.
	 * @see Form
	 * @see Select
	 * @see Menu
	 */


	var Dropdown =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Dropdown, _Component);

	  function Dropdown() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Dropdown);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleChange", function (e, value) {
	      (0, _invoke2.default)(_this.props, 'onChange', e, (0, _objectSpread2.default)({}, _this.props, {
	        value: value
	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "closeOnChange", function (e) {
	      var _this$props = _this.props,
	          closeOnChange = _this$props.closeOnChange,
	          multiple = _this$props.multiple;
	      var shouldClose = (0, _isUndefined2.default)(closeOnChange) ? !multiple : closeOnChange;
	      if (shouldClose) _this.close(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "closeOnEscape", function (e) {
	      if (_keyboardKey.default.getCode(e) !== _keyboardKey.default.Escape) return;
	      e.preventDefault();

	      _this.close();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "moveSelectionOnKeyDown", function (e) {
	      var _moves;

	      var _this$props2 = _this.props,
	          multiple = _this$props2.multiple,
	          selectOnNavigation = _this$props2.selectOnNavigation;
	      var moves = (_moves = {}, (0, _defineProperty2.default)(_moves, _keyboardKey.default.ArrowDown, 1), (0, _defineProperty2.default)(_moves, _keyboardKey.default.ArrowUp, -1), _moves);

	      var move = moves[_keyboardKey.default.getCode(e)];

	      if (move === undefined) return;
	      e.preventDefault();

	      _this.moveSelectionBy(move);

	      if (!multiple && selectOnNavigation) _this.makeSelectedItemActive(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "openOnSpace", function (e) {
	      if (_keyboardKey.default.getCode(e) !== _keyboardKey.default.Spacebar) return;
	      if (_this.state.open) return;
	      e.preventDefault();

	      _this.open(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "openOnArrow", function (e) {
	      var code = _keyboardKey.default.getCode(e);

	      if (!(0, _includes2.default)([_keyboardKey.default.ArrowDown, _keyboardKey.default.ArrowUp], code)) return;
	      if (_this.state.open) return;
	      e.preventDefault();

	      _this.open(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "makeSelectedItemActive", function (e) {
	      var open = _this.state.open;
	      var multiple = _this.props.multiple;

	      var item = _this.getSelectedItem();

	      var value = (0, _get4.default)(item, 'value'); // prevent selecting null if there was no selected item value
	      // prevent selecting duplicate items when the dropdown is closed

	      if ((0, _isNil2.default)(value) || !open) return; // state value may be undefined

	      var newValue = multiple ? (0, _union2.default)(_this.state.value, [value]) : value; // notify the onChange prop that the user is trying to change value

	      _this.setValue(newValue);

	      _this.setSelectedIndex(newValue);

	      _this.handleChange(e, newValue); // Heads up! This event handler should be called after `onChange`
	      // Notify the onAddItem prop if this is a new value


	      if (item['data-additional']) (0, _invoke2.default)(_this.props, 'onAddItem', e, (0, _objectSpread2.default)({}, _this.props, {
	        value: value
	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "selectItemOnEnter", function (e) {
	      var search = _this.props.search;
	      if (_keyboardKey.default.getCode(e) !== _keyboardKey.default.Enter) return;
	      e.preventDefault();
	      var optionSize = (0, _size2.default)(_this.getMenuOptions());
	      if (search && optionSize === 0) return;

	      _this.makeSelectedItemActive(e);

	      _this.closeOnChange(e);

	      _this.clearSearchQuery();

	      if (search && _this.searchRef) _this.searchRef.focus();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "removeItemOnBackspace", function (e) {
	      var _this$props3 = _this.props,
	          multiple = _this$props3.multiple,
	          search = _this$props3.search;
	      var _this$state = _this.state,
	          searchQuery = _this$state.searchQuery,
	          value = _this$state.value;
	      if (_keyboardKey.default.getCode(e) !== _keyboardKey.default.Backspace) return;
	      if (searchQuery || !search || !multiple || (0, _isEmpty2.default)(value)) return;
	      e.preventDefault(); // remove most recent value

	      var newValue = (0, _dropRight2.default)(value);

	      _this.setValue(newValue);

	      _this.setSelectedIndex(newValue);

	      _this.handleChange(e, newValue);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "closeOnDocumentClick", function (e) {
	      if (!_this.props.closeOnBlur) return; // If event happened in the dropdown, ignore it

	      if (_this.ref && (0, _lib.doesNodeContainClick)(_this.ref, e)) return;

	      _this.close();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "attachHandlersOnOpen", function () {
	      _lib.eventStack.sub('keydown', [_this.closeOnEscape, _this.moveSelectionOnKeyDown, _this.selectItemOnEnter, _this.removeItemOnBackspace]);

	      _lib.eventStack.sub('click', _this.closeOnDocumentClick);

	      _lib.eventStack.unsub('keydown', [_this.openOnArrow, _this.openOnSpace]);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseDown", function (e) {
	      _this.isMouseDown = true;

	      _lib.eventStack.sub('mouseup', _this.handleDocumentMouseUp);

	      (0, _invoke2.default)(_this.props, 'onMouseDown', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleDocumentMouseUp", function () {
	      _this.isMouseDown = false;

	      _lib.eventStack.unsub('mouseup', _this.handleDocumentMouseUp);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var _this$props4 = _this.props,
	          minCharacters = _this$props4.minCharacters,
	          search = _this$props4.search;
	      var _this$state2 = _this.state,
	          open = _this$state2.open,
	          searchQuery = _this$state2.searchQuery;
	      (0, _invoke2.default)(_this.props, 'onClick', e, _this.props); // prevent closeOnDocumentClick()

	      e.stopPropagation();
	      if (!search) return _this.toggle(e);
	      if (open) return;

	      if (searchQuery.length >= minCharacters || minCharacters === 1) {
	        _this.open(e);

	        return;
	      }

	      if (_this.searchRef) _this.searchRef.focus();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleIconClick", function (e) {
	      var clearable = _this.props.clearable;

	      var hasValue = _this.hasValue();

	      (0, _invoke2.default)(_this.props, 'onClick', e, _this.props); // prevent handleClick()

	      e.stopPropagation();

	      if (clearable && hasValue) {
	        _this.clearValue(e);
	      } else {
	        _this.toggle(e);
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleItemClick", function (e, item) {
	      var _this$props5 = _this.props,
	          multiple = _this$props5.multiple,
	          search = _this$props5.search;
	      var value = item.value; // prevent toggle() in handleClick()

	      e.stopPropagation(); // prevent closeOnDocumentClick() if multiple or item is disabled

	      if (multiple || item.disabled) e.nativeEvent.stopImmediatePropagation();
	      if (item.disabled) return;
	      var isAdditionItem = item['data-additional'];
	      var newValue = multiple ? (0, _union2.default)(_this.state.value, [value]) : value; // notify the onChange prop that the user is trying to change value

	      _this.setValue(newValue);

	      _this.setSelectedIndex(value);

	      _this.clearSearchQuery();

	      _this.handleChange(e, newValue);

	      _this.closeOnChange(e); // Heads up! This event handler should be called after `onChange`
	      // Notify the onAddItem prop if this is a new value


	      if (isAdditionItem) (0, _invoke2.default)(_this.props, 'onAddItem', e, (0, _objectSpread2.default)({}, _this.props, {
	        value: value
	      }));
	      if (multiple && search && _this.searchRef) _this.searchRef.focus();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleFocus", function (e) {
	      var focus = _this.state.focus;
	      if (focus) return;
	      (0, _invoke2.default)(_this.props, 'onFocus', e, _this.props);

	      _this.setState({
	        focus: true
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleBlur", function (e) {
	      // Heads up! Don't remove this.
	      // https://github.com/Semantic-Org/Semantic-UI-React/issues/1315
	      var currentTarget = (0, _get4.default)(e, 'currentTarget');
	      if (currentTarget && currentTarget.contains(document.activeElement)) return;
	      var _this$props6 = _this.props,
	          closeOnBlur = _this$props6.closeOnBlur,
	          multiple = _this$props6.multiple,
	          selectOnBlur = _this$props6.selectOnBlur; // do not "blur" when the mouse is down inside of the Dropdown

	      if (_this.isMouseDown) return;
	      (0, _invoke2.default)(_this.props, 'onBlur', e, _this.props);

	      if (selectOnBlur && !multiple) {
	        _this.makeSelectedItemActive(e);

	        if (closeOnBlur) _this.close();
	      }

	      _this.setState({
	        focus: false
	      });

	      _this.clearSearchQuery();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleSearchChange", function (e, _ref) {
	      var value = _ref.value;
	      // prevent propagating to this.props.onChange()
	      e.stopPropagation();
	      var minCharacters = _this.props.minCharacters;
	      var open = _this.state.open;
	      var newQuery = value;
	      (0, _invoke2.default)(_this.props, 'onSearchChange', e, (0, _objectSpread2.default)({}, _this.props, {
	        searchQuery: newQuery
	      }));

	      _this.trySetState({
	        searchQuery: newQuery
	      }, {
	        selectedIndex: 0
	      }); // open search dropdown on search query


	      if (!open && newQuery.length >= minCharacters) {
	        _this.open();

	        return;
	      } // close search dropdown if search query is too small


	      if (open && minCharacters !== 1 && newQuery.length < minCharacters) _this.close();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getKeyAndValues", function (options) {
	      return options ? options.map(function (option) {
	        return (0, _pick2.default)(option, ['key', 'value']);
	      }) : options;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getMenuOptions", function () {
	      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.value;
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props.options;
	      var _this$props7 = _this.props,
	          additionLabel = _this$props7.additionLabel,
	          additionPosition = _this$props7.additionPosition,
	          allowAdditions = _this$props7.allowAdditions,
	          deburr = _this$props7.deburr,
	          multiple = _this$props7.multiple,
	          search = _this$props7.search;
	      var searchQuery = _this.state.searchQuery;
	      var filteredOptions = options; // filter out active options

	      if (multiple) {
	        filteredOptions = (0, _filter2.default)(filteredOptions, function (opt) {
	          return !(0, _includes2.default)(value, opt.value);
	        });
	      } // filter by search query


	      if (search && searchQuery) {
	        if ((0, _isFunction2.default)(search)) {
	          filteredOptions = search(filteredOptions, searchQuery);
	        } else {
	          // remove diacritics on search input and options, if deburr prop is set
	          var strippedQuery = deburr ? (0, _deburr2.default)(searchQuery) : searchQuery;
	          var re = new RegExp((0, _escapeRegExp2.default)(strippedQuery), 'i');
	          filteredOptions = (0, _filter2.default)(filteredOptions, function (opt) {
	            return re.test(deburr ? (0, _deburr2.default)(opt.text) : opt.text);
	          });
	        }
	      } // insert the "add" item


	      if (allowAdditions && search && searchQuery && !(0, _some2.default)(filteredOptions, {
	        text: searchQuery
	      })) {
	        var additionLabelElement = _react.default.isValidElement(additionLabel) ? _react.default.cloneElement(additionLabel, {
	          key: 'addition-label'
	        }) : additionLabel || '';
	        var addItem = {
	          key: 'addition',
	          // by using an array, we can pass multiple elements, but when doing so
	          // we must specify a `key` for React to know which one is which
	          text: [additionLabelElement, _react.default.createElement("b", {
	            key: "addition-query"
	          }, searchQuery)],
	          value: searchQuery,
	          className: 'addition',
	          'data-additional': true
	        };
	        if (additionPosition === 'top') filteredOptions.unshift(addItem);else filteredOptions.push(addItem);
	      }

	      return filteredOptions;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getSelectedItem", function () {
	      var selectedIndex = _this.state.selectedIndex;

	      var options = _this.getMenuOptions();

	      return (0, _get4.default)(options, "[".concat(selectedIndex, "]"));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getEnabledIndices", function (givenOptions) {
	      var options = givenOptions || _this.getMenuOptions();

	      return (0, _reduce2.default)(options, function (memo, item, index) {
	        if (!item.disabled) memo.push(index);
	        return memo;
	      }, []);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getItemByValue", function (value) {
	      var options = _this.props.options;
	      return (0, _find2.default)(options, {
	        value: value
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getMenuItemIndexByValue", function (value, givenOptions) {
	      var options = givenOptions || _this.getMenuOptions();

	      return (0, _findIndex2.default)(options, ['value', value]);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getDropdownAriaOptions", function () {
	      var _this$props8 = _this.props,
	          loading = _this$props8.loading,
	          disabled = _this$props8.disabled,
	          search = _this$props8.search,
	          multiple = _this$props8.multiple;
	      var open = _this.state.open;
	      var ariaOptions = {
	        role: search ? 'combobox' : 'listbox',
	        'aria-busy': loading,
	        'aria-disabled': disabled,
	        'aria-expanded': !!open
	      };

	      if (ariaOptions.role === 'listbox') {
	        ariaOptions['aria-multiselectable'] = multiple;
	      }

	      return ariaOptions;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "clearSearchQuery", function () {
	      _this.trySetState({
	        searchQuery: ''
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setValue", function (value) {
	      _this.trySetState({
	        value: value
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setSelectedIndex", function () {
	      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.value;
	      var optionsProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props.options;
	      var multiple = _this.props.multiple;
	      var selectedIndex = _this.state.selectedIndex;

	      var options = _this.getMenuOptions(value, optionsProps);

	      var enabledIndicies = _this.getEnabledIndices(options);

	      var newSelectedIndex; // update the selected index

	      if (!selectedIndex || selectedIndex < 0) {
	        var firstIndex = enabledIndicies[0]; // Select the currently active item, if none, use the first item.
	        // Multiple selects remove active items from the list,
	        // their initial selected index should be 0.

	        newSelectedIndex = multiple ? firstIndex : _this.getMenuItemIndexByValue(value, options) || enabledIndicies[0];
	      } else if (multiple) {
	        // multiple selects remove options from the menu as they are made active
	        // keep the selected index within range of the remaining items
	        if (selectedIndex >= options.length - 1) {
	          newSelectedIndex = enabledIndicies[enabledIndicies.length - 1];
	        }
	      } else {
	        var activeIndex = _this.getMenuItemIndexByValue(value, options); // regular selects can only have one active item
	        // set the selected index to the currently active item


	        newSelectedIndex = (0, _includes2.default)(enabledIndicies, activeIndex) ? activeIndex : undefined;
	      }

	      if (!newSelectedIndex || newSelectedIndex < 0) {
	        newSelectedIndex = enabledIndicies[0];
	      }

	      _this.setState({
	        selectedIndex: newSelectedIndex
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleLabelClick", function (e, labelProps) {
	      // prevent focusing search input on click
	      e.stopPropagation();

	      _this.setState({
	        selectedLabel: labelProps.value
	      });

	      (0, _invoke2.default)(_this.props, 'onLabelClick', e, labelProps);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleLabelRemove", function (e, labelProps) {
	      // prevent focusing search input on click
	      e.stopPropagation();
	      var value = _this.state.value;
	      var newValue = (0, _without2.default)(value, labelProps.value);

	      _this.setValue(newValue);

	      _this.setSelectedIndex(newValue);

	      _this.handleChange(e, newValue);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "moveSelectionBy", function (offset) {
	      var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.state.selectedIndex;

	      var options = _this.getMenuOptions(); // Prevent infinite loop
	      // TODO: remove left part of condition after children API will be removed


	      if (options === undefined || (0, _every2.default)(options, 'disabled')) return;
	      var lastIndex = options.length - 1;
	      var wrapSelection = _this.props.wrapSelection; // next is after last, wrap to beginning
	      // next is before first, wrap to end

	      var nextIndex = startIndex + offset; // if 'wrapSelection' is set to false and selection is after last or before first, it just does not change

	      if (!wrapSelection && (nextIndex > lastIndex || nextIndex < 0)) {
	        nextIndex = startIndex;
	      } else if (nextIndex > lastIndex) nextIndex = 0;else if (nextIndex < 0) nextIndex = lastIndex;

	      if (options[nextIndex].disabled) {
	        _this.moveSelectionBy(offset, nextIndex);

	        return;
	      }

	      _this.setState({
	        selectedIndex: nextIndex
	      });

	      _this.scrollSelectedItemIntoView();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleIconOverrides", function (predefinedProps) {
	      var clearable = _this.props.clearable;
	      var classes = (0, _classnames.default)(clearable && _this.hasValue() && 'clear', predefinedProps.className);
	      return {
	        className: classes,
	        onClick: function onClick(e) {
	          (0, _invoke2.default)(predefinedProps, 'onClick', e, predefinedProps);

	          _this.handleIconClick(e);
	        }
	      };
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleSearchRef", function (c) {
	      return _this.searchRef = c;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleSizerRef", function (c) {
	      return _this.sizerRef = c;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRef", function (c) {
	      return _this.ref = c;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "clearValue", function (e) {
	      var multiple = _this.props.multiple;
	      var newValue = multiple ? [] : '';

	      _this.setValue(newValue);

	      _this.setSelectedIndex(newValue);

	      _this.handleChange(e, newValue);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeSearchInputTabIndex", function () {
	      var _this$props9 = _this.props,
	          disabled = _this$props9.disabled,
	          tabIndex = _this$props9.tabIndex;
	      if (!(0, _isNil2.default)(tabIndex)) return tabIndex;
	      return disabled ? -1 : 0;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeSearchInputWidth", function () {
	      var searchQuery = _this.state.searchQuery;

	      if (_this.sizerRef && searchQuery) {
	        // resize the search input, temporarily show the sizer so we can measure it
	        _this.sizerRef.style.display = 'inline';
	        _this.sizerRef.textContent = searchQuery;
	        var searchWidth = Math.ceil(_this.sizerRef.getBoundingClientRect().width);

	        _this.sizerRef.style.removeProperty('display');

	        return searchWidth;
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeTabIndex", function () {
	      var _this$props10 = _this.props,
	          disabled = _this$props10.disabled,
	          search = _this$props10.search,
	          tabIndex = _this$props10.tabIndex; // don't set a root node tabIndex as the search input has its own tabIndex

	      if (search) return undefined;
	      if (disabled) return -1;
	      return (0, _isNil2.default)(tabIndex) ? 0 : tabIndex;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleSearchInputOverrides", function (predefinedProps) {
	      return {
	        onChange: function onChange(e, inputProps) {
	          (0, _invoke2.default)(predefinedProps, 'onChange', e, inputProps);

	          _this.handleSearchChange(e, inputProps);
	        }
	      };
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "hasValue", function () {
	      var multiple = _this.props.multiple;
	      var value = _this.state.value;
	      return multiple ? !(0, _isEmpty2.default)(value) : !(0, _isNil2.default)(value) && value !== '';
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "scrollSelectedItemIntoView", function () {
	      if (!_this.ref) return;

	      var menu = _this.ref.querySelector('.menu.visible');

	      if (!menu) return;
	      var item = menu.querySelector('.item.selected');
	      if (!item) return;
	      var isOutOfUpperView = item.offsetTop < menu.scrollTop;
	      var isOutOfLowerView = item.offsetTop + item.clientHeight > menu.scrollTop + menu.clientHeight;

	      if (isOutOfUpperView) {
	        menu.scrollTop = item.offsetTop;
	      } else if (isOutOfLowerView) {
	        // eslint-disable-next-line no-mixed-operators
	        menu.scrollTop = item.offsetTop + item.clientHeight - menu.clientHeight;
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setOpenDirection", function () {
	      if (!_this.ref) return;

	      var menu = _this.ref.querySelector('.menu.visible');

	      if (!menu) return;

	      var dropdownRect = _this.ref.getBoundingClientRect();

	      var menuHeight = menu.clientHeight;
	      var spaceAtTheBottom = document.documentElement.clientHeight - dropdownRect.top - dropdownRect.height - menuHeight;
	      var spaceAtTheTop = dropdownRect.top - menuHeight;
	      var upward = spaceAtTheBottom < 0 && spaceAtTheTop > spaceAtTheBottom; // set state only if there's a relevant difference

	      if (!upward !== !_this.state.upward) {
	        _this.trySetState({
	          upward: upward
	        });
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "open", function (e) {
	      var _this$props11 = _this.props,
	          disabled = _this$props11.disabled,
	          open = _this$props11.open,
	          search = _this$props11.search;
	      if (disabled) return;
	      if (search && _this.searchRef) _this.searchRef.focus();
	      (0, _invoke2.default)(_this.props, 'onOpen', e, _this.props);

	      _this.trySetState({
	        open: true
	      });

	      _this.scrollSelectedItemIntoView();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "close", function (e) {
	      var open = _this.state.open;

	      if (open) {
	        (0, _invoke2.default)(_this.props, 'onClose', e, _this.props);

	        _this.trySetState({
	          open: false
	        });
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClose", function () {
	      var hasSearchFocus = document.activeElement === _this.searchRef;
	      var hasDropdownFocus = document.activeElement === _this.ref;
	      var hasFocus = hasSearchFocus || hasDropdownFocus; // https://github.com/Semantic-Org/Semantic-UI-React/issues/627
	      // Blur the Dropdown on close so it is blurred after selecting an item.
	      // This is to prevent it from re-opening when switching tabs after selecting an item.

	      if (!hasSearchFocus) {
	        _this.ref.blur();
	      } // We need to keep the virtual model in sync with the browser focus change
	      // https://github.com/Semantic-Org/Semantic-UI-React/issues/692


	      _this.setState({
	        focus: hasFocus
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "toggle", function (e) {
	      return _this.state.open ? _this.close(e) : _this.open(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderText", function () {
	      var _this$props12 = _this.props,
	          multiple = _this$props12.multiple,
	          placeholder = _this$props12.placeholder,
	          search = _this$props12.search,
	          text = _this$props12.text;
	      var _this$state3 = _this.state,
	          searchQuery = _this$state3.searchQuery,
	          value = _this$state3.value,
	          open = _this$state3.open;

	      var hasValue = _this.hasValue();

	      var classes = (0, _classnames.default)(placeholder && !hasValue && 'default', 'text', search && searchQuery && 'filtered');
	      var _text = placeholder;

	      if (searchQuery) {
	        _text = null;
	      } else if (text) {
	        _text = text;
	      } else if (open && !multiple) {
	        _text = (0, _get4.default)(_this.getSelectedItem(), 'text');
	      } else if (hasValue) {
	        _text = (0, _get4.default)(_this.getItemByValue(value), 'text');
	      }

	      return _react.default.createElement("div", {
	        className: classes,
	        role: "alert",
	        "aria-live": "polite"
	      }, _text);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderSearchInput", function () {
	      var _this$props13 = _this.props,
	          search = _this$props13.search,
	          searchInput = _this$props13.searchInput;
	      var searchQuery = _this.state.searchQuery;
	      if (!search) return null;
	      return _DropdownSearchInput.default.create(searchInput, {
	        defaultProps: {
	          inputRef: _this.handleSearchRef,
	          style: {
	            width: _this.computeSearchInputWidth()
	          },
	          tabIndex: _this.computeSearchInputTabIndex(),
	          value: searchQuery
	        },
	        overrideProps: _this.handleSearchInputOverrides
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderSearchSizer", function () {
	      var _this$props14 = _this.props,
	          search = _this$props14.search,
	          multiple = _this$props14.multiple;
	      if (!(search && multiple)) return null;
	      return _react.default.createElement("span", {
	        className: "sizer",
	        ref: _this.handleSizerRef
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderLabels", function () {
	      var _this$props15 = _this.props,
	          multiple = _this$props15.multiple,
	          renderLabel = _this$props15.renderLabel;
	      var _this$state4 = _this.state,
	          selectedLabel = _this$state4.selectedLabel,
	          value = _this$state4.value;

	      if (!multiple || (0, _isEmpty2.default)(value)) {
	        return;
	      }

	      var selectedItems = (0, _map2.default)(value, _this.getItemByValue);
	      // if no item could be found for a given state value the selected item will be undefined
	      // compact the selectedItems so we only have actual objects left
	      return (0, _map2.default)((0, _compact2.default)(selectedItems), function (item, index) {
	        var defaultProps = {
	          active: item.value === selectedLabel,
	          as: 'a',
	          key: getKeyOrValue(item.key, item.value),
	          onClick: _this.handleLabelClick,
	          onRemove: _this.handleLabelRemove,
	          value: item.value
	        };
	        return _Label.default.create(renderLabel(item, index, defaultProps), {
	          defaultProps: defaultProps
	        });
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderOptions", function () {
	      var _this$props16 = _this.props,
	          lazyLoad = _this$props16.lazyLoad,
	          multiple = _this$props16.multiple,
	          search = _this$props16.search,
	          noResultsMessage = _this$props16.noResultsMessage;
	      var _this$state5 = _this.state,
	          open = _this$state5.open,
	          selectedIndex = _this$state5.selectedIndex,
	          value = _this$state5.value; // lazy load, only render options when open

	      if (lazyLoad && !open) return null;

	      var options = _this.getMenuOptions();

	      if (noResultsMessage !== null && search && (0, _isEmpty2.default)(options)) {
	        return _react.default.createElement("div", {
	          className: "message"
	        }, noResultsMessage);
	      }

	      var isActive = multiple ? function (optValue) {
	        return (0, _includes2.default)(value, optValue);
	      } : function (optValue) {
	        return optValue === value;
	      };
	      return (0, _map2.default)(options, function (opt, i) {
	        return _DropdownItem.default.create((0, _objectSpread2.default)({
	          active: isActive(opt.value),
	          onClick: _this.handleItemClick,
	          selected: selectedIndex === i
	        }, opt, {
	          key: getKeyOrValue(opt.key, opt.value),
	          // Needed for handling click events on disabled items
	          style: (0, _objectSpread2.default)({}, opt.style, {
	            pointerEvents: 'all'
	          })
	        }));
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderMenu", function () {
	      var _this$props17 = _this.props,
	          children = _this$props17.children,
	          direction = _this$props17.direction,
	          header = _this$props17.header;
	      var open = _this.state.open;

	      var ariaOptions = _this.getDropdownMenuAriaOptions(); // single menu child


	      if (!_lib.childrenUtils.isNil(children)) {
	        var menuChild = _react.Children.only(children);

	        var className = (0, _classnames.default)(direction, (0, _lib.useKeyOnly)(open, 'visible'), menuChild.props.className);
	        return (0, _react.cloneElement)(menuChild, (0, _objectSpread2.default)({
	          className: className
	        }, ariaOptions));
	      }

	      return _react.default.createElement(_DropdownMenu.default, (0, _extends2.default)({}, ariaOptions, {
	        direction: direction,
	        open: open
	      }), _DropdownHeader.default.create(header, {
	        autoGenerateKey: false
	      }), _this.renderOptions());
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Dropdown, [{
	    key: "getInitialAutoControlledState",
	    value: function getInitialAutoControlledState() {
	      return {
	        searchQuery: ''
	      };
	    }
	  }, {
	    key: "componentWillMount",
	    value: function componentWillMount() {
	      var _this$state6 = this.state,
	          open = _this$state6.open,
	          value = _this$state6.value;
	      this.setValue(value);
	      this.setSelectedIndex(value);

	      if (open) {
	        this.open();
	        this.attachHandlersOnOpen();
	      }
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      (0, _get3.default)((0, _getPrototypeOf3.default)(Dropdown.prototype), "componentWillReceiveProps", this).call(this, nextProps);

	      /* eslint-disable no-console */
	      if (process.env.NODE_ENV !== 'production') {
	        // in development, validate value type matches dropdown type
	        var isNextValueArray = Array.isArray(nextProps.value);
	        var hasValue = (0, _has2.default)(nextProps, 'value');

	        if (hasValue && nextProps.multiple && !isNextValueArray) {
	          console.error('Dropdown `value` must be an array when `multiple` is set.' + " Received type: `".concat(Object.prototype.toString.call(nextProps.value), "`."));
	        } else if (hasValue && !nextProps.multiple && isNextValueArray) {
	          console.error('Dropdown `value` must not be an array when `multiple` is not set.' + ' Either set `multiple={true}` or use a string or number value.');
	        }
	      }
	      /* eslint-enable no-console */


	      if (!(0, _shallowequal.default)(nextProps.value, this.props.value)) {
	        this.setValue(nextProps.value);
	        this.setSelectedIndex(nextProps.value);
	      } // The selected index is only dependent on option keys/values.
	      // We only check those properties to avoid recursive performance impacts.
	      // https://github.com/Semantic-Org/Semantic-UI-React/issues/3000


	      if (!(0, _isEqual2.default)(this.getKeyAndValues(nextProps.options), this.getKeyAndValues(this.props.options))) {
	        this.setSelectedIndex(undefined, nextProps.options);
	      }
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return !(0, _shallowequal.default)(nextProps, this.props) || !(0, _shallowequal.default)(nextState, this.state);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      // eslint-disable-line complexity
	      // focused / blurred
	      if (!prevState.focus && this.state.focus) {
	        if (!this.isMouseDown) {
	          var _this$props18 = this.props,
	              minCharacters = _this$props18.minCharacters,
	              openOnFocus = _this$props18.openOnFocus,
	              search = _this$props18.search;
	          var openable = !search || search && minCharacters === 1 && !this.state.open;
	          if (openOnFocus && openable) this.open();
	        }

	        if (!this.state.open) {
	          _lib.eventStack.sub('keydown', [this.openOnArrow, this.openOnSpace]);
	        } else {
	          _lib.eventStack.sub('keydown', [this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	        }

	        _lib.eventStack.sub('keydown', this.removeItemOnBackspace);
	      } else if (prevState.focus && !this.state.focus) {
	        var closeOnBlur = this.props.closeOnBlur;

	        if (!this.isMouseDown && closeOnBlur) {
	          this.close();
	        }

	        _lib.eventStack.unsub('keydown', [this.openOnArrow, this.openOnSpace, this.moveSelectionOnKeyDown, this.selectItemOnEnter, this.removeItemOnBackspace]);
	      } // opened / closed


	      if (!prevState.open && this.state.open) {
	        this.attachHandlersOnOpen();
	        this.setOpenDirection();
	        this.scrollSelectedItemIntoView();
	      } else if (prevState.open && !this.state.open) {
	        this.handleClose();

	        _lib.eventStack.unsub('keydown', [this.closeOnEscape, this.moveSelectionOnKeyDown, this.selectItemOnEnter]);

	        _lib.eventStack.unsub('click', this.closeOnDocumentClick);

	        if (!this.state.focus) {
	          _lib.eventStack.unsub('keydown', this.removeItemOnBackspace);
	        }
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      _lib.eventStack.unsub('keydown', [this.openOnArrow, this.openOnSpace, this.moveSelectionOnKeyDown, this.selectItemOnEnter, this.removeItemOnBackspace, this.closeOnEscape]);

	      _lib.eventStack.unsub('click', this.closeOnDocumentClick);
	    } // ----------------------------------------
	    // Document Event Handlers
	    // ----------------------------------------
	    // onChange needs to receive a value
	    // can't rely on props.value if we are controlled

	  }, {
	    key: "getDropdownMenuAriaOptions",
	    value: function getDropdownMenuAriaOptions() {
	      var _this$props19 = this.props,
	          search = _this$props19.search,
	          multiple = _this$props19.multiple;
	      var ariaOptions = {};

	      if (search) {
	        ariaOptions['aria-multiselectable'] = multiple;
	        ariaOptions.role = 'listbox';
	      }

	      return ariaOptions;
	    } // ----------------------------------------
	    // Setters
	    // ----------------------------------------

	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props20 = this.props,
	          basic = _this$props20.basic,
	          button = _this$props20.button,
	          className = _this$props20.className,
	          compact = _this$props20.compact,
	          disabled = _this$props20.disabled,
	          error = _this$props20.error,
	          fluid = _this$props20.fluid,
	          floating = _this$props20.floating,
	          icon = _this$props20.icon,
	          inline = _this$props20.inline,
	          item = _this$props20.item,
	          labeled = _this$props20.labeled,
	          loading = _this$props20.loading,
	          multiple = _this$props20.multiple,
	          pointing = _this$props20.pointing,
	          search = _this$props20.search,
	          selection = _this$props20.selection,
	          scrolling = _this$props20.scrolling,
	          simple = _this$props20.simple,
	          trigger = _this$props20.trigger;
	      var _this$state7 = this.state,
	          open = _this$state7.open,
	          upward = _this$state7.upward; // Classes

	      var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(open, 'active visible'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(loading, 'loading'), (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(button, 'button'), (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(floating, 'floating'), (0, _lib.useKeyOnly)(inline, 'inline'), // TODO: consider augmentation to render Dropdowns as Button/Menu, solves icon/link item issues
	      // https://github.com/Semantic-Org/Semantic-UI-React/issues/401#issuecomment-240487229
	      // TODO: the icon class is only required when a dropdown is a button
	      // useKeyOnly(icon, 'icon'),
	      (0, _lib.useKeyOnly)(labeled, 'labeled'), (0, _lib.useKeyOnly)(item, 'item'), (0, _lib.useKeyOnly)(multiple, 'multiple'), (0, _lib.useKeyOnly)(search, 'search'), (0, _lib.useKeyOnly)(selection, 'selection'), (0, _lib.useKeyOnly)(simple, 'simple'), (0, _lib.useKeyOnly)(scrolling, 'scrolling'), (0, _lib.useKeyOnly)(upward, 'upward'), (0, _lib.useKeyOrValueAndKey)(pointing, 'pointing'), 'dropdown', className);
	      var rest = (0, _lib.getUnhandledProps)(Dropdown, this.props);
	      var ElementType = (0, _lib.getElementType)(Dropdown, this.props);
	      var ariaOptions = this.getDropdownAriaOptions(ElementType, this.props);
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, ariaOptions, {
	        className: classes,
	        onBlur: this.handleBlur,
	        onClick: this.handleClick,
	        onMouseDown: this.handleMouseDown,
	        onFocus: this.handleFocus,
	        onChange: this.handleChange,
	        tabIndex: this.computeTabIndex(),
	        ref: this.handleRef
	      }), this.renderLabels(), this.renderSearchInput(), this.renderSearchSizer(), trigger || this.renderText(), _Icon.default.create(icon, {
	        overrideProps: this.handleIconOverrides,
	        autoGenerateKey: false
	      }), this.renderMenu());
	    }
	  }]);
	  return Dropdown;
	}(_lib.AutoControlledComponent);

	exports.default = Dropdown;
	(0, _defineProperty2.default)(Dropdown, "defaultProps", {
	  additionLabel: 'Add ',
	  additionPosition: 'top',
	  closeOnBlur: true,
	  deburr: false,
	  icon: 'dropdown',
	  minCharacters: 1,
	  noResultsMessage: 'No results found.',
	  openOnFocus: true,
	  renderLabel: function renderLabel(_ref2) {
	    var text = _ref2.text;
	    return text;
	  },
	  searchInput: 'text',
	  selectOnBlur: true,
	  selectOnNavigation: true,
	  wrapSelection: true
	});
	(0, _defineProperty2.default)(Dropdown, "autoControlledProps", ['open', 'searchQuery', 'selectedLabel', 'value', 'upward']);
	(0, _defineProperty2.default)(Dropdown, "Divider", _DropdownDivider.default);
	(0, _defineProperty2.default)(Dropdown, "Header", _DropdownHeader.default);
	(0, _defineProperty2.default)(Dropdown, "Item", _DropdownItem.default);
	(0, _defineProperty2.default)(Dropdown, "Menu", _DropdownMenu.default);
	(0, _defineProperty2.default)(Dropdown, "SearchInput", _DropdownSearchInput.default);
	(0, _defineProperty2.default)(Dropdown, "handledProps", ["additionLabel", "additionPosition", "allowAdditions", "as", "basic", "button", "children", "className", "clearable", "closeOnBlur", "closeOnChange", "compact", "deburr", "defaultOpen", "defaultSearchQuery", "defaultSelectedLabel", "defaultUpward", "defaultValue", "direction", "disabled", "error", "floating", "fluid", "header", "icon", "inline", "item", "labeled", "lazyLoad", "loading", "minCharacters", "multiple", "noResultsMessage", "onAddItem", "onBlur", "onChange", "onClick", "onClose", "onFocus", "onLabelClick", "onMouseDown", "onOpen", "onSearchChange", "open", "openOnFocus", "options", "placeholder", "pointing", "renderLabel", "scrolling", "search", "searchInput", "searchQuery", "selectOnBlur", "selectOnNavigation", "selectedLabel", "selection", "simple", "tabIndex", "text", "trigger", "upward", "value", "wrapSelection"]);
	Dropdown.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Label prefixed to an option added by a user. */
	  additionLabel: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.string]),

	  /** Position of the `Add: ...` option in the dropdown list ('top' or 'bottom'). */
	  additionPosition: _propTypes.default.oneOf(['top', 'bottom']),

	  /**
	   * Allow user additions to the list of options (boolean).
	   * Requires the use of `selection`, `options` and `search`.
	   */
	  allowAdditions: _lib.customPropTypes.every([_lib.customPropTypes.demand(['options', 'selection', 'search']), _propTypes.default.bool]),

	  /** A Dropdown can reduce its complexity. */
	  basic: _propTypes.default.bool,

	  /** Format the Dropdown to appear as a button. */
	  button: _propTypes.default.bool,

	  /** Primary content. */
	  children: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['options', 'selection']), _lib.customPropTypes.givenProps({
	    children: _propTypes.default.any.isRequired
	  }, _propTypes.default.element.isRequired)]),

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Using the clearable setting will let users remove their selection from a dropdown. */
	  clearable: _propTypes.default.bool,

	  /** Whether or not the menu should close when the dropdown is blurred. */
	  closeOnBlur: _propTypes.default.bool,

	  /**
	   * Whether or not the menu should close when a value is selected from the dropdown.
	   * By default, multiple selection dropdowns will remain open on change, while single
	   * selection dropdowns will close on change.
	   */
	  closeOnChange: _propTypes.default.bool,

	  /** A compact dropdown has no minimum width. */
	  compact: _propTypes.default.bool,

	  /** Whether or not the dropdown should strip diacritics in options and input search */
	  deburr: _propTypes.default.bool,

	  /** Initial value of open. */
	  defaultOpen: _propTypes.default.bool,

	  /** Initial value of searchQuery. */
	  defaultSearchQuery: _propTypes.default.string,

	  /** Currently selected label in multi-select. */
	  defaultSelectedLabel: _lib.customPropTypes.every([_lib.customPropTypes.demand(['multiple']), _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])]),

	  /** Initial value of upward. */
	  defaultUpward: _propTypes.default.bool,

	  /** Initial value or value array if multiple. */
	  defaultValue: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.bool, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.bool]))]),

	  /** A dropdown menu can open to the left or to the right. */
	  direction: _propTypes.default.oneOf(['left', 'right']),

	  /** A disabled dropdown menu or item does not allow user interaction. */
	  disabled: _propTypes.default.bool,

	  /** An errored dropdown can alert a user to a problem. */
	  error: _propTypes.default.bool,

	  /** A dropdown menu can contain floated content. */
	  floating: _propTypes.default.bool,

	  /** A dropdown can take the full width of its parent */
	  fluid: _propTypes.default.bool,

	  /** A dropdown menu can contain a header. */
	  header: _propTypes.default.node,

	  /** Shorthand for Icon. */
	  icon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object]),

	  /** A dropdown can be formatted to appear inline in other content. */
	  inline: _propTypes.default.bool,

	  /** A dropdown can be formatted as a Menu item. */
	  item: _propTypes.default.bool,

	  /** A dropdown can be labeled. */
	  labeled: _propTypes.default.bool,

	  /** A dropdown can defer rendering its options until it is open. */
	  lazyLoad: _propTypes.default.bool,

	  /** A dropdown can show that it is currently loading data. */
	  loading: _propTypes.default.bool,

	  /** The minimum characters for a search to begin showing results. */
	  minCharacters: _propTypes.default.number,

	  /** A selection dropdown can allow multiple selections. */
	  multiple: _propTypes.default.bool,

	  /** Message to display when there are no results. */
	  noResultsMessage: _propTypes.default.node,

	  /**
	   * Called when a user adds a new item. Use this to update the options list.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and the new item's value.
	   */
	  onAddItem: _propTypes.default.func,

	  /**
	   * Called on blur.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onBlur: _propTypes.default.func,

	  /**
	   * Called when the user attempts to change the value.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and proposed value.
	   */
	  onChange: _propTypes.default.func,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /**
	   * Called when a close event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClose: _propTypes.default.func,

	  /**
	   * Called on focus.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onFocus: _propTypes.default.func,

	  /**
	   * Called when a multi-select label is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All label props.
	   */
	  onLabelClick: _propTypes.default.func,

	  /**
	   * Called on mousedown.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onMouseDown: _propTypes.default.func,

	  /**
	   * Called when an open event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onOpen: _propTypes.default.func,

	  /**
	   * Called on search input change.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props, includes current value of searchQuery.
	   */
	  onSearchChange: _propTypes.default.func,

	  /** Controls whether or not the dropdown menu is displayed. */
	  open: _propTypes.default.bool,

	  /** Whether or not the menu should open when the dropdown is focused. */
	  openOnFocus: _propTypes.default.bool,

	  /** Array of Dropdown.Item props e.g. `{ text: '', value: '' }` */
	  options: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _propTypes.default.arrayOf(_propTypes.default.shape(_DropdownItem.default.propTypes))]),

	  /** Placeholder text. */
	  placeholder: _propTypes.default.string,

	  /** A dropdown can be formatted so that its menu is pointing. */
	  pointing: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['left', 'right', 'top', 'top left', 'top right', 'bottom', 'bottom left', 'bottom right'])]),

	  /**
	   * Mapped over the active items and returns shorthand for the active item Labels.
	   * Only applies to `multiple` Dropdowns.
	   *
	   * @param {object} item - A currently active dropdown item.
	   * @param {number} index - The current index.
	   * @param {object} defaultLabelProps - The default props for an active item Label.
	   * @returns {*} Shorthand for a Label.
	   */
	  renderLabel: _propTypes.default.func,

	  /** A dropdown can have its menu scroll. */
	  scrolling: _propTypes.default.bool,

	  /**
	   * A selection dropdown can allow a user to search through a large list of choices.
	   * Pass a function here to replace the default search.
	   */
	  search: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func]),

	  /** A shorthand for a search input. */
	  searchInput: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.node, _propTypes.default.object]),

	  /** Current value of searchQuery. Creates a controlled component. */
	  searchQuery: _propTypes.default.string,
	  // TODO 'searchInMenu' or 'search='in menu' or ???  How to handle this markup and functionality?

	  /** Define whether the highlighted item should be selected on blur. */
	  selectOnBlur: _propTypes.default.bool,

	  /**
	   * Whether or not to change the value when navigating the menu using arrow keys.
	   * Setting to false will require enter or left click to confirm a choice.
	   */
	  selectOnNavigation: _propTypes.default.bool,

	  /** Currently selected label in multi-select. */
	  selectedLabel: _lib.customPropTypes.every([_lib.customPropTypes.demand(['multiple']), _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])]),

	  /** A dropdown can be used to select between choices in a form. */
	  selection: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _lib.customPropTypes.demand(['options']), _propTypes.default.bool]),

	  /** A simple dropdown can open without Javascript. */
	  simple: _propTypes.default.bool,

	  /** A dropdown can receive focus. */
	  tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** The text displayed in the dropdown, usually for the active item. */
	  text: _propTypes.default.string,

	  /** Custom element to trigger the menu to become visible. Takes place of 'text'. */
	  trigger: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['selection', 'text']), _propTypes.default.node]),

	  /** Current value or value array if multiple. Creates a controlled component. */
	  value: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string, _propTypes.default.number]))]),

	  /** Controls whether the dropdown will open upward. */
	  upward: _propTypes.default.bool,

	  /**
	   * A dropdown will go to the last element when ArrowUp is pressed on the first,
	   * or go to the first when ArrowDown is pressed on the last( aka infinite selection )
	   */
	  wrapSelection: _propTypes.default.bool
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

	var getPrototypeOf = __webpack_require__(173);

	var superPropBase = __webpack_require__(602);

	function _get(target, property, receiver) {
	  if (typeof Reflect !== "undefined" && Reflect.get) {
	    module.exports = _get = Reflect.get;
	  } else {
	    module.exports = _get = function _get(target, property, receiver) {
	      var base = superPropBase(target, property);
	      if (!base) return;
	      var desc = Object.getOwnPropertyDescriptor(base, property);

	      if (desc.get) {
	        return desc.get.call(receiver);
	      }

	      return desc.value;
	    };
	  }

	  return _get(target, property, receiver || target);
	}

	module.exports = _get;

/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

	var getPrototypeOf = __webpack_require__(173);

	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = getPrototypeOf(object);
	    if (object === null) break;
	  }

	  return object;
	}

	module.exports = _superPropBase;

/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEvery = __webpack_require__(604),
	    baseEvery = __webpack_require__(605),
	    baseIteratee = __webpack_require__(288),
	    isArray = __webpack_require__(181),
	    isIterateeCall = __webpack_require__(349);

	/**
	 * Checks if `predicate` returns truthy for **all** elements of `collection`.
	 * Iteration is stopped once `predicate` returns falsey. The predicate is
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * **Note:** This method returns `true` for
	 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	 * elements of empty collections.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.every([true, 1, null, 'yes'], Boolean);
	 * // => false
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': false },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.every(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.every(users, ['active', false]);
	 * // => true
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.every(users, 'active');
	 * // => false
	 */
	function every(collection, predicate, guard) {
	  var func = isArray(collection) ? arrayEvery : baseEvery;
	  if (guard && isIterateeCall(collection, predicate, guard)) {
	    predicate = undefined;
	  }
	  return func(collection, baseIteratee(predicate, 3));
	}

	module.exports = every;


/***/ }),
/* 604 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.every` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 */
	function arrayEvery(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (!predicate(array[index], index, array)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = arrayEvery;


/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(272);

	/**
	 * The base implementation of `_.every` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`
	 */
	function baseEvery(collection, predicate) {
	  var result = true;
	  baseEach(collection, function(value, index, collection) {
	    result = !!predicate(value, index, collection);
	    return result;
	  });
	  return result;
	}

	module.exports = baseEvery;


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(219);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	    reHasRegExpChar = RegExp(reRegExpChar.source);

	/**
	 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escapeRegExp('[lodash](https://lodash.com/)');
	 * // => '\[lodash\]\(https://lodash\.com/\)'
	 */
	function escapeRegExp(string) {
	  string = toString(string);
	  return (string && reHasRegExpChar.test(string))
	    ? string.replace(reRegExpChar, '\\$&')
	    : string;
	}

	module.exports = escapeRegExp;


/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(233),
	    toInteger = __webpack_require__(266);

	/**
	 * Creates a slice of `array` with `n` elements dropped from the end.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @param {number} [n=1] The number of elements to drop.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the slice of `array`.
	 * @example
	 *
	 * _.dropRight([1, 2, 3]);
	 * // => [1, 2]
	 *
	 * _.dropRight([1, 2, 3], 2);
	 * // => [1]
	 *
	 * _.dropRight([1, 2, 3], 5);
	 * // => []
	 *
	 * _.dropRight([1, 2, 3], 0);
	 * // => [1, 2, 3]
	 */
	function dropRight(array, n, guard) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return [];
	  }
	  n = (guard || n === undefined) ? 1 : toInteger(n);
	  n = length - n;
	  return baseSlice(array, 0, n < 0 ? 0 : n);
	}

	module.exports = dropRight;


/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

	var baseKeys = __webpack_require__(284),
	    getTag = __webpack_require__(310),
	    isArrayLike = __webpack_require__(262),
	    isString = __webpack_require__(489),
	    stringSize = __webpack_require__(609);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';

	/**
	 * Gets the size of `collection` by returning its length for array-like
	 * values or the number of own enumerable string keyed properties for objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to inspect.
	 * @returns {number} Returns the collection size.
	 * @example
	 *
	 * _.size([1, 2, 3]);
	 * // => 3
	 *
	 * _.size({ 'a': 1, 'b': 2 });
	 * // => 2
	 *
	 * _.size('pebbles');
	 * // => 7
	 */
	function size(collection) {
	  if (collection == null) {
	    return 0;
	  }
	  if (isArrayLike(collection)) {
	    return isString(collection) ? stringSize(collection) : collection.length;
	  }
	  var tag = getTag(collection);
	  if (tag == mapTag || tag == setTag) {
	    return collection.size;
	  }
	  return baseKeys(collection).length;
	}

	module.exports = size;


/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

	var asciiSize = __webpack_require__(610),
	    hasUnicode = __webpack_require__(438),
	    unicodeSize = __webpack_require__(611);

	/**
	 * Gets the number of symbols in `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the string size.
	 */
	function stringSize(string) {
	  return hasUnicode(string)
	    ? unicodeSize(string)
	    : asciiSize(string);
	}

	module.exports = stringSize;


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(323);

	/**
	 * Gets the size of an ASCII `string`.
	 *
	 * @private
	 * @param {string} string The string inspect.
	 * @returns {number} Returns the string size.
	 */
	var asciiSize = baseProperty('length');

	module.exports = asciiSize;


/***/ }),
/* 611 */
/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange + ']',
	    rsCombo = '[' + rsComboRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/**
	 * Gets the size of a Unicode `string`.
	 *
	 * @private
	 * @param {string} string The string inspect.
	 * @returns {number} Returns the string size.
	 */
	function unicodeSize(string) {
	  var result = reUnicode.lastIndex = 0;
	  while (reUnicode.test(string)) {
	    ++result;
	  }
	  return result;
	}

	module.exports = unicodeSize;


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(258),
	    baseRest = __webpack_require__(234),
	    baseUniq = __webpack_require__(486),
	    isArrayLikeObject = __webpack_require__(261);

	/**
	 * Creates an array of unique values, in order, from all given arrays using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of combined values.
	 * @example
	 *
	 * _.union([2], [1, 2]);
	 * // => [2, 1]
	 */
	var union = baseRest(function(arrays) {
	  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	});

	module.exports = union;


/***/ }),
/* 613 */
/***/ (function(module, exports) {

	//

	module.exports = function shallowEqual(objA, objB, compare, compareContext) {
	  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

	  if (ret !== void 0) {
	    return !!ret;
	  }

	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

	  // Test for A's keys different from B.
	  for (var idx = 0; idx < keysA.length; idx++) {
	    var key = keysA[idx];

	    if (!bHasOwnProperty(key)) {
	      return false;
	    }

	    var valueA = objA[key];
	    var valueB = objB[key];

	    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

	    if (ret === false || (ret === void 0 && valueA !== valueB)) {
	      return false;
	    }
	  }

	  return true;
	};


/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Label.default;
	  }
	});

	var _Label = _interopRequireDefault(__webpack_require__(524));

/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A dropdown menu can contain dividers to separate related content.
	 */
	function DropdownDivider(props) {
	  var className = props.className;
	  var classes = (0, _classnames.default)('divider', className);
	  var rest = (0, _lib.getUnhandledProps)(DropdownDivider, props);
	  var ElementType = (0, _lib.getElementType)(DropdownDivider, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }));
	}

	DropdownDivider.handledProps = ["as", "className"];
	DropdownDivider.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Additional classes. */
	  className: _propTypes.default.string
	} : {};
	var _default = DropdownDivider;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Flag = _interopRequireDefault(__webpack_require__(617));

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	var _Image = _interopRequireDefault(__webpack_require__(619));

	var _Label = _interopRequireDefault(__webpack_require__(614));

	/**
	 * An item sub-component for Dropdown component.
	 */
	var DropdownItem =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(DropdownItem, _Component);

	  function DropdownItem() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, DropdownItem);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(DropdownItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var onClick = _this.props.onClick;
	      if (onClick) onClick(e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(DropdownItem, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content,
	          disabled = _this$props.disabled,
	          description = _this$props.description,
	          flag = _this$props.flag,
	          icon = _this$props.icon,
	          image = _this$props.image,
	          label = _this$props.label,
	          selected = _this$props.selected,
	          text = _this$props.text;
	      var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(selected, 'selected'), 'item', className); // add default dropdown icon if item contains another menu

	      var iconName = (0, _isNil2.default)(icon) ? _lib.childrenUtils.someByType(children, 'DropdownMenu') && 'dropdown' : icon;
	      var rest = (0, _lib.getUnhandledProps)(DropdownItem, this.props);
	      var ElementType = (0, _lib.getElementType)(DropdownItem, this.props);
	      var ariaOptions = {
	        role: 'option',
	        'aria-disabled': disabled,
	        'aria-checked': active,
	        'aria-selected': selected
	      };

	      if (!_lib.childrenUtils.isNil(children)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, ariaOptions, {
	          className: classes,
	          onClick: this.handleClick
	        }), children);
	      }

	      var flagElement = _Flag.default.create(flag, {
	        autoGenerateKey: false
	      });

	      var iconElement = _Icon.default.create(iconName, {
	        autoGenerateKey: false
	      });

	      var imageElement = _Image.default.create(image, {
	        autoGenerateKey: false
	      });

	      var labelElement = _Label.default.create(label, {
	        autoGenerateKey: false
	      });

	      var descriptionElement = (0, _lib.createShorthand)('span', function (val) {
	        return {
	          children: val
	        };
	      }, description, {
	        defaultProps: {
	          className: 'description'
	        },
	        autoGenerateKey: false
	      });
	      var textElement = (0, _lib.createShorthand)('span', function (val) {
	        return {
	          children: val
	        };
	      }, _lib.childrenUtils.isNil(content) ? text : content, {
	        defaultProps: {
	          className: 'text'
	        },
	        autoGenerateKey: false
	      });
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, ariaOptions, {
	        className: classes,
	        onClick: this.handleClick
	      }), imageElement, iconElement, flagElement, labelElement, descriptionElement, textElement);
	    }
	  }]);
	  return DropdownItem;
	}(_react.Component);

	(0, _defineProperty2.default)(DropdownItem, "handledProps", ["active", "as", "children", "className", "content", "description", "disabled", "flag", "icon", "image", "label", "onClick", "selected", "text", "value"]);
	DropdownItem.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Style as the currently chosen item. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Additional text with less emphasis. */
	  description: _lib.customPropTypes.itemShorthand,

	  /** A dropdown item can be disabled. */
	  disabled: _propTypes.default.bool,

	  /** Shorthand for Flag. */
	  flag: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for Icon. */
	  icon: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for Image. */
	  image: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for Label. */
	  label: _lib.customPropTypes.itemShorthand,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /**
	   * The item currently selected by keyboard shortcut.
	   * This is not the active item.
	   */
	  selected: _propTypes.default.bool,

	  /** Display text. */
	  text: _lib.customPropTypes.contentShorthand,

	  /** Stored value. */
	  value: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number, _propTypes.default.string])
	} : {};
	DropdownItem.create = (0, _lib.createShorthandFactory)(DropdownItem, function (opts) {
	  return opts;
	});
	var _default = DropdownItem;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Flag.default;
	  }
	});

	var _Flag = _interopRequireDefault(__webpack_require__(618));

/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.names = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var names = ['ad', 'andorra', 'ae', 'united arab emirates', 'uae', 'af', 'afghanistan', 'ag', 'antigua', 'ai', 'anguilla', 'al', 'albania', 'am', 'armenia', 'an', 'netherlands antilles', 'ao', 'angola', 'ar', 'argentina', 'as', 'american samoa', 'at', 'austria', 'au', 'australia', 'aw', 'aruba', 'ax', 'aland islands', 'az', 'azerbaijan', 'ba', 'bosnia', 'bb', 'barbados', 'bd', 'bangladesh', 'be', 'belgium', 'bf', 'burkina faso', 'bg', 'bulgaria', 'bh', 'bahrain', 'bi', 'burundi', 'bj', 'benin', 'bm', 'bermuda', 'bn', 'brunei', 'bo', 'bolivia', 'br', 'brazil', 'bs', 'bahamas', 'bt', 'bhutan', 'bv', 'bouvet island', 'bw', 'botswana', 'by', 'belarus', 'bz', 'belize', 'ca', 'canada', 'cc', 'cocos islands', 'cd', 'congo', 'cf', 'central african republic', 'cg', 'congo brazzaville', 'ch', 'switzerland', 'ci', 'cote divoire', 'ck', 'cook islands', 'cl', 'chile', 'cm', 'cameroon', 'cn', 'china', 'co', 'colombia', 'cr', 'costa rica', 'cs', 'cu', 'cuba', 'cv', 'cape verde', 'cx', 'christmas island', 'cy', 'cyprus', 'cz', 'czech republic', 'de', 'germany', 'dj', 'djibouti', 'dk', 'denmark', 'dm', 'dominica', 'do', 'dominican republic', 'dz', 'algeria', 'ec', 'ecuador', 'ee', 'estonia', 'eg', 'egypt', 'eh', 'western sahara', 'er', 'eritrea', 'es', 'spain', 'et', 'ethiopia', 'eu', 'european union', 'fi', 'finland', 'fj', 'fiji', 'fk', 'falkland islands', 'fm', 'micronesia', 'fo', 'faroe islands', 'fr', 'france', 'ga', 'gabon', 'gb', 'uk', 'united kingdom', 'gd', 'grenada', 'ge', 'georgia', 'gf', 'french guiana', 'gh', 'ghana', 'gi', 'gibraltar', 'gl', 'greenland', 'gm', 'gambia', 'gn', 'guinea', 'gp', 'guadeloupe', 'gq', 'equatorial guinea', 'gr', 'greece', 'gs', 'sandwich islands', 'gt', 'guatemala', 'gu', 'guam', 'gw', 'guinea-bissau', 'gy', 'guyana', 'hk', 'hong kong', 'hm', 'heard island', 'hn', 'honduras', 'hr', 'croatia', 'ht', 'haiti', 'hu', 'hungary', 'id', 'indonesia', 'ie', 'ireland', 'il', 'israel', 'in', 'india', 'io', 'indian ocean territory', 'iq', 'iraq', 'ir', 'iran', 'is', 'iceland', 'it', 'italy', 'jm', 'jamaica', 'jo', 'jordan', 'jp', 'japan', 'ke', 'kenya', 'kg', 'kyrgyzstan', 'kh', 'cambodia', 'ki', 'kiribati', 'km', 'comoros', 'kn', 'saint kitts and nevis', 'kp', 'north korea', 'kr', 'south korea', 'kw', 'kuwait', 'ky', 'cayman islands', 'kz', 'kazakhstan', 'la', 'laos', 'lb', 'lebanon', 'lc', 'saint lucia', 'li', 'liechtenstein', 'lk', 'sri lanka', 'lr', 'liberia', 'ls', 'lesotho', 'lt', 'lithuania', 'lu', 'luxembourg', 'lv', 'latvia', 'ly', 'libya', 'ma', 'morocco', 'mc', 'monaco', 'md', 'moldova', 'me', 'montenegro', 'mg', 'madagascar', 'mh', 'marshall islands', 'mk', 'macedonia', 'ml', 'mali', 'mm', 'myanmar', 'burma', 'mn', 'mongolia', 'mo', 'macau', 'mp', 'northern mariana islands', 'mq', 'martinique', 'mr', 'mauritania', 'ms', 'montserrat', 'mt', 'malta', 'mu', 'mauritius', 'mv', 'maldives', 'mw', 'malawi', 'mx', 'mexico', 'my', 'malaysia', 'mz', 'mozambique', 'na', 'namibia', 'nc', 'new caledonia', 'ne', 'niger', 'nf', 'norfolk island', 'ng', 'nigeria', 'ni', 'nicaragua', 'nl', 'netherlands', 'no', 'norway', 'np', 'nepal', 'nr', 'nauru', 'nu', 'niue', 'nz', 'new zealand', 'om', 'oman', 'pa', 'panama', 'pe', 'peru', 'pf', 'french polynesia', 'pg', 'new guinea', 'ph', 'philippines', 'pk', 'pakistan', 'pl', 'poland', 'pm', 'saint pierre', 'pn', 'pitcairn islands', 'pr', 'puerto rico', 'ps', 'palestine', 'pt', 'portugal', 'pw', 'palau', 'py', 'paraguay', 'qa', 'qatar', 're', 'reunion', 'ro', 'romania', 'rs', 'serbia', 'ru', 'russia', 'rw', 'rwanda', 'sa', 'saudi arabia', 'sb', 'solomon islands', 'sc', 'seychelles', 'gb sct', 'scotland', 'sd', 'sudan', 'se', 'sweden', 'sg', 'singapore', 'sh', 'saint helena', 'si', 'slovenia', 'sj', 'svalbard', 'jan mayen', 'sk', 'slovakia', 'sl', 'sierra leone', 'sm', 'san marino', 'sn', 'senegal', 'so', 'somalia', 'sr', 'suriname', 'st', 'sao tome', 'sv', 'el salvador', 'sy', 'syria', 'sz', 'swaziland', 'tc', 'caicos islands', 'td', 'chad', 'tf', 'french territories', 'tg', 'togo', 'th', 'thailand', 'tj', 'tajikistan', 'tk', 'tokelau', 'tl', 'timorleste', 'tm', 'turkmenistan', 'tn', 'tunisia', 'to', 'tonga', 'tr', 'turkey', 'tt', 'trinidad', 'tv', 'tuvalu', 'tw', 'taiwan', 'tz', 'tanzania', 'ua', 'ukraine', 'ug', 'uganda', 'um', 'us minor islands', 'us', 'america', 'united states', 'uy', 'uruguay', 'uz', 'uzbekistan', 'va', 'vatican city', 'vc', 'saint vincent', 've', 'venezuela', 'vg', 'british virgin islands', 'vi', 'us virgin islands', 'vn', 'vietnam', 'vu', 'vanuatu', 'gb wls', 'wales', 'wf', 'wallis and futuna', 'ws', 'samoa', 'ye', 'yemen', 'yt', 'mayotte', 'za', 'south africa', 'zm', 'zambia', 'zw', 'zimbabwe'];
	/**
	 * A flag is is used to represent a political state.
	 */

	exports.names = names;

	var Flag =
	/*#__PURE__*/
	function (_PureComponent) {
	  (0, _inherits2.default)(Flag, _PureComponent);

	  function Flag() {
	    (0, _classCallCheck2.default)(this, Flag);
	    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Flag).apply(this, arguments));
	  }

	  (0, _createClass2.default)(Flag, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          className = _this$props.className,
	          name = _this$props.name;
	      var classes = (0, _classnames.default)(name, 'flag', className);
	      var rest = (0, _lib.getUnhandledProps)(Flag, this.props);
	      var ElementType = (0, _lib.getElementType)(Flag, this.props);
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes
	      }));
	    }
	  }]);
	  return Flag;
	}(_react.PureComponent);

	(0, _defineProperty2.default)(Flag, "defaultProps", {
	  as: 'i'
	});
	(0, _defineProperty2.default)(Flag, "handledProps", ["as", "className", "name"]);
	Flag.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Flag name, can use the two digit country code, the full name, or a common alias. */
	  name: _lib.customPropTypes.suggest(names)
	} : {};
	Flag.create = (0, _lib.createShorthandFactory)(Flag, function (value) {
	  return {
	    name: value
	  };
	});
	var _default = Flag;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Image.default;
	  }
	});

	var _Image = _interopRequireDefault(__webpack_require__(525));

/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	/**
	 * A dropdown menu can contain a header.
	 */
	function DropdownHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      icon = props.icon;
	  var classes = (0, _classnames.default)('header', className);
	  var rest = (0, _lib.getUnhandledProps)(DropdownHeader, props);
	  var ElementType = (0, _lib.getElementType)(DropdownHeader, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _Icon.default.create(icon, {
	    autoGenerateKey: false
	  }), content);
	}

	DropdownHeader.handledProps = ["as", "children", "className", "content", "icon"];
	DropdownHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function) */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for Icon. */
	  icon: _lib.customPropTypes.itemShorthand
	} : {};
	DropdownHeader.create = (0, _lib.createShorthandFactory)(DropdownHeader, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = DropdownHeader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A dropdown menu can contain a menu.
	 */
	function DropdownMenu(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      direction = props.direction,
	      open = props.open,
	      scrolling = props.scrolling;
	  var classes = (0, _classnames.default)(direction, (0, _lib.useKeyOnly)(open, 'visible'), (0, _lib.useKeyOnly)(scrolling, 'scrolling'), 'menu transition', className);
	  var rest = (0, _lib.getUnhandledProps)(DropdownMenu, props);
	  var ElementType = (0, _lib.getElementType)(DropdownMenu, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	DropdownMenu.handledProps = ["as", "children", "className", "content", "direction", "open", "scrolling"];
	DropdownMenu.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A dropdown menu can open to the left or to the right. */
	  direction: _propTypes.default.oneOf(['left', 'right']),

	  /** Whether or not the dropdown menu is displayed. */
	  open: _propTypes.default.bool,

	  /** A dropdown menu can scroll. */
	  scrolling: _propTypes.default.bool
	} : {};
	var _default = DropdownMenu;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _get2 = _interopRequireDefault(__webpack_require__(319));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A search item sub-component for Dropdown component.
	 */
	var DropdownSearchInput =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(DropdownSearchInput, _Component);

	  function DropdownSearchInput() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, DropdownSearchInput);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(DropdownSearchInput)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleChange", function (e) {
	      var value = (0, _get2.default)(e, 'target.value');
	      (0, _invoke2.default)(_this.props, 'onChange', e, (0, _objectSpread2.default)({}, _this.props, {
	        value: value
	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRef", function (c) {
	      (0, _lib.handleRef)(_this.props.inputRef, c);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(DropdownSearchInput, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          autoComplete = _this$props.autoComplete,
	          className = _this$props.className,
	          tabIndex = _this$props.tabIndex,
	          type = _this$props.type,
	          value = _this$props.value;
	      var classes = (0, _classnames.default)('search', className);
	      var rest = (0, _lib.getUnhandledProps)(DropdownSearchInput, this.props);
	      return _react.default.createElement("input", (0, _extends2.default)({}, rest, {
	        "aria-autocomplete": "list",
	        autoComplete: autoComplete,
	        className: classes,
	        onChange: this.handleChange,
	        ref: this.handleRef,
	        tabIndex: tabIndex,
	        type: type,
	        value: value
	      }));
	    }
	  }]);
	  return DropdownSearchInput;
	}(_react.Component);

	(0, _defineProperty2.default)(DropdownSearchInput, "defaultProps", {
	  autoComplete: 'off',
	  type: 'text'
	});
	(0, _defineProperty2.default)(DropdownSearchInput, "handledProps", ["as", "autoComplete", "className", "inputRef", "tabIndex", "type", "value"]);
	DropdownSearchInput.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** An input can have the auto complete. */
	  autoComplete: _propTypes.default.string,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A ref handler for input. */
	  inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),

	  /** An input can receive focus. */
	  tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** The HTML input type. */
	  type: _propTypes.default.string,

	  /** Stored value. */
	  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
	} : {};
	DropdownSearchInput.create = (0, _lib.createShorthandFactory)(DropdownSearchInput, function (type) {
	  return {
	    type: type
	  };
	});
	var _default = DropdownSearchInput;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _TextArea.default;
	  }
	});

	var _TextArea = _interopRequireDefault(__webpack_require__(624));

/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _sum2 = _interopRequireDefault(__webpack_require__(464));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _get2 = _interopRequireDefault(__webpack_require__(319));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A TextArea can be used to allow for extended user input.
	 * @see Form
	 */
	var TextArea =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(TextArea, _Component);

	  function TextArea() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, TextArea);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TextArea)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "focus", function () {
	      return _this.ref.focus();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleChange", function (e) {
	      var value = (0, _get2.default)(e, 'target.value');
	      (0, _invoke2.default)(_this.props, 'onChange', e, (0, _objectSpread2.default)({}, _this.props, {
	        value: value
	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleInput", function (e) {
	      var value = (0, _get2.default)(e, 'target.value');
	      (0, _invoke2.default)(_this.props, 'onInput', e, (0, _objectSpread2.default)({}, _this.props, {
	        value: value
	      }));

	      _this.updateHeight();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRef", function (c) {
	      return _this.ref = c;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "removeAutoHeightStyles", function () {
	      _this.ref.style.height = null;
	      _this.ref.style.resize = null;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "updateHeight", function () {
	      var autoHeight = _this.props.autoHeight;
	      if (!_this.ref || !autoHeight) return;

	      var _window$getComputedSt = window.getComputedStyle(_this.ref),
	          minHeight = _window$getComputedSt.minHeight,
	          borderBottomWidth = _window$getComputedSt.borderBottomWidth,
	          borderTopWidth = _window$getComputedSt.borderTopWidth;

	      var borderHeight = (0, _sum2.default)([borderBottomWidth, borderTopWidth].map(function (x) {
	        return parseFloat(x);
	      })); // Measure the scrollHeight and update the height to match.

	      _this.ref.style.height = 'auto';
	      _this.ref.style.overflowY = 'hidden';
	      _this.ref.style.height = "".concat(Math.max(parseFloat(minHeight), Math.ceil(_this.ref.scrollHeight + borderHeight)), "px");
	      _this.ref.style.overflowY = '';
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(TextArea, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.updateHeight();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      // removed autoHeight
	      if (!this.props.autoHeight && prevProps.autoHeight) {
	        this.removeAutoHeightStyles();
	      } // added autoHeight or value changed


	      if (this.props.autoHeight && !prevProps.autoHeight || prevProps.value !== this.props.value) {
	        this.updateHeight();
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          autoHeight = _this$props.autoHeight,
	          rows = _this$props.rows,
	          style = _this$props.style,
	          value = _this$props.value;
	      var rest = (0, _lib.getUnhandledProps)(TextArea, this.props);
	      var ElementType = (0, _lib.getElementType)(TextArea, this.props);
	      var resize = autoHeight ? 'none' : '';
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        onChange: this.handleChange,
	        onInput: this.handleInput,
	        ref: this.handleRef,
	        rows: rows,
	        style: (0, _objectSpread2.default)({
	          resize: resize
	        }, style),
	        value: value
	      }));
	    }
	  }]);
	  return TextArea;
	}(_react.Component);

	(0, _defineProperty2.default)(TextArea, "defaultProps", {
	  as: 'textarea',
	  rows: 3
	});
	(0, _defineProperty2.default)(TextArea, "handledProps", ["as", "autoHeight", "onChange", "onInput", "rows", "style", "value"]);
	TextArea.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Indicates whether height of the textarea fits the content or not. */
	  autoHeight: _propTypes.default.bool,

	  /**
	   * Called on change.
	   * @param {SyntheticEvent} event - The React SyntheticEvent object
	   * @param {object} data - All props and the event value.
	   */
	  onChange: _propTypes.default.func,

	  /**
	   * Called on input.
	   * @param {SyntheticEvent} event - The React SyntheticEvent object
	   * @param {object} data - All props and the event value.
	   */
	  onInput: _propTypes.default.func,

	  /** Indicates row count for a TextArea. */
	  rows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** Custom TextArea style. */
	  style: _propTypes.default.object,

	  /** The value of the textarea. */
	  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
	} : {};
	var _default = TextArea;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _TransitionablePortal.default;
	  }
	});

	var _TransitionablePortal = _interopRequireDefault(__webpack_require__(626));

/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _Portal = _interopRequireDefault(__webpack_require__(528));

	var _Transition = _interopRequireDefault(__webpack_require__(627));

	var _lib = __webpack_require__(242);

	/**
	 * A sugar for `Portal` and `Transition`.
	 * @see Portal
	 * @see Transition
	 */
	var TransitionablePortal =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(TransitionablePortal, _Component);

	  function TransitionablePortal(props) {
	    var _this;

	    (0, _classCallCheck2.default)(this, TransitionablePortal);
	    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TransitionablePortal).call(this, props));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePortalClose", function () {
	      _this.setState({
	        portalOpen: false
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePortalOpen", function () {
	      _this.setState({
	        portalOpen: true
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTransitionHide", function (nothing, data) {
	      var portalOpen = _this.state.portalOpen;

	      _this.setState({
	        transitionVisible: false
	      });

	      (0, _invoke2.default)(_this.props, 'onClose', null, (0, _objectSpread2.default)({}, data, {
	        portalOpen: false,
	        transitionVisible: false
	      }));
	      (0, _invoke2.default)(_this.props, 'onHide', null, (0, _objectSpread2.default)({}, data, {
	        portalOpen: portalOpen,
	        transitionVisible: false
	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTransitionStart", function (nothing, data) {
	      var portalOpen = _this.state.portalOpen;
	      var status = data.status;
	      var transitionVisible = status === _Transition.default.ENTERING;
	      (0, _invoke2.default)(_this.props, 'onStart', null, (0, _objectSpread2.default)({}, data, {
	        portalOpen: portalOpen,
	        transitionVisible: transitionVisible
	      })); // Heads up! TransitionablePortal fires onOpen callback on the start of transition animation

	      if (!transitionVisible) return;

	      _this.setState({
	        transitionVisible: transitionVisible
	      });

	      (0, _invoke2.default)(_this.props, 'onOpen', null, (0, _objectSpread2.default)({}, data, {
	        transitionVisible: transitionVisible,
	        portalOpen: true
	      }));
	    });
	    _this.state = {
	      portalOpen: props.open
	    };
	    return _this;
	  } // ----------------------------------------
	  // Lifecycle
	  // ----------------------------------------


	  (0, _createClass2.default)(TransitionablePortal, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(_ref) {
	      var open = _ref.open;
	      this.setState({
	        portalOpen: open
	      });
	    } // ----------------------------------------
	    // Callback handling
	    // ----------------------------------------

	  }, {
	    key: "render",
	    // ----------------------------------------
	    // Render
	    // ----------------------------------------
	    value: function render() {
	      var _this$props = this.props,
	          children = _this$props.children,
	          transition = _this$props.transition;
	      var _this$state = this.state,
	          portalOpen = _this$state.portalOpen,
	          transitionVisible = _this$state.transitionVisible;
	      var open = portalOpen || transitionVisible;
	      var rest = (0, _lib.getUnhandledProps)(TransitionablePortal, this.props);
	      return _react.default.createElement(_Portal.default, (0, _extends2.default)({}, rest, {
	        open: open,
	        onOpen: this.handlePortalOpen,
	        onClose: this.handlePortalClose
	      }), _react.default.createElement(_Transition.default, (0, _extends2.default)({}, transition, {
	        transitionOnMount: true,
	        onStart: this.handleTransitionStart,
	        onHide: this.handleTransitionHide,
	        visible: portalOpen
	      }), children));
	    }
	  }]);
	  return TransitionablePortal;
	}(_react.Component);

	exports.default = TransitionablePortal;
	(0, _defineProperty2.default)(TransitionablePortal, "defaultProps", {
	  transition: {
	    animation: 'scale',
	    duration: 400
	  }
	});
	(0, _defineProperty2.default)(TransitionablePortal, "handledProps", ["children", "onClose", "onHide", "onOpen", "onStart", "open", "transition"]);
	TransitionablePortal.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Primary content. */
	  children: _propTypes.default.node.isRequired,

	  /**
	   * Called when a close event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and internal state.
	   */
	  onClose: _propTypes.default.func,

	  /**
	   * Callback on each transition that changes visibility to hidden.
	   *
	   * @param {null}
	   * @param {object} data - All props with transition status and internal state.
	   */
	  onHide: _propTypes.default.func,

	  /**
	   * Called when an open event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and internal state.
	   */
	  onOpen: _propTypes.default.func,

	  /**
	   * Callback on animation start.
	   *
	   * @param {null}
	   * @param {object} data - All props with transition status and internal state.
	   */
	  onStart: _propTypes.default.func,

	  /** Controls whether or not the portal is displayed. */
	  open: _propTypes.default.bool,

	  /** Transition props. */
	  transition: _propTypes.default.object
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Transition.default;
	  }
	});

	var _Transition = _interopRequireDefault(__webpack_require__(628));

/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _includes2 = _interopRequireDefault(__webpack_require__(496));

	var _get2 = _interopRequireDefault(__webpack_require__(319));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = __webpack_require__(4);

	var _lib = __webpack_require__(242);

	var _TransitionGroup = _interopRequireDefault(__webpack_require__(629));

	var TRANSITION_TYPE = {
	  ENTERING: 'show',
	  EXITING: 'hide'
	  /**
	   * A transition is an animation usually used to move content in or out of view.
	   */

	};

	var Transition =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Transition, _Component);

	  function Transition() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Transition);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Transition)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleStart", function () {
	      var duration = _this.props.duration;
	      var status = _this.nextStatus;
	      _this.nextStatus = null;

	      _this.setState({
	        status: status,
	        animating: true
	      }, function () {
	        var durationType = TRANSITION_TYPE[status];
	        var durationValue = (0, _lib.normalizeTransitionDuration)(duration, durationType);
	        (0, _invoke2.default)(_this.props, 'onStart', null, (0, _objectSpread2.default)({}, _this.props, {
	          status: status
	        }));
	        _this.timeoutId = setTimeout(_this.handleComplete, durationValue);
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleComplete", function () {
	      var current = _this.state.status;
	      (0, _invoke2.default)(_this.props, 'onComplete', null, (0, _objectSpread2.default)({}, _this.props, {
	        status: current
	      }));

	      if (_this.nextStatus) {
	        _this.handleStart();

	        return;
	      }

	      var status = _this.computeCompletedStatus();

	      var callback = current === Transition.ENTERING ? 'onShow' : 'onHide';

	      _this.setState({
	        status: status,
	        animating: false
	      }, function () {
	        (0, _invoke2.default)(_this.props, callback, null, (0, _objectSpread2.default)({}, _this.props, {
	          status: status
	        }));
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "updateStatus", function () {
	      var animating = _this.state.animating;

	      if (_this.nextStatus) {
	        _this.nextStatus = _this.computeNextStatus();
	        if (!animating) _this.handleStart();
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeClasses", function () {
	      var _this$props = _this.props,
	          animation = _this$props.animation,
	          children = _this$props.children;
	      var _this$state = _this.state,
	          animating = _this$state.animating,
	          status = _this$state.status;
	      var childClasses = (0, _get2.default)(children, 'props.className');
	      var directional = (0, _includes2.default)(_lib.SUI.DIRECTIONAL_TRANSITIONS, animation);

	      if (directional) {
	        return (0, _classnames.default)(animation, childClasses, (0, _lib.useKeyOnly)(animating, 'animating'), (0, _lib.useKeyOnly)(status === Transition.ENTERING, 'in'), (0, _lib.useKeyOnly)(status === Transition.EXITING, 'out'), (0, _lib.useKeyOnly)(status === Transition.EXITED, 'hidden'), (0, _lib.useKeyOnly)(status !== Transition.EXITED, 'visible'), 'transition');
	      }

	      return (0, _classnames.default)(animation, childClasses, (0, _lib.useKeyOnly)(animating, 'animating transition'));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeCompletedStatus", function () {
	      var unmountOnHide = _this.props.unmountOnHide;
	      var status = _this.state.status;
	      if (status === Transition.ENTERING) return Transition.ENTERED;
	      return unmountOnHide ? Transition.UNMOUNTED : Transition.EXITED;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeInitialStatuses", function () {
	      var _this$props2 = _this.props,
	          visible = _this$props2.visible,
	          mountOnShow = _this$props2.mountOnShow,
	          transitionOnMount = _this$props2.transitionOnMount,
	          unmountOnHide = _this$props2.unmountOnHide;

	      if (visible) {
	        if (transitionOnMount) {
	          return {
	            initial: Transition.EXITED,
	            next: Transition.ENTERING
	          };
	        }

	        return {
	          initial: Transition.ENTERED
	        };
	      }

	      if (mountOnShow || unmountOnHide) return {
	        initial: Transition.UNMOUNTED
	      };
	      return {
	        initial: Transition.EXITED
	      };
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeNextStatus", function () {
	      var _this$state2 = _this.state,
	          animating = _this$state2.animating,
	          status = _this$state2.status;
	      if (animating) return status === Transition.ENTERING ? Transition.EXITING : Transition.ENTERING;
	      return status === Transition.ENTERED ? Transition.EXITING : Transition.ENTERING;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeStatuses", function (props) {
	      var status = _this.state.status;
	      var visible = props.visible;

	      if (visible) {
	        return {
	          current: status === Transition.UNMOUNTED && Transition.EXITED,
	          next: status !== Transition.ENTERING && status !== Transition.ENTERED && Transition.ENTERING
	        };
	      }

	      return {
	        next: (status === Transition.ENTERING || status === Transition.ENTERED) && Transition.EXITING
	      };
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeStyle", function () {
	      var _this$props3 = _this.props,
	          children = _this$props3.children,
	          duration = _this$props3.duration;
	      var status = _this.state.status;
	      var childStyle = (0, _get2.default)(children, 'props.style');
	      var type = TRANSITION_TYPE[status];
	      var animationDuration = type && "".concat((0, _lib.normalizeTransitionDuration)(duration, type), "ms");
	      return (0, _objectSpread2.default)({}, childStyle, {
	        animationDuration: animationDuration
	      });
	    });

	    var _this$computeInitialS = _this.computeInitialStatuses(),
	        _status = _this$computeInitialS.initial,
	        next = _this$computeInitialS.next;

	    _this.nextStatus = next;
	    _this.state = {
	      status: _status
	    };
	    return _this;
	  } // ----------------------------------------
	  // Lifecycle
	  // ----------------------------------------


	  (0, _createClass2.default)(Transition, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.updateStatus();
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$computeStatuses = this.computeStatuses(nextProps),
	          status = _this$computeStatuses.current,
	          next = _this$computeStatuses.next;

	      this.nextStatus = next;
	      if (status) this.setState({
	        status: status
	      });
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      this.updateStatus();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      clearTimeout(this.timeoutId);
	    } // ----------------------------------------
	    // Callback handling
	    // ----------------------------------------

	  }, {
	    key: "render",
	    // ----------------------------------------
	    // Render
	    // ----------------------------------------
	    value: function render() {
	      var children = this.props.children;
	      var status = this.state.status;
	      if (status === Transition.UNMOUNTED) return null;
	      return (0, _react.cloneElement)(children, {
	        className: this.computeClasses(),
	        style: this.computeStyle()
	      });
	    }
	  }]);
	  return Transition;
	}(_react.Component);

	exports.default = Transition;
	(0, _defineProperty2.default)(Transition, "defaultProps", {
	  animation: 'fade',
	  duration: 500,
	  visible: true,
	  mountOnShow: true,
	  transitionOnMount: false,
	  unmountOnHide: false
	});
	(0, _defineProperty2.default)(Transition, "ENTERED", 'ENTERED');
	(0, _defineProperty2.default)(Transition, "ENTERING", 'ENTERING');
	(0, _defineProperty2.default)(Transition, "EXITED", 'EXITED');
	(0, _defineProperty2.default)(Transition, "EXITING", 'EXITING');
	(0, _defineProperty2.default)(Transition, "UNMOUNTED", 'UNMOUNTED');
	(0, _defineProperty2.default)(Transition, "Group", _TransitionGroup.default);
	(0, _defineProperty2.default)(Transition, "handledProps", ["animation", "children", "duration", "mountOnShow", "onComplete", "onHide", "onShow", "onStart", "reactKey", "transitionOnMount", "unmountOnHide", "visible"]);
	Transition.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Named animation event to used. Must be defined in CSS. */
	  animation: _propTypes.default.oneOf(_lib.SUI.TRANSITIONS),

	  /** Primary content. */
	  children: _propTypes.default.element.isRequired,

	  /** Duration of the CSS transition animation in milliseconds. */
	  duration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
	    hide: _propTypes.default.number,
	    show: _propTypes.default.number
	  }), _propTypes.default.string]),

	  /** Show the component; triggers the enter or exit animation. */
	  visible: _propTypes.default.bool,

	  /** Wait until the first "enter" transition to mount the component (add it to the DOM). */
	  mountOnShow: _propTypes.default.bool,

	  /**
	   * Callback on each transition that changes visibility to shown.
	   *
	   * @param {null}
	   * @param {object} data - All props with status.
	   */
	  onComplete: _propTypes.default.func,

	  /**
	   * Callback on each transition that changes visibility to hidden.
	   *
	   * @param {null}
	   * @param {object} data - All props with status.
	   */
	  onHide: _propTypes.default.func,

	  /**
	   * Callback on each transition that changes visibility to shown.
	   *
	   * @param {null}
	   * @param {object} data - All props with status.
	   */
	  onShow: _propTypes.default.func,

	  /**
	   * Callback on animation start.
	   *
	   * @param {null}
	   * @param {object} data - All props with status.
	   */
	  onStart: _propTypes.default.func,

	  /** React's key of the element. */
	  reactKey: _propTypes.default.string,

	  /** Run the enter animation when the component mounts, if it is initially shown. */
	  transitionOnMount: _propTypes.default.bool,

	  /** Unmount the component (remove it from the DOM) when it is not shown. */
	  unmountOnHide: _propTypes.default.bool
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _values2 = _interopRequireDefault(__webpack_require__(497));

	var _get2 = _interopRequireDefault(__webpack_require__(319));

	var _has2 = _interopRequireDefault(__webpack_require__(177));

	var _forEach2 = _interopRequireDefault(__webpack_require__(330));

	var _mapValues2 = _interopRequireDefault(__webpack_require__(630));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Transition = _interopRequireDefault(__webpack_require__(628));

	/**
	 * A Transition.Group animates children as they mount and unmount.
	 */
	var TransitionGroup =
	/*#__PURE__*/
	function (_React$Component) {
	  (0, _inherits2.default)(TransitionGroup, _React$Component);

	  function TransitionGroup() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, TransitionGroup);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TransitionGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleOnHide", function (nothing, childProps) {
	      var reactKey = childProps.reactKey;

	      _this.setState(function (state) {
	        var children = (0, _objectSpread2.default)({}, state.children);
	        delete children[reactKey];
	        return {
	          children: children
	        };
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "wrapChild", function (child) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      var _this$props = _this.props,
	          animation = _this$props.animation,
	          duration = _this$props.duration;
	      var key = child.key;
	      var _options$visible = options.visible,
	          visible = _options$visible === void 0 ? true : _options$visible,
	          _options$transitionOn = options.transitionOnMount,
	          transitionOnMount = _options$transitionOn === void 0 ? false : _options$transitionOn;
	      return _react.default.createElement(_Transition.default, {
	        animation: animation,
	        duration: duration,
	        key: key,
	        onHide: _this.handleOnHide,
	        reactKey: key,
	        transitionOnMount: transitionOnMount,
	        visible: visible
	      }, child);
	    });
	    var _children = _this.props.children;
	    _this.state = {
	      children: (0, _mapValues2.default)((0, _lib.getChildMapping)(_children), function (child) {
	        return _this.wrapChild(child);
	      })
	    };
	    return _this;
	  }

	  (0, _createClass2.default)(TransitionGroup, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var _this2 = this;

	      var prevMapping = this.state.children;
	      var nextMapping = (0, _lib.getChildMapping)(nextProps.children);
	      var children = (0, _lib.mergeChildMappings)(prevMapping, nextMapping);
	      (0, _forEach2.default)(children, function (child, key) {
	        var hasPrev = (0, _has2.default)(prevMapping, key);
	        var hasNext = (0, _has2.default)(nextMapping, key);
	        var prevChild = prevMapping[key];
	        var isLeaving = !(0, _get2.default)(prevChild, 'props.visible'); // Heads up!
	        // An item is new (entering), it will be picked from `nextChildren`, so it should be wrapped

	        if (hasNext && (!hasPrev || isLeaving)) {
	          children[key] = _this2.wrapChild(child, {
	            transitionOnMount: true
	          });
	          return;
	        } // Heads up!
	        // An item is old (exiting), it will be picked from `prevChildren`, so it has been already
	        // wrapped, so should be only updated


	        if (!hasNext && hasPrev && !isLeaving) {
	          children[key] = (0, _react.cloneElement)(prevChild, {
	            visible: false
	          });
	          return;
	        } // Heads up!
	        // An item item hasn't changed transition states, but it will be picked from `nextChildren`,
	        // so we should wrap it again


	        var _prevChild$props = prevChild.props,
	            visible = _prevChild$props.visible,
	            transitionOnMount = _prevChild$props.transitionOnMount;
	        children[key] = _this2.wrapChild(child, {
	          transitionOnMount: transitionOnMount,
	          visible: visible
	        });
	      });
	      this.setState({
	        children: children
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var children = this.state.children;
	      var ElementType = (0, _lib.getElementType)(TransitionGroup, this.props);
	      var rest = (0, _lib.getUnhandledProps)(TransitionGroup, this.props);
	      return _react.default.createElement(ElementType, rest, (0, _values2.default)(children));
	    }
	  }]);
	  return TransitionGroup;
	}(_react.default.Component);

	exports.default = TransitionGroup;
	(0, _defineProperty2.default)(TransitionGroup, "defaultProps", {
	  as: _react.Fragment,
	  animation: 'fade',
	  duration: 500
	});
	(0, _defineProperty2.default)(TransitionGroup, "handledProps", ["animation", "as", "children", "duration"]);
	TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Named animation event to used. Must be defined in CSS. */
	  animation: _propTypes.default.oneOf(_lib.SUI.TRANSITIONS),

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Duration of the CSS transition animation in milliseconds. */
	  duration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
	    hide: _propTypes.default.number.isRequired,
	    show: _propTypes.default.number.isRequired
	  }), _propTypes.default.string])
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(339),
	    baseForOwn = __webpack_require__(273),
	    baseIteratee = __webpack_require__(288);

	/**
	 * Creates an object with the same keys as `object` and values generated
	 * by running each own enumerable string keyed property of `object` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns the new mapped object.
	 * @see _.mapKeys
	 * @example
	 *
	 * var users = {
	 *   'fred':    { 'user': 'fred',    'age': 40 },
	 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	 * };
	 *
	 * _.mapValues(users, function(o) { return o.age; });
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.mapValues(users, 'age');
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 */
	function mapValues(object, iteratee) {
	  var result = {};
	  iteratee = baseIteratee(iteratee, 3);

	  baseForOwn(object, function(value, key, object) {
	    baseAssignValue(result, key, iteratee(value, key, object));
	  });
	  return result;
	}

	module.exports = mapValues;


/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Visibility.default;
	  }
	});

	var _Visibility = _interopRequireDefault(__webpack_require__(632));

/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _slicedToArray2 = _interopRequireDefault(__webpack_require__(334));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _forEach2 = _interopRequireDefault(__webpack_require__(330));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _includes2 = _interopRequireDefault(__webpack_require__(496));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * Visibility provides a set of callbacks for when a content appears in the viewport.
	 */
	var Visibility =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Visibility, _Component);

	  function Visibility() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Visibility);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Visibility)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "calculations", {
	      bottomPassed: false,
	      bottomVisible: false,
	      fits: false,
	      passing: false,
	      offScreen: false,
	      onScreen: false,
	      topPassed: false,
	      topVisible: false
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "firedCallbacks", []);
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "fire", function (_ref, value) {
	      var callback = _ref.callback,
	          name = _ref.name;
	      var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	      var _this$props = _this.props,
	          continuous = _this$props.continuous,
	          once = _this$props.once; // Heads up! For the execution is required:
	      // - current value correspond to the fired direction
	      // - `continuous` is true or calculation values are different

	      var matchesDirection = _this.calculations[value] !== reverse;
	      var executionPossible = continuous || _this.calculations[value] !== _this.oldCalculations[value];
	      if (matchesDirection && executionPossible) _this.execute(callback, name); // Heads up! We should remove callback from the happened when it's not `once`

	      if (!once) _this.firedCallbacks = (0, _without2.default)(_this.firedCallbacks, name);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleUpdate", function () {
	      if (_this.ticking) return;
	      _this.ticking = true;
	      _this.frameId = requestAnimationFrame(_this.update);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "update", function () {
	      if (!_this.mounted) return;
	      _this.ticking = false;
	      _this.oldCalculations = _this.calculations;
	      _this.calculations = _this.computeCalculations();
	      _this.pageYOffset = window.pageYOffset;
	      var _this$props2 = _this.props,
	          onBottomPassed = _this$props2.onBottomPassed,
	          onBottomPassedReverse = _this$props2.onBottomPassedReverse,
	          onBottomVisible = _this$props2.onBottomVisible,
	          onBottomVisibleReverse = _this$props2.onBottomVisibleReverse,
	          onPassing = _this$props2.onPassing,
	          onPassingReverse = _this$props2.onPassingReverse,
	          onTopPassed = _this$props2.onTopPassed,
	          onTopPassedReverse = _this$props2.onTopPassedReverse,
	          onTopVisible = _this$props2.onTopVisible,
	          onTopVisibleReverse = _this$props2.onTopVisibleReverse,
	          onOffScreen = _this$props2.onOffScreen,
	          onOnScreen = _this$props2.onOnScreen,
	          updateOn = _this$props2.updateOn;
	      var forward = {
	        bottomPassed: {
	          callback: onBottomPassed,
	          name: 'onBottomPassed'
	        },
	        bottomVisible: {
	          callback: onBottomVisible,
	          name: 'onBottomVisible'
	        },
	        passing: {
	          callback: onPassing,
	          name: 'onPassing'
	        },
	        offScreen: {
	          callback: onOffScreen,
	          name: 'onOffScreen'
	        },
	        onScreen: {
	          callback: onOnScreen,
	          name: 'onOnScreen'
	        },
	        topPassed: {
	          callback: onTopPassed,
	          name: 'onTopPassed'
	        },
	        topVisible: {
	          callback: onTopVisible,
	          name: 'onTopVisible'
	        }
	      };
	      var reverse = {
	        bottomPassed: {
	          callback: onBottomPassedReverse,
	          name: 'onBottomPassedReverse'
	        },
	        bottomVisible: {
	          callback: onBottomVisibleReverse,
	          name: 'onBottomVisibleReverse'
	        },
	        passing: {
	          callback: onPassingReverse,
	          name: 'onPassingReverse'
	        },
	        topPassed: {
	          callback: onTopPassedReverse,
	          name: 'onTopPassedReverse'
	        },
	        topVisible: {
	          callback: onTopVisibleReverse,
	          name: 'onTopVisibleReverse'
	        }
	      };
	      (0, _invoke2.default)(_this.props, 'onUpdate', null, (0, _objectSpread2.default)({}, _this.props, {
	        calculations: _this.calculations
	      }));

	      _this.fireOnPassed(); // Heads up! Reverse callbacks should be fired first


	      (0, _forEach2.default)(reverse, function (data, value) {
	        return _this.fire(data, value, true);
	      });
	      (0, _forEach2.default)(forward, function (data, value) {
	        return _this.fire(data, value);
	      });
	      if (updateOn === 'repaint') _this.handleUpdate();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRef", function (c) {
	      return _this.ref = c;
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Visibility, [{
	    key: "componentWillReceiveProps",
	    // ----------------------------------------
	    // Lifecycle
	    // ----------------------------------------
	    value: function componentWillReceiveProps(_ref2) {
	      var continuous = _ref2.continuous,
	          once = _ref2.once,
	          context = _ref2.context,
	          updateOn = _ref2.updateOn;
	      var cleanHappened = continuous !== this.props.continuous || once !== this.props.once || updateOn !== this.props.updateOn; // Heads up! We should clean up array of happened callbacks, if values of these props are changed

	      if (cleanHappened) this.firedCallbacks = [];

	      if (context !== this.props.context || updateOn !== this.props.updateOn) {
	        this.unattachHandlers(this.props.context);
	        this.attachHandlers(context, updateOn);
	      }
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.mounted = true;
	      if (!(0, _lib.isBrowser)()) return;
	      var _this$props3 = this.props,
	          context = _this$props3.context,
	          fireOnMount = _this$props3.fireOnMount,
	          updateOn = _this$props3.updateOn;
	      this.pageYOffset = window.pageYOffset;
	      this.attachHandlers(context, updateOn);
	      if (fireOnMount) this.update();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      var context = this.props.context;
	      this.unattachHandlers(context);
	      this.mounted = false;
	    }
	  }, {
	    key: "attachHandlers",
	    value: function attachHandlers(context, updateOn) {
	      if (updateOn === 'events') {
	        if (context) {
	          _lib.eventStack.sub('resize', this.handleUpdate, {
	            target: context
	          });

	          _lib.eventStack.sub('scroll', this.handleUpdate, {
	            target: context
	          });
	        }

	        return;
	      } // Heads up!
	      // We will deal with `repaint` there


	      this.handleUpdate();
	    }
	  }, {
	    key: "unattachHandlers",
	    value: function unattachHandlers(context) {
	      if (context) {
	        _lib.eventStack.unsub('resize', this.handleUpdate, {
	          target: context
	        });

	        _lib.eventStack.unsub('scroll', this.handleUpdate, {
	          target: context
	        });
	      }

	      if (this.frameId) cancelAnimationFrame(this.frameId);
	    } // ----------------------------------------
	    // Callback handling
	    // ----------------------------------------

	  }, {
	    key: "execute",
	    value: function execute(callback, name) {
	      var continuous = this.props.continuous;
	      if (!callback) return; // Heads up! When `continuous` is true, callback will be fired always

	      if (!continuous && (0, _includes2.default)(this.firedCallbacks, name)) return;
	      callback(null, (0, _objectSpread2.default)({}, this.props, {
	        calculations: this.calculations
	      }));
	      this.firedCallbacks.push(name);
	    }
	  }, {
	    key: "fireOnPassed",
	    value: function fireOnPassed() {
	      var _this2 = this;

	      var _this$calculations = this.calculations,
	          percentagePassed = _this$calculations.percentagePassed,
	          pixelsPassed = _this$calculations.pixelsPassed;
	      var onPassed = this.props.onPassed;
	      (0, _forEach2.default)(onPassed, function (callback, passed) {
	        var pixelsValue = Number(passed);

	        if (pixelsValue && pixelsPassed >= pixelsValue) {
	          _this2.execute(callback, passed);

	          return;
	        }

	        var matchPercentage = "".concat(passed).match(/^(\d+)%$/);
	        if (!matchPercentage) return;
	        var percentageValue = Number(matchPercentage[1]) / 100;
	        if (percentagePassed >= percentageValue) _this2.execute(callback, passed);
	      });
	    }
	  }, {
	    key: "computeCalculations",
	    // ----------------------------------------
	    // Helpers
	    // ----------------------------------------
	    value: function computeCalculations() {
	      var offset = this.props.offset;

	      var _this$ref$getBounding = this.ref.getBoundingClientRect(),
	          bottom = _this$ref$getBounding.bottom,
	          height = _this$ref$getBounding.height,
	          top = _this$ref$getBounding.top,
	          width = _this$ref$getBounding.width;

	      var _normalizeOffset = (0, _lib.normalizeOffset)(offset),
	          _normalizeOffset2 = (0, _slicedToArray2.default)(_normalizeOffset, 2),
	          topOffset = _normalizeOffset2[0],
	          bottomOffset = _normalizeOffset2[1];

	      var direction = window.pageYOffset > this.pageYOffset ? 'down' : 'up';
	      var topPassed = top < topOffset;
	      var bottomPassed = bottom < bottomOffset;
	      var pixelsPassed = bottomPassed ? 0 : Math.max(top * -1, 0);
	      var percentagePassed = pixelsPassed / height;
	      var bottomVisible = bottom >= bottomOffset && bottom <= window.innerHeight;
	      var topVisible = top >= topOffset && top <= window.innerHeight;
	      var fits = topVisible && bottomVisible;
	      var passing = topPassed && !bottomPassed;
	      var onScreen = (topVisible || topPassed) && !bottomPassed;
	      var offScreen = !onScreen;
	      return {
	        bottomPassed: bottomPassed,
	        bottomVisible: bottomVisible,
	        direction: direction,
	        fits: fits,
	        height: height,
	        passing: passing,
	        percentagePassed: percentagePassed,
	        pixelsPassed: pixelsPassed,
	        offScreen: offScreen,
	        onScreen: onScreen,
	        topPassed: topPassed,
	        topVisible: topVisible,
	        width: width
	      };
	    } // ----------------------------------------
	    // Refs
	    // ----------------------------------------

	  }, {
	    key: "render",
	    // ----------------------------------------
	    // Render
	    // ----------------------------------------
	    value: function render() {
	      var children = this.props.children;
	      var ElementType = (0, _lib.getElementType)(Visibility, this.props);
	      var rest = (0, _lib.getUnhandledProps)(Visibility, this.props);
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        ref: this.handleRef
	      }), children);
	    }
	  }]);
	  return Visibility;
	}(_react.Component);

	exports.default = Visibility;
	(0, _defineProperty2.default)(Visibility, "defaultProps", {
	  context: (0, _lib.isBrowser)() ? window : null,
	  continuous: false,
	  offset: [0, 0],
	  once: true,
	  updateOn: 'events'
	});
	(0, _defineProperty2.default)(Visibility, "handledProps", ["as", "children", "context", "continuous", "fireOnMount", "offset", "onBottomPassed", "onBottomPassedReverse", "onBottomVisible", "onBottomVisibleReverse", "onOffScreen", "onOnScreen", "onPassed", "onPassing", "onPassingReverse", "onTopPassed", "onTopPassedReverse", "onTopVisible", "onTopVisibleReverse", "onUpdate", "once", "updateOn"]);
	Visibility.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Context which visibility should attach onscroll events. */
	  context: _propTypes.default.object,

	  /**
	   * When set to true a callback will occur anytime an element passes a condition not just immediately after the
	   * threshold is met.
	   */
	  continuous: _propTypes.default.bool,

	  /** Fires callbacks immediately after mount. */
	  fireOnMount: _propTypes.default.bool,

	  /**
	   * Element's bottom edge has passed top of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onBottomPassed: _propTypes.default.func,

	  /**
	   * Element's bottom edge has not passed top of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onBottomPassedReverse: _propTypes.default.func,

	  /**
	   * Element's bottom edge has passed bottom of screen
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onBottomVisible: _propTypes.default.func,

	  /**
	   * Element's bottom edge has not passed bottom of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onBottomVisibleReverse: _propTypes.default.func,

	  /**
	   * Value that context should be adjusted in pixels. Useful for making content appear below content fixed to the
	   * page.
	   */
	  offset: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]))]),

	  /** When set to false a callback will occur each time an element passes the threshold for a condition. */
	  once: _propTypes.default.bool,

	  /** Element is not visible on the screen. */
	  onPassed: _propTypes.default.object,

	  /**
	   * Any part of an element is visible on screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onPassing: _propTypes.default.func,

	  /**
	   * Element's top has not passed top of screen but bottom has.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onPassingReverse: _propTypes.default.func,

	  /**
	   * Element is not visible on the screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onOffScreen: _propTypes.default.func,

	  /**
	   * Element is visible on the screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onOnScreen: _propTypes.default.func,

	  /**
	   * Element's top edge has passed top of the screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onTopPassed: _propTypes.default.func,

	  /**
	   * Element's top edge has not passed top of the screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onTopPassedReverse: _propTypes.default.func,

	  /**
	   * Element's top edge has passed bottom of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onTopVisible: _propTypes.default.func,

	  /**
	   * Element's top edge has not passed bottom of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onTopVisibleReverse: _propTypes.default.func,

	  /**
	   * Element's top edge has passed bottom of screen.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onUpdate: _propTypes.default.func,

	  /**
	   * Allows to choose the mode of the position calculations:
	   * - `events` - (default) update and fire callbacks only on scroll/resize events
	   * - `repaint` - update and fire callbacks on browser repaint (animation frames)
	   */
	  updateOn: _propTypes.default.oneOf(['events', 'repaint'])
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Breadcrumb.default;
	  }
	});

	var _Breadcrumb = _interopRequireDefault(__webpack_require__(634));

/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _each2 = _interopRequireDefault(__webpack_require__(329));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _BreadcrumbDivider = _interopRequireDefault(__webpack_require__(635));

	var _BreadcrumbSection = _interopRequireDefault(__webpack_require__(636));

	/**
	 * A breadcrumb is used to show hierarchy between content.
	 */
	function Breadcrumb(props) {
	  var children = props.children,
	      className = props.className,
	      divider = props.divider,
	      icon = props.icon,
	      sections = props.sections,
	      size = props.size;
	  var classes = (0, _classnames.default)('ui', size, 'breadcrumb', className);
	  var rest = (0, _lib.getUnhandledProps)(Breadcrumb, props);
	  var ElementType = (0, _lib.getElementType)(Breadcrumb, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  var childElements = [];
	  (0, _each2.default)(sections, function (section, index) {
	    // section
	    var breadcrumbElement = _BreadcrumbSection.default.create(section);

	    childElements.push(breadcrumbElement); // divider

	    if (index !== sections.length - 1) {
	      var key = "".concat(breadcrumbElement.key, "_divider") || JSON.stringify(section);
	      childElements.push(_BreadcrumbDivider.default.create({
	        content: divider,
	        icon: icon,
	        key: key
	      }));
	    }
	  });
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), childElements);
	}

	Breadcrumb.handledProps = ["as", "children", "className", "divider", "icon", "sections", "size"];
	Breadcrumb.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content of the Breadcrumb.Divider. */
	  divider: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['icon']), _lib.customPropTypes.contentShorthand]),

	  /** For use with the sections prop. Render as an `Icon` component with `divider` class instead of a `div` in
	   *  Breadcrumb.Divider. */
	  icon: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['divider']), _lib.customPropTypes.itemShorthand]),

	  /** Shorthand array of props for Breadcrumb.Section. */
	  sections: _lib.customPropTypes.collectionShorthand,

	  /** Size of Breadcrumb. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium'))
	} : {};
	Breadcrumb.Divider = _BreadcrumbDivider.default;
	Breadcrumb.Section = _BreadcrumbSection.default;
	var _default = Breadcrumb;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	/**
	 * A divider sub-component for Breadcrumb component.
	 */
	function BreadcrumbDivider(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      icon = props.icon;
	  var classes = (0, _classnames.default)('divider', className);
	  var rest = (0, _lib.getUnhandledProps)(BreadcrumbDivider, props);
	  var ElementType = (0, _lib.getElementType)(BreadcrumbDivider, props);

	  if (!(0, _isNil2.default)(icon)) {
	    return _Icon.default.create(icon, {
	      defaultProps: (0, _objectSpread2.default)({}, rest, {
	        className: classes
	      }),
	      autoGenerateKey: false
	    });
	  }

	  if (!(0, _isNil2.default)(content)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), content);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? '/' : children);
	}

	BreadcrumbDivider.handledProps = ["as", "children", "className", "content", "icon"];
	BreadcrumbDivider.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Render as an `Icon` component with `divider` class instead of a `div`. */
	  icon: _lib.customPropTypes.itemShorthand
	} : {};
	BreadcrumbDivider.create = (0, _lib.createShorthandFactory)(BreadcrumbDivider, function (icon) {
	  return {
	    icon: icon
	  };
	});
	var _default = BreadcrumbDivider;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A section sub-component for Breadcrumb component.
	 */
	var BreadcrumbSection =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(BreadcrumbSection, _Component);

	  function BreadcrumbSection() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, BreadcrumbSection);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(BreadcrumbSection)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeElementType", function () {
	      var _this$props = _this.props,
	          link = _this$props.link,
	          onClick = _this$props.onClick;
	      if (link || onClick) return 'a';
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      return (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(BreadcrumbSection, [{
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          active = _this$props2.active,
	          children = _this$props2.children,
	          className = _this$props2.className,
	          content = _this$props2.content,
	          href = _this$props2.href;
	      var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), 'section', className);
	      var rest = (0, _lib.getUnhandledProps)(BreadcrumbSection, this.props);
	      var ElementType = (0, _lib.getElementType)(BreadcrumbSection, this.props, this.computeElementType);
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        href: href,
	        onClick: this.handleClick
	      }), _lib.childrenUtils.isNil(children) ? content : children);
	    }
	  }]);
	  return BreadcrumbSection;
	}(_react.Component);

	exports.default = BreadcrumbSection;
	(0, _defineProperty2.default)(BreadcrumbSection, "handledProps", ["active", "as", "children", "className", "content", "href", "link", "onClick"]);
	BreadcrumbSection.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Style as the currently active section. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Render as an `a` tag instead of a `div` and adds the href attribute. */
	  href: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['link']), _propTypes.default.string]),

	  /** Render as an `a` tag instead of a `div`. */
	  link: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['href']), _propTypes.default.bool]),

	  /**
	   * Called on click. When passed, the component will render as an `a`
	   * tag by default instead of a `div`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func
	} : {};
	BreadcrumbSection.create = (0, _lib.createShorthandFactory)(BreadcrumbSection, function (content) {
	  return {
	    content: content,
	    link: true
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Form.default;
	  }
	});

	var _Form = _interopRequireDefault(__webpack_require__(638));

/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _FormButton = _interopRequireDefault(__webpack_require__(639));

	var _FormCheckbox = _interopRequireDefault(__webpack_require__(641));

	var _FormDropdown = _interopRequireDefault(__webpack_require__(642));

	var _FormField = _interopRequireDefault(__webpack_require__(640));

	var _FormGroup = _interopRequireDefault(__webpack_require__(643));

	var _FormInput = _interopRequireDefault(__webpack_require__(644));

	var _FormRadio = _interopRequireDefault(__webpack_require__(647));

	var _FormSelect = _interopRequireDefault(__webpack_require__(648));

	var _FormTextArea = _interopRequireDefault(__webpack_require__(649));

	/**
	 * A Form displays a set of related user input fields in a structured way.
	 * @see Button
	 * @see Checkbox
	 * @see Dropdown
	 * @see Input
	 * @see Message
	 * @see Radio
	 * @see Select
	 * @see Visibility
	 */
	var Form =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Form, _Component);

	  function Form() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Form);

	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
	      _args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Form)).call.apply(_getPrototypeOf2, [this].concat(_args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleSubmit", function (e) {
	      var action = _this.props.action; // Heads up! Third party libs can pass own data as first argument, we need to check that it has preventDefault()
	      // method.

	      if (typeof action !== 'string') (0, _invoke2.default)(e, 'preventDefault');

	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      _invoke2.default.apply(void 0, [_this.props, 'onSubmit', e, _this.props].concat(args));
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Form, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          action = _this$props.action,
	          children = _this$props.children,
	          className = _this$props.className,
	          error = _this$props.error,
	          inverted = _this$props.inverted,
	          loading = _this$props.loading,
	          reply = _this$props.reply,
	          size = _this$props.size,
	          success = _this$props.success,
	          unstackable = _this$props.unstackable,
	          warning = _this$props.warning,
	          widths = _this$props.widths;
	      var classes = (0, _classnames.default)('ui', size, (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(loading, 'loading'), (0, _lib.useKeyOnly)(reply, 'reply'), (0, _lib.useKeyOnly)(success, 'success'), (0, _lib.useKeyOnly)(unstackable, 'unstackable'), (0, _lib.useKeyOnly)(warning, 'warning'), (0, _lib.useWidthProp)(widths, null, true), 'form', className);
	      var rest = (0, _lib.getUnhandledProps)(Form, this.props);
	      var ElementType = (0, _lib.getElementType)(Form, this.props);
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        action: action,
	        className: classes,
	        onSubmit: this.handleSubmit
	      }), children);
	    }
	  }]);
	  return Form;
	}(_react.Component);

	(0, _defineProperty2.default)(Form, "defaultProps", {
	  as: 'form'
	});
	(0, _defineProperty2.default)(Form, "Field", _FormField.default);
	(0, _defineProperty2.default)(Form, "Button", _FormButton.default);
	(0, _defineProperty2.default)(Form, "Checkbox", _FormCheckbox.default);
	(0, _defineProperty2.default)(Form, "Dropdown", _FormDropdown.default);
	(0, _defineProperty2.default)(Form, "Group", _FormGroup.default);
	(0, _defineProperty2.default)(Form, "Input", _FormInput.default);
	(0, _defineProperty2.default)(Form, "Radio", _FormRadio.default);
	(0, _defineProperty2.default)(Form, "Select", _FormSelect.default);
	(0, _defineProperty2.default)(Form, "TextArea", _FormTextArea.default);
	(0, _defineProperty2.default)(Form, "handledProps", ["action", "as", "children", "className", "error", "inverted", "loading", "onSubmit", "reply", "size", "success", "unstackable", "warning", "widths"]);
	Form.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** The HTML form action */
	  action: _propTypes.default.string,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Automatically show any error Message children. */
	  error: _propTypes.default.bool,

	  /** A form can have its color inverted for contrast. */
	  inverted: _propTypes.default.bool,

	  /** Automatically show a loading indicator. */
	  loading: _propTypes.default.bool,

	  /** The HTML form submit handler. */
	  onSubmit: _propTypes.default.func,

	  /** A comment can contain a form to reply to a comment. This may have arbitrary content. */
	  reply: _propTypes.default.bool,

	  /** A form can vary in size. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium')),

	  /** Automatically show any success Message children. */
	  success: _propTypes.default.bool,

	  /** A form can prevent itself from stacking on mobile. */
	  unstackable: _propTypes.default.bool,

	  /** Automatically show any warning Message children. */
	  warning: _propTypes.default.bool,

	  /** Forms can automatically divide fields to be equal width. */
	  widths: _propTypes.default.oneOf(['equal'])
	} : {};
	var _default = Form;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Button = _interopRequireDefault(__webpack_require__(519));

	var _FormField = _interopRequireDefault(__webpack_require__(640));

	/**
	 * Sugar for <Form.Field control={Button} />.
	 * @see Button
	 * @see Form
	 */
	function FormButton(props) {
	  var control = props.control;
	  var rest = (0, _lib.getUnhandledProps)(FormButton, props);
	  var ElementType = (0, _lib.getElementType)(FormButton, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    control: control
	  }));
	}

	FormButton.handledProps = ["as", "control"];
	FormButton.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A FormField control prop. */
	  control: _FormField.default.propTypes.control
	} : {};
	FormButton.defaultProps = {
	  as: _FormField.default,
	  control: _Button.default
	};
	var _default = FormButton;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _get2 = _interopRequireDefault(__webpack_require__(319));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Checkbox = _interopRequireDefault(__webpack_require__(592));

	var _Radio = _interopRequireDefault(__webpack_require__(590));

	/**
	 * A field is a form element containing a label and an input.
	 * @see Form
	 * @see Button
	 * @see Checkbox
	 * @see Dropdown
	 * @see Input
	 * @see Radio
	 * @see Select
	 * @see Visibility
	 */
	function FormField(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      control = props.control,
	      disabled = props.disabled,
	      error = props.error,
	      inline = props.inline,
	      label = props.label,
	      required = props.required,
	      type = props.type,
	      width = props.width;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(inline, 'inline'), (0, _lib.useKeyOnly)(required, 'required'), (0, _lib.useWidthProp)(width, 'wide'), 'field', className);
	  var rest = (0, _lib.getUnhandledProps)(FormField, props);
	  var ElementType = (0, _lib.getElementType)(FormField, props); // ----------------------------------------
	  // No Control
	  // ----------------------------------------

	  if ((0, _isNil2.default)(control)) {
	    if ((0, _isNil2.default)(label)) {
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes
	      }), _lib.childrenUtils.isNil(children) ? content : children);
	    }

	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), (0, _lib.createHTMLLabel)(label, {
	      autoGenerateKey: false
	    }));
	  } // ----------------------------------------
	  // Checkbox/Radio Control
	  // ----------------------------------------


	  var controlProps = (0, _objectSpread2.default)({}, rest, {
	    content: content,
	    children: children,
	    disabled: disabled,
	    required: required,
	    type: type // wrap HTML checkboxes/radios in the label

	  });

	  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {
	    return _react.default.createElement(ElementType, {
	      className: classes
	    }, _react.default.createElement("label", null, (0, _react.createElement)(control, controlProps), " ", label));
	  } // pass label prop to controls that support it


	  if (control === _Checkbox.default || control === _Radio.default) {
	    return _react.default.createElement(ElementType, {
	      className: classes
	    }, (0, _react.createElement)(control, (0, _objectSpread2.default)({}, controlProps, {
	      label: label
	    })));
	  } // ----------------------------------------
	  // Other Control
	  // ----------------------------------------


	  return _react.default.createElement(ElementType, {
	    className: classes
	  }, (0, _lib.createHTMLLabel)(label, {
	    defaultProps: {
	      htmlFor: (0, _get2.default)(controlProps, 'id')
	    },
	    autoGenerateKey: false
	  }), (0, _react.createElement)(control, controlProps));
	}

	FormField.handledProps = ["as", "children", "className", "content", "control", "disabled", "error", "inline", "label", "required", "type", "width"];
	FormField.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /**
	   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').
	   * Extra FormField props are passed to the control component.
	   * Mutually exclusive with children.
	   */
	  control: _lib.customPropTypes.some([_propTypes.default.func, _propTypes.default.oneOf(['button', 'input', 'select', 'textarea'])]),

	  /** Individual fields may be disabled. */
	  disabled: _propTypes.default.bool,

	  /** Individual fields may display an error state. */
	  error: _propTypes.default.bool,

	  /** A field can have its label next to instead of above it. */
	  inline: _propTypes.default.bool,
	  // Heads Up!
	  // Do not disallow children with `label` shorthand
	  // The `control` might accept a `label` prop and `children`

	  /** Mutually exclusive with children. */
	  label: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object]),

	  /** A field can show that input is mandatory. */
	  required: _propTypes.default.bool,

	  /** Passed to the control component (i.e. <input type='password' />) */
	  type: _lib.customPropTypes.every([_lib.customPropTypes.demand(['control'])]),

	  /** A field can specify its width in grid columns */
	  width: _propTypes.default.oneOf(_lib.SUI.WIDTHS)
	} : {};
	var _default = FormField;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Checkbox = _interopRequireDefault(__webpack_require__(592));

	var _FormField = _interopRequireDefault(__webpack_require__(640));

	/**
	 * Sugar for <Form.Field control={Checkbox} />.
	 * @see Checkbox
	 * @see Form
	 */
	function FormCheckbox(props) {
	  var control = props.control;
	  var rest = (0, _lib.getUnhandledProps)(FormCheckbox, props);
	  var ElementType = (0, _lib.getElementType)(FormCheckbox, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    control: control
	  }));
	}

	FormCheckbox.handledProps = ["as", "control"];
	FormCheckbox.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A FormField control prop. */
	  control: _FormField.default.propTypes.control
	} : {};
	FormCheckbox.defaultProps = {
	  as: _FormField.default,
	  control: _Checkbox.default
	};
	var _default = FormCheckbox;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Dropdown = _interopRequireDefault(__webpack_require__(599));

	var _FormField = _interopRequireDefault(__webpack_require__(640));

	/**
	 * Sugar for <Form.Field control={Dropdown} />.
	 * @see Dropdown
	 * @see Form
	 */
	function FormDropdown(props) {
	  var control = props.control;
	  var rest = (0, _lib.getUnhandledProps)(FormDropdown, props);
	  var ElementType = (0, _lib.getElementType)(FormDropdown, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    control: control
	  }));
	}

	FormDropdown.handledProps = ["as", "control"];
	FormDropdown.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A FormField control prop. */
	  control: _FormField.default.propTypes.control
	} : {};
	FormDropdown.defaultProps = {
	  as: _FormField.default,
	  control: _Dropdown.default
	};
	var _default = FormDropdown;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(353));

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A set of fields can appear grouped together.
	 * @see Form
	 */
	function FormGroup(props) {
	  var children = props.children,
	      className = props.className,
	      grouped = props.grouped,
	      inline = props.inline,
	      unstackable = props.unstackable,
	      widths = props.widths;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(grouped, 'grouped'), (0, _lib.useKeyOnly)(inline, 'inline'), (0, _lib.useKeyOnly)(unstackable, 'unstackable'), (0, _lib.useWidthProp)(widths, null, true), 'fields', className);
	  var rest = (0, _lib.getUnhandledProps)(FormGroup, props);
	  var ElementType = (0, _lib.getElementType)(FormGroup, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), children);
	}

	FormGroup.handledProps = ["as", "children", "className", "grouped", "inline", "unstackable", "widths"];
	FormGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Fields can show related choices. */
	  grouped: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['inline']), _propTypes.default.bool]),

	  /** Multiple fields may be inline in a row. */
	  inline: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['grouped']), _propTypes.default.bool]),

	  /** A form group can prevent itself from stacking on mobile. */
	  unstackable: _propTypes.default.bool,

	  /** Fields Groups can specify their width in grid columns or automatically divide fields to be equal width. */
	  widths: _propTypes.default.oneOf((0, _toConsumableArray2.default)(_lib.SUI.WIDTHS).concat(['equal']))
	} : {};
	var _default = FormGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Input = _interopRequireDefault(__webpack_require__(645));

	var _FormField = _interopRequireDefault(__webpack_require__(640));

	/**
	 * Sugar for <Form.Field control={Input} />.
	 * @see Form
	 * @see Input
	 */
	function FormInput(props) {
	  var control = props.control;
	  var rest = (0, _lib.getUnhandledProps)(FormInput, props);
	  var ElementType = (0, _lib.getElementType)(FormInput, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    control: control
	  }));
	}

	FormInput.handledProps = ["as", "control"];
	FormInput.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A FormField control prop. */
	  control: _FormField.default.propTypes.control
	} : {};
	FormInput.defaultProps = {
	  as: _FormField.default,
	  control: _Input.default
	};
	var _default = FormInput;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Input.default;
	  }
	});

	var _Input = _interopRequireDefault(__webpack_require__(646));

/***/ }),
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _slicedToArray2 = _interopRequireDefault(__webpack_require__(334));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _includes2 = _interopRequireDefault(__webpack_require__(496));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _get2 = _interopRequireDefault(__webpack_require__(319));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Button = _interopRequireDefault(__webpack_require__(519));

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	var _Label = _interopRequireDefault(__webpack_require__(614));

	/**
	 * An Input is a field used to elicit a response from a user.
	 * @see Button
	 * @see Form
	 * @see Icon
	 * @see Label
	 */
	var Input =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Input, _Component);

	  function Input() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Input);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Input)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeIcon", function () {
	      var _this$props = _this.props,
	          loading = _this$props.loading,
	          icon = _this$props.icon;
	      if (!(0, _isNil2.default)(icon)) return icon;
	      if (loading) return 'spinner';
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeTabIndex", function () {
	      var _this$props2 = _this.props,
	          disabled = _this$props2.disabled,
	          tabIndex = _this$props2.tabIndex;
	      if (!(0, _isNil2.default)(tabIndex)) return tabIndex;
	      if (disabled) return -1;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "focus", function () {
	      return _this.inputRef.focus();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "select", function () {
	      return _this.inputRef.select();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleChange", function (e) {
	      var value = (0, _get2.default)(e, 'target.value');
	      (0, _invoke2.default)(_this.props, 'onChange', e, (0, _objectSpread2.default)({}, _this.props, {
	        value: value
	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleChildOverrides", function (child, defaultProps) {
	      return (0, _objectSpread2.default)({}, defaultProps, child.props, {
	        ref: function ref(c) {
	          (0, _lib.handleRef)(child.ref, c);

	          _this.handleInputRef(c);
	        }
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleInputRef", function (c) {
	      return _this.inputRef = c;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "partitionProps", function () {
	      var _this$props3 = _this.props,
	          disabled = _this$props3.disabled,
	          type = _this$props3.type;

	      var tabIndex = _this.computeTabIndex();

	      var unhandled = (0, _lib.getUnhandledProps)(Input, _this.props);

	      var _partitionHTMLProps = (0, _lib.partitionHTMLProps)(unhandled),
	          _partitionHTMLProps2 = (0, _slicedToArray2.default)(_partitionHTMLProps, 2),
	          htmlInputProps = _partitionHTMLProps2[0],
	          rest = _partitionHTMLProps2[1];

	      return [(0, _objectSpread2.default)({}, htmlInputProps, {
	        disabled: disabled,
	        type: type,
	        tabIndex: tabIndex,
	        onChange: _this.handleChange,
	        ref: _this.handleInputRef
	      }), rest];
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Input, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props4 = this.props,
	          action = _this$props4.action,
	          actionPosition = _this$props4.actionPosition,
	          children = _this$props4.children,
	          className = _this$props4.className,
	          disabled = _this$props4.disabled,
	          error = _this$props4.error,
	          fluid = _this$props4.fluid,
	          focus = _this$props4.focus,
	          icon = _this$props4.icon,
	          iconPosition = _this$props4.iconPosition,
	          input = _this$props4.input,
	          inverted = _this$props4.inverted,
	          label = _this$props4.label,
	          labelPosition = _this$props4.labelPosition,
	          loading = _this$props4.loading,
	          size = _this$props4.size,
	          transparent = _this$props4.transparent,
	          type = _this$props4.type;
	      var classes = (0, _classnames.default)('ui', size, (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(focus, 'focus'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(loading, 'loading'), (0, _lib.useKeyOnly)(transparent, 'transparent'), (0, _lib.useValueAndKey)(actionPosition, 'action') || (0, _lib.useKeyOnly)(action, 'action'), (0, _lib.useValueAndKey)(iconPosition, 'icon') || (0, _lib.useKeyOnly)(icon || loading, 'icon'), (0, _lib.useValueAndKey)(labelPosition, 'labeled') || (0, _lib.useKeyOnly)(label, 'labeled'), 'input', className);
	      var ElementType = (0, _lib.getElementType)(Input, this.props);

	      var _this$partitionProps = this.partitionProps(),
	          _this$partitionProps2 = (0, _slicedToArray2.default)(_this$partitionProps, 2),
	          htmlInputProps = _this$partitionProps2[0],
	          rest = _this$partitionProps2[1]; // Render with children
	      // ----------------------------------------


	      if (!_lib.childrenUtils.isNil(children)) {
	        // add htmlInputProps to the `<input />` child
	        var childElements = (0, _map2.default)(_react.Children.toArray(children), function (child) {
	          if (child.type !== 'input') return child;
	          return (0, _react.cloneElement)(child, _this2.handleChildOverrides(child, htmlInputProps));
	        });
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes
	        }), childElements);
	      } // Render Shorthand
	      // ----------------------------------------


	      var actionElement = _Button.default.create(action, {
	        autoGenerateKey: false
	      });

	      var labelElement = _Label.default.create(label, {
	        defaultProps: {
	          className: (0, _classnames.default)('label', // add 'left|right corner'
	          (0, _includes2.default)(labelPosition, 'corner') && labelPosition)
	        },
	        autoGenerateKey: false
	      });

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes
	      }), actionPosition === 'left' && actionElement, labelPosition !== 'right' && labelElement, (0, _lib.createHTMLInput)(input || type, {
	        defaultProps: htmlInputProps,
	        autoGenerateKey: false
	      }), _Icon.default.create(this.computeIcon(), {
	        autoGenerateKey: false
	      }), actionPosition !== 'left' && actionElement, labelPosition === 'right' && labelElement);
	    }
	  }]);
	  return Input;
	}(_react.Component);

	(0, _defineProperty2.default)(Input, "defaultProps", {
	  type: 'text'
	});
	(0, _defineProperty2.default)(Input, "handledProps", ["action", "actionPosition", "as", "children", "className", "disabled", "error", "fluid", "focus", "icon", "iconPosition", "input", "inverted", "label", "labelPosition", "loading", "onChange", "size", "tabIndex", "transparent", "type"]);
	Input.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** An Input can be formatted to alert the user to an action they may perform. */
	  action: _propTypes.default.oneOfType([_propTypes.default.bool, _lib.customPropTypes.itemShorthand]),

	  /** An action can appear along side an Input on the left or right. */
	  actionPosition: _propTypes.default.oneOf(['left']),

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** An Input field can show that it is disabled. */
	  disabled: _propTypes.default.bool,

	  /** An Input field can show the data contains errors. */
	  error: _propTypes.default.bool,

	  /** Take on the size of its container. */
	  fluid: _propTypes.default.bool,

	  /** An Input field can show a user is currently interacting with it. */
	  focus: _propTypes.default.bool,

	  /** Optional Icon to display inside the Input. */
	  icon: _propTypes.default.oneOfType([_propTypes.default.bool, _lib.customPropTypes.itemShorthand]),

	  /** An Icon can appear inside an Input on the left or right. */
	  iconPosition: _propTypes.default.oneOf(['left']),

	  /** Shorthand for creating the HTML Input. */
	  input: _lib.customPropTypes.itemShorthand,

	  /** Format to appear on dark backgrounds. */
	  inverted: _propTypes.default.bool,

	  /** Optional Label to display along side the Input. */
	  label: _lib.customPropTypes.itemShorthand,

	  /** A Label can appear outside an Input on the left or right. */
	  labelPosition: _propTypes.default.oneOf(['left', 'right', 'left corner', 'right corner']),

	  /** An Icon Input field can show that it is currently loading data. */
	  loading: _propTypes.default.bool,

	  /**
	   * Called on change.
	   *
	   * @param {ChangeEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and a proposed value.
	   */
	  onChange: _propTypes.default.func,

	  /** An Input can vary in size. */
	  size: _propTypes.default.oneOf(_lib.SUI.SIZES),

	  /** An Input can receive focus. */
	  tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** Transparent Input has no background. */
	  transparent: _propTypes.default.bool,

	  /** The HTML input type. */
	  type: _propTypes.default.string
	} : {};
	Input.create = (0, _lib.createShorthandFactory)(Input, function (type) {
	  return {
	    type: type
	  };
	});
	var _default = Input;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Radio = _interopRequireDefault(__webpack_require__(590));

	var _FormField = _interopRequireDefault(__webpack_require__(640));

	/**
	 * Sugar for <Form.Field control={Radio} />.
	 * @see Form
	 * @see Radio
	 */
	function FormRadio(props) {
	  var control = props.control;
	  var rest = (0, _lib.getUnhandledProps)(FormRadio, props);
	  var ElementType = (0, _lib.getElementType)(FormRadio, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    control: control
	  }));
	}

	FormRadio.handledProps = ["as", "control"];
	FormRadio.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A FormField control prop. */
	  control: _FormField.default.propTypes.control
	} : {};
	FormRadio.defaultProps = {
	  as: _FormField.default,
	  control: _Radio.default
	};
	var _default = FormRadio;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Select = _interopRequireDefault(__webpack_require__(597));

	var _Dropdown = _interopRequireDefault(__webpack_require__(599));

	var _FormField = _interopRequireDefault(__webpack_require__(640));

	/**
	 * Sugar for <Form.Field control={Select} />.
	 * @see Form
	 * @see Select
	 */
	function FormSelect(props) {
	  var control = props.control,
	      options = props.options;
	  var rest = (0, _lib.getUnhandledProps)(FormSelect, props);
	  var ElementType = (0, _lib.getElementType)(FormSelect, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    control: control,
	    options: options
	  }));
	}

	FormSelect.handledProps = ["as", "control", "options"];
	FormSelect.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A FormField control prop. */
	  control: _FormField.default.propTypes.control,

	  /** Array of Dropdown.Item props e.g. `{ text: '', value: '' }` */
	  options: _propTypes.default.arrayOf(_propTypes.default.shape(_Dropdown.default.Item.propTypes)).isRequired
	} : {};
	FormSelect.defaultProps = {
	  as: _FormField.default,
	  control: _Select.default
	};
	var _default = FormSelect;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _TextArea = _interopRequireDefault(__webpack_require__(623));

	var _FormField = _interopRequireDefault(__webpack_require__(640));

	/**
	 * Sugar for <Form.Field control={TextArea} />.
	 * @see Form
	 * @see TextArea
	 */
	function FormTextArea(props) {
	  var control = props.control;
	  var rest = (0, _lib.getUnhandledProps)(FormTextArea, props);
	  var ElementType = (0, _lib.getElementType)(FormTextArea, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    control: control
	  }));
	}

	FormTextArea.handledProps = ["as", "control"];
	FormTextArea.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A FormField control prop. */
	  control: _FormField.default.propTypes.control
	} : {};
	FormTextArea.defaultProps = {
	  as: _FormField.default,
	  control: _TextArea.default
	};
	var _default = FormTextArea;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Grid.default;
	  }
	});

	var _Grid = _interopRequireDefault(__webpack_require__(651));

/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(353));

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _GridColumn = _interopRequireDefault(__webpack_require__(652));

	var _GridRow = _interopRequireDefault(__webpack_require__(653));

	/**
	 * A grid is used to harmonize negative space in a layout.
	 */
	function Grid(props) {
	  var celled = props.celled,
	      centered = props.centered,
	      children = props.children,
	      className = props.className,
	      columns = props.columns,
	      container = props.container,
	      divided = props.divided,
	      doubling = props.doubling,
	      inverted = props.inverted,
	      padded = props.padded,
	      relaxed = props.relaxed,
	      reversed = props.reversed,
	      stackable = props.stackable,
	      stretched = props.stretched,
	      textAlign = props.textAlign,
	      verticalAlign = props.verticalAlign;
	  var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(centered, 'centered'), (0, _lib.useKeyOnly)(container, 'container'), (0, _lib.useKeyOnly)(doubling, 'doubling'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(stackable, 'stackable'), (0, _lib.useKeyOnly)(stretched, 'stretched'), (0, _lib.useKeyOrValueAndKey)(celled, 'celled'), (0, _lib.useKeyOrValueAndKey)(divided, 'divided'), (0, _lib.useKeyOrValueAndKey)(padded, 'padded'), (0, _lib.useKeyOrValueAndKey)(relaxed, 'relaxed'), (0, _lib.useMultipleProp)(reversed, 'reversed'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useVerticalAlignProp)(verticalAlign), (0, _lib.useWidthProp)(columns, 'column', true), 'grid', className);
	  var rest = (0, _lib.getUnhandledProps)(Grid, props);
	  var ElementType = (0, _lib.getElementType)(Grid, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), children);
	}

	Grid.handledProps = ["as", "celled", "centered", "children", "className", "columns", "container", "divided", "doubling", "inverted", "padded", "relaxed", "reversed", "stackable", "stretched", "textAlign", "verticalAlign"];
	Grid.Column = _GridColumn.default;
	Grid.Row = _GridRow.default;
	Grid.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A grid can have rows divided into cells. */
	  celled: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['internally'])]),

	  /** A grid can have its columns centered. */
	  centered: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Represents column count per row in Grid. */
	  columns: _propTypes.default.oneOf((0, _toConsumableArray2.default)(_lib.SUI.WIDTHS).concat(['equal'])),

	  /** A grid can be combined with a container to use the available layout and alignment. */
	  container: _propTypes.default.bool,

	  /** A grid can have dividers between its columns. */
	  divided: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['vertically'])]),

	  /** A grid can double its column width on tablet and mobile sizes. */
	  doubling: _propTypes.default.bool,

	  /** A grid's colors can be inverted. */
	  inverted: _propTypes.default.bool,

	  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */
	  padded: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['horizontally', 'vertically'])]),

	  /** A grid can increase its gutters to allow for more negative space. */
	  relaxed: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['very'])]),

	  /** A grid can specify that its columns should reverse order at different device sizes. */
	  reversed: _lib.customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),

	  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */
	  stackable: _propTypes.default.bool,

	  /** A grid can stretch its contents to take up the entire grid height. */
	  stretched: _propTypes.default.bool,

	  /** A grid can specify its text alignment. */
	  textAlign: _propTypes.default.oneOf(_lib.SUI.TEXT_ALIGNMENTS),

	  /** A grid can specify its vertical alignment to have all its columns vertically centered. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS)
	} : {};
	var _default = Grid;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A column sub-component for Grid.
	 */
	function GridColumn(props) {
	  var children = props.children,
	      className = props.className,
	      computer = props.computer,
	      color = props.color,
	      floated = props.floated,
	      largeScreen = props.largeScreen,
	      mobile = props.mobile,
	      only = props.only,
	      stretched = props.stretched,
	      tablet = props.tablet,
	      textAlign = props.textAlign,
	      verticalAlign = props.verticalAlign,
	      widescreen = props.widescreen,
	      width = props.width;
	  var classes = (0, _classnames.default)(color, (0, _lib.useKeyOnly)(stretched, 'stretched'), (0, _lib.useMultipleProp)(only, 'only'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useValueAndKey)(floated, 'floated'), (0, _lib.useVerticalAlignProp)(verticalAlign), (0, _lib.useWidthProp)(computer, 'wide computer'), (0, _lib.useWidthProp)(largeScreen, 'wide large screen'), (0, _lib.useWidthProp)(mobile, 'wide mobile'), (0, _lib.useWidthProp)(tablet, 'wide tablet'), (0, _lib.useWidthProp)(widescreen, 'wide widescreen'), (0, _lib.useWidthProp)(width, 'wide'), 'column', className);
	  var rest = (0, _lib.getUnhandledProps)(GridColumn, props);
	  var ElementType = (0, _lib.getElementType)(GridColumn, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), children);
	}

	GridColumn.handledProps = ["as", "children", "className", "color", "computer", "floated", "largeScreen", "mobile", "only", "stretched", "tablet", "textAlign", "verticalAlign", "widescreen", "width"];
	GridColumn.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A grid column can be colored. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** A column can specify a width for a computer. */
	  computer: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['width']), _propTypes.default.oneOf(_lib.SUI.WIDTHS)]),

	  /** A column can sit flush against the left or right edge of a row. */
	  floated: _propTypes.default.oneOf(_lib.SUI.FLOATS),

	  /** A column can specify a width for a large screen device. */
	  largeScreen: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['width']), _propTypes.default.oneOf(_lib.SUI.WIDTHS)]),

	  /** A column can specify a width for a mobile device. */
	  mobile: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['width']), _propTypes.default.oneOf(_lib.SUI.WIDTHS)]),

	  /** A column can appear only for a specific device, or screen sizes. */
	  only: _lib.customPropTypes.multipleProp(_lib.SUI.VISIBILITY),

	  /** A column can stretch its contents to take up the entire grid or row height. */
	  stretched: _propTypes.default.bool,

	  /** A column can specify a width for a tablet device. */
	  tablet: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['width']), _propTypes.default.oneOf(_lib.SUI.WIDTHS)]),

	  /** A column can specify its text alignment. */
	  textAlign: _propTypes.default.oneOf(_lib.SUI.TEXT_ALIGNMENTS),

	  /** A column can specify its vertical alignment to have all its columns vertically centered. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS),

	  /** A column can specify a width for a wide screen device. */
	  widescreen: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['width']), _propTypes.default.oneOf(_lib.SUI.WIDTHS)]),

	  /** Represents width of column. */
	  width: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), _propTypes.default.oneOf(_lib.SUI.WIDTHS)])
	} : {};
	GridColumn.create = (0, _lib.createShorthandFactory)(GridColumn, function (children) {
	  return {
	    children: children
	  };
	});
	var _default = GridColumn;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(353));

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A row sub-component for Grid.
	 */
	function GridRow(props) {
	  var centered = props.centered,
	      children = props.children,
	      className = props.className,
	      color = props.color,
	      columns = props.columns,
	      divided = props.divided,
	      only = props.only,
	      reversed = props.reversed,
	      stretched = props.stretched,
	      textAlign = props.textAlign,
	      verticalAlign = props.verticalAlign;
	  var classes = (0, _classnames.default)(color, (0, _lib.useKeyOnly)(centered, 'centered'), (0, _lib.useKeyOnly)(divided, 'divided'), (0, _lib.useKeyOnly)(stretched, 'stretched'), (0, _lib.useMultipleProp)(only, 'only'), (0, _lib.useMultipleProp)(reversed, 'reversed'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useVerticalAlignProp)(verticalAlign), (0, _lib.useWidthProp)(columns, 'column', true), 'row', className);
	  var rest = (0, _lib.getUnhandledProps)(GridRow, props);
	  var ElementType = (0, _lib.getElementType)(GridRow, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), children);
	}

	GridRow.handledProps = ["as", "centered", "children", "className", "color", "columns", "divided", "only", "reversed", "stretched", "textAlign", "verticalAlign"];
	GridRow.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A row can have its columns centered. */
	  centered: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A grid row can be colored. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Represents column count per line in Row. */
	  columns: _propTypes.default.oneOf((0, _toConsumableArray2.default)(_lib.SUI.WIDTHS).concat(['equal'])),

	  /** A row can have dividers between its columns. */
	  divided: _propTypes.default.bool,

	  /** A row can appear only for a specific device, or screen sizes. */
	  only: _lib.customPropTypes.multipleProp(_lib.SUI.VISIBILITY),

	  /** A row can specify that its columns should reverse order at different device sizes. */
	  reversed: _lib.customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),

	  /** A row can stretch its contents to take up the entire column height. */
	  stretched: _propTypes.default.bool,

	  /** A row can specify its text alignment. */
	  textAlign: _propTypes.default.oneOf(_lib.SUI.TEXT_ALIGNMENTS),

	  /** A row can specify its vertical alignment to have all its columns vertically centered. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS)
	} : {};
	var _default = GridRow;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Message.default;
	  }
	});

	var _Message = _interopRequireDefault(__webpack_require__(655));

/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	var _MessageContent = _interopRequireDefault(__webpack_require__(656));

	var _MessageHeader = _interopRequireDefault(__webpack_require__(657));

	var _MessageList = _interopRequireDefault(__webpack_require__(658));

	var _MessageItem = _interopRequireDefault(__webpack_require__(659));

	/**
	 * A message displays information that explains nearby content.
	 * @see Form
	 */
	var Message =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Message, _Component);

	  function Message() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Message);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Message)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleDismiss", function (e) {
	      var onDismiss = _this.props.onDismiss;
	      if (onDismiss) onDismiss(e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Message, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          attached = _this$props.attached,
	          children = _this$props.children,
	          className = _this$props.className,
	          color = _this$props.color,
	          compact = _this$props.compact,
	          content = _this$props.content,
	          error = _this$props.error,
	          floating = _this$props.floating,
	          header = _this$props.header,
	          hidden = _this$props.hidden,
	          icon = _this$props.icon,
	          info = _this$props.info,
	          list = _this$props.list,
	          negative = _this$props.negative,
	          onDismiss = _this$props.onDismiss,
	          positive = _this$props.positive,
	          size = _this$props.size,
	          success = _this$props.success,
	          visible = _this$props.visible,
	          warning = _this$props.warning;
	      var classes = (0, _classnames.default)('ui', color, size, (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(floating, 'floating'), (0, _lib.useKeyOnly)(hidden, 'hidden'), (0, _lib.useKeyOnly)(icon, 'icon'), (0, _lib.useKeyOnly)(info, 'info'), (0, _lib.useKeyOnly)(negative, 'negative'), (0, _lib.useKeyOnly)(positive, 'positive'), (0, _lib.useKeyOnly)(success, 'success'), (0, _lib.useKeyOnly)(visible, 'visible'), (0, _lib.useKeyOnly)(warning, 'warning'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), 'message', className);

	      var dismissIcon = onDismiss && _react.default.createElement(_Icon.default, {
	        name: "close",
	        onClick: this.handleDismiss
	      });

	      var rest = (0, _lib.getUnhandledProps)(Message, this.props);
	      var ElementType = (0, _lib.getElementType)(Message, this.props);

	      if (!_lib.childrenUtils.isNil(children)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes
	        }), dismissIcon, children);
	      }

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes
	      }), dismissIcon, _Icon.default.create(icon, {
	        autoGenerateKey: false
	      }), (!(0, _isNil2.default)(header) || !(0, _isNil2.default)(content) || !(0, _isNil2.default)(list)) && _react.default.createElement(_MessageContent.default, null, _MessageHeader.default.create(header, {
	        autoGenerateKey: false
	      }), _MessageList.default.create(list, {
	        autoGenerateKey: false
	      }), (0, _lib.createHTMLParagraph)(content, {
	        autoGenerateKey: false
	      })));
	    }
	  }]);
	  return Message;
	}(_react.Component);

	exports.default = Message;
	(0, _defineProperty2.default)(Message, "Content", _MessageContent.default);
	(0, _defineProperty2.default)(Message, "Header", _MessageHeader.default);
	(0, _defineProperty2.default)(Message, "List", _MessageList.default);
	(0, _defineProperty2.default)(Message, "Item", _MessageItem.default);
	(0, _defineProperty2.default)(Message, "handledProps", ["as", "attached", "children", "className", "color", "compact", "content", "error", "floating", "header", "hidden", "icon", "info", "list", "negative", "onDismiss", "positive", "size", "success", "visible", "warning"]);
	Message.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A message can be formatted to attach itself to other content. */
	  attached: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['bottom', 'top'])]),

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A message can be formatted to be different colors. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** A message can only take up the width of its content. */
	  compact: _propTypes.default.bool,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A message may be formatted to display a negative message. Same as `negative`. */
	  error: _propTypes.default.bool,

	  /** A message can float above content that it is related to. */
	  floating: _propTypes.default.bool,

	  /** Shorthand for MessageHeader. */
	  header: _lib.customPropTypes.itemShorthand,

	  /** A message can be hidden. */
	  hidden: _propTypes.default.bool,

	  /** A message can contain an icon. */
	  icon: _propTypes.default.oneOfType([_lib.customPropTypes.itemShorthand, _propTypes.default.bool]),

	  /** A message may be formatted to display information. */
	  info: _propTypes.default.bool,

	  /** Array shorthand items for the MessageList. Mutually exclusive with children. */
	  list: _lib.customPropTypes.collectionShorthand,

	  /** A message may be formatted to display a negative message. Same as `error`. */
	  negative: _propTypes.default.bool,

	  /**
	   * A message that the user can choose to hide.
	   * Called when the user clicks the "x" icon. This also adds the "x" icon.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onDismiss: _propTypes.default.func,

	  /** A message may be formatted to display a positive message.  Same as `success`. */
	  positive: _propTypes.default.bool,

	  /** A message can have different sizes. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium')),

	  /** A message may be formatted to display a positive message.  Same as `positive`. */
	  success: _propTypes.default.bool,

	  /** A message can be set to visible to force itself to be shown. */
	  visible: _propTypes.default.bool,

	  /** A message may be formatted to display warning messages. */
	  warning: _propTypes.default.bool
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A message can contain a content.
	 */
	function MessageContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('content', className);
	  var rest = (0, _lib.getUnhandledProps)(MessageContent, props);
	  var ElementType = (0, _lib.getElementType)(MessageContent, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	MessageContent.handledProps = ["as", "children", "className", "content"];
	MessageContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = MessageContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A message can contain a header.
	 */
	function MessageHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('header', className);
	  var rest = (0, _lib.getUnhandledProps)(MessageHeader, props);
	  var ElementType = (0, _lib.getElementType)(MessageHeader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	MessageHeader.handledProps = ["as", "children", "className", "content"];
	MessageHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	MessageHeader.create = (0, _lib.createShorthandFactory)(MessageHeader, function (val) {
	  return {
	    content: val
	  };
	});
	var _default = MessageHeader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _MessageItem = _interopRequireDefault(__webpack_require__(659));

	/**
	 * A message can contain a list of items.
	 */
	function MessageList(props) {
	  var children = props.children,
	      className = props.className,
	      items = props.items;
	  var classes = (0, _classnames.default)('list', className);
	  var rest = (0, _lib.getUnhandledProps)(MessageList, props);
	  var ElementType = (0, _lib.getElementType)(MessageList, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? (0, _map2.default)(items, _MessageItem.default.create) : children);
	}

	MessageList.handledProps = ["as", "children", "className", "items"];
	MessageList.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand Message.Items. */
	  items: _lib.customPropTypes.collectionShorthand
	} : {};
	MessageList.defaultProps = {
	  as: 'ul'
	};
	MessageList.create = (0, _lib.createShorthandFactory)(MessageList, function (val) {
	  return {
	    items: val
	  };
	});
	var _default = MessageList;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A message list can contain an item.
	 */
	function MessageItem(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('content', className);
	  var rest = (0, _lib.getUnhandledProps)(MessageItem, props);
	  var ElementType = (0, _lib.getElementType)(MessageItem, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	MessageItem.handledProps = ["as", "children", "className", "content"];
	MessageItem.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	MessageItem.defaultProps = {
	  as: 'li'
	};
	MessageItem.create = (0, _lib.createShorthandFactory)(MessageItem, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = MessageItem;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Table.default;
	  }
	});

	var _Table = _interopRequireDefault(__webpack_require__(661));

/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _TableBody = _interopRequireDefault(__webpack_require__(662));

	var _TableCell = _interopRequireDefault(__webpack_require__(663));

	var _TableFooter = _interopRequireDefault(__webpack_require__(664));

	var _TableHeader = _interopRequireDefault(__webpack_require__(665));

	var _TableHeaderCell = _interopRequireDefault(__webpack_require__(666));

	var _TableRow = _interopRequireDefault(__webpack_require__(667));

	/**
	 * A table displays a collections of data grouped into rows.
	 */
	function Table(props) {
	  var attached = props.attached,
	      basic = props.basic,
	      celled = props.celled,
	      children = props.children,
	      className = props.className,
	      collapsing = props.collapsing,
	      color = props.color,
	      columns = props.columns,
	      compact = props.compact,
	      definition = props.definition,
	      fixed = props.fixed,
	      footerRow = props.footerRow,
	      headerRow = props.headerRow,
	      inverted = props.inverted,
	      padded = props.padded,
	      renderBodyRow = props.renderBodyRow,
	      selectable = props.selectable,
	      singleLine = props.singleLine,
	      size = props.size,
	      sortable = props.sortable,
	      stackable = props.stackable,
	      striped = props.striped,
	      structured = props.structured,
	      tableData = props.tableData,
	      textAlign = props.textAlign,
	      unstackable = props.unstackable,
	      verticalAlign = props.verticalAlign;
	  var classes = (0, _classnames.default)('ui', color, size, (0, _lib.useKeyOnly)(celled, 'celled'), (0, _lib.useKeyOnly)(collapsing, 'collapsing'), (0, _lib.useKeyOnly)(definition, 'definition'), (0, _lib.useKeyOnly)(fixed, 'fixed'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(selectable, 'selectable'), (0, _lib.useKeyOnly)(singleLine, 'single line'), (0, _lib.useKeyOnly)(sortable, 'sortable'), (0, _lib.useKeyOnly)(stackable, 'stackable'), (0, _lib.useKeyOnly)(striped, 'striped'), (0, _lib.useKeyOnly)(structured, 'structured'), (0, _lib.useKeyOnly)(unstackable, 'unstackable'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), (0, _lib.useKeyOrValueAndKey)(basic, 'basic'), (0, _lib.useKeyOrValueAndKey)(compact, 'compact'), (0, _lib.useKeyOrValueAndKey)(padded, 'padded'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useVerticalAlignProp)(verticalAlign), (0, _lib.useWidthProp)(columns, 'column'), 'table', className);
	  var rest = (0, _lib.getUnhandledProps)(Table, props);
	  var ElementType = (0, _lib.getElementType)(Table, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), headerRow && _react.default.createElement(_TableHeader.default, null, _TableRow.default.create(headerRow, {
	    defaultProps: {
	      cellAs: 'th'
	    }
	  })), _react.default.createElement(_TableBody.default, null, renderBodyRow && (0, _map2.default)(tableData, function (data, index) {
	    return _TableRow.default.create(renderBodyRow(data, index));
	  })), footerRow && _react.default.createElement(_TableFooter.default, null, _TableRow.default.create(footerRow)));
	}

	Table.handledProps = ["as", "attached", "basic", "celled", "children", "className", "collapsing", "color", "columns", "compact", "definition", "fixed", "footerRow", "headerRow", "inverted", "padded", "renderBodyRow", "selectable", "singleLine", "size", "sortable", "stackable", "striped", "structured", "tableData", "textAlign", "unstackable", "verticalAlign"];
	Table.defaultProps = {
	  as: 'table'
	};
	Table.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Attach table to other content */
	  attached: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['top', 'bottom'])]),

	  /** A table can reduce its complexity to increase readability. */
	  basic: _propTypes.default.oneOfType([_propTypes.default.oneOf(['very']), _propTypes.default.bool]),

	  /** A table may be divided each row into separate cells. */
	  celled: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A table can be collapsing, taking up only as much space as its rows. */
	  collapsing: _propTypes.default.bool,

	  /** A table can be given a color to distinguish it from other tables. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** A table can specify its column count to divide its content evenly. */
	  columns: _propTypes.default.oneOf(_lib.SUI.WIDTHS),

	  /** A table may sometimes need to be more compact to make more rows visible at a time. */
	  compact: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['very'])]),

	  /** A table may be formatted to emphasize a first column that defines a rows content. */
	  definition: _propTypes.default.bool,

	  /**
	   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content
	   */
	  fixed: _propTypes.default.bool,

	  /** Shorthand for a TableRow to be placed within Table.Footer. */
	  footerRow: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for a TableRow to be placed within Table.Header. */
	  headerRow: _lib.customPropTypes.itemShorthand,

	  /** A table's colors can be inverted. */
	  inverted: _propTypes.default.bool,

	  /** A table may sometimes need to be more padded for legibility. */
	  padded: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['very'])]),

	  /**
	   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.
	   *
	   * @param {*} data - An element in the `tableData` array.
	   * @param {number} index - The index of the current element in `tableData`.
	   * @returns {*} Shorthand for a Table.Row.
	   */
	  renderBodyRow: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _lib.customPropTypes.demand(['tableData']), _propTypes.default.func]),

	  /** A table can have its rows appear selectable. */
	  selectable: _propTypes.default.bool,

	  /** A table can specify that its cell contents should remain on a single line and not wrap. */
	  singleLine: _propTypes.default.bool,

	  /** A table can also be small or large. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),

	  /** A table may allow a user to sort contents by clicking on a table header. */
	  sortable: _propTypes.default.bool,

	  /** A table can specify how it stacks table content responsively. */
	  stackable: _propTypes.default.bool,

	  /** A table can stripe alternate rows of content with a darker color to increase contrast. */
	  striped: _propTypes.default.bool,

	  /** A table can be formatted to display complex structured data. */
	  structured: _propTypes.default.bool,

	  /** Data to be passed to the renderBodyRow function. */
	  tableData: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _lib.customPropTypes.demand(['renderBodyRow']), _propTypes.default.array]),

	  /** A table can adjust its text alignment. */
	  textAlign: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified')),

	  /** A table can specify how it stacks table content responsively. */
	  unstackable: _propTypes.default.bool,

	  /** A table can adjust its text alignment. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS)
	} : {};
	Table.Body = _TableBody.default;
	Table.Cell = _TableCell.default;
	Table.Footer = _TableFooter.default;
	Table.Header = _TableHeader.default;
	Table.HeaderCell = _TableHeaderCell.default;
	Table.Row = _TableRow.default;
	var _default = Table;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	function TableBody(props) {
	  var children = props.children,
	      className = props.className;
	  var classes = (0, _classnames.default)(className);
	  var rest = (0, _lib.getUnhandledProps)(TableBody, props);
	  var ElementType = (0, _lib.getElementType)(TableBody, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), children);
	}

	TableBody.handledProps = ["as", "children", "className"];
	TableBody.defaultProps = {
	  as: 'tbody'
	};
	TableBody.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string
	} : {};
	var _default = TableBody;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	/**
	 * A table row can have cells.
	 */
	function TableCell(props) {
	  var active = props.active,
	      children = props.children,
	      className = props.className,
	      collapsing = props.collapsing,
	      content = props.content,
	      disabled = props.disabled,
	      error = props.error,
	      icon = props.icon,
	      negative = props.negative,
	      positive = props.positive,
	      selectable = props.selectable,
	      singleLine = props.singleLine,
	      textAlign = props.textAlign,
	      verticalAlign = props.verticalAlign,
	      warning = props.warning,
	      width = props.width;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(collapsing, 'collapsing'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(negative, 'negative'), (0, _lib.useKeyOnly)(positive, 'positive'), (0, _lib.useKeyOnly)(selectable, 'selectable'), (0, _lib.useKeyOnly)(singleLine, 'single line'), (0, _lib.useKeyOnly)(warning, 'warning'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useVerticalAlignProp)(verticalAlign), (0, _lib.useWidthProp)(width, 'wide'), className);
	  var rest = (0, _lib.getUnhandledProps)(TableCell, props);
	  var ElementType = (0, _lib.getElementType)(TableCell, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _Icon.default.create(icon), content);
	}

	TableCell.handledProps = ["active", "as", "children", "className", "collapsing", "content", "disabled", "error", "icon", "negative", "positive", "selectable", "singleLine", "textAlign", "verticalAlign", "warning", "width"];
	TableCell.defaultProps = {
	  as: 'td'
	};
	TableCell.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A cell can be active or selected by a user. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A cell can be collapsing so that it only uses as much space as required. */
	  collapsing: _propTypes.default.bool,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A cell can be disabled. */
	  disabled: _propTypes.default.bool,

	  /** A cell may call attention to an error or a negative value. */
	  error: _propTypes.default.bool,

	  /** Add an Icon by name, props object, or pass an <Icon /> */
	  icon: _lib.customPropTypes.itemShorthand,

	  /** A cell may let a user know whether a value is bad. */
	  negative: _propTypes.default.bool,

	  /** A cell may let a user know whether a value is good. */
	  positive: _propTypes.default.bool,

	  /** A cell can be selectable. */
	  selectable: _propTypes.default.bool,

	  /** A cell can specify that its contents should remain on a single line and not wrap. */
	  singleLine: _propTypes.default.bool,

	  /** A table cell can adjust its text alignment. */
	  textAlign: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified')),

	  /** A table cell can adjust its text alignment. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS),

	  /** A cell may warn a user. */
	  warning: _propTypes.default.bool,

	  /** A table can specify the width of individual columns independently. */
	  width: _propTypes.default.oneOf(_lib.SUI.WIDTHS)
	} : {};
	TableCell.create = (0, _lib.createShorthandFactory)(TableCell, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = TableCell;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _TableHeader = _interopRequireDefault(__webpack_require__(665));

	/**
	 * A table can have a footer.
	 */
	function TableFooter(props) {
	  var as = props.as;
	  var rest = (0, _lib.getUnhandledProps)(TableFooter, props);
	  return _react.default.createElement(_TableHeader.default, (0, _extends2.default)({}, rest, {
	    as: as
	  }));
	}

	TableFooter.handledProps = ["as"];
	TableFooter.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as
	} : {};
	TableFooter.defaultProps = {
	  as: 'tfoot'
	};
	var _default = TableFooter;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A table can have a header.
	 */
	function TableHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      fullWidth = props.fullWidth;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(fullWidth, 'full-width'), className);
	  var rest = (0, _lib.getUnhandledProps)(TableHeader, props);
	  var ElementType = (0, _lib.getElementType)(TableHeader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	TableHeader.handledProps = ["as", "children", "className", "content", "fullWidth"];
	TableHeader.defaultProps = {
	  as: 'thead'
	};
	TableHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */
	  fullWidth: _propTypes.default.bool
	} : {};
	var _default = TableHeader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _TableCell = _interopRequireDefault(__webpack_require__(663));

	/**
	 * A table can have a header cell.
	 */
	function TableHeaderCell(props) {
	  var as = props.as,
	      className = props.className,
	      sorted = props.sorted;
	  var classes = (0, _classnames.default)((0, _lib.useValueAndKey)(sorted, 'sorted'), className);
	  var rest = (0, _lib.getUnhandledProps)(TableHeaderCell, props);
	  return _react.default.createElement(_TableCell.default, (0, _extends2.default)({}, rest, {
	    as: as,
	    className: classes
	  }));
	}

	TableHeaderCell.handledProps = ["as", "className", "sorted"];
	TableHeaderCell.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A header cell can be sorted in ascending or descending order. */
	  sorted: _propTypes.default.oneOf(['ascending', 'descending'])
	} : {};
	TableHeaderCell.defaultProps = {
	  as: 'th'
	};
	var _default = TableHeaderCell;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _TableCell = _interopRequireDefault(__webpack_require__(663));

	/**
	 * A table can have rows.
	 */
	function TableRow(props) {
	  var active = props.active,
	      cellAs = props.cellAs,
	      cells = props.cells,
	      children = props.children,
	      className = props.className,
	      disabled = props.disabled,
	      error = props.error,
	      negative = props.negative,
	      positive = props.positive,
	      textAlign = props.textAlign,
	      verticalAlign = props.verticalAlign,
	      warning = props.warning;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(negative, 'negative'), (0, _lib.useKeyOnly)(positive, 'positive'), (0, _lib.useKeyOnly)(warning, 'warning'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useVerticalAlignProp)(verticalAlign), className);
	  var rest = (0, _lib.getUnhandledProps)(TableRow, props);
	  var ElementType = (0, _lib.getElementType)(TableRow, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), (0, _map2.default)(cells, function (cell) {
	    return _TableCell.default.create(cell, {
	      defaultProps: {
	        as: cellAs
	      }
	    });
	  }));
	}

	TableRow.handledProps = ["active", "as", "cellAs", "cells", "children", "className", "disabled", "error", "negative", "positive", "textAlign", "verticalAlign", "warning"];
	TableRow.defaultProps = {
	  as: 'tr',
	  cellAs: 'td'
	};
	TableRow.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A row can be active or selected by a user. */
	  active: _propTypes.default.bool,

	  /** An element type to render as (string or function). */
	  cellAs: _lib.customPropTypes.as,

	  /** Shorthand array of props for TableCell. */
	  cells: _lib.customPropTypes.collectionShorthand,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A row can be disabled. */
	  disabled: _propTypes.default.bool,

	  /** A row may call attention to an error or a negative value. */
	  error: _propTypes.default.bool,

	  /** A row may let a user know whether a value is bad. */
	  negative: _propTypes.default.bool,

	  /** A row may let a user know whether a value is good. */
	  positive: _propTypes.default.bool,

	  /** A table row can adjust its text alignment. */
	  textAlign: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified')),

	  /** A table row can adjust its vertical alignment. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS),

	  /** A row may warn a user. */
	  warning: _propTypes.default.bool
	} : {};
	TableRow.create = (0, _lib.createShorthandFactory)(TableRow, function (cells) {
	  return {
	    cells: cells
	  };
	});
	var _default = TableRow;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Container.default;
	  }
	});

	var _Container = _interopRequireDefault(__webpack_require__(669));

/***/ }),
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A container limits content to a maximum width.
	 */
	function Container(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      fluid = props.fluid,
	      text = props.text,
	      textAlign = props.textAlign;
	  var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(text, 'text'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useTextAlignProp)(textAlign), 'container', className);
	  var rest = (0, _lib.getUnhandledProps)(Container, props);
	  var ElementType = (0, _lib.getElementType)(Container, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	Container.handledProps = ["as", "children", "className", "content", "fluid", "text", "textAlign"];
	Container.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Container has no maximum width. */
	  fluid: _propTypes.default.bool,

	  /** Reduce maximum width to more naturally accommodate text. */
	  text: _propTypes.default.bool,

	  /** Align container text. */
	  textAlign: _propTypes.default.oneOf(_lib.SUI.TEXT_ALIGNMENTS)
	} : {};
	var _default = Container;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Divider.default;
	  }
	});

	var _Divider = _interopRequireDefault(__webpack_require__(671));

/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A divider visually segments content into groups.
	 */
	function Divider(props) {
	  var children = props.children,
	      className = props.className,
	      clearing = props.clearing,
	      content = props.content,
	      fitted = props.fitted,
	      hidden = props.hidden,
	      horizontal = props.horizontal,
	      inverted = props.inverted,
	      section = props.section,
	      vertical = props.vertical;
	  var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(clearing, 'clearing'), (0, _lib.useKeyOnly)(fitted, 'fitted'), (0, _lib.useKeyOnly)(hidden, 'hidden'), (0, _lib.useKeyOnly)(horizontal, 'horizontal'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(section, 'section'), (0, _lib.useKeyOnly)(vertical, 'vertical'), 'divider', className);
	  var rest = (0, _lib.getUnhandledProps)(Divider, props);
	  var ElementType = (0, _lib.getElementType)(Divider, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	Divider.handledProps = ["as", "children", "className", "clearing", "content", "fitted", "hidden", "horizontal", "inverted", "section", "vertical"];
	Divider.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Divider can clear the content above it. */
	  clearing: _propTypes.default.bool,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Divider can be fitted without any space above or below it. */
	  fitted: _propTypes.default.bool,

	  /** Divider can divide content without creating a dividing line. */
	  hidden: _propTypes.default.bool,

	  /** Divider can segment content horizontally. */
	  horizontal: _propTypes.default.bool,

	  /** Divider can have its colours inverted. */
	  inverted: _propTypes.default.bool,

	  /** Divider can provide greater margins to divide sections of content. */
	  section: _propTypes.default.bool,

	  /** Divider can segment content vertically. */
	  vertical: _propTypes.default.bool
	} : {};
	var _default = Divider;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Header.default;
	  }
	});

	var _Header = _interopRequireDefault(__webpack_require__(673));

/***/ }),
/* 673 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	var _Image = _interopRequireDefault(__webpack_require__(619));

	var _HeaderSubheader = _interopRequireDefault(__webpack_require__(674));

	var _HeaderContent = _interopRequireDefault(__webpack_require__(675));

	/**
	 * A header provides a short summary of content
	 */
	function Header(props) {
	  var attached = props.attached,
	      block = props.block,
	      children = props.children,
	      className = props.className,
	      color = props.color,
	      content = props.content,
	      disabled = props.disabled,
	      dividing = props.dividing,
	      floated = props.floated,
	      icon = props.icon,
	      image = props.image,
	      inverted = props.inverted,
	      size = props.size,
	      sub = props.sub,
	      subheader = props.subheader,
	      textAlign = props.textAlign;
	  var classes = (0, _classnames.default)('ui', color, size, (0, _lib.useKeyOnly)(block, 'block'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(dividing, 'dividing'), (0, _lib.useValueAndKey)(floated, 'floated'), (0, _lib.useKeyOnly)(icon === true, 'icon'), (0, _lib.useKeyOnly)(image === true, 'image'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(sub, 'sub'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), (0, _lib.useTextAlignProp)(textAlign), 'header', className);
	  var rest = (0, _lib.getUnhandledProps)(Header, props);
	  var ElementType = (0, _lib.getElementType)(Header, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  var iconElement = _Icon.default.create(icon, {
	    autoGenerateKey: false
	  });

	  var imageElement = _Image.default.create(image, {
	    autoGenerateKey: false
	  });

	  var subheaderElement = _HeaderSubheader.default.create(subheader, {
	    autoGenerateKey: false
	  });

	  if (iconElement || imageElement) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), iconElement || imageElement, (content || subheaderElement) && _react.default.createElement(_HeaderContent.default, null, content, subheaderElement));
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), content, subheaderElement);
	}

	Header.handledProps = ["as", "attached", "block", "children", "className", "color", "content", "disabled", "dividing", "floated", "icon", "image", "inverted", "size", "sub", "subheader", "textAlign"];
	Header.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Attach header  to other content, like a segment. */
	  attached: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['top', 'bottom'])]),

	  /** Format header to appear inside a content block. */
	  block: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Color of the header. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Show that the header is inactive. */
	  disabled: _propTypes.default.bool,

	  /** Divide header from the content below it. */
	  dividing: _propTypes.default.bool,

	  /** Header can sit to the left or right of other content. */
	  floated: _propTypes.default.oneOf(_lib.SUI.FLOATS),

	  /** Add an icon by icon name or pass an Icon. */
	  icon: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['image']), _propTypes.default.oneOfType([_propTypes.default.bool, _lib.customPropTypes.itemShorthand])]),

	  /** Add an image by img src or pass an Image. */
	  image: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['icon']), _propTypes.default.oneOfType([_propTypes.default.bool, _lib.customPropTypes.itemShorthand])]),

	  /** Inverts the color of the header for dark backgrounds. */
	  inverted: _propTypes.default.bool,

	  /** Content headings are sized with em and are based on the font-size of their container. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'big', 'massive', 'mini')),

	  /** Headers may be formatted to label smaller or de-emphasized content. */
	  sub: _propTypes.default.bool,

	  /** Shorthand for Header.Subheader. */
	  subheader: _lib.customPropTypes.itemShorthand,

	  /** Align header content. */
	  textAlign: _propTypes.default.oneOf(_lib.SUI.TEXT_ALIGNMENTS)
	} : {};
	Header.Content = _HeaderContent.default;
	Header.Subheader = _HeaderSubheader.default;
	var _default = Header;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 674 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * Headers may contain subheaders.
	 */
	function HeaderSubheader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('sub header', className);
	  var rest = (0, _lib.getUnhandledProps)(HeaderSubheader, props);
	  var ElementType = (0, _lib.getElementType)(HeaderSubheader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	HeaderSubheader.handledProps = ["as", "children", "className", "content"];
	HeaderSubheader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	HeaderSubheader.create = (0, _lib.createShorthandFactory)(HeaderSubheader, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = HeaderSubheader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * Header content wraps the main content when there is an adjacent Icon or Image.
	 */
	function HeaderContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('content', className);
	  var rest = (0, _lib.getUnhandledProps)(HeaderContent, props);
	  var ElementType = (0, _lib.getElementType)(HeaderContent, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	HeaderContent.handledProps = ["as", "children", "className", "content"];
	HeaderContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = HeaderContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _List.default;
	  }
	});

	var _List = _interopRequireDefault(__webpack_require__(677));

/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _ListContent = _interopRequireDefault(__webpack_require__(678));

	var _ListDescription = _interopRequireDefault(__webpack_require__(679));

	var _ListHeader = _interopRequireDefault(__webpack_require__(680));

	var _ListIcon = _interopRequireDefault(__webpack_require__(681));

	var _ListItem = _interopRequireDefault(__webpack_require__(682));

	var _ListList = _interopRequireDefault(__webpack_require__(683));

	/**
	 * A list groups related content.
	 */
	var List =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(List, _Component);

	  function List() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, List);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(List)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleItemOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, itemProps) {
	          (0, _invoke2.default)(predefinedProps, 'onClick', e, itemProps);
	          (0, _invoke2.default)(_this.props, 'onItemClick', e, itemProps);
	        }
	      };
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(List, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          animated = _this$props.animated,
	          bulleted = _this$props.bulleted,
	          celled = _this$props.celled,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content,
	          divided = _this$props.divided,
	          floated = _this$props.floated,
	          horizontal = _this$props.horizontal,
	          inverted = _this$props.inverted,
	          items = _this$props.items,
	          link = _this$props.link,
	          ordered = _this$props.ordered,
	          relaxed = _this$props.relaxed,
	          selection = _this$props.selection,
	          size = _this$props.size,
	          verticalAlign = _this$props.verticalAlign;
	      var classes = (0, _classnames.default)('ui', size, (0, _lib.useKeyOnly)(animated, 'animated'), (0, _lib.useKeyOnly)(bulleted, 'bulleted'), (0, _lib.useKeyOnly)(celled, 'celled'), (0, _lib.useKeyOnly)(divided, 'divided'), (0, _lib.useKeyOnly)(horizontal, 'horizontal'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(link, 'link'), (0, _lib.useKeyOnly)(ordered, 'ordered'), (0, _lib.useKeyOnly)(selection, 'selection'), (0, _lib.useKeyOrValueAndKey)(relaxed, 'relaxed'), (0, _lib.useValueAndKey)(floated, 'floated'), (0, _lib.useVerticalAlignProp)(verticalAlign), 'list', className);
	      var rest = (0, _lib.getUnhandledProps)(List, this.props);
	      var ElementType = (0, _lib.getElementType)(List, this.props);

	      if (!_lib.childrenUtils.isNil(children)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({
	          role: "list",
	          className: classes
	        }, rest), children);
	      }

	      if (!_lib.childrenUtils.isNil(content)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({
	          role: "list",
	          className: classes
	        }, rest), content);
	      }

	      return _react.default.createElement(ElementType, (0, _extends2.default)({
	        role: "list",
	        className: classes
	      }, rest), (0, _map2.default)(items, function (item) {
	        return _ListItem.default.create(item, {
	          overrideProps: _this2.handleItemOverrides
	        });
	      }));
	    }
	  }]);
	  return List;
	}(_react.Component);

	(0, _defineProperty2.default)(List, "Content", _ListContent.default);
	(0, _defineProperty2.default)(List, "Description", _ListDescription.default);
	(0, _defineProperty2.default)(List, "Header", _ListHeader.default);
	(0, _defineProperty2.default)(List, "Icon", _ListIcon.default);
	(0, _defineProperty2.default)(List, "Item", _ListItem.default);
	(0, _defineProperty2.default)(List, "List", _ListList.default);
	(0, _defineProperty2.default)(List, "handledProps", ["animated", "as", "bulleted", "celled", "children", "className", "content", "divided", "floated", "horizontal", "inverted", "items", "link", "onItemClick", "ordered", "relaxed", "selection", "size", "verticalAlign"]);
	List.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A list can animate to set the current item apart from the list. */
	  animated: _propTypes.default.bool,

	  /** A list can mark items with a bullet. */
	  bulleted: _propTypes.default.bool,

	  /** A list can divide its items into cells. */
	  celled: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A list can show divisions between content. */
	  divided: _propTypes.default.bool,

	  /** An list can be floated left or right. */
	  floated: _propTypes.default.oneOf(_lib.SUI.FLOATS),

	  /** A list can be formatted to have items appear horizontally. */
	  horizontal: _propTypes.default.bool,

	  /** A list can be inverted to appear on a dark background. */
	  inverted: _propTypes.default.bool,

	  /** Shorthand array of props for ListItem. */
	  items: _lib.customPropTypes.collectionShorthand,

	  /** A list can be specially formatted for navigation links. */
	  link: _propTypes.default.bool,

	  /**
	   * onClick handler for ListItem. Mutually exclusive with children.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All item props.
	   */
	  onItemClick: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _propTypes.default.func]),

	  /** A list can be ordered numerically. */
	  ordered: _propTypes.default.bool,

	  /** A list can relax its padding to provide more negative space. */
	  relaxed: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['very'])]),

	  /** A selection list formats list items as possible choices. */
	  selection: _propTypes.default.bool,

	  /** A list can vary in size. */
	  size: _propTypes.default.oneOf(_lib.SUI.SIZES),

	  /** An element inside a list can be vertically aligned. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS)
	} : {};
	var _default = List;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _ListDescription = _interopRequireDefault(__webpack_require__(679));

	var _ListHeader = _interopRequireDefault(__webpack_require__(680));

	/**
	 * A list item can contain a content.
	 */
	function ListContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      description = props.description,
	      floated = props.floated,
	      header = props.header,
	      verticalAlign = props.verticalAlign;
	  var classes = (0, _classnames.default)((0, _lib.useValueAndKey)(floated, 'floated'), (0, _lib.useVerticalAlignProp)(verticalAlign), 'content', className);
	  var rest = (0, _lib.getUnhandledProps)(ListContent, props);
	  var ElementType = (0, _lib.getElementType)(ListContent, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _ListHeader.default.create(header), _ListDescription.default.create(description), content);
	}

	ListContent.handledProps = ["as", "children", "className", "content", "description", "floated", "header", "verticalAlign"];
	ListContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for ListDescription. */
	  description: _lib.customPropTypes.itemShorthand,

	  /** An list content can be floated left or right. */
	  floated: _propTypes.default.oneOf(_lib.SUI.FLOATS),

	  /** Shorthand for ListHeader. */
	  header: _lib.customPropTypes.itemShorthand,

	  /** An element inside a list can be vertically aligned. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS)
	} : {};
	ListContent.create = (0, _lib.createShorthandFactory)(ListContent, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = ListContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A list item can contain a description.
	 */
	function ListDescription(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)(className, 'description');
	  var rest = (0, _lib.getUnhandledProps)(ListDescription, props);
	  var ElementType = (0, _lib.getElementType)(ListDescription, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ListDescription.handledProps = ["as", "children", "className", "content"];
	ListDescription.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	ListDescription.create = (0, _lib.createShorthandFactory)(ListDescription, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = ListDescription;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A list item can contain a header.
	 */
	function ListHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('header', className);
	  var rest = (0, _lib.getUnhandledProps)(ListHeader, props);
	  var ElementType = (0, _lib.getElementType)(ListHeader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ListHeader.handledProps = ["as", "children", "className", "content"];
	ListHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	ListHeader.create = (0, _lib.createShorthandFactory)(ListHeader, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = ListHeader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(521));

	/**
	 * A list item can contain an icon.
	 */
	function ListIcon(props) {
	  var className = props.className,
	      verticalAlign = props.verticalAlign;
	  var classes = (0, _classnames.default)((0, _lib.useVerticalAlignProp)(verticalAlign), className);
	  var rest = (0, _lib.getUnhandledProps)(ListIcon, props);
	  return _react.default.createElement(_Icon.default, (0, _extends2.default)({}, rest, {
	    className: classes
	  }));
	}

	ListIcon.handledProps = ["className", "verticalAlign"];
	ListIcon.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** An element inside a list can be vertically aligned. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS)
	} : {};
	ListIcon.create = (0, _lib.createShorthandFactory)(ListIcon, function (name) {
	  return {
	    name: name
	  };
	});
	var _default = ListIcon;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _isPlainObject2 = _interopRequireDefault(__webpack_require__(33));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Image = _interopRequireDefault(__webpack_require__(619));

	var _ListContent = _interopRequireDefault(__webpack_require__(678));

	var _ListDescription = _interopRequireDefault(__webpack_require__(679));

	var _ListHeader = _interopRequireDefault(__webpack_require__(680));

	var _ListIcon = _interopRequireDefault(__webpack_require__(681));

	/**
	 * A list item can contain a set of items.
	 */
	var ListItem =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(ListItem, _Component);

	  function ListItem() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, ListItem);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ListItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var disabled = _this.props.disabled;
	      if (!disabled) (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(ListItem, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content,
	          description = _this$props.description,
	          disabled = _this$props.disabled,
	          header = _this$props.header,
	          icon = _this$props.icon,
	          image = _this$props.image,
	          value = _this$props.value;
	      var ElementType = (0, _lib.getElementType)(ListItem, this.props);
	      var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(ElementType !== 'li', 'item'), className);
	      var rest = (0, _lib.getUnhandledProps)(ListItem, this.props);
	      var valueProp = ElementType === 'li' ? {
	        value: value
	      } : {
	        'data-value': value
	      };

	      if (!_lib.childrenUtils.isNil(children)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, valueProp, {
	          role: "listitem",
	          className: classes,
	          onClick: this.handleClick
	        }, rest), children);
	      }

	      var iconElement = _ListIcon.default.create(icon, {
	        autoGenerateKey: false
	      });

	      var imageElement = _Image.default.create(image, {
	        autoGenerateKey: false
	      }); // See description of `content` prop for explanation about why this is necessary.


	      if (!(0, _react.isValidElement)(content) && (0, _isPlainObject2.default)(content)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, valueProp, {
	          role: "listitem",
	          className: classes,
	          onClick: this.handleClick
	        }, rest), iconElement || imageElement, _ListContent.default.create(content, {
	          autoGenerateKey: false,
	          defaultProps: {
	            header: header,
	            description: description
	          }
	        }));
	      }

	      var headerElement = _ListHeader.default.create(header, {
	        autoGenerateKey: false
	      });

	      var descriptionElement = _ListDescription.default.create(description, {
	        autoGenerateKey: false
	      });

	      if (iconElement || imageElement) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, valueProp, {
	          role: "listitem",
	          className: classes,
	          onClick: this.handleClick
	        }, rest), iconElement || imageElement, (content || headerElement || descriptionElement) && _react.default.createElement(_ListContent.default, null, headerElement, descriptionElement, content));
	      }

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, valueProp, {
	        role: "listitem",
	        className: classes,
	        onClick: this.handleClick
	      }, rest), headerElement, descriptionElement, content);
	    }
	  }]);
	  return ListItem;
	}(_react.Component);

	(0, _defineProperty2.default)(ListItem, "handledProps", ["active", "as", "children", "className", "content", "description", "disabled", "header", "icon", "image", "onClick", "value"]);
	ListItem.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A list item can active. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /**
	   * Shorthand for primary content.
	   *
	   * Heads up!
	   *
	   * This is handled slightly differently than the typical `content` prop since
	   * the wrapping ListContent is not used when there's no icon or image.
	   *
	   * If you pass content as:
	   * - an element/literal, it's treated as the sibling node to
	   * header/description (whether wrapped in Item.Content or not).
	   * - a props object, it forces the presence of Item.Content and passes those
	   * props to it. If you pass a content prop within that props object, it
	   * will be treated as the sibling node to header/description.
	   */
	  content: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for ListDescription. */
	  description: _lib.customPropTypes.itemShorthand,

	  /** A list item can disabled. */
	  disabled: _propTypes.default.bool,

	  /** Shorthand for ListHeader. */
	  header: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for ListIcon. */
	  icon: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['image']), _lib.customPropTypes.itemShorthand]),

	  /** Shorthand for Image. */
	  image: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['icon']), _lib.customPropTypes.itemShorthand]),

	  /** A ListItem can be clicked */
	  onClick: _propTypes.default.func,

	  /** A value for an ordered list. */
	  value: _propTypes.default.string
	} : {};
	ListItem.create = (0, _lib.createShorthandFactory)(ListItem, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = ListItem;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A list can contain a sub list.
	 */
	function ListList(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var rest = (0, _lib.getUnhandledProps)(ListList, props);
	  var ElementType = (0, _lib.getElementType)(ListList, props);
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(ElementType !== 'ul' && ElementType !== 'ol', 'list'), className);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ListList.handledProps = ["as", "children", "className", "content"];
	ListList.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = ListList;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Loader.default;
	  }
	});

	var _Loader = _interopRequireDefault(__webpack_require__(685));

/***/ }),
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A loader alerts a user to wait for an activity to complete.
	 * @see Dimmer
	 */
	function Loader(props) {
	  var active = props.active,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      disabled = props.disabled,
	      indeterminate = props.indeterminate,
	      inline = props.inline,
	      inverted = props.inverted,
	      size = props.size;
	  var classes = (0, _classnames.default)('ui', size, (0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(indeterminate, 'indeterminate'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(children || content, 'text'), (0, _lib.useKeyOrValueAndKey)(inline, 'inline'), 'loader', className);
	  var rest = (0, _lib.getUnhandledProps)(Loader, props);
	  var ElementType = (0, _lib.getElementType)(Loader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	Loader.handledProps = ["active", "as", "children", "className", "content", "disabled", "indeterminate", "inline", "inverted", "size"];
	Loader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A loader can be active or visible. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A loader can be disabled or hidden. */
	  disabled: _propTypes.default.bool,

	  /** A loader can show it's unsure of how long a task will take. */
	  indeterminate: _propTypes.default.bool,

	  /** Loaders can appear inline with content. */
	  inline: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['centered'])]),

	  /** Loaders can have their colors inverted. */
	  inverted: _propTypes.default.bool,

	  /** Loaders can have different sizes. */
	  size: _propTypes.default.oneOf(_lib.SUI.SIZES)
	} : {};
	var _default = Loader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Placeholder.default;
	  }
	});

	var _Placeholder = _interopRequireDefault(__webpack_require__(687));

/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _PlaceholderHeader = _interopRequireDefault(__webpack_require__(688));

	var _PlaceholderImage = _interopRequireDefault(__webpack_require__(689));

	var _PlaceholderLine = _interopRequireDefault(__webpack_require__(690));

	var _PlaceholderParagraph = _interopRequireDefault(__webpack_require__(691));

	/**
	 * A placeholder is used to reserve splace for content that soon will appear in a layout.
	 */
	function Placeholder(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      fluid = props.fluid,
	      inverted = props.inverted;
	  var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(inverted, 'inverted'), 'placeholder', className);
	  var rest = (0, _lib.getUnhandledProps)(Placeholder, props);
	  var ElementType = (0, _lib.getElementType)(Placeholder, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	Placeholder.handledProps = ["as", "children", "className", "content", "fluid", "inverted"];
	Placeholder.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A fluid placeholder takes up the width of its container. */
	  fluid: _propTypes.default.bool,

	  /** A placeholder can have their colors inverted. */
	  inverted: _propTypes.default.bool
	} : {};
	Placeholder.Header = _PlaceholderHeader.default;
	Placeholder.Image = _PlaceholderImage.default;
	Placeholder.Line = _PlaceholderLine.default;
	Placeholder.Paragraph = _PlaceholderParagraph.default;
	var _default = Placeholder;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A placeholder can contain a header.
	 */
	function PlaceholderHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      image = props.image;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(image, 'image'), 'header', className);
	  var rest = (0, _lib.getUnhandledProps)(PlaceholderHeader, props);
	  var ElementType = (0, _lib.getElementType)(PlaceholderHeader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	PlaceholderHeader.handledProps = ["as", "children", "className", "content", "image"];
	PlaceholderHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A placeholder can contain an image. */
	  image: _propTypes.default.bool
	} : {};
	var _default = PlaceholderHeader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A placeholder can contain an image.
	 */
	function PlaceholderImage(props) {
	  var className = props.className,
	      square = props.square,
	      rectangular = props.rectangular;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(square, 'square'), (0, _lib.useKeyOnly)(rectangular, 'rectangular'), 'image', className);
	  var rest = (0, _lib.getUnhandledProps)(PlaceholderImage, props);
	  var ElementType = (0, _lib.getElementType)(PlaceholderImage, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }));
	}

	PlaceholderImage.handledProps = ["as", "className", "rectangular", "square"];
	PlaceholderImage.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** An image can modify size correctly with responsive styles. */
	  square: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['rectangular']), _propTypes.default.bool]),

	  /** An image can modify size correctly with responsive styles. */
	  rectangular: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['square']), _propTypes.default.bool])
	} : {};
	var _default = PlaceholderImage;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A placeholder can contain have lines of text.
	 */
	function PlaceholderLine(props) {
	  var className = props.className,
	      length = props.length;
	  var classes = (0, _classnames.default)('line', length, className);
	  var rest = (0, _lib.getUnhandledProps)(PlaceholderLine, props);
	  var ElementType = (0, _lib.getElementType)(PlaceholderLine, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }));
	}

	PlaceholderLine.handledProps = ["as", "className", "length"];
	PlaceholderLine.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A line can specify how long its contents should appear. */
	  length: _propTypes.default.oneOf(['full', 'very long', 'long', 'medium', 'short', 'very short'])
	} : {};
	var _default = PlaceholderLine;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A placeholder can contain a paragraph.
	 */
	function PlaceholderParagraph(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('paragraph', className);
	  var rest = (0, _lib.getUnhandledProps)(PlaceholderParagraph, props);
	  var ElementType = (0, _lib.getElementType)(PlaceholderParagraph, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	PlaceholderParagraph.handledProps = ["as", "children", "className", "content"];
	PlaceholderParagraph.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = PlaceholderParagraph;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Rail.default;
	  }
	});

	var _Rail = _interopRequireDefault(__webpack_require__(693));

/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A rail is used to show accompanying content outside the boundaries of the main view of a site.
	 */
	function Rail(props) {
	  var attached = props.attached,
	      children = props.children,
	      className = props.className,
	      close = props.close,
	      content = props.content,
	      dividing = props.dividing,
	      internal = props.internal,
	      position = props.position,
	      size = props.size;
	  var classes = (0, _classnames.default)('ui', position, size, (0, _lib.useKeyOnly)(attached, 'attached'), (0, _lib.useKeyOnly)(dividing, 'dividing'), (0, _lib.useKeyOnly)(internal, 'internal'), (0, _lib.useKeyOrValueAndKey)(close, 'close'), 'rail', className);
	  var rest = (0, _lib.getUnhandledProps)(Rail, props);
	  var ElementType = (0, _lib.getElementType)(Rail, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	Rail.handledProps = ["as", "attached", "children", "className", "close", "content", "dividing", "internal", "position", "size"];
	Rail.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A rail can appear attached to the main viewport. */
	  attached: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A rail can appear closer to the main viewport. */
	  close: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['very'])]),

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A rail can create a division between itself and a container. */
	  dividing: _propTypes.default.bool,

	  /** A rail can attach itself to the inside of a container. */
	  internal: _propTypes.default.bool,

	  /** A rail can be presented on the left or right side of a container. */
	  position: _propTypes.default.oneOf(_lib.SUI.FLOATS).isRequired,

	  /** A rail can have different sizes. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium'))
	} : {};
	var _default = Rail;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Reveal.default;
	  }
	});

	var _Reveal = _interopRequireDefault(__webpack_require__(695));

/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _RevealContent = _interopRequireDefault(__webpack_require__(696));

	/**
	 * A reveal displays additional content in place of previous content when activated.
	 */
	function Reveal(props) {
	  var active = props.active,
	      animated = props.animated,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      disabled = props.disabled,
	      instant = props.instant;
	  var classes = (0, _classnames.default)('ui', animated, (0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(instant, 'instant'), 'reveal', className);
	  var rest = (0, _lib.getUnhandledProps)(Reveal, props);
	  var ElementType = (0, _lib.getElementType)(Reveal, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	Reveal.handledProps = ["active", "animated", "as", "children", "className", "content", "disabled", "instant"];
	Reveal.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** An active reveal displays its hidden content. */
	  active: _propTypes.default.bool,

	  /** An animation name that will be applied to Reveal. */
	  animated: _propTypes.default.oneOf(['fade', 'small fade', 'move', 'move right', 'move up', 'move down', 'rotate', 'rotate left']),

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A disabled reveal will not animate when hovered. */
	  disabled: _propTypes.default.bool,

	  /** An element can show its content without delay. */
	  instant: _propTypes.default.bool
	} : {};
	Reveal.Content = _RevealContent.default;
	var _default = Reveal;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A content sub-component for the Reveal.
	 */
	function RevealContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      hidden = props.hidden,
	      visible = props.visible;
	  var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(hidden, 'hidden'), (0, _lib.useKeyOnly)(visible, 'visible'), 'content', className);
	  var rest = (0, _lib.getUnhandledProps)(RevealContent, props);
	  var ElementType = (0, _lib.getElementType)(RevealContent, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	RevealContent.handledProps = ["as", "children", "className", "content", "hidden", "visible"];
	RevealContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A reveal may contain content that is visible before interaction. */
	  hidden: _propTypes.default.bool,

	  /** A reveal may contain content that is hidden before user interaction. */
	  visible: _propTypes.default.bool
	} : {};
	var _default = RevealContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Segment.default;
	  }
	});

	var _Segment = _interopRequireDefault(__webpack_require__(698));

/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _SegmentGroup = _interopRequireDefault(__webpack_require__(699));

	var _SegmentInline = _interopRequireDefault(__webpack_require__(700));

	/**
	 * A segment is used to create a grouping of related content.
	 */
	function Segment(props) {
	  var attached = props.attached,
	      basic = props.basic,
	      children = props.children,
	      circular = props.circular,
	      className = props.className,
	      clearing = props.clearing,
	      color = props.color,
	      compact = props.compact,
	      content = props.content,
	      disabled = props.disabled,
	      floated = props.floated,
	      inverted = props.inverted,
	      loading = props.loading,
	      placeholder = props.placeholder,
	      padded = props.padded,
	      piled = props.piled,
	      raised = props.raised,
	      secondary = props.secondary,
	      size = props.size,
	      stacked = props.stacked,
	      tertiary = props.tertiary,
	      textAlign = props.textAlign,
	      vertical = props.vertical;
	  var classes = (0, _classnames.default)('ui', color, size, (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(circular, 'circular'), (0, _lib.useKeyOnly)(clearing, 'clearing'), (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(loading, 'loading'), (0, _lib.useKeyOnly)(placeholder, 'placeholder'), (0, _lib.useKeyOnly)(piled, 'piled'), (0, _lib.useKeyOnly)(raised, 'raised'), (0, _lib.useKeyOnly)(secondary, 'secondary'), (0, _lib.useKeyOnly)(stacked, 'stacked'), (0, _lib.useKeyOnly)(tertiary, 'tertiary'), (0, _lib.useKeyOnly)(vertical, 'vertical'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), (0, _lib.useKeyOrValueAndKey)(padded, 'padded'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useValueAndKey)(floated, 'floated'), 'segment', className);
	  var rest = (0, _lib.getUnhandledProps)(Segment, props);
	  var ElementType = (0, _lib.getElementType)(Segment, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	Segment.handledProps = ["as", "attached", "basic", "children", "circular", "className", "clearing", "color", "compact", "content", "disabled", "floated", "inverted", "loading", "padded", "piled", "placeholder", "raised", "secondary", "size", "stacked", "tertiary", "textAlign", "vertical"];
	Segment.Group = _SegmentGroup.default;
	Segment.Inline = _SegmentInline.default;
	Segment.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Attach segment to other content, like a header. */
	  attached: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['top', 'bottom'])]),

	  /** A basic segment has no special formatting. */
	  basic: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** A segment can be circular. */
	  circular: _propTypes.default.bool,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A segment can clear floated content. */
	  clearing: _propTypes.default.bool,

	  /** Segment can be colored. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** A segment may take up only as much space as is necessary. */
	  compact: _propTypes.default.bool,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A segment may show its content is disabled. */
	  disabled: _propTypes.default.bool,

	  /** Segment content can be floated to the left or right. */
	  floated: _propTypes.default.oneOf(_lib.SUI.FLOATS),

	  /** A segment can have its colors inverted for contrast. */
	  inverted: _propTypes.default.bool,

	  /** A segment may show its content is being loaded. */
	  loading: _propTypes.default.bool,

	  /** A segment can increase its padding. */
	  padded: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['very'])]),

	  /** A segment can be used to reserve space for conditionally displayed content. */
	  placeholder: _propTypes.default.bool,

	  /** Formatted to look like a pile of pages. */
	  piled: _propTypes.default.bool,

	  /** A segment may be formatted to raise above the page. */
	  raised: _propTypes.default.bool,

	  /** A segment can be formatted to appear less noticeable. */
	  secondary: _propTypes.default.bool,

	  /** A segment can have different sizes. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium')),

	  /** Formatted to show it contains multiple pages. */
	  stacked: _propTypes.default.bool,

	  /** A segment can be formatted to appear even less noticeable. */
	  tertiary: _propTypes.default.bool,

	  /** Formats content to be aligned as part of a vertical group. */
	  textAlign: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified')),

	  /** Formats content to be aligned vertically. */
	  vertical: _propTypes.default.bool
	} : {};
	var _default = Segment;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A group of segments can be formatted to appear together.
	 */
	function SegmentGroup(props) {
	  var children = props.children,
	      className = props.className,
	      compact = props.compact,
	      content = props.content,
	      horizontal = props.horizontal,
	      piled = props.piled,
	      raised = props.raised,
	      size = props.size,
	      stacked = props.stacked;
	  var classes = (0, _classnames.default)('ui', size, (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(horizontal, 'horizontal'), (0, _lib.useKeyOnly)(piled, 'piled'), (0, _lib.useKeyOnly)(raised, 'raised'), (0, _lib.useKeyOnly)(stacked, 'stacked'), 'segments', className);
	  var rest = (0, _lib.getUnhandledProps)(SegmentGroup, props);
	  var ElementType = (0, _lib.getElementType)(SegmentGroup, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	SegmentGroup.handledProps = ["as", "children", "className", "compact", "content", "horizontal", "piled", "raised", "size", "stacked"];
	SegmentGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A segment may take up only as much space as is necessary. */
	  compact: _propTypes.default.bool,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Formats content to be aligned horizontally. */
	  horizontal: _propTypes.default.bool,

	  /** Formatted to look like a pile of pages. */
	  piled: _propTypes.default.bool,

	  /** A segment group may be formatted to raise above the page. */
	  raised: _propTypes.default.bool,

	  /** A segment group can have different sizes. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium')),

	  /** Formatted to show it contains multiple pages. */
	  stacked: _propTypes.default.bool
	} : {};
	var _default = SegmentGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A placeholder segment can be inline.
	 */
	function SegmentInline(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('inline', className);
	  var rest = (0, _lib.getUnhandledProps)(SegmentInline, props);
	  var ElementType = (0, _lib.getElementType)(SegmentInline, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	SegmentInline.handledProps = ["as", "children", "className", "content"];
	SegmentInline.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = SegmentInline;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Step.default;
	  }
	});

	var _Step = _interopRequireDefault(__webpack_require__(702));

/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	var _StepContent = _interopRequireDefault(__webpack_require__(703));

	var _StepDescription = _interopRequireDefault(__webpack_require__(704));

	var _StepGroup = _interopRequireDefault(__webpack_require__(706));

	var _StepTitle = _interopRequireDefault(__webpack_require__(705));

	/**
	 * A step shows the completion status of an activity in a series of activities.
	 */
	var Step =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Step, _Component);

	  function Step() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Step);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Step)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeElementType", function () {
	      var onClick = _this.props.onClick;
	      if (onClick) return 'a';
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var disabled = _this.props.disabled;
	      if (!disabled) (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Step, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          completed = _this$props.completed,
	          content = _this$props.content,
	          description = _this$props.description,
	          disabled = _this$props.disabled,
	          href = _this$props.href,
	          icon = _this$props.icon,
	          link = _this$props.link,
	          title = _this$props.title;
	      var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(completed, 'completed'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(link, 'link'), 'step', className);
	      var rest = (0, _lib.getUnhandledProps)(Step, this.props);
	      var ElementType = (0, _lib.getElementType)(Step, this.props, this.computeElementType);

	      if (!_lib.childrenUtils.isNil(children)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes,
	          href: href,
	          onClick: this.handleClick
	        }), children);
	      }

	      if (!_lib.childrenUtils.isNil(content)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes,
	          href: href,
	          onClick: this.handleClick
	        }), content);
	      }

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        href: href,
	        onClick: this.handleClick
	      }), _Icon.default.create(icon, {
	        autoGenerateKey: false
	      }), _StepContent.default.create({
	        description: description,
	        title: title
	      }, {
	        autoGenerateKey: false
	      }));
	    }
	  }]);
	  return Step;
	}(_react.Component);

	(0, _defineProperty2.default)(Step, "Content", _StepContent.default);
	(0, _defineProperty2.default)(Step, "Description", _StepDescription.default);
	(0, _defineProperty2.default)(Step, "Group", _StepGroup.default);
	(0, _defineProperty2.default)(Step, "Title", _StepTitle.default);
	(0, _defineProperty2.default)(Step, "handledProps", ["active", "as", "children", "className", "completed", "content", "description", "disabled", "href", "icon", "link", "onClick", "ordered", "title"]);
	Step.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A step can be highlighted as active. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A step can show that a user has completed it. */
	  completed: _propTypes.default.bool,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for StepDescription. */
	  description: _lib.customPropTypes.itemShorthand,

	  /** Show that the Loader is inactive. */
	  disabled: _propTypes.default.bool,

	  /** Render as an `a` tag instead of a `div` and adds the href attribute. */
	  href: _propTypes.default.string,

	  /** Shorthand for Icon. */
	  icon: _lib.customPropTypes.itemShorthand,

	  /** A step can be link. */
	  link: _propTypes.default.bool,

	  /**
	   * Called on click. When passed, the component will render as an `a`
	   * tag by default instead of a `div`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /** A step can show a ordered sequence of steps. Passed from StepGroup. */
	  ordered: _propTypes.default.bool,

	  /** Shorthand for StepTitle. */
	  title: _lib.customPropTypes.itemShorthand
	} : {};
	Step.create = (0, _lib.createShorthandFactory)(Step, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = Step;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _StepDescription = _interopRequireDefault(__webpack_require__(704));

	var _StepTitle = _interopRequireDefault(__webpack_require__(705));

	/**
	 * A step can contain a content.
	 */
	function StepContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      description = props.description,
	      title = props.title;
	  var classes = (0, _classnames.default)('content', className);
	  var rest = (0, _lib.getUnhandledProps)(StepContent, props);
	  var ElementType = (0, _lib.getElementType)(StepContent, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  if (!_lib.childrenUtils.isNil(content)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), content);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _StepTitle.default.create(title, {
	    autoGenerateKey: false
	  }), _StepDescription.default.create(description, {
	    autoGenerateKey: false
	  }));
	}

	StepContent.handledProps = ["as", "children", "className", "content", "description", "title"];
	StepContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for StepDescription. */
	  description: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for StepTitle. */
	  title: _lib.customPropTypes.itemShorthand
	} : {};
	StepContent.create = (0, _lib.createShorthandFactory)(StepContent, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = StepContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	function StepDescription(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('description', className);
	  var rest = (0, _lib.getUnhandledProps)(StepDescription, props);
	  var ElementType = (0, _lib.getElementType)(StepDescription, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	StepDescription.handledProps = ["as", "children", "className", "content"];
	StepDescription.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	StepDescription.create = (0, _lib.createShorthandFactory)(StepDescription, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = StepDescription;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 705 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A step can contain a title.
	 */
	function StepTitle(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('title', className);
	  var rest = (0, _lib.getUnhandledProps)(StepTitle, props);
	  var ElementType = (0, _lib.getElementType)(StepTitle, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	StepTitle.handledProps = ["as", "children", "className", "content"];
	StepTitle.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	StepTitle.create = (0, _lib.createShorthandFactory)(StepTitle, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = StepTitle;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(353));

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _values2 = _interopRequireDefault(__webpack_require__(497));

	var _keys2 = _interopRequireDefault(__webpack_require__(276));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _pickBy2 = _interopRequireDefault(__webpack_require__(707));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Step = _interopRequireDefault(__webpack_require__(702));

	var numberMap = process.env.NODE_ENV !== "production" ? (0, _pickBy2.default)(_lib.numberToWordMap, function (val, key) {
	  return key <= 8;
	}) : {};;
	/**
	 * A set of steps.
	 */

	function StepGroup(props) {
	  var attached = props.attached,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      fluid = props.fluid,
	      items = props.items,
	      ordered = props.ordered,
	      size = props.size,
	      stackable = props.stackable,
	      unstackable = props.unstackable,
	      vertical = props.vertical,
	      widths = props.widths;
	  var classes = (0, _classnames.default)('ui', size, (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(ordered, 'ordered'), (0, _lib.useKeyOnly)(unstackable, 'unstackable'), (0, _lib.useKeyOnly)(vertical, 'vertical'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), (0, _lib.useValueAndKey)(stackable, 'stackable'), (0, _lib.useWidthProp)(widths), 'steps', className);
	  var rest = (0, _lib.getUnhandledProps)(StepGroup, props);
	  var ElementType = (0, _lib.getElementType)(StepGroup, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  if (!_lib.childrenUtils.isNil(content)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), content);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), (0, _map2.default)(items, function (item) {
	    return _Step.default.create(item);
	  }));
	}

	StepGroup.handledProps = ["as", "attached", "children", "className", "content", "fluid", "items", "ordered", "size", "stackable", "unstackable", "vertical", "widths"];
	StepGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Steps can be attached to other elements. */
	  attached: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['top', 'bottom'])]),

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A fluid step takes up the width of its container. */
	  fluid: _propTypes.default.bool,

	  /** Shorthand array of props for Step. */
	  items: _lib.customPropTypes.collectionShorthand,

	  /** A step can show a ordered sequence of steps. */
	  ordered: _propTypes.default.bool,

	  /** Steps can have different sizes. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium')),

	  /** A step can stack vertically only on smaller screens. */
	  stackable: _propTypes.default.oneOf(['tablet']),

	  /** A step can prevent itself from stacking on mobile. */
	  unstackable: _propTypes.default.bool,

	  /** A step can be displayed stacked vertically. */
	  vertical: _propTypes.default.bool,

	  /** Steps can be divided evenly inside their parent. */
	  widths: _propTypes.default.oneOf((0, _toConsumableArray2.default)((0, _keys2.default)(numberMap)).concat((0, _toConsumableArray2.default)((0, _keys2.default)(numberMap).map(Number)), (0, _toConsumableArray2.default)((0, _values2.default)(numberMap))))
	} : {};
	var _default = StepGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 707 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(221),
	    baseIteratee = __webpack_require__(288),
	    basePickBy = __webpack_require__(445),
	    getAllKeysIn = __webpack_require__(410);

	/**
	 * Creates an object composed of the `object` properties `predicate` returns
	 * truthy for. The predicate is invoked with two arguments: (value, key).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function} [predicate=_.identity] The function invoked per property.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pickBy(object, _.isNumber);
	 * // => { 'a': 1, 'c': 3 }
	 */
	function pickBy(object, predicate) {
	  if (object == null) {
	    return {};
	  }
	  var props = arrayMap(getAllKeysIn(object), function(prop) {
	    return [prop];
	  });
	  predicate = baseIteratee(predicate);
	  return basePickBy(object, props, function(value, path) {
	    return predicate(value, path[0]);
	  });
	}

	module.exports = pickBy;


/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _AccordionAccordion = _interopRequireDefault(__webpack_require__(709));

	var _AccordionContent = _interopRequireDefault(__webpack_require__(712));

	var _AccordionPanel = _interopRequireDefault(__webpack_require__(710));

	var _AccordionTitle = _interopRequireDefault(__webpack_require__(711));

	/**
	 * An accordion allows users to toggle the display of sections of content.
	 */
	function Accordion(props) {
	  var className = props.className,
	      fluid = props.fluid,
	      inverted = props.inverted,
	      styled = props.styled;
	  var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(styled, 'styled'), className);
	  var rest = (0, _lib.getUnhandledProps)(Accordion, props);
	  return _react.default.createElement(_AccordionAccordion.default, (0, _extends2.default)({}, rest, {
	    className: classes
	  }));
	}

	Accordion.handledProps = ["className", "fluid", "inverted", "styled"];
	Accordion.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Format to take up the width of its container. */
	  fluid: _propTypes.default.bool,

	  /** Format for dark backgrounds. */
	  inverted: _propTypes.default.bool,

	  /** Adds some basic styling to accordion panels. */
	  styled: _propTypes.default.bool
	} : {};
	Accordion.Accordion = _AccordionAccordion.default;
	Accordion.Content = _AccordionContent.default;
	Accordion.Panel = _AccordionPanel.default;
	Accordion.Title = _AccordionTitle.default;
	var _default = Accordion;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 709 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(353));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _includes2 = _interopRequireDefault(__webpack_require__(496));

	var _isArray2 = _interopRequireDefault(__webpack_require__(181));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _AccordionPanel = _interopRequireDefault(__webpack_require__(710));

	var warnIfPropsAreInvalid = function warnIfPropsAreInvalid(props, state) {
	  var exclusive = props.exclusive;
	  var activeIndex = state.activeIndex;
	  /* eslint-disable no-console */

	  if (exclusive && typeof activeIndex !== 'number') {
	    console.error('`activeIndex` must be a number if `exclusive` is true');
	  } else if (!exclusive && !(0, _isArray2.default)(activeIndex)) {
	    console.error('`activeIndex` must be an array if `exclusive` is false');
	  }
	  /* eslint-enable no-console */

	};
	/**
	 * An Accordion can contain sub-accordions.
	 */


	var AccordionAccordion =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(AccordionAccordion, _Component);

	  function AccordionAccordion() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, AccordionAccordion);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(AccordionAccordion)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeNewIndex", function (index) {
	      var exclusive = _this.props.exclusive;
	      var activeIndex = _this.state.activeIndex;
	      if (exclusive) return index === activeIndex ? -1 : index; // check to see if index is in array, and remove it, if not then add it

	      return (0, _includes2.default)(activeIndex, index) ? (0, _without2.default)(activeIndex, index) : (0, _toConsumableArray2.default)(activeIndex).concat([index]);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTitleClick", function (e, titleProps) {
	      var index = titleProps.index;

	      _this.trySetState({
	        activeIndex: _this.computeNewIndex(index)
	      });

	      (0, _invoke2.default)(_this.props, 'onTitleClick', e, titleProps);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "isIndexActive", function (index) {
	      var exclusive = _this.props.exclusive;
	      var activeIndex = _this.state.activeIndex;
	      return exclusive ? activeIndex === index : (0, _includes2.default)(activeIndex, index);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(AccordionAccordion, [{
	    key: "getInitialAutoControlledState",
	    value: function getInitialAutoControlledState(_ref) {
	      var exclusive = _ref.exclusive;
	      return {
	        activeIndex: exclusive ? -1 : []
	      };
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      if (process.env.NODE_ENV !== 'production') {
	        warnIfPropsAreInvalid(this.props, this.state);
	      }
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      if (process.env.NODE_ENV !== 'production') {
	        warnIfPropsAreInvalid(this.props, this.state);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          className = _this$props.className,
	          children = _this$props.children,
	          panels = _this$props.panels;
	      var classes = (0, _classnames.default)('accordion', className);
	      var rest = (0, _lib.getUnhandledProps)(AccordionAccordion, this.props);
	      var ElementType = (0, _lib.getElementType)(AccordionAccordion, this.props);
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes
	      }), _lib.childrenUtils.isNil(children) ? (0, _map2.default)(panels, function (panel, index) {
	        return _AccordionPanel.default.create(panel, {
	          defaultProps: {
	            active: _this2.isIndexActive(index),
	            index: index,
	            onTitleClick: _this2.handleTitleClick
	          }
	        });
	      }) : children);
	    }
	  }]);
	  return AccordionAccordion;
	}(_lib.AutoControlledComponent);

	exports.default = AccordionAccordion;
	(0, _defineProperty2.default)(AccordionAccordion, "defaultProps", {
	  exclusive: true
	});
	(0, _defineProperty2.default)(AccordionAccordion, "autoControlledProps", ['activeIndex']);
	(0, _defineProperty2.default)(AccordionAccordion, "handledProps", ["activeIndex", "as", "children", "className", "defaultActiveIndex", "exclusive", "onTitleClick", "panels"]);
	AccordionAccordion.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Index of the currently active panel. */
	  activeIndex: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number])]),

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Initial activeIndex value. */
	  defaultActiveIndex: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number])]),

	  /** Only allow one panel open at a time. */
	  exclusive: _propTypes.default.bool,

	  /**
	   * Called when a panel title is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All item props.
	   */
	  onTitleClick: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _propTypes.default.func]),

	  /** Shorthand array of props for Accordion. */
	  panels: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['children']), _propTypes.default.arrayOf(_propTypes.default.shape({
	    content: _lib.customPropTypes.itemShorthand,
	    title: _lib.customPropTypes.itemShorthand
	  }))])
	} : {};
	AccordionAccordion.create = (0, _lib.createShorthandFactory)(AccordionAccordion, function (content) {
	  return {
	    content: content
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _AccordionTitle = _interopRequireDefault(__webpack_require__(711));

	var _AccordionContent = _interopRequireDefault(__webpack_require__(712));

	/**
	 * A panel sub-component for Accordion component.
	 */
	var AccordionPanel =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(AccordionPanel, _Component);

	  function AccordionPanel() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, AccordionPanel);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(AccordionPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTitleOverrides", function (predefinedProps) {
	      return {
	        onClick: function onClick(e, titleProps) {
	          (0, _invoke2.default)(predefinedProps, 'onClick', e, titleProps);
	          (0, _invoke2.default)(_this.props, 'onTitleClick', e, titleProps);
	        }
	      };
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(AccordionPanel, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          content = _this$props.content,
	          index = _this$props.index,
	          title = _this$props.title;
	      return _react.default.createElement(_react.Fragment, null, _AccordionTitle.default.create(title, {
	        autoGenerateKey: false,
	        defaultProps: {
	          active: active,
	          index: index
	        },
	        overrideProps: this.handleTitleOverrides
	      }), _AccordionContent.default.create(content, {
	        autoGenerateKey: false,
	        defaultProps: {
	          active: active
	        }
	      }));
	    }
	  }]);
	  return AccordionPanel;
	}(_react.Component);

	(0, _defineProperty2.default)(AccordionPanel, "handledProps", ["active", "content", "index", "onTitleClick", "title"]);
	AccordionPanel.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Whether or not the title is in the open state. */
	  active: _propTypes.default.bool,

	  /** A shorthand for Accordion.Content. */
	  content: _lib.customPropTypes.itemShorthand,

	  /** A panel index. */
	  index: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /**
	   * Called when a panel title is clicked.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All item props.
	   */
	  onTitleClick: _propTypes.default.func,

	  /** A shorthand for Accordion.Title. */
	  title: _lib.customPropTypes.itemShorthand
	} : {};
	AccordionPanel.create = (0, _lib.createShorthandFactory)(AccordionPanel, null);
	var _default = AccordionPanel;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 711 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _isNil2 = _interopRequireDefault(__webpack_require__(453));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	/**
	 * A title sub-component for Accordion component.
	 */
	var AccordionTitle =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(AccordionTitle, _Component);

	  function AccordionTitle() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, AccordionTitle);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(AccordionTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      return (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(AccordionTitle, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          children = _this$props.children,
	          className = _this$props.className,
	          content = _this$props.content;
	      var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), 'title', className);
	      var rest = (0, _lib.getUnhandledProps)(AccordionTitle, this.props);
	      var ElementType = (0, _lib.getElementType)(AccordionTitle, this.props);

	      if ((0, _isNil2.default)(content)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes,
	          onClick: this.handleClick
	        }), children);
	      }

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        onClick: this.handleClick
	      }), _react.default.createElement(_Icon.default, {
	        name: "dropdown"
	      }), content);
	    }
	  }]);
	  return AccordionTitle;
	}(_react.Component);

	exports.default = AccordionTitle;
	(0, _defineProperty2.default)(AccordionTitle, "handledProps", ["active", "as", "children", "className", "content", "index", "onClick"]);
	AccordionTitle.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Whether or not the title is in the open state. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** AccordionTitle index inside Accordion. */
	  index: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func
	} : {};
	AccordionTitle.create = (0, _lib.createShorthandFactory)(AccordionTitle, function (content) {
	  return {
	    content: content
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A content sub-component for Accordion component.
	 */
	function AccordionContent(props) {
	  var active = props.active,
	      children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('content', (0, _lib.useKeyOnly)(active, 'active'), className);
	  var rest = (0, _lib.getUnhandledProps)(AccordionContent, props);
	  var ElementType = (0, _lib.getElementType)(AccordionContent, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	AccordionContent.handledProps = ["active", "as", "children", "className", "content"];
	AccordionContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Whether or not the content is visible. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	AccordionContent.create = (0, _lib.createShorthandFactory)(AccordionContent, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = AccordionContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Embed.default;
	  }
	});

	var _Embed = _interopRequireDefault(__webpack_require__(714));

/***/ }),
/* 714 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	/**
	 * An embed displays content from other websites like YouTube videos or Google Maps.
	 */
	var Embed =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Embed, _Component);

	  function Embed() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Embed);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Embed)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var onClick = _this.props.onClick;
	      var active = _this.state.active;
	      if (onClick) onClick(e, (0, _objectSpread2.default)({}, _this.props, {
	        active: true
	      }));
	      if (!active) _this.trySetState({
	        active: true
	      });
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Embed, [{
	    key: "getSrc",
	    value: function getSrc() {
	      var _this$props = this.props,
	          _this$props$autoplay = _this$props.autoplay,
	          autoplay = _this$props$autoplay === void 0 ? true : _this$props$autoplay,
	          _this$props$brandedUI = _this$props.brandedUI,
	          brandedUI = _this$props$brandedUI === void 0 ? false : _this$props$brandedUI,
	          _this$props$color = _this$props.color,
	          color = _this$props$color === void 0 ? '#444444' : _this$props$color,
	          _this$props$hd = _this$props.hd,
	          hd = _this$props$hd === void 0 ? true : _this$props$hd,
	          id = _this$props.id,
	          source = _this$props.source,
	          url = _this$props.url;

	      if (source === 'youtube') {
	        return ["//www.youtube.com/embed/".concat(id), '?autohide=true', "&amp;autoplay=".concat(autoplay), "&amp;color=".concat(encodeURIComponent(color)), "&amp;hq=".concat(hd), '&amp;jsapi=false', "&amp;modestbranding=".concat(brandedUI), "&amp;rel=".concat(brandedUI ? 0 : 1)].join('');
	      }

	      if (source === 'vimeo') {
	        return ["//player.vimeo.com/video/".concat(id), '?api=false', "&amp;autoplay=".concat(autoplay), '&amp;byline=false', "&amp;color=".concat(encodeURIComponent(color)), '&amp;portrait=false', '&amp;title=false'].join('');
	      }

	      return url;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          aspectRatio = _this$props2.aspectRatio,
	          className = _this$props2.className,
	          icon = _this$props2.icon,
	          placeholder = _this$props2.placeholder;
	      var active = this.state.active;
	      var classes = (0, _classnames.default)('ui', aspectRatio, (0, _lib.useKeyOnly)(active, 'active'), 'embed', className);
	      var rest = (0, _lib.getUnhandledProps)(Embed, this.props);
	      var ElementType = (0, _lib.getElementType)(Embed, this.props);
	      var iconShorthand = icon !== undefined ? icon : 'video play';
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        onClick: this.handleClick
	      }), _Icon.default.create(iconShorthand, {
	        autoGenerateKey: false
	      }), placeholder && _react.default.createElement("img", {
	        className: "placeholder",
	        src: placeholder
	      }), this.renderEmbed());
	    }
	  }, {
	    key: "renderEmbed",
	    value: function renderEmbed() {
	      var _this$props3 = this.props,
	          children = _this$props3.children,
	          content = _this$props3.content,
	          iframe = _this$props3.iframe,
	          source = _this$props3.source;
	      var active = this.state.active;
	      if (!active) return null;
	      if (!_lib.childrenUtils.isNil(children)) return _react.default.createElement("div", {
	        className: "embed"
	      }, children);
	      if (!_lib.childrenUtils.isNil(content)) return _react.default.createElement("div", {
	        className: "embed"
	      }, content);
	      return _react.default.createElement("div", {
	        className: "embed"
	      }, (0, _lib.createHTMLIframe)(_lib.childrenUtils.isNil(iframe) ? this.getSrc() : iframe, {
	        defaultProps: {
	          allowFullScreen: false,
	          frameBorder: 0,
	          height: '100%',
	          scrolling: 'no',
	          src: this.getSrc(),
	          title: "Embedded content from ".concat(source, "."),
	          width: '100%'
	        },
	        autoGenerateKey: false
	      }));
	    }
	  }]);
	  return Embed;
	}(_lib.AutoControlledComponent);

	exports.default = Embed;
	(0, _defineProperty2.default)(Embed, "autoControlledProps", ['active']);
	(0, _defineProperty2.default)(Embed, "handledProps", ["active", "as", "aspectRatio", "autoplay", "brandedUI", "children", "className", "color", "content", "defaultActive", "hd", "icon", "id", "iframe", "onClick", "placeholder", "source", "url"]);
	Embed.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** An embed can be active. */
	  active: _propTypes.default.bool,

	  /** An embed can specify an alternative aspect ratio. */
	  aspectRatio: _propTypes.default.oneOf(['4:3', '16:9', '21:9']),

	  /** Setting to true or false will force autoplay. */
	  autoplay: _lib.customPropTypes.every([_lib.customPropTypes.demand(['source']), _propTypes.default.bool]),

	  /** Whether to show networks branded UI like title cards, or after video calls to action. */
	  brandedUI: _lib.customPropTypes.every([_lib.customPropTypes.demand(['source']), _propTypes.default.bool]),

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Specifies a default chrome color with Vimeo or YouTube. */
	  color: _lib.customPropTypes.every([_lib.customPropTypes.demand(['source']), _propTypes.default.string]),

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Initial value of active. */
	  defaultActive: _propTypes.default.bool,

	  /** Whether to prefer HD content. */
	  hd: _lib.customPropTypes.every([_lib.customPropTypes.demand(['source']), _propTypes.default.bool]),

	  /** Specifies an icon to use with placeholder content. */
	  icon: _lib.customPropTypes.itemShorthand,

	  /** Specifies an id for source. */
	  id: _lib.customPropTypes.every([_lib.customPropTypes.demand(['source']), _propTypes.default.string]),

	  /** Shorthand for HTML iframe. */
	  iframe: _lib.customPropTypes.every([_lib.customPropTypes.demand(['source']), _lib.customPropTypes.itemShorthand]),

	  /**
	   * Сalled on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and proposed value.
	   */
	  onClick: _propTypes.default.func,

	  /** A placeholder image for embed. */
	  placeholder: _propTypes.default.string,

	  /** Specifies a source to use. */
	  source: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['sourceUrl']), _propTypes.default.oneOf(['youtube', 'vimeo'])]),

	  /** Specifies a url to use for embed. */
	  url: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['source']), _propTypes.default.string])
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 715 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Popup.default;
	  }
	});

	var _Popup = _interopRequireDefault(__webpack_require__(716));

/***/ }),
/* 716 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.POSITIONS = void 0;

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _pick2 = _interopRequireDefault(__webpack_require__(443));

	var _reduce2 = _interopRequireDefault(__webpack_require__(544));

	var _assign2 = _interopRequireDefault(__webpack_require__(717));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _isArray2 = _interopRequireDefault(__webpack_require__(181));

	var _mapValues2 = _interopRequireDefault(__webpack_require__(630));

	var _isNumber2 = _interopRequireDefault(__webpack_require__(488));

	var _includes2 = _interopRequireDefault(__webpack_require__(496));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Portal = _interopRequireDefault(__webpack_require__(528));

	var _PopupContent = _interopRequireDefault(__webpack_require__(719));

	var _PopupHeader = _interopRequireDefault(__webpack_require__(720));

	var POSITIONS = ['top left', 'top right', 'bottom right', 'bottom left', 'right center', 'left center', 'top center', 'bottom center'];
	/**
	 * A Popup displays additional information on top of a page.
	 */

	exports.POSITIONS = POSITIONS;

	var Popup =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Popup, _Component);

	  function Popup() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Popup);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Popup)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {});
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "hideOnScroll", function (e) {
	      _this.setState({
	        closed: true
	      });

	      _lib.eventStack.unsub('scroll', _this.hideOnScroll, {
	        target: window
	      });

	      _this.timeoutId = setTimeout(function () {
	        _this.setState({
	          closed: false
	        });
	      }, 50);

	      _this.handleClose(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClose", function (e) {
	      (0, _invoke2.default)(_this.props, 'onClose', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleOpen", function (e) {
	      _this.coords = _this.getContext().getBoundingClientRect();
	      (0, _invoke2.default)(_this.props, 'onOpen', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePortalMount", function (e) {
	      var hideOnScroll = _this.props.hideOnScroll;
	      if (hideOnScroll) _lib.eventStack.sub('scroll', _this.hideOnScroll, {
	        target: window
	      });

	      if (_this.getContext()) {
	        _this.setPopupStyle(_this.props.position);
	      }

	      (0, _invoke2.default)(_this.props, 'onMount', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePortalUnmount", function (e) {
	      var hideOnScroll = _this.props.hideOnScroll;
	      if (hideOnScroll) _lib.eventStack.unsub('scroll', _this.hideOnScroll, {
	        target: window
	      });
	      (0, _invoke2.default)(_this.props, 'onUnmount', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handlePopupRef", function (popupRef) {
	      _this.popupCoords = popupRef ? popupRef.getBoundingClientRect() : null;

	      _this.setPopupStyle();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTriggerRef", function (triggerRef) {
	      _this.triggerRef = triggerRef;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getContext", function () {
	      return _this.props.context || _this.triggerRef;
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Popup, [{
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      // if horizontal/vertical offsets change, re-calculate the CSS style
	      var _this$props = this.props,
	          horizontalOffset = _this$props.horizontalOffset,
	          verticalOffset = _this$props.verticalOffset;

	      if (horizontalOffset !== prevProps.horizontalOffset || verticalOffset !== prevProps.verticalOffset) {
	        this.setPopupStyle();
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      clearTimeout(this.timeoutId);
	    }
	  }, {
	    key: "computePopupStyle",
	    value: function computePopupStyle(positions) {
	      var style = {
	        position: 'absolute'
	      };
	      var context = this.getContext(); // Do not access window/document when server side rendering

	      if (!(0, _lib.isBrowser)()) return style;
	      var _this$props2 = this.props,
	          horizontalOffset = _this$props2.horizontalOffset,
	          verticalOffset = _this$props2.verticalOffset;
	      var _window = window,
	          pageYOffset = _window.pageYOffset,
	          pageXOffset = _window.pageXOffset;
	      var _document$documentEle = document.documentElement,
	          clientWidth = _document$documentEle.clientWidth,
	          clientHeight = _document$documentEle.clientHeight;
	      var coords = this.coords || context.getBoundingClientRect();

	      if ((0, _includes2.default)(positions, 'right')) {
	        style.right = Math.round(clientWidth - (coords.right + pageXOffset));
	        style.left = 'auto';
	      } else if ((0, _includes2.default)(positions, 'left')) {
	        style.left = Math.round(coords.left + pageXOffset);
	        style.right = 'auto';
	      } else {
	        // if not left nor right, we are horizontally centering the element
	        var xOffset = (coords.width - this.popupCoords.width) / 2;
	        style.left = Math.round(coords.left + xOffset + pageXOffset);
	        style.right = 'auto';
	      }

	      if ((0, _includes2.default)(positions, 'top')) {
	        style.bottom = Math.round(clientHeight - (coords.top + pageYOffset));
	        style.top = 'auto';
	      } else if ((0, _includes2.default)(positions, 'bottom')) {
	        style.top = Math.round(coords.bottom + pageYOffset);
	        style.bottom = 'auto';
	      } else {
	        // if not top nor bottom, we are vertically centering the element
	        var yOffset = (coords.height + this.popupCoords.height) / 2;
	        style.top = Math.round(coords.bottom + pageYOffset - yOffset);
	        style.bottom = 'auto';

	        var _xOffset = this.popupCoords.width + 8;

	        if ((0, _includes2.default)(positions, 'right')) {
	          style.right -= _xOffset;
	        } else {
	          style.left -= _xOffset;
	        }
	      }

	      if (horizontalOffset) {
	        if ((0, _isNumber2.default)(style.right)) {
	          style.right -= horizontalOffset;
	        } else {
	          style.left -= horizontalOffset;
	        }
	      }

	      if (verticalOffset) {
	        if ((0, _isNumber2.default)(style.top)) {
	          style.top += verticalOffset;
	        } else {
	          style.bottom += verticalOffset;
	        }
	      }

	      return style;
	    } // check if the style would display
	    // the popup outside of the view port

	  }, {
	    key: "isStyleInViewport",
	    value: function isStyleInViewport(style) {
	      var _window2 = window,
	          pageYOffset = _window2.pageYOffset,
	          pageXOffset = _window2.pageXOffset;
	      var _document$documentEle2 = document.documentElement,
	          clientWidth = _document$documentEle2.clientWidth,
	          clientHeight = _document$documentEle2.clientHeight;
	      var element = {
	        top: style.top,
	        left: style.left,
	        width: this.popupCoords.width,
	        height: this.popupCoords.height
	      };

	      if ((0, _isNumber2.default)(style.right)) {
	        element.left = clientWidth - style.right - element.width;
	      }

	      if ((0, _isNumber2.default)(style.bottom)) {
	        element.top = clientHeight - style.bottom - element.height;
	      } // hidden on top


	      if (element.top < pageYOffset) return false; // hidden on the bottom

	      if (element.top + element.height > pageYOffset + clientHeight) return false; // hidden the left

	      if (element.left < pageXOffset) return false; // hidden on the right

	      if (element.left + element.width > pageXOffset + clientWidth) return false;
	      return true;
	    }
	  }, {
	    key: "setPopupStyle",
	    value: function setPopupStyle() {
	      var context = this.getContext();
	      if (!this.coords && !context || !this.popupCoords) return;
	      var position = this.props.position;
	      var style = this.computePopupStyle(position);
	      var keepInViewPort = this.props.keepInViewPort;

	      if (keepInViewPort) {
	        // Lets detect if the popup is out of the viewport and adjust
	        // the position accordingly
	        var positions = (0, _without2.default)(POSITIONS, position).concat([position]);

	        for (var i = 0; !this.isStyleInViewport(style) && i < positions.length; i += 1) {
	          style = this.computePopupStyle(positions[i]);
	          position = positions[i];
	        }
	      } // Append 'px' to every numerical values in the style


	      style = (0, _mapValues2.default)(style, function (value) {
	        return (0, _isNumber2.default)(value) ? "".concat(value, "px") : value;
	      });
	      this.setState({
	        style: style,
	        position: position
	      });
	    }
	  }, {
	    key: "getPortalProps",
	    value: function getPortalProps() {
	      var portalProps = {};
	      var _this$props3 = this.props,
	          on = _this$props3.on,
	          hoverable = _this$props3.hoverable;
	      var normalizedOn = (0, _isArray2.default)(on) ? on : [on];

	      if (hoverable) {
	        portalProps.closeOnPortalMouseLeave = true;
	        portalProps.mouseLeaveDelay = 300;
	      }

	      if ((0, _includes2.default)(normalizedOn, 'click')) {
	        portalProps.openOnTriggerClick = true;
	        portalProps.closeOnTriggerClick = true;
	        portalProps.closeOnDocumentClick = true;
	      }

	      if ((0, _includes2.default)(normalizedOn, 'focus')) {
	        portalProps.openOnTriggerFocus = true;
	        portalProps.closeOnTriggerBlur = true;
	      }

	      if ((0, _includes2.default)(normalizedOn, 'hover')) {
	        portalProps.openOnTriggerMouseEnter = true;
	        portalProps.closeOnTriggerMouseLeave = true; // Taken from SUI: https://git.io/vPmCm

	        portalProps.mouseLeaveDelay = 70;
	        portalProps.mouseEnterDelay = 50;
	      }

	      return portalProps;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props4 = this.props,
	          basic = _this$props4.basic,
	          children = _this$props4.children,
	          className = _this$props4.className,
	          content = _this$props4.content,
	          flowing = _this$props4.flowing,
	          header = _this$props4.header,
	          inverted = _this$props4.inverted,
	          size = _this$props4.size,
	          trigger = _this$props4.trigger,
	          wide = _this$props4.wide;
	      var _this$state = this.state,
	          position = _this$state.position,
	          closed = _this$state.closed;
	      var style = (0, _assign2.default)({}, this.state.style, this.props.style);
	      var classes = (0, _classnames.default)('ui', position, size, (0, _lib.useKeyOrValueAndKey)(wide, 'wide'), (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(flowing, 'flowing'), (0, _lib.useKeyOnly)(inverted, 'inverted'), 'popup transition visible', className);
	      if (closed) return trigger;
	      var unhandled = (0, _lib.getUnhandledProps)(Popup, this.props);
	      var portalPropNames = _Portal.default.handledProps;
	      var rest = (0, _reduce2.default)(unhandled, function (acc, val, key) {
	        if (!(0, _includes2.default)(portalPropNames, key)) acc[key] = val;
	        return acc;
	      }, {});
	      var portalProps = (0, _pick2.default)(unhandled, portalPropNames);
	      var ElementType = (0, _lib.getElementType)(Popup, this.props);

	      var popupJSX = _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        style: style,
	        ref: this.handlePopupRef
	      }), children, _lib.childrenUtils.isNil(children) && _PopupHeader.default.create(header, {
	        autoGenerateKey: false
	      }), _lib.childrenUtils.isNil(children) && _PopupContent.default.create(content, {
	        autoGenerateKey: false
	      }));

	      var mergedPortalProps = (0, _objectSpread2.default)({}, this.getPortalProps(), portalProps);
	      return _react.default.createElement(_Portal.default, (0, _extends2.default)({}, mergedPortalProps, {
	        onClose: this.handleClose,
	        onMount: this.handlePortalMount,
	        onOpen: this.handleOpen,
	        onUnmount: this.handlePortalUnmount,
	        trigger: trigger,
	        triggerRef: this.handleTriggerRef
	      }), popupJSX);
	    }
	  }]);
	  return Popup;
	}(_react.Component);

	exports.default = Popup;
	(0, _defineProperty2.default)(Popup, "defaultProps", {
	  position: 'top left',
	  on: 'hover',
	  keepInViewPort: true
	});
	(0, _defineProperty2.default)(Popup, "Content", _PopupContent.default);
	(0, _defineProperty2.default)(Popup, "Header", _PopupHeader.default);
	(0, _defineProperty2.default)(Popup, "handledProps", ["as", "basic", "children", "className", "content", "context", "flowing", "header", "hideOnScroll", "horizontalOffset", "hoverable", "inverted", "keepInViewPort", "on", "onClose", "onMount", "onOpen", "onUnmount", "position", "size", "style", "trigger", "verticalOffset", "wide"]);
	Popup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Display the popup without the pointing arrow. */
	  basic: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Simple text content for the popover. */
	  content: _lib.customPropTypes.itemShorthand,

	  /** Existing element the pop-up should be bound to. */
	  context: _propTypes.default.object,

	  /** A flowing Popup has no maximum width and continues to flow to fit its content. */
	  flowing: _propTypes.default.bool,

	  /** Takes up the entire width of its offset container. */
	  // TODO: implement the Popup fluid layout
	  // fluid: PropTypes.bool,

	  /** Header displayed above the content in bold. */
	  header: _lib.customPropTypes.itemShorthand,

	  /** Hide the Popup when scrolling the window. */
	  hideOnScroll: _propTypes.default.bool,

	  /** Whether the popup should not close on hover. */
	  hoverable: _propTypes.default.bool,

	  /** Invert the colors of the Popup. */
	  inverted: _propTypes.default.bool,

	  /** Horizontal offset in pixels to be applied to the Popup. */
	  horizontalOffset: _propTypes.default.number,

	  /** Vertical offset in pixels to be applied to the Popup. */
	  verticalOffset: _propTypes.default.number,

	  /** Events triggering the popup. */
	  on: _propTypes.default.oneOfType([_propTypes.default.oneOf(['hover', 'click', 'focus']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['hover', 'click', 'focus']))]),

	  /**
	   * Called when a close event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClose: _propTypes.default.func,

	  /**
	   * Called when the portal is mounted on the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onMount: _propTypes.default.func,

	  /**
	   * Called when an open event happens.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onOpen: _propTypes.default.func,

	  /**
	   * Called when the portal is unmounted from the DOM.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onUnmount: _propTypes.default.func,

	  /** Position for the popover. */
	  position: _propTypes.default.oneOf(POSITIONS),

	  /** Popup size. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium', 'big', 'massive')),

	  /** Custom Popup style. */
	  style: _propTypes.default.object,

	  /** Element to be rendered in-place where the popup is defined. */
	  trigger: _propTypes.default.node,

	  /** Popup width. */
	  wide: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['very'])]),

	  /** Element to be rendered within the confines of the viewport whenever possible. */
	  keepInViewPort: _propTypes.default.bool
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 717 */
/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(399),
	    copyObject = __webpack_require__(398),
	    createAssigner = __webpack_require__(718),
	    isArrayLike = __webpack_require__(262),
	    isPrototype = __webpack_require__(285),
	    keys = __webpack_require__(276);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns own enumerable string keyed properties of source objects to the
	 * destination object. Source objects are applied from left to right.
	 * Subsequent sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object` and is loosely based on
	 * [`Object.assign`](https://mdn.io/Object/assign).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assignIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assign({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var assign = createAssigner(function(object, source) {
	  if (isPrototype(source) || isArrayLike(source)) {
	    copyObject(source, keys(source), object);
	    return;
	  }
	  for (var key in source) {
	    if (hasOwnProperty.call(source, key)) {
	      assignValue(object, key, source[key]);
	    }
	  }
	});

	module.exports = assign;


/***/ }),
/* 718 */
/***/ (function(module, exports, __webpack_require__) {

	var baseRest = __webpack_require__(234),
	    isIterateeCall = __webpack_require__(349);

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ }),
/* 719 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = PopupContent;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A PopupContent displays the content body of a Popover.
	 */
	function PopupContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('content', className);
	  var rest = (0, _lib.getUnhandledProps)(PopupContent, props);
	  var ElementType = (0, _lib.getElementType)(PopupContent, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	PopupContent.handledProps = ["as", "children", "className", "content"];
	PopupContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** The content of the Popup */
	  children: _propTypes.default.node,

	  /** Classes to add to the Popup content className. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	PopupContent.create = (0, _lib.createShorthandFactory)(PopupContent, function (children) {
	  return {
	    children: children
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 720 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = PopupHeader;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A PopupHeader displays a header in a Popover.
	 */
	function PopupHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('header', className);
	  var rest = (0, _lib.getUnhandledProps)(PopupHeader, props);
	  var ElementType = (0, _lib.getElementType)(PopupHeader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	PopupHeader.handledProps = ["as", "children", "className", "content"];
	PopupHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	PopupHeader.create = (0, _lib.createShorthandFactory)(PopupHeader, function (children) {
	  return {
	    children: children
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 721 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Progress.default;
	  }
	});

	var _Progress = _interopRequireDefault(__webpack_require__(722));

/***/ }),
/* 722 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _round2 = _interopRequireDefault(__webpack_require__(723));

	var _clamp2 = _interopRequireDefault(__webpack_require__(725));

	var _isUndefined2 = _interopRequireDefault(__webpack_require__(263));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A progress bar shows the progression of a task.
	 */
	var Progress =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Progress, _Component);

	  function Progress() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Progress);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Progress)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "calculatePercent", function () {
	      var _this$props = _this.props,
	          percent = _this$props.percent,
	          total = _this$props.total,
	          value = _this$props.value;
	      if (!(0, _isUndefined2.default)(percent)) return percent;
	      if (!(0, _isUndefined2.default)(total) && !(0, _isUndefined2.default)(value)) return value / total * 100;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "computeValueText", function (percent) {
	      var _this$props2 = _this.props,
	          progress = _this$props2.progress,
	          total = _this$props2.total,
	          value = _this$props2.value;
	      if (progress === 'value') return value;
	      if (progress === 'ratio') return "".concat(value, "/").concat(total);
	      return "".concat(percent, "%");
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getPercent", function () {
	      var _this$props3 = _this.props,
	          precision = _this$props3.precision,
	          progress = _this$props3.progress,
	          total = _this$props3.total,
	          value = _this$props3.value;
	      var percent = (0, _clamp2.default)(_this.calculatePercent(), 0, 100);

	      if (!(0, _isUndefined2.default)(total) && !(0, _isUndefined2.default)(value) && progress === 'value') {
	        return value / total * 100;
	      }

	      if (progress === 'value') return value;
	      if ((0, _isUndefined2.default)(precision)) return percent;
	      return (0, _round2.default)(percent, precision);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "isAutoSuccess", function () {
	      var _this$props4 = _this.props,
	          autoSuccess = _this$props4.autoSuccess,
	          percent = _this$props4.percent,
	          total = _this$props4.total,
	          value = _this$props4.value;
	      return autoSuccess && (percent >= 100 || value >= total);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderLabel", function () {
	      var _this$props5 = _this.props,
	          children = _this$props5.children,
	          content = _this$props5.content,
	          label = _this$props5.label;
	      if (!_lib.childrenUtils.isNil(children)) return _react.default.createElement("div", {
	        className: "label"
	      }, children);
	      if (!_lib.childrenUtils.isNil(content)) return _react.default.createElement("div", {
	        className: "label"
	      }, content);
	      return (0, _lib.createHTMLDivision)(label, {
	        autoGenerateKey: false,
	        defaultProps: {
	          className: 'label'
	        }
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderProgress", function (percent) {
	      var _this$props6 = _this.props,
	          precision = _this$props6.precision,
	          progress = _this$props6.progress;
	      if (!progress && (0, _isUndefined2.default)(precision)) return;
	      return _react.default.createElement("div", {
	        className: "progress"
	      }, _this.computeValueText(percent));
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Progress, [{
	    key: "render",
	    value: function render() {
	      var _this$props7 = this.props,
	          active = _this$props7.active,
	          attached = _this$props7.attached,
	          className = _this$props7.className,
	          color = _this$props7.color,
	          disabled = _this$props7.disabled,
	          error = _this$props7.error,
	          indicating = _this$props7.indicating,
	          inverted = _this$props7.inverted,
	          size = _this$props7.size,
	          success = _this$props7.success,
	          warning = _this$props7.warning;
	      var classes = (0, _classnames.default)('ui', color, size, (0, _lib.useKeyOnly)(active || indicating, 'active'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(indicating, 'indicating'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useKeyOnly)(success || this.isAutoSuccess(), 'success'), (0, _lib.useKeyOnly)(warning, 'warning'), (0, _lib.useValueAndKey)(attached, 'attached'), 'progress', className);
	      var rest = (0, _lib.getUnhandledProps)(Progress, this.props);
	      var ElementType = (0, _lib.getElementType)(Progress, this.props);
	      var percent = this.getPercent() || 0;
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        "data-percent": Math.floor(percent)
	      }), _react.default.createElement("div", {
	        className: "bar",
	        style: {
	          width: "".concat(percent, "%")
	        }
	      }, this.renderProgress(percent)), this.renderLabel());
	    }
	  }]);
	  return Progress;
	}(_react.Component);

	(0, _defineProperty2.default)(Progress, "handledProps", ["active", "as", "attached", "autoSuccess", "children", "className", "color", "content", "disabled", "error", "indicating", "inverted", "label", "percent", "precision", "progress", "size", "success", "total", "value", "warning"]);
	Progress.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A progress bar can show activity. */
	  active: _propTypes.default.bool,

	  /** A progress bar can attach to and show the progress of an element (i.e. Card or Segment). */
	  attached: _propTypes.default.oneOf(['top', 'bottom']),

	  /** Whether success state should automatically trigger when progress completes. */
	  autoSuccess: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A progress bar can have different colors. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A progress bar be disabled. */
	  disabled: _propTypes.default.bool,

	  /** A progress bar can show a error state. */
	  error: _propTypes.default.bool,

	  /** An indicating progress bar visually indicates the current level of progress of a task. */
	  indicating: _propTypes.default.bool,

	  /** A progress bar can have its colors inverted. */
	  inverted: _propTypes.default.bool,

	  /** Can be set to either to display progress as percent or ratio. */
	  label: _lib.customPropTypes.itemShorthand,

	  /** Current percent complete. */
	  percent: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['total', 'value']), _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])]),

	  /** Decimal point precision for calculated progress. */
	  precision: _propTypes.default.number,

	  /** A progress bar can contain a text value indicating current progress. */
	  progress: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['percent', 'ratio', 'value'])]),

	  /** A progress bar can vary in size. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'mini', 'huge', 'massive')),

	  /** A progress bar can show a success state. */
	  success: _propTypes.default.bool,

	  /** For use with value. Together, these will calculate the percent. Mutually excludes percent. */
	  total: _lib.customPropTypes.every([_lib.customPropTypes.demand(['value']), _lib.customPropTypes.disallow(['percent']), _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])]),

	  /** For use with total. Together, these will calculate the percent. Mutually excludes percent. */
	  value: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['percent']), _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])]),

	  /** A progress bar can show a warning state. */
	  warning: _propTypes.default.bool
	} : {};
	var _default = Progress;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 723 */
/***/ (function(module, exports, __webpack_require__) {

	var createRound = __webpack_require__(724);

	/**
	 * Computes `number` rounded to `precision`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.10.0
	 * @category Math
	 * @param {number} number The number to round.
	 * @param {number} [precision=0] The precision to round to.
	 * @returns {number} Returns the rounded number.
	 * @example
	 *
	 * _.round(4.006);
	 * // => 4
	 *
	 * _.round(4.006, 2);
	 * // => 4.01
	 *
	 * _.round(4060, -2);
	 * // => 4100
	 */
	var round = createRound('round');

	module.exports = round;


/***/ }),
/* 724 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(266),
	    toNumber = __webpack_require__(268),
	    toString = __webpack_require__(219);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * Creates a function like `_.round`.
	 *
	 * @private
	 * @param {string} methodName The name of the `Math` method to use when rounding.
	 * @returns {Function} Returns the new round function.
	 */
	function createRound(methodName) {
	  var func = Math[methodName];
	  return function(number, precision) {
	    number = toNumber(number);
	    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	    if (precision) {
	      // Shift with exponential notation to avoid floating-point issues.
	      // See [MDN](https://mdn.io/round#Examples) for more details.
	      var pair = (toString(number) + 'e').split('e'),
	          value = func(pair[0] + 'e' + (+pair[1] + precision));

	      pair = (toString(value) + 'e').split('e');
	      return +(pair[0] + 'e' + (+pair[1] - precision));
	    }
	    return func(number);
	  };
	}

	module.exports = createRound;


/***/ }),
/* 725 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClamp = __webpack_require__(265),
	    toNumber = __webpack_require__(268);

	/**
	 * Clamps `number` within the inclusive `lower` and `upper` bounds.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Number
	 * @param {number} number The number to clamp.
	 * @param {number} [lower] The lower bound.
	 * @param {number} upper The upper bound.
	 * @returns {number} Returns the clamped number.
	 * @example
	 *
	 * _.clamp(-10, -5, 5);
	 * // => -5
	 *
	 * _.clamp(10, -5, 5);
	 * // => 5
	 */
	function clamp(number, lower, upper) {
	  if (upper === undefined) {
	    upper = lower;
	    lower = undefined;
	  }
	  if (upper !== undefined) {
	    upper = toNumber(upper);
	    upper = upper === upper ? upper : 0;
	  }
	  if (lower !== undefined) {
	    lower = toNumber(lower);
	    lower = lower === lower ? lower : 0;
	  }
	  return baseClamp(toNumber(number), lower, upper);
	}

	module.exports = clamp;


/***/ }),
/* 726 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Rating.default;
	  }
	});

	var _Rating = _interopRequireDefault(__webpack_require__(727));

/***/ }),
/* 727 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _times2 = _interopRequireDefault(__webpack_require__(728));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _RatingIcon = _interopRequireDefault(__webpack_require__(729));

	/**
	 * A rating indicates user interest in content.
	 */
	var Rating =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Rating, _Component);

	  function Rating() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Rating);

	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
	      _args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Rating)).call.apply(_getPrototypeOf2, [this].concat(_args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleIconClick", function (e, _ref) {
	      var index = _ref.index;
	      var _this$props = _this.props,
	          clearable = _this$props.clearable,
	          disabled = _this$props.disabled,
	          maxRating = _this$props.maxRating,
	          onRate = _this$props.onRate;
	      var rating = _this.state.rating;
	      if (disabled) return; // default newRating is the clicked icon
	      // allow toggling a binary rating
	      // allow clearing ratings

	      var newRating = index + 1;

	      if (clearable === 'auto' && maxRating === 1) {
	        newRating = +!rating;
	      } else if (clearable === true && newRating === rating) {
	        newRating = 0;
	      } // set rating


	      _this.trySetState({
	        rating: newRating
	      }, {
	        isSelecting: false
	      });

	      if (onRate) onRate(e, (0, _objectSpread2.default)({}, _this.props, {
	        rating: newRating
	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleIconMouseEnter", function (e, _ref2) {
	      var index = _ref2.index;
	      if (_this.props.disabled) return;

	      _this.setState({
	        selectedIndex: index,
	        isSelecting: true
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseLeave", function () {
	      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      _invoke2.default.apply(void 0, [_this.props, 'onMouseLeave'].concat(args));

	      if (_this.props.disabled) return;

	      _this.setState({
	        selectedIndex: -1,
	        isSelecting: false
	      });
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Rating, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          className = _this$props2.className,
	          disabled = _this$props2.disabled,
	          icon = _this$props2.icon,
	          maxRating = _this$props2.maxRating,
	          size = _this$props2.size;
	      var _this$state = this.state,
	          rating = _this$state.rating,
	          selectedIndex = _this$state.selectedIndex,
	          isSelecting = _this$state.isSelecting;
	      var classes = (0, _classnames.default)('ui', icon, size, (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(isSelecting && !disabled && selectedIndex >= 0, 'selected'), 'rating', className);
	      var rest = (0, _lib.getUnhandledProps)(Rating, this.props);
	      var ElementType = (0, _lib.getElementType)(Rating, this.props);
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        role: "radiogroup",
	        onMouseLeave: this.handleMouseLeave,
	        tabIndex: disabled ? 0 : -1
	      }), (0, _times2.default)(maxRating, function (i) {
	        return _react.default.createElement(_RatingIcon.default, {
	          tabIndex: disabled ? -1 : 0,
	          active: rating >= i + 1,
	          "aria-checked": rating === i + 1,
	          "aria-posinset": i + 1,
	          "aria-setsize": maxRating,
	          index: i,
	          key: i,
	          onClick: _this2.handleIconClick,
	          onMouseEnter: _this2.handleIconMouseEnter,
	          selected: selectedIndex >= i && isSelecting
	        });
	      }));
	    }
	  }]);
	  return Rating;
	}(_lib.AutoControlledComponent);

	exports.default = Rating;
	(0, _defineProperty2.default)(Rating, "autoControlledProps", ['rating']);
	(0, _defineProperty2.default)(Rating, "defaultProps", {
	  clearable: 'auto',
	  maxRating: 1
	});
	(0, _defineProperty2.default)(Rating, "Icon", _RatingIcon.default);
	(0, _defineProperty2.default)(Rating, "handledProps", ["as", "className", "clearable", "defaultRating", "disabled", "icon", "maxRating", "onRate", "rating", "size"]);
	Rating.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /**
	   * You can clear the rating by clicking on the current start rating.
	   * By default a rating will be only clearable if there is 1 icon.
	   * Setting to `true`/`false` will allow or disallow a user to clear their rating.
	   */
	  clearable: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['auto'])]),

	  /** The initial rating value. */
	  defaultRating: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** You can disable or enable interactive rating.  Makes a read-only rating. */
	  disabled: _propTypes.default.bool,

	  /** A rating can use a set of star or heart icons. */
	  icon: _propTypes.default.oneOf(['star', 'heart']),

	  /** The total number of icons. */
	  maxRating: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /**
	   * Called after user selects a new rating.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and proposed rating.
	   */
	  onRate: _propTypes.default.func,

	  /** The current number of active icons. */
	  rating: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** A progress bar can vary in size. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium', 'big'))
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 728 */
/***/ (function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(278),
	    castFunction = __webpack_require__(332),
	    toInteger = __webpack_require__(266);

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * Invokes the iteratee `n` times, returning an array of the results of
	 * each invocation. The iteratee is invoked with one argument; (index).
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 * @example
	 *
	 * _.times(3, String);
	 * // => ['0', '1', '2']
	 *
	 *  _.times(4, _.constant(0));
	 * // => [0, 0, 0, 0]
	 */
	function times(n, iteratee) {
	  n = toInteger(n);
	  if (n < 1 || n > MAX_SAFE_INTEGER) {
	    return [];
	  }
	  var index = MAX_ARRAY_LENGTH,
	      length = nativeMin(n, MAX_ARRAY_LENGTH);

	  iteratee = castFunction(iteratee);
	  n -= MAX_ARRAY_LENGTH;

	  var result = baseTimes(length, iteratee);
	  while (++index < n) {
	    iteratee(index);
	  }
	  return result;
	}

	module.exports = times;


/***/ }),
/* 729 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _keyboardKey = _interopRequireDefault(__webpack_require__(530));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * An internal icon sub-component for Rating component
	 */
	var RatingIcon =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(RatingIcon, _Component);

	  function RatingIcon() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, RatingIcon);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(RatingIcon)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleKeyUp", function (e) {
	      (0, _invoke2.default)(_this.props, 'onKeyUp', e, _this.props);

	      switch (_keyboardKey.default.getCode(e)) {
	        case _keyboardKey.default.Enter:
	        case _keyboardKey.default.Spacebar:
	          e.preventDefault();
	          (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
	          break;

	        default:
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseEnter", function (e) {
	      (0, _invoke2.default)(_this.props, 'onMouseEnter', e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(RatingIcon, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          className = _this$props.className,
	          selected = _this$props.selected;
	      var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(selected, 'selected'), 'icon', className);
	      var rest = (0, _lib.getUnhandledProps)(RatingIcon, this.props);
	      var ElementType = (0, _lib.getElementType)(RatingIcon, this.props);
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        onClick: this.handleClick,
	        onKeyUp: this.handleKeyUp,
	        onMouseEnter: this.handleMouseEnter,
	        role: "radio"
	      }));
	    }
	  }]);
	  return RatingIcon;
	}(_react.Component);

	exports.default = RatingIcon;
	(0, _defineProperty2.default)(RatingIcon, "defaultProps", {
	  as: 'i'
	});
	(0, _defineProperty2.default)(RatingIcon, "handledProps", ["active", "as", "className", "index", "onClick", "onKeyUp", "onMouseEnter", "selected"]);
	RatingIcon.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Indicates activity of an icon. */
	  active: _propTypes.default.bool,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** An index of icon inside Rating. */
	  index: _propTypes.default.number,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /**
	   * Called on keyup.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onKeyUp: _propTypes.default.func,

	  /**
	   * Called on mouseenter.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onMouseEnter: _propTypes.default.func,

	  /** Indicates selection of an icon. */
	  selected: _propTypes.default.bool
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 730 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Search.default;
	  }
	});

	var _Search = _interopRequireDefault(__webpack_require__(731));

/***/ }),
/* 731 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _slicedToArray2 = _interopRequireDefault(__webpack_require__(334));

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(732));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _get3 = _interopRequireDefault(__webpack_require__(601));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _isEmpty2 = _interopRequireDefault(__webpack_require__(325));

	var _partialRight2 = _interopRequireDefault(__webpack_require__(734));

	var _inRange2 = _interopRequireDefault(__webpack_require__(500));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _get4 = _interopRequireDefault(__webpack_require__(319));

	var _reduce2 = _interopRequireDefault(__webpack_require__(544));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _keyboardKey = _interopRequireDefault(__webpack_require__(530));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _shallowequal = _interopRequireDefault(__webpack_require__(613));

	var _lib = __webpack_require__(242);

	var _Input = _interopRequireDefault(__webpack_require__(645));

	var _SearchCategory = _interopRequireDefault(__webpack_require__(735));

	var _SearchResult = _interopRequireDefault(__webpack_require__(736));

	var _SearchResults = _interopRequireDefault(__webpack_require__(737));

	/**
	 * A search module allows a user to query for results from a selection of data
	 */
	var Search =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Search, _Component);

	  function Search() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Search);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Search)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleResultSelect", function (e, result) {
	      (0, _invoke2.default)(_this.props, 'onResultSelect', e, (0, _objectSpread2.default)({}, _this.props, {
	        result: result
	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleSelectionChange", function (e) {
	      var result = _this.getSelectedResult();

	      (0, _invoke2.default)(_this.props, 'onSelectionChange', e, (0, _objectSpread2.default)({}, _this.props, {
	        result: result
	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "closeOnEscape", function (e) {
	      if (_keyboardKey.default.getCode(e) !== _keyboardKey.default.Escape) return;
	      e.preventDefault();

	      _this.close();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "moveSelectionOnKeyDown", function (e) {
	      switch (_keyboardKey.default.getCode(e)) {
	        case _keyboardKey.default.ArrowDown:
	          e.preventDefault();

	          _this.moveSelectionBy(e, 1);

	          break;

	        case _keyboardKey.default.ArrowUp:
	          e.preventDefault();

	          _this.moveSelectionBy(e, -1);

	          break;

	        default:
	          break;
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "selectItemOnEnter", function (e) {
	      if (_keyboardKey.default.getCode(e) !== _keyboardKey.default.Enter) return;

	      var result = _this.getSelectedResult(); // prevent selecting null if there was no selected item value


	      if (!result) return;
	      e.preventDefault(); // notify the onResultSelect prop that the user is trying to change value

	      _this.setValue(result.title);

	      _this.handleResultSelect(e, result);

	      _this.close();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "closeOnDocumentClick", function (e) {
	      _this.close();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseDown", function (e) {
	      _this.isMouseDown = true;
	      (0, _invoke2.default)(_this.props, 'onMouseDown', e, _this.props);

	      _lib.eventStack.sub('mouseup', _this.handleDocumentMouseUp);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleDocumentMouseUp", function () {
	      _this.isMouseDown = false;

	      _lib.eventStack.unsub('mouseup', _this.handleDocumentMouseUp);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleInputClick", function (e) {
	      // prevent closeOnDocumentClick()
	      e.nativeEvent.stopImmediatePropagation();

	      _this.tryOpen();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleItemClick", function (e, _ref) {
	      var id = _ref.id;

	      var result = _this.getSelectedResult(id); // prevent closeOnDocumentClick()


	      e.nativeEvent.stopImmediatePropagation(); // notify the onResultSelect prop that the user is trying to change value

	      _this.setValue(result.title);

	      _this.handleResultSelect(e, result);

	      _this.close();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleFocus", function (e) {
	      var onFocus = _this.props.onFocus;
	      if (onFocus) onFocus(e, _this.props);

	      _this.setState({
	        focus: true
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleBlur", function (e) {
	      var onBlur = _this.props.onBlur;
	      if (onBlur) onBlur(e, _this.props);

	      _this.setState({
	        focus: false
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleSearchChange", function (e) {
	      // prevent propagating to this.props.onChange()
	      e.stopPropagation();
	      var minCharacters = _this.props.minCharacters;
	      var open = _this.state.open;
	      var newQuery = e.target.value;
	      (0, _invoke2.default)(_this.props, 'onSearchChange', e, (0, _objectSpread2.default)({}, _this.props, {
	        value: newQuery
	      })); // open search dropdown on search query

	      if (newQuery.length < minCharacters) {
	        _this.close();
	      } else if (!open) {
	        _this.tryOpen(newQuery);
	      }

	      _this.setValue(newQuery);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getFlattenedResults", function () {
	      var _this$props = _this.props,
	          category = _this$props.category,
	          results = _this$props.results;
	      return !category ? results : (0, _reduce2.default)(results, function (memo, categoryData) {
	        return memo.concat(categoryData.results);
	      }, []);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getSelectedResult", function () {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.selectedIndex;

	      var results = _this.getFlattenedResults();

	      return (0, _get4.default)(results, index);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "setValue", function (value) {
	      var selectFirstResult = _this.props.selectFirstResult;

	      _this.trySetState({
	        value: value
	      }, {
	        selectedIndex: selectFirstResult ? 0 : -1
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "moveSelectionBy", function (e, offset) {
	      var selectedIndex = _this.state.selectedIndex;

	      var results = _this.getFlattenedResults();

	      var lastIndex = results.length - 1; // next is after last, wrap to beginning
	      // next is before first, wrap to end

	      var nextIndex = selectedIndex + offset;
	      if (nextIndex > lastIndex) nextIndex = 0;else if (nextIndex < 0) nextIndex = lastIndex;

	      _this.setState({
	        selectedIndex: nextIndex
	      });

	      _this.scrollSelectedItemIntoView();

	      _this.handleSelectionChange(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "scrollSelectedItemIntoView", function () {
	      // Do not access document when server side rendering
	      if (!(0, _lib.isBrowser)()) return;
	      var menu = document.querySelector('.ui.search.active.visible .results.visible');
	      var item = menu.querySelector('.result.active');
	      if (!item) return;
	      var isOutOfUpperView = item.offsetTop < menu.scrollTop;
	      var isOutOfLowerView = item.offsetTop + item.clientHeight > menu.scrollTop + menu.clientHeight;

	      if (isOutOfUpperView) {
	        menu.scrollTop = item.offsetTop;
	      } else if (isOutOfLowerView) {
	        menu.scrollTop = item.offsetTop + item.clientHeight - menu.clientHeight;
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "tryOpen", function () {
	      var currentValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.value;
	      var minCharacters = _this.props.minCharacters;
	      if (currentValue.length < minCharacters) return;

	      _this.open();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "open", function () {
	      _this.trySetState({
	        open: true
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "close", function () {
	      _this.trySetState({
	        open: false
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderSearchInput", function (rest) {
	      var _this$props2 = _this.props,
	          icon = _this$props2.icon,
	          input = _this$props2.input;
	      var value = _this.state.value;
	      return _Input.default.create(input, {
	        autoGenerateKey: false,
	        defaultProps: (0, _objectSpread2.default)({}, rest, {
	          icon: icon,
	          input: {
	            className: 'prompt',
	            tabIndex: '0',
	            autoComplete: 'off'
	          },
	          onChange: _this.handleSearchChange,
	          onClick: _this.handleInputClick,
	          value: value
	        })
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderNoResults", function () {
	      var _this$props3 = _this.props,
	          noResultsDescription = _this$props3.noResultsDescription,
	          noResultsMessage = _this$props3.noResultsMessage;
	      return _react.default.createElement("div", {
	        className: "message empty"
	      }, _react.default.createElement("div", {
	        className: "header"
	      }, noResultsMessage), noResultsDescription && _react.default.createElement("div", {
	        className: "description"
	      }, noResultsDescription));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderResult", function (_ref2, index, _array) {
	      var childKey = _ref2.childKey,
	          result = (0, _objectWithoutProperties2.default)(_ref2, ["childKey"]);
	      var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	      var resultRenderer = _this.props.resultRenderer;
	      var selectedIndex = _this.state.selectedIndex;
	      var offsetIndex = index + offset;
	      return _react.default.createElement(_SearchResult.default, (0, _extends2.default)({
	        key: childKey || result.title,
	        active: selectedIndex === offsetIndex,
	        onClick: _this.handleItemClick,
	        renderer: resultRenderer
	      }, result, {
	        id: offsetIndex // Used to lookup the result on item click

	      }));
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderResults", function () {
	      var results = _this.props.results;
	      return (0, _map2.default)(results, _this.renderResult);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderCategories", function () {
	      var _this$props4 = _this.props,
	          categoryRenderer = _this$props4.categoryRenderer,
	          categories = _this$props4.results;
	      var selectedIndex = _this.state.selectedIndex;
	      var count = 0;
	      return (0, _map2.default)(categories, function (_ref3) {
	        var childKey = _ref3.childKey,
	            category = (0, _objectWithoutProperties2.default)(_ref3, ["childKey"]);
	        var categoryProps = (0, _objectSpread2.default)({
	          key: childKey || category.name,
	          active: (0, _inRange2.default)(selectedIndex, count, count + category.results.length),
	          renderer: categoryRenderer
	        }, category);
	        var renderFn = (0, _partialRight2.default)(_this.renderResult, count);
	        count += category.results.length;
	        return _react.default.createElement(_SearchCategory.default, categoryProps, category.results.map(renderFn));
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderMenuContent", function () {
	      var _this$props5 = _this.props,
	          category = _this$props5.category,
	          showNoResults = _this$props5.showNoResults,
	          results = _this$props5.results;

	      if ((0, _isEmpty2.default)(results)) {
	        return showNoResults ? _this.renderNoResults() : null;
	      }

	      return category ? _this.renderCategories() : _this.renderResults();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderResultsMenu", function () {
	      var open = _this.state.open;
	      var resultsClasses = open ? 'visible' : '';

	      var menuContent = _this.renderMenuContent();

	      if (!menuContent) return;
	      return _react.default.createElement(_SearchResults.default, {
	        className: resultsClasses
	      }, menuContent);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Search, [{
	    key: "componentWillMount",
	    value: function componentWillMount() {
	      var _this$state = this.state,
	          open = _this$state.open,
	          value = _this$state.value;
	      this.setValue(value);
	      if (open) this.open();
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      (0, _get3.default)((0, _getPrototypeOf3.default)(Search.prototype), "componentWillReceiveProps", this).call(this, nextProps);

	      if (!(0, _shallowequal.default)(nextProps.value, this.props.value)) {
	        this.setValue(nextProps.value);
	      }
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return !(0, _shallowequal.default)(nextProps, this.props) || !(0, _shallowequal.default)(nextState, this.state);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      // eslint-disable-line complexity
	      // focused / blurred
	      if (!prevState.focus && this.state.focus) {
	        if (!this.isMouseDown) {
	          this.tryOpen();
	        }

	        if (this.state.open) {
	          _lib.eventStack.sub('keydown', [this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	        }
	      } else if (prevState.focus && !this.state.focus) {
	        if (!this.isMouseDown) {
	          this.close();
	        }

	        _lib.eventStack.unsub('keydown', [this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	      } // opened / closed


	      if (!prevState.open && this.state.open) {
	        this.open();

	        _lib.eventStack.sub('click', this.closeOnDocumentClick);

	        _lib.eventStack.sub('keydown', [this.closeOnEscape, this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	      } else if (prevState.open && !this.state.open) {
	        this.close();

	        _lib.eventStack.unsub('click', this.closeOnDocumentClick);

	        _lib.eventStack.unsub('keydown', [this.closeOnEscape, this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      _lib.eventStack.unsub('click', this.closeOnDocumentClick);

	      _lib.eventStack.unsub('keydown', [this.closeOnEscape, this.moveSelectionOnKeyDown, this.selectItemOnEnter]);
	    } // ----------------------------------------
	    // Document Event Handlers
	    // ----------------------------------------

	  }, {
	    key: "render",
	    value: function render() {
	      var _this$state2 = this.state,
	          searchClasses = _this$state2.searchClasses,
	          focus = _this$state2.focus,
	          open = _this$state2.open;
	      var _this$props6 = this.props,
	          aligned = _this$props6.aligned,
	          category = _this$props6.category,
	          className = _this$props6.className,
	          fluid = _this$props6.fluid,
	          loading = _this$props6.loading,
	          size = _this$props6.size; // Classes

	      var classes = (0, _classnames.default)('ui', open && 'active visible', size, searchClasses, (0, _lib.useKeyOnly)(category, 'category'), (0, _lib.useKeyOnly)(focus, 'focus'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(loading, 'loading'), (0, _lib.useValueAndKey)(aligned, 'aligned'), 'search', className);
	      var unhandled = (0, _lib.getUnhandledProps)(Search, this.props);
	      var ElementType = (0, _lib.getElementType)(Search, this.props);

	      var _partitionHTMLProps = (0, _lib.partitionHTMLProps)(unhandled, {
	        htmlProps: _lib.htmlInputAttrs
	      }),
	          _partitionHTMLProps2 = (0, _slicedToArray2.default)(_partitionHTMLProps, 2),
	          htmlInputProps = _partitionHTMLProps2[0],
	          rest = _partitionHTMLProps2[1];

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        onBlur: this.handleBlur,
	        onFocus: this.handleFocus,
	        onMouseDown: this.handleMouseDown
	      }), this.renderSearchInput(htmlInputProps), this.renderResultsMenu());
	    }
	  }]);
	  return Search;
	}(_lib.AutoControlledComponent);

	exports.default = Search;
	(0, _defineProperty2.default)(Search, "defaultProps", {
	  icon: 'search',
	  input: 'text',
	  minCharacters: 1,
	  noResultsMessage: 'No results found.',
	  showNoResults: true
	});
	(0, _defineProperty2.default)(Search, "autoControlledProps", ['open', 'value']);
	(0, _defineProperty2.default)(Search, "Category", _SearchCategory.default);
	(0, _defineProperty2.default)(Search, "Result", _SearchResult.default);
	(0, _defineProperty2.default)(Search, "Results", _SearchResults.default);
	(0, _defineProperty2.default)(Search, "handledProps", ["aligned", "as", "category", "categoryRenderer", "className", "defaultOpen", "defaultValue", "fluid", "icon", "input", "loading", "minCharacters", "noResultsDescription", "noResultsMessage", "onBlur", "onFocus", "onMouseDown", "onResultSelect", "onSearchChange", "onSelectionChange", "open", "resultRenderer", "results", "selectFirstResult", "showNoResults", "size", "value"]);
	Search.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,
	  // ------------------------------------
	  // Behavior
	  // ------------------------------------

	  /** Initial value of open. */
	  defaultOpen: _propTypes.default.bool,

	  /** Initial value. */
	  defaultValue: _propTypes.default.string,

	  /** Shorthand for Icon. */
	  icon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object]),

	  /** Minimum characters to query for results */
	  minCharacters: _propTypes.default.number,

	  /** Additional text for "No Results" message with less emphasis. */
	  noResultsDescription: _propTypes.default.node,

	  /** Message to display when there are no results. */
	  noResultsMessage: _propTypes.default.node,

	  /** Controls whether or not the results menu is displayed. */
	  open: _propTypes.default.bool,

	  /**
	   * One of:
	   * - array of Search.Result props e.g. `{ title: '', description: '' }` or
	   * - object of categories e.g. `{ name: '', results: [{ title: '', description: '' }]`
	   */
	  results: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.shape(_SearchResult.default.propTypes)), _propTypes.default.shape(_SearchCategory.default.propTypes)]),

	  /** Whether the search should automatically select the first result after searching. */
	  selectFirstResult: _propTypes.default.bool,

	  /** Whether a "no results" message should be shown if no results are found. */
	  showNoResults: _propTypes.default.bool,

	  /** Current value of the search input. Creates a controlled component. */
	  value: _propTypes.default.string,
	  // ------------------------------------
	  // Rendering
	  // ------------------------------------

	  /**
	   * Renders the SearchCategory contents.
	   *
	   * @param {object} props - The SearchCategory props object.
	   * @returns {*} - Renderable SearchCategory contents.
	   */
	  categoryRenderer: _propTypes.default.func,

	  /**
	   * Renders the SearchResult contents.
	   *
	   * @param {object} props - The SearchResult props object.
	   * @returns {*} - Renderable SearchResult contents.
	   */
	  resultRenderer: _propTypes.default.func,
	  // ------------------------------------
	  // Callbacks
	  // ------------------------------------

	  /**
	   * Called on blur.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onBlur: _propTypes.default.func,

	  /**
	   * Called on focus.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onFocus: _propTypes.default.func,

	  /**
	   * Called on mousedown.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onMouseDown: _propTypes.default.func,

	  /**
	   * Called when a result is selected.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onResultSelect: _propTypes.default.func,

	  /**
	   * Called on search input change.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props, includes current value of search input.
	   */
	  onSearchChange: _propTypes.default.func,

	  /**
	   * Called when the active selection index is changed.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onSelectionChange: _propTypes.default.func,
	  // ------------------------------------
	  // Style
	  // ------------------------------------

	  /** A search can have its results aligned to its left or right container edge. */
	  aligned: _propTypes.default.string,

	  /** A search can display results from remote content ordered by categories. */
	  category: _propTypes.default.bool,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A search can have its results take up the width of its container. */
	  fluid: _propTypes.default.bool,

	  /** A search input can take up the width of its container. */
	  input: _lib.customPropTypes.itemShorthand,

	  /** A search can show a loading indicator. */
	  loading: _propTypes.default.bool,

	  /** A search can have different sizes. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium'))
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 732 */
/***/ (function(module, exports, __webpack_require__) {

	var objectWithoutPropertiesLoose = __webpack_require__(733);

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};
	  var target = objectWithoutPropertiesLoose(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	module.exports = _objectWithoutProperties;

/***/ }),
/* 733 */
/***/ (function(module, exports) {

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	module.exports = _objectWithoutPropertiesLoose;

/***/ }),
/* 734 */
/***/ (function(module, exports, __webpack_require__) {

	var baseRest = __webpack_require__(234),
	    createWrap = __webpack_require__(364),
	    getHolder = __webpack_require__(392),
	    replaceHolders = __webpack_require__(394);

	/** Used to compose bitmasks for function metadata. */
	var WRAP_PARTIAL_RIGHT_FLAG = 64;

	/**
	 * This method is like `_.partial` except that partially applied arguments
	 * are appended to the arguments it receives.
	 *
	 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	 * builds, may be used as a placeholder for partially applied arguments.
	 *
	 * **Note:** This method doesn't set the "length" property of partially
	 * applied functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Function
	 * @param {Function} func The function to partially apply arguments to.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new partially applied function.
	 * @example
	 *
	 * function greet(greeting, name) {
	 *   return greeting + ' ' + name;
	 * }
	 *
	 * var greetFred = _.partialRight(greet, 'fred');
	 * greetFred('hi');
	 * // => 'hi fred'
	 *
	 * // Partially applied with placeholders.
	 * var sayHelloTo = _.partialRight(greet, 'hello', _);
	 * sayHelloTo('fred');
	 * // => 'hello fred'
	 */
	var partialRight = baseRest(function(func, partials) {
	  var holders = replaceHolders(partials, getHolder(partialRight));
	  return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	});

	// Assign default placeholders.
	partialRight.placeholder = {};

	module.exports = partialRight;


/***/ }),
/* 735 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	function SearchCategory(props) {
	  var active = props.active,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      renderer = props.renderer;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), 'category', className);
	  var rest = (0, _lib.getUnhandledProps)(SearchCategory, props);
	  var ElementType = (0, _lib.getElementType)(SearchCategory, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _react.default.createElement("div", {
	    className: "name"
	  }, renderer(props)), _react.default.createElement("div", {
	    className: "results"
	  }, _lib.childrenUtils.isNil(children) ? content : children));
	}

	SearchCategory.handledProps = ["active", "as", "children", "className", "content", "name", "renderer", "results"];
	SearchCategory.defaultProps = {
	  renderer: function renderer(_ref) {
	    var name = _ref.name;
	    return name;
	  }
	};
	SearchCategory.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** The item currently selected by keyboard shortcut. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Display name. */
	  name: _propTypes.default.string,

	  /**
	   * Renders the category contents.
	   *
	   * @param {object} props - The SearchCategory props object.
	   * @returns {*} - Renderable category contents.
	   */
	  renderer: _propTypes.default.func,

	  /** Array of Search.Result props. */
	  results: _propTypes.default.array
	} : {};
	var _default = SearchCategory;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 736 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	// Note: You technically only need the 'content' wrapper when there's an
	// image. However, optionally wrapping it makes this function a lot more
	// complicated and harder to read. Since always wrapping it doesn't affect
	// the style in any way let's just do that.
	//
	// Note: To avoid requiring a wrapping div, we return an array here so to
	// prevent rendering issues each node needs a unique key.
	var defaultRenderer = function defaultRenderer(_ref) {
	  var image = _ref.image,
	      price = _ref.price,
	      title = _ref.title,
	      description = _ref.description;
	  return [image && _react.default.createElement("div", {
	    key: "image",
	    className: "image"
	  }, (0, _lib.createHTMLImage)(image, {
	    autoGenerateKey: false
	  })), _react.default.createElement("div", {
	    key: "content",
	    className: "content"
	  }, price && _react.default.createElement("div", {
	    className: "price"
	  }, price), title && _react.default.createElement("div", {
	    className: "title"
	  }, title), description && _react.default.createElement("div", {
	    className: "description"
	  }, description))];
	};

	defaultRenderer.handledProps = [];

	var SearchResult =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(SearchResult, _Component);

	  function SearchResult() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, SearchResult);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SearchResult)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var onClick = _this.props.onClick;
	      if (onClick) onClick(e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(SearchResult, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          active = _this$props.active,
	          className = _this$props.className,
	          renderer = _this$props.renderer;
	      var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), 'result', className);
	      var rest = (0, _lib.getUnhandledProps)(SearchResult, this.props);
	      var ElementType = (0, _lib.getElementType)(SearchResult, this.props); // Note: You technically only need the 'content' wrapper when there's an
	      // image. However, optionally wrapping it makes this function a lot more
	      // complicated and harder to read. Since always wrapping it doesn't affect
	      // the style in any way let's just do that.

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        onClick: this.handleClick
	      }), renderer(this.props));
	    }
	  }]);
	  return SearchResult;
	}(_react.Component);

	exports.default = SearchResult;
	(0, _defineProperty2.default)(SearchResult, "defaultProps", {
	  renderer: defaultRenderer
	});
	(0, _defineProperty2.default)(SearchResult, "handledProps", ["active", "as", "className", "content", "description", "id", "image", "onClick", "price", "renderer", "title"]);
	SearchResult.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** The item currently selected by keyboard shortcut. */
	  active: _propTypes.default.bool,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Additional text with less emphasis. */
	  description: _propTypes.default.string,

	  /** A unique identifier. */
	  id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** Add an image to the item. */
	  image: _propTypes.default.string,

	  /**
	   * Called on click.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /** Customized text for price. */
	  price: _propTypes.default.string,

	  /**
	   * Renders the result contents.
	   *
	   * @param {object} props - The SearchResult props object.
	   * @returns {*} - Renderable result contents.
	   */
	  renderer: _propTypes.default.func,

	  /** Display title. */
	  title: _propTypes.default.string.isRequired
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 737 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	function SearchResults(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('results transition', className);
	  var rest = (0, _lib.getUnhandledProps)(SearchResults, props);
	  var ElementType = (0, _lib.getElementType)(SearchResults, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	SearchResults.handledProps = ["as", "children", "className", "content"];
	SearchResults.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = SearchResults;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 738 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Sidebar.default;
	  }
	});

	var _Sidebar = _interopRequireDefault(__webpack_require__(739));

/***/ }),
/* 739 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _eventStack = _interopRequireDefault(__webpack_require__(480));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _Ref = _interopRequireDefault(__webpack_require__(531));

	var _lib = __webpack_require__(242);

	var _SidebarPushable = _interopRequireDefault(__webpack_require__(740));

	var _SidebarPusher = _interopRequireDefault(__webpack_require__(741));

	/**
	 * A sidebar hides additional content beside a page.
	 */
	var Sidebar =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Sidebar, _Component);

	  function Sidebar() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Sidebar);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Sidebar)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {});
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleAnimationStart", function () {
	      var _this$props = _this.props,
	          duration = _this$props.duration,
	          visible = _this$props.visible;
	      var callback = visible ? 'onVisible' : 'onHide';

	      _this.setState({
	        animating: true
	      }, function () {
	        clearTimeout(_this.animationTimer);
	        _this.animationTimer = setTimeout(_this.handleAnimationEnd, duration);

	        if (_this.skipNextCallback) {
	          _this.skipNextCallback = false;
	          return;
	        }

	        (0, _invoke2.default)(_this.props, callback, null, _this.props);
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleAnimationEnd", function () {
	      var visible = _this.props.visible;
	      var callback = visible ? 'onShow' : 'onHidden';

	      _this.setState({
	        animating: false
	      });

	      (0, _invoke2.default)(_this.props, callback, null, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleDocumentClick", function (e) {
	      if (!(0, _lib.doesNodeContainClick)(_this.ref, e)) {
	        _this.skipNextCallback = true;
	        (0, _invoke2.default)(_this.props, 'onHide', e, (0, _objectSpread2.default)({}, _this.props, {
	          visible: false
	        }));
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRef", function (c) {
	      return _this.ref = c;
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Sidebar, [{
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var prevVisible = prevProps.visible;
	      var currentVisible = this.props.visible;
	      if (prevVisible !== currentVisible) this.handleAnimationStart();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      clearTimeout(this.animationTimer);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          animation = _this$props2.animation,
	          className = _this$props2.className,
	          children = _this$props2.children,
	          content = _this$props2.content,
	          direction = _this$props2.direction,
	          target = _this$props2.target,
	          visible = _this$props2.visible,
	          width = _this$props2.width;
	      var animating = this.state.animating;
	      var classes = (0, _classnames.default)('ui', animation, direction, width, (0, _lib.useKeyOnly)(animating, 'animating'), (0, _lib.useKeyOnly)(visible, 'visible'), 'sidebar', className);
	      var rest = (0, _lib.getUnhandledProps)(Sidebar, this.props);
	      var ElementType = (0, _lib.getElementType)(Sidebar, this.props);
	      return _react.default.createElement(_Ref.default, {
	        innerRef: this.handleRef
	      }, _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes
	      }), _lib.childrenUtils.isNil(children) ? content : children, visible && _react.default.createElement(_eventStack.default, {
	        name: "click",
	        on: this.handleDocumentClick,
	        target: target
	      })));
	    }
	  }]);
	  return Sidebar;
	}(_react.Component);

	(0, _defineProperty2.default)(Sidebar, "defaultProps", {
	  direction: 'left',
	  duration: 500
	});
	(0, _defineProperty2.default)(Sidebar, "autoControlledProps", ['visible']);
	(0, _defineProperty2.default)(Sidebar, "Pushable", _SidebarPushable.default);
	(0, _defineProperty2.default)(Sidebar, "Pusher", _SidebarPusher.default);
	(0, _defineProperty2.default)(Sidebar, "handledProps", ["animation", "as", "children", "className", "content", "direction", "duration", "onHidden", "onHide", "onShow", "onVisible", "target", "visible", "width"]);
	Sidebar.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Animation style. */
	  animation: _propTypes.default.oneOf(['overlay', 'push', 'scale down', 'uncover', 'slide out', 'slide along']),

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Direction the sidebar should appear on. */
	  direction: _propTypes.default.oneOf(['top', 'right', 'bottom', 'left']),

	  /** Duration of sidebar animation. */
	  duration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /**
	   * Called before a sidebar begins to animate out.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onHide: _propTypes.default.func,

	  /**
	   * Called after a sidebar has finished animating out.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onHidden: _propTypes.default.func,

	  /**
	   * Called when a sidebar has finished animating in.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onShow: _propTypes.default.func,

	  /**
	   * Called when a sidebar begins animating in.
	   *
	   * @param {null}
	   * @param {object} data - All props.
	   */
	  onVisible: _propTypes.default.func,

	  /** A sidebar can handle clicks on the passed element. */
	  target: _propTypes.default.object,

	  /** Controls whether or not the sidebar is visible on the page. */
	  visible: _propTypes.default.bool,

	  /** Sidebar width. */
	  width: _propTypes.default.oneOf(['very thin', 'thin', 'wide', 'very wide'])
	} : {};
	var _default = Sidebar;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 740 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A pushable sub-component for Sidebar.
	 */
	function SidebarPushable(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = (0, _classnames.default)('pushable', className);
	  var rest = (0, _lib.getUnhandledProps)(SidebarPushable, props);
	  var ElementType = (0, _lib.getElementType)(SidebarPushable, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	SidebarPushable.handledProps = ["as", "children", "className", "content"];
	SidebarPushable.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = SidebarPushable;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 741 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A pushable sub-component for Sidebar.
	 */
	function SidebarPusher(props) {
	  var className = props.className,
	      dimmed = props.dimmed,
	      children = props.children,
	      content = props.content;
	  var classes = (0, _classnames.default)('pusher', (0, _lib.useKeyOnly)(dimmed, 'dimmed'), className);
	  var rest = (0, _lib.getUnhandledProps)(SidebarPusher, props);
	  var ElementType = (0, _lib.getElementType)(SidebarPusher, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	SidebarPusher.handledProps = ["as", "children", "className", "content", "dimmed"];
	SidebarPusher.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Controls whether or not the dim is displayed. */
	  dimmed: _propTypes.default.bool
	} : {};
	var _default = SidebarPusher;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 742 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Sticky.default;
	  }
	});

	var _Sticky = _interopRequireDefault(__webpack_require__(743));

/***/ }),
/* 743 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * Sticky content stays fixed to the browser viewport while another column of content is visible on the page.
	 */
	var Sticky =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Sticky, _Component);

	  function Sticky() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Sticky);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Sticky)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
	      sticky: false
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "addListeners", function (props) {
	      var scrollContext = props.scrollContext;

	      if (scrollContext) {
	        _lib.eventStack.sub('resize', _this.handleUpdate, {
	          target: scrollContext
	        });

	        _lib.eventStack.sub('scroll', _this.handleUpdate, {
	          target: scrollContext
	        });
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "removeListeners", function () {
	      var scrollContext = _this.props.scrollContext;

	      if (scrollContext) {
	        _lib.eventStack.unsub('resize', _this.handleUpdate, {
	          target: scrollContext
	        });

	        _lib.eventStack.unsub('scroll', _this.handleUpdate, {
	          target: scrollContext
	        });
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "update", function (e) {
	      var pushing = _this.state.pushing;
	      _this.ticking = false;

	      _this.assignRects();

	      if (pushing) {
	        if (_this.didReachStartingPoint()) return _this.stickToContextTop(e);
	        if (_this.didTouchScreenBottom()) return _this.stickToScreenBottom(e);
	        return _this.stickToContextBottom(e);
	      }

	      if (_this.isOversized()) {
	        if (_this.contextRect.top > 0) return _this.stickToContextTop(e);
	        if (_this.contextRect.bottom < window.innerHeight) return _this.stickToContextBottom(e);
	      }

	      if (_this.didTouchScreenTop()) {
	        if (_this.didReachContextBottom()) return _this.stickToContextBottom(e);
	        return _this.stickToScreenTop(e);
	      }

	      return _this.stickToContextTop(e);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleUpdate", function (e) {
	      if (!_this.ticking) {
	        _this.ticking = true;
	        _this.frameId = requestAnimationFrame(function () {
	          return _this.update(e);
	        });
	      }
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "assignRects", function () {
	      var context = _this.props.context;
	      _this.triggerRect = _this.triggerRef.getBoundingClientRect();
	      _this.contextRect = (context || document.body).getBoundingClientRect();
	      _this.stickyRect = _this.stickyRef.getBoundingClientRect();
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "didReachContextBottom", function () {
	      var offset = _this.props.offset;
	      return _this.stickyRect.height + offset >= _this.contextRect.bottom;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "didReachStartingPoint", function () {
	      return _this.stickyRect.top <= _this.triggerRect.top;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "didTouchScreenTop", function () {
	      return _this.triggerRect.top < _this.props.offset;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "didTouchScreenBottom", function () {
	      var bottomOffset = _this.props.bottomOffset;
	      return _this.contextRect.bottom + bottomOffset > window.innerHeight;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "isOversized", function () {
	      return _this.stickyRect.height > window.innerHeight;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "pushing", function (pushing) {
	      var possible = _this.props.pushing;
	      if (possible) _this.setState({
	        pushing: pushing
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "stick", function (e, bound) {
	      _this.setState({
	        bound: bound,
	        sticky: true
	      });

	      (0, _invoke2.default)(_this.props, 'onStick', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "unstick", function (e, bound) {
	      _this.setState({
	        bound: bound,
	        sticky: false
	      });

	      (0, _invoke2.default)(_this.props, 'onUnstick', e, _this.props);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "stickToContextBottom", function (e) {
	      (0, _invoke2.default)(_this.props, 'onBottom', e, _this.props);

	      _this.stick(e, true);

	      _this.pushing(true);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "stickToContextTop", function (e) {
	      (0, _invoke2.default)(_this.props, 'onTop', e, _this.props);

	      _this.unstick(e, false);

	      _this.pushing(false);
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "stickToScreenBottom", function (e) {
	      var bottom = _this.props.bottomOffset;

	      _this.stick(e, false);

	      _this.setState({
	        bottom: bottom,
	        top: null
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "stickToScreenTop", function (e) {
	      var top = _this.props.offset;

	      _this.stick(e, false);

	      _this.setState({
	        top: top,
	        bottom: null
	      });
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleStickyRef", function (c) {
	      return _this.stickyRef = c;
	    });
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleTriggerRef", function (c) {
	      return _this.triggerRef = c;
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Sticky, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      if (!(0, _lib.isBrowser)()) return;
	      var active = this.props.active;

	      if (active) {
	        this.handleUpdate();
	        this.addListeners(this.props);
	      }
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var _this$props = this.props,
	          current = _this$props.active,
	          currentScrollContext = _this$props.scrollContext;
	      var next = nextProps.active,
	          nextScrollContext = nextProps.scrollContext;

	      if (current === next) {
	        if (currentScrollContext !== nextScrollContext) {
	          this.removeListeners();
	          this.addListeners(nextProps);
	        }

	        return;
	      }

	      if (next) {
	        this.handleUpdate();
	        this.addListeners(nextProps);
	        return;
	      }

	      this.removeListeners();
	      this.setState({
	        sticky: false
	      });
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      if (!(0, _lib.isBrowser)()) return;
	      var active = this.props.active;

	      if (active) {
	        this.removeListeners();
	        cancelAnimationFrame(this.frameId);
	      }
	    } // ----------------------------------------
	    // Events
	    // ----------------------------------------

	  }, {
	    key: "computeStyle",
	    value: function computeStyle() {
	      var styleElement = this.props.styleElement;
	      var _this$state = this.state,
	          bottom = _this$state.bottom,
	          bound = _this$state.bound,
	          sticky = _this$state.sticky,
	          top = _this$state.top;
	      if (!sticky) return styleElement;
	      return (0, _objectSpread2.default)({
	        bottom: bound ? 0 : bottom,
	        top: bound ? undefined : top,
	        width: this.triggerRect.width
	      }, styleElement);
	    } // Return true when the component reached the bottom of the context

	  }, {
	    key: "render",
	    // ----------------------------------------
	    // Render
	    // ----------------------------------------
	    value: function render() {
	      var _this$props2 = this.props,
	          children = _this$props2.children,
	          className = _this$props2.className;
	      var _this$state2 = this.state,
	          bottom = _this$state2.bottom,
	          bound = _this$state2.bound,
	          sticky = _this$state2.sticky;
	      var rest = (0, _lib.getUnhandledProps)(Sticky, this.props);
	      var ElementType = (0, _lib.getElementType)(Sticky, this.props);
	      var containerClasses = (0, _classnames.default)(sticky && 'ui', sticky && 'stuck-container', sticky && (bound ? 'bound-container' : 'fixed-container'), className);
	      var elementClasses = (0, _classnames.default)('ui', sticky && (bound ? 'bound bottom' : 'fixed'), sticky && !bound && (bottom === null ? 'top' : 'bottom'), 'sticky');
	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: containerClasses
	      }), _react.default.createElement("div", {
	        ref: this.handleTriggerRef
	      }), _react.default.createElement("div", {
	        className: (0, _classnames.default)(elementClasses),
	        ref: this.handleStickyRef,
	        style: this.computeStyle()
	      }, children));
	    }
	  }]);
	  return Sticky;
	}(_react.Component);

	exports.default = Sticky;
	(0, _defineProperty2.default)(Sticky, "defaultProps", {
	  active: true,
	  bottomOffset: 0,
	  offset: 0,
	  scrollContext: (0, _lib.isBrowser)() ? window : null
	});
	(0, _defineProperty2.default)(Sticky, "handledProps", ["active", "as", "bottomOffset", "children", "className", "context", "offset", "onBottom", "onStick", "onTop", "onUnstick", "pushing", "scrollContext", "styleElement"]);
	Sticky.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A Sticky can be active. */
	  active: _propTypes.default.bool,

	  /** Offset in pixels from the bottom of the screen when fixing element to viewport. */
	  bottomOffset: _propTypes.default.number,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Context which sticky element should stick to. */
	  context: _propTypes.default.object,

	  /** Offset in pixels from the top of the screen when fixing element to viewport. */
	  offset: _propTypes.default.number,

	  /**
	   * Callback when element is bound to bottom of parent container.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onBottom: _propTypes.default.func,

	  /**
	   * Callback when element is fixed to page.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onStick: _propTypes.default.func,

	  /**
	   * Callback when element is bound to top of parent container.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onTop: _propTypes.default.func,

	  /**
	   * Callback when element is unfixed from page.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onUnstick: _propTypes.default.func,

	  /** Whether element should be "pushed" by the viewport, attaching to the bottom of the screen when scrolling up. */
	  pushing: _propTypes.default.bool,

	  /** Context which sticky should attach onscroll events. */
	  scrollContext: _propTypes.default.object,

	  /** Custom style for sticky element. */
	  styleElement: _propTypes.default.object
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 744 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Tab.default;
	  }
	});

	var _Tab = _interopRequireDefault(__webpack_require__(745));

/***/ }),
/* 745 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(732));

	var _objectSpread2 = _interopRequireDefault(__webpack_require__(244));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _get2 = _interopRequireDefault(__webpack_require__(319));

	var _invoke2 = _interopRequireDefault(__webpack_require__(227));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Grid = _interopRequireDefault(__webpack_require__(651));

	var _GridColumn = _interopRequireDefault(__webpack_require__(652));

	var _Menu = _interopRequireDefault(__webpack_require__(574));

	var _TabPane = _interopRequireDefault(__webpack_require__(746));

	/**
	 * A Tab is a hidden section of content activated by a Menu.
	 * @see Menu
	 * @see Segment
	 */
	var Tab =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Tab, _Component);

	  function Tab() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Tab);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Tab)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleItemClick", function (e, _ref) {
	      var index = _ref.index;
	      (0, _invoke2.default)(_this.props, 'onTabChange', e, (0, _objectSpread2.default)({}, _this.props, {
	        activeIndex: index
	      }));

	      _this.trySetState({
	        activeIndex: index
	      });
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Tab, [{
	    key: "getInitialAutoControlledState",
	    value: function getInitialAutoControlledState() {
	      return {
	        activeIndex: 0
	      };
	    }
	  }, {
	    key: "renderItems",
	    value: function renderItems() {
	      var _this$props = this.props,
	          panes = _this$props.panes,
	          renderActiveOnly = _this$props.renderActiveOnly;
	      var activeIndex = this.state.activeIndex;
	      if (renderActiveOnly) return (0, _invoke2.default)((0, _get2.default)(panes, "[".concat(activeIndex, "]")), 'render', this.props);
	      return (0, _map2.default)(panes, function (_ref2, index) {
	        var pane = _ref2.pane;
	        return _TabPane.default.create(pane, {
	          overrideProps: {
	            active: index === activeIndex
	          }
	        });
	      });
	    }
	  }, {
	    key: "renderMenu",
	    value: function renderMenu() {
	      var _this$props2 = this.props,
	          menu = _this$props2.menu,
	          panes = _this$props2.panes,
	          menuPosition = _this$props2.menuPosition;
	      var activeIndex = this.state.activeIndex;

	      if (menu.tabular === true && menuPosition === 'right') {
	        menu.tabular = 'right';
	      }

	      return _Menu.default.create(menu, {
	        autoGenerateKey: false,
	        overrideProps: {
	          items: (0, _map2.default)(panes, 'menuItem'),
	          onItemClick: this.handleItemClick,
	          activeIndex: activeIndex
	        }
	      });
	    }
	  }, {
	    key: "renderVertical",
	    value: function renderVertical(menu) {
	      var _this$props3 = this.props,
	          grid = _this$props3.grid,
	          menuPosition = _this$props3.menuPosition;
	      var paneWidth = grid.paneWidth,
	          tabWidth = grid.tabWidth,
	          gridProps = (0, _objectWithoutProperties2.default)(grid, ["paneWidth", "tabWidth"]);
	      var position = menuPosition || menu.props.tabular === 'right' && 'right' || 'left';
	      return _react.default.createElement(_Grid.default, gridProps, position === 'left' && _GridColumn.default.create({
	        width: tabWidth,
	        children: menu
	      }, {
	        autoGenerateKey: false
	      }), _GridColumn.default.create({
	        width: paneWidth,
	        children: this.renderItems(),
	        stretched: true
	      }, {
	        autoGenerateKey: false
	      }), position === 'right' && _GridColumn.default.create({
	        width: tabWidth,
	        children: menu
	      }, {
	        autoGenerateKey: false
	      }));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var menu = this.renderMenu();
	      var rest = (0, _lib.getUnhandledProps)(Tab, this.props);
	      var ElementType = (0, _lib.getElementType)(Tab, this.props);

	      if (menu.props.vertical) {
	        return _react.default.createElement(ElementType, rest, this.renderVertical(menu));
	      }

	      return _react.default.createElement(ElementType, rest, menu.props.attached !== 'bottom' && menu, this.renderItems(), menu.props.attached === 'bottom' && menu);
	    }
	  }]);
	  return Tab;
	}(_lib.AutoControlledComponent);

	(0, _defineProperty2.default)(Tab, "autoControlledProps", ['activeIndex']);
	(0, _defineProperty2.default)(Tab, "defaultProps", {
	  grid: {
	    paneWidth: 12,
	    tabWidth: 4
	  },
	  menu: {
	    attached: true,
	    tabular: true
	  },
	  renderActiveOnly: true
	});
	(0, _defineProperty2.default)(Tab, "Pane", _TabPane.default);
	(0, _defineProperty2.default)(Tab, "handledProps", ["activeIndex", "as", "defaultActiveIndex", "grid", "menu", "menuPosition", "onTabChange", "panes", "renderActiveOnly"]);
	Tab.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** The initial activeIndex. */
	  defaultActiveIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /** Index of the currently active tab. */
	  activeIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

	  /**
	   * Shorthand props for the Menu.
	   * tabular, if true, will derive final value from `menuPosition`, otherwise set 'left' or 'right' explicitly.
	   */
	  menu: _propTypes.default.object,

	  /** Align vertical menu */
	  menuPosition: _propTypes.default.oneOf(['left', 'right']),

	  /** Shorthand props for the Grid. */
	  grid: _propTypes.default.object,

	  /**
	   * Called on tab change.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props and proposed new activeIndex.
	   * @param {object} data.activeIndex - The new proposed activeIndex.
	   */
	  onTabChange: _propTypes.default.func,

	  /**
	   * Array of objects describing each Menu.Item and Tab.Pane:
	   * { menuItem: 'Home', render: () => <Tab.Pane /> }
	   * or
	   * { menuItem: 'Home', pane: 'Welcome' }
	   */
	  panes: _propTypes.default.arrayOf(_propTypes.default.shape({
	    menuItem: _lib.customPropTypes.itemShorthand,
	    pane: _lib.customPropTypes.itemShorthand,
	    render: _propTypes.default.func
	  })),

	  /** A Tab can render only active pane. */
	  renderActiveOnly: _propTypes.default.bool
	} : {};
	var _default = Tab;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 746 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Segment = _interopRequireDefault(__webpack_require__(698));

	/**
	 * A tab pane holds the content of a tab.
	 */
	function TabPane(props) {
	  var active = props.active,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      loading = props.loading;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(loading, 'loading'), 'tab', className);
	  var rest = (0, _lib.getUnhandledProps)(TabPane, props);
	  var ElementType = (0, _lib.getElementType)(TabPane, props);
	  var calculatedDefaultProps = {};

	  if (ElementType === _Segment.default) {
	    calculatedDefaultProps.attached = 'bottom';
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, calculatedDefaultProps, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	TabPane.handledProps = ["active", "as", "children", "className", "content", "loading"];
	TabPane.defaultProps = {
	  as: _Segment.default,
	  active: true
	};
	TabPane.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A tab pane can be active. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A Tab.Pane can display a loading indicator. */
	  loading: _propTypes.default.bool
	} : {};
	TabPane.create = (0, _lib.createShorthandFactory)(TabPane, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = TabPane;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 747 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Advertisement.default;
	  }
	});

	var _Advertisement = _interopRequireDefault(__webpack_require__(748));

/***/ }),
/* 748 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * An ad displays third-party promotional content.
	 */
	function Advertisement(props) {
	  var centered = props.centered,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      test = props.test,
	      unit = props.unit;
	  var classes = (0, _classnames.default)('ui', unit, (0, _lib.useKeyOnly)(centered, 'centered'), (0, _lib.useKeyOnly)(test, 'test'), 'ad', className);
	  var rest = (0, _lib.getUnhandledProps)(Advertisement, props);
	  var ElementType = (0, _lib.getElementType)(Advertisement, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes,
	    "data-text": test
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	Advertisement.handledProps = ["as", "centered", "children", "className", "content", "test", "unit"];
	Advertisement.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Center the advertisement. */
	  centered: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Text to be displayed on the advertisement. */
	  test: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number, _propTypes.default.string]),

	  /** Varies the size of the advertisement. */
	  unit: _propTypes.default.oneOf(['medium rectangle', 'large rectangle', 'vertical rectangle', 'small rectangle', 'mobile banner', 'banner', 'vertical banner', 'top banner', 'half banner', 'button', 'square button', 'small button', 'skyscraper', 'wide skyscraper', 'leaderboard', 'large leaderboard', 'mobile leaderboard', 'billboard', 'panorama', 'netboard', 'half page', 'square', 'small square']).isRequired
	} : {};
	var _default = Advertisement;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 749 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireWildcard = __webpack_require__(166);

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classCallCheck2 = _interopRequireDefault(__webpack_require__(168));

	var _createClass2 = _interopRequireDefault(__webpack_require__(169));

	var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(170));

	var _getPrototypeOf3 = _interopRequireDefault(__webpack_require__(173));

	var _inherits2 = _interopRequireDefault(__webpack_require__(174));

	var _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(172));

	var _defineProperty2 = _interopRequireDefault(__webpack_require__(176));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireWildcard(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Image = _interopRequireDefault(__webpack_require__(619));

	var _CardContent = _interopRequireDefault(__webpack_require__(750));

	var _CardDescription = _interopRequireDefault(__webpack_require__(751));

	var _CardGroup = _interopRequireDefault(__webpack_require__(754));

	var _CardHeader = _interopRequireDefault(__webpack_require__(752));

	var _CardMeta = _interopRequireDefault(__webpack_require__(753));

	/**
	 * A card displays site content in a manner similar to a playing card.
	 */
	var Card =
	/*#__PURE__*/
	function (_Component) {
	  (0, _inherits2.default)(Card, _Component);

	  function Card() {
	    var _getPrototypeOf2;

	    var _this;

	    (0, _classCallCheck2.default)(this, Card);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClick", function (e) {
	      var onClick = _this.props.onClick;
	      if (onClick) onClick(e, _this.props);
	    });
	    return _this;
	  }

	  (0, _createClass2.default)(Card, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          centered = _this$props.centered,
	          children = _this$props.children,
	          className = _this$props.className,
	          color = _this$props.color,
	          content = _this$props.content,
	          description = _this$props.description,
	          extra = _this$props.extra,
	          fluid = _this$props.fluid,
	          header = _this$props.header,
	          href = _this$props.href,
	          image = _this$props.image,
	          link = _this$props.link,
	          meta = _this$props.meta,
	          onClick = _this$props.onClick,
	          raised = _this$props.raised;
	      var classes = (0, _classnames.default)('ui', color, (0, _lib.useKeyOnly)(centered, 'centered'), (0, _lib.useKeyOnly)(fluid, 'fluid'), (0, _lib.useKeyOnly)(link, 'link'), (0, _lib.useKeyOnly)(raised, 'raised'), 'card', className);
	      var rest = (0, _lib.getUnhandledProps)(Card, this.props);
	      var ElementType = (0, _lib.getElementType)(Card, this.props, function () {
	        if (onClick) return 'a';
	      });

	      if (!_lib.childrenUtils.isNil(children)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes,
	          href: href,
	          onClick: this.handleClick
	        }), children);
	      }

	      if (!_lib.childrenUtils.isNil(content)) {
	        return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	          className: classes,
	          href: href,
	          onClick: this.handleClick
	        }), content);
	      }

	      return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	        className: classes,
	        href: href,
	        onClick: this.handleClick
	      }), _Image.default.create(image, {
	        autoGenerateKey: false
	      }), (description || header || meta) && _react.default.createElement(_CardContent.default, {
	        description: description,
	        header: header,
	        meta: meta
	      }), extra && _react.default.createElement(_CardContent.default, {
	        extra: true
	      }, extra));
	    }
	  }]);
	  return Card;
	}(_react.Component);

	exports.default = Card;
	(0, _defineProperty2.default)(Card, "Content", _CardContent.default);
	(0, _defineProperty2.default)(Card, "Description", _CardDescription.default);
	(0, _defineProperty2.default)(Card, "Group", _CardGroup.default);
	(0, _defineProperty2.default)(Card, "Header", _CardHeader.default);
	(0, _defineProperty2.default)(Card, "Meta", _CardMeta.default);
	(0, _defineProperty2.default)(Card, "handledProps", ["as", "centered", "children", "className", "color", "content", "description", "extra", "fluid", "header", "href", "image", "link", "meta", "onClick", "raised"]);
	Card.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A Card can center itself inside its container. */
	  centered: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A Card can be formatted to display different colors. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for CardDescription. */
	  description: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for primary content of CardContent. */
	  extra: _lib.customPropTypes.contentShorthand,

	  /** A Card can be formatted to take up the width of its container. */
	  fluid: _propTypes.default.bool,

	  /** Shorthand for CardHeader. */
	  header: _lib.customPropTypes.itemShorthand,

	  /** Render as an `a` tag instead of a `div` and adds the href attribute. */
	  href: _propTypes.default.string,

	  /** A card can contain an Image component. */
	  image: _lib.customPropTypes.itemShorthand,

	  /** A card can be formatted to link to other content. */
	  link: _propTypes.default.bool,

	  /** Shorthand for CardMeta. */
	  meta: _lib.customPropTypes.itemShorthand,

	  /**
	   * Called on click. When passed, the component renders as an `a`
	   * tag by default instead of a `div`.
	   *
	   * @param {SyntheticEvent} event - React's original SyntheticEvent.
	   * @param {object} data - All props.
	   */
	  onClick: _propTypes.default.func,

	  /** A Card can be formatted to raise above the page. */
	  raised: _propTypes.default.bool
	} : {};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 750 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _CardDescription = _interopRequireDefault(__webpack_require__(751));

	var _CardHeader = _interopRequireDefault(__webpack_require__(752));

	var _CardMeta = _interopRequireDefault(__webpack_require__(753));

	/**
	 * A card can contain blocks of content or extra content meant to be formatted separately from the main content.
	 */
	function CardContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      description = props.description,
	      extra = props.extra,
	      header = props.header,
	      meta = props.meta,
	      textAlign = props.textAlign;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(extra, 'extra'), (0, _lib.useTextAlignProp)(textAlign), 'content', className);
	  var rest = (0, _lib.getUnhandledProps)(CardContent, props);
	  var ElementType = (0, _lib.getElementType)(CardContent, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  if (!_lib.childrenUtils.isNil(content)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), content);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), (0, _lib.createShorthand)(_CardHeader.default, function (val) {
	    return {
	      content: val
	    };
	  }, header, {
	    autoGenerateKey: false
	  }), (0, _lib.createShorthand)(_CardMeta.default, function (val) {
	    return {
	      content: val
	    };
	  }, meta, {
	    autoGenerateKey: false
	  }), (0, _lib.createShorthand)(_CardDescription.default, function (val) {
	    return {
	      content: val
	    };
	  }, description, {
	    autoGenerateKey: false
	  }));
	}

	CardContent.handledProps = ["as", "children", "className", "content", "description", "extra", "header", "meta", "textAlign"];
	CardContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for CardDescription. */
	  description: _lib.customPropTypes.itemShorthand,

	  /** A card can contain extra content meant to be formatted separately from the main content. */
	  extra: _propTypes.default.bool,

	  /** Shorthand for CardHeader. */
	  header: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for CardMeta. */
	  meta: _lib.customPropTypes.itemShorthand,

	  /** A card content can adjust its text alignment. */
	  textAlign: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified'))
	} : {};
	var _default = CardContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 751 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A card can contain a description with one or more paragraphs.
	 */
	function CardDescription(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      textAlign = props.textAlign;
	  var classes = (0, _classnames.default)((0, _lib.useTextAlignProp)(textAlign), 'description', className);
	  var rest = (0, _lib.getUnhandledProps)(CardDescription, props);
	  var ElementType = (0, _lib.getElementType)(CardDescription, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	CardDescription.handledProps = ["as", "children", "className", "content", "textAlign"];
	CardDescription.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A card content can adjust its text alignment. */
	  textAlign: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified'))
	} : {};
	var _default = CardDescription;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 752 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A card can contain a header.
	 */
	function CardHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      textAlign = props.textAlign;
	  var classes = (0, _classnames.default)((0, _lib.useTextAlignProp)(textAlign), 'header', className);
	  var rest = (0, _lib.getUnhandledProps)(CardHeader, props);
	  var ElementType = (0, _lib.getElementType)(CardHeader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	CardHeader.handledProps = ["as", "children", "className", "content", "textAlign"];
	CardHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A card header can adjust its text alignment. */
	  textAlign: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified'))
	} : {};
	var _default = CardHeader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 753 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A card can contain content metadata.
	 */
	function CardMeta(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      textAlign = props.textAlign;
	  var classes = (0, _classnames.default)((0, _lib.useTextAlignProp)(textAlign), 'meta', className);
	  var rest = (0, _lib.getUnhandledProps)(CardMeta, props);
	  var ElementType = (0, _lib.getElementType)(CardMeta, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	CardMeta.handledProps = ["as", "children", "className", "content", "textAlign"];
	CardMeta.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A card meta can adjust its text alignment. */
	  textAlign: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified'))
	} : {};
	var _default = CardMeta;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 754 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Card = _interopRequireDefault(__webpack_require__(749));

	/**
	 * A group of cards.
	 */
	function CardGroup(props) {
	  var centered = props.centered,
	      children = props.children,
	      className = props.className,
	      content = props.content,
	      doubling = props.doubling,
	      items = props.items,
	      itemsPerRow = props.itemsPerRow,
	      stackable = props.stackable,
	      textAlign = props.textAlign;
	  var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(centered, 'centered'), (0, _lib.useKeyOnly)(doubling, 'doubling'), (0, _lib.useKeyOnly)(stackable, 'stackable'), (0, _lib.useTextAlignProp)(textAlign), (0, _lib.useWidthProp)(itemsPerRow), 'cards', className);
	  var rest = (0, _lib.getUnhandledProps)(CardGroup, props);
	  var ElementType = (0, _lib.getElementType)(CardGroup, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  if (!_lib.childrenUtils.isNil(content)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), content);
	  }

	  var itemsJSX = (0, _map2.default)(items, function (item) {
	    var key = item.key || [item.header, item.description].join('-');
	    return _react.default.createElement(_Card.default, (0, _extends2.default)({
	      key: key
	    }, item));
	  });
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), itemsJSX);
	}

	CardGroup.handledProps = ["as", "centered", "children", "className", "content", "doubling", "items", "itemsPerRow", "stackable", "textAlign"];
	CardGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** A group of cards can center itself inside its container. */
	  centered: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A group of cards can double its column width for mobile. */
	  doubling: _propTypes.default.bool,

	  /** Shorthand array of props for Card. */
	  items: _lib.customPropTypes.collectionShorthand,

	  /** A group of cards can set how many cards should exist in a row. */
	  itemsPerRow: _propTypes.default.oneOf(_lib.SUI.WIDTHS),

	  /** A group of cards can automatically stack rows to a single columns on mobile devices. */
	  stackable: _propTypes.default.bool,

	  /** A card group can adjust its text alignment. */
	  textAlign: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.TEXT_ALIGNMENTS, 'justified'))
	} : {};
	var _default = CardGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 755 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Comment.default;
	  }
	});

	var _Comment = _interopRequireDefault(__webpack_require__(756));

/***/ }),
/* 756 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _CommentAction = _interopRequireDefault(__webpack_require__(757));

	var _CommentActions = _interopRequireDefault(__webpack_require__(758));

	var _CommentAuthor = _interopRequireDefault(__webpack_require__(759));

	var _CommentAvatar = _interopRequireDefault(__webpack_require__(760));

	var _CommentContent = _interopRequireDefault(__webpack_require__(761));

	var _CommentGroup = _interopRequireDefault(__webpack_require__(762));

	var _CommentMetadata = _interopRequireDefault(__webpack_require__(763));

	var _CommentText = _interopRequireDefault(__webpack_require__(764));

	/**
	 * A comment displays user feedback to site content.
	 */
	function Comment(props) {
	  var className = props.className,
	      children = props.children,
	      collapsed = props.collapsed,
	      content = props.content;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(collapsed, 'collapsed'), 'comment', className);
	  var rest = (0, _lib.getUnhandledProps)(Comment, props);
	  var ElementType = (0, _lib.getElementType)(Comment, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	Comment.handledProps = ["as", "children", "className", "collapsed", "content"];
	Comment.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Comment can be collapsed, or hidden from view. */
	  collapsed: _propTypes.default.bool,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	Comment.Author = _CommentAuthor.default;
	Comment.Action = _CommentAction.default;
	Comment.Actions = _CommentActions.default;
	Comment.Avatar = _CommentAvatar.default;
	Comment.Content = _CommentContent.default;
	Comment.Group = _CommentGroup.default;
	Comment.Metadata = _CommentMetadata.default;
	Comment.Text = _CommentText.default;
	var _default = Comment;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 757 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A comment can contain an action.
	 */
	function CommentAction(props) {
	  var active = props.active,
	      className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(active, 'active'), className);
	  var rest = (0, _lib.getUnhandledProps)(CommentAction, props);
	  var ElementType = (0, _lib.getElementType)(CommentAction, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	CommentAction.handledProps = ["active", "as", "children", "className", "content"];
	CommentAction.defaultProps = {
	  as: 'a'
	};
	CommentAction.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Style as the currently active action. */
	  active: _propTypes.default.bool,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = CommentAction;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 758 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A comment can contain an list of actions a user may perform related to this comment.
	 */
	function CommentActions(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = (0, _classnames.default)('actions', className);
	  var rest = (0, _lib.getUnhandledProps)(CommentActions, props);
	  var ElementType = (0, _lib.getElementType)(CommentActions, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	CommentActions.handledProps = ["as", "children", "className", "content"];
	CommentActions.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = CommentActions;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 759 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A comment can contain an author.
	 */
	function CommentAuthor(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = (0, _classnames.default)('author', className);
	  var rest = (0, _lib.getUnhandledProps)(CommentAuthor, props);
	  var ElementType = (0, _lib.getElementType)(CommentAuthor, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	CommentAuthor.handledProps = ["as", "children", "className", "content"];
	CommentAuthor.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = CommentAuthor;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 760 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _slicedToArray2 = _interopRequireDefault(__webpack_require__(334));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A comment can contain an image or avatar.
	 */
	function CommentAvatar(props) {
	  var className = props.className,
	      src = props.src;
	  var classes = (0, _classnames.default)('avatar', className);
	  var rest = (0, _lib.getUnhandledProps)(CommentAvatar, props);

	  var _partitionHTMLProps = (0, _lib.partitionHTMLProps)(rest, {
	    htmlProps: _lib.htmlImageProps
	  }),
	      _partitionHTMLProps2 = (0, _slicedToArray2.default)(_partitionHTMLProps, 2),
	      imageProps = _partitionHTMLProps2[0],
	      rootProps = _partitionHTMLProps2[1];

	  var ElementType = (0, _lib.getElementType)(CommentAvatar, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rootProps, {
	    className: classes
	  }), (0, _lib.createHTMLImage)(src, {
	    autoGenerateKey: false,
	    defaultProps: imageProps
	  }));
	}

	CommentAvatar.handledProps = ["as", "className", "src"];
	CommentAvatar.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Specifies the URL of the image. */
	  src: _propTypes.default.string
	} : {};
	var _default = CommentAvatar;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 761 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A comment can contain content.
	 */
	function CommentContent(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = (0, _classnames.default)(className, 'content');
	  var rest = (0, _lib.getUnhandledProps)(CommentContent, props);
	  var ElementType = (0, _lib.getElementType)(CommentContent, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	CommentContent.handledProps = ["as", "children", "className", "content"];
	CommentContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = CommentContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 762 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * Comments can be grouped.
	 */
	function CommentGroup(props) {
	  var className = props.className,
	      children = props.children,
	      collapsed = props.collapsed,
	      content = props.content,
	      minimal = props.minimal,
	      size = props.size,
	      threaded = props.threaded;
	  var classes = (0, _classnames.default)('ui', size, (0, _lib.useKeyOnly)(collapsed, 'collapsed'), (0, _lib.useKeyOnly)(minimal, 'minimal'), (0, _lib.useKeyOnly)(threaded, 'threaded'), 'comments', className);
	  var rest = (0, _lib.getUnhandledProps)(CommentGroup, props);
	  var ElementType = (0, _lib.getElementType)(CommentGroup, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	CommentGroup.handledProps = ["as", "children", "className", "collapsed", "content", "minimal", "size", "threaded"];
	CommentGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Comments can be collapsed, or hidden from view. */
	  collapsed: _propTypes.default.bool,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Comments can hide extra information unless a user shows intent to interact with a comment. */
	  minimal: _propTypes.default.bool,

	  /** Comments can have different sizes. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium')),

	  /** A comment list can be threaded to showing the relationship between conversations. */
	  threaded: _propTypes.default.bool
	} : {};
	var _default = CommentGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 763 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A comment can contain metadata about the comment, an arbitrary amount of metadata may be defined.
	 */
	function CommentMetadata(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = (0, _classnames.default)('metadata', className);
	  var rest = (0, _lib.getUnhandledProps)(CommentMetadata, props);
	  var ElementType = (0, _lib.getElementType)(CommentMetadata, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	CommentMetadata.handledProps = ["as", "children", "className", "content"];
	CommentMetadata.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = CommentMetadata;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 764 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A comment can contain text.
	 */
	function CommentText(props) {
	  var className = props.className,
	      children = props.children,
	      content = props.content;
	  var classes = (0, _classnames.default)(className, 'text');
	  var rest = (0, _lib.getUnhandledProps)(CommentText, props);
	  var ElementType = (0, _lib.getElementType)(CommentText, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	CommentText.handledProps = ["as", "children", "className", "content"];
	CommentText.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = CommentText;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 765 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Feed.default;
	  }
	});

	var _Feed = _interopRequireDefault(__webpack_require__(766));

/***/ }),
/* 766 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(732));

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _FeedContent = _interopRequireDefault(__webpack_require__(767));

	var _FeedDate = _interopRequireDefault(__webpack_require__(768));

	var _FeedEvent = _interopRequireDefault(__webpack_require__(774));

	var _FeedExtra = _interopRequireDefault(__webpack_require__(769));

	var _FeedLabel = _interopRequireDefault(__webpack_require__(775));

	var _FeedLike = _interopRequireDefault(__webpack_require__(771));

	var _FeedMeta = _interopRequireDefault(__webpack_require__(770));

	var _FeedSummary = _interopRequireDefault(__webpack_require__(772));

	var _FeedUser = _interopRequireDefault(__webpack_require__(773));

	/**
	 * A feed presents user activity chronologically.
	 */
	function Feed(props) {
	  var children = props.children,
	      className = props.className,
	      events = props.events,
	      size = props.size;
	  var classes = (0, _classnames.default)('ui', size, 'feed', className);
	  var rest = (0, _lib.getUnhandledProps)(Feed, props);
	  var ElementType = (0, _lib.getElementType)(Feed, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  var eventElements = (0, _map2.default)(events, function (eventProps) {
	    var childKey = eventProps.childKey,
	        date = eventProps.date,
	        meta = eventProps.meta,
	        summary = eventProps.summary,
	        eventData = (0, _objectWithoutProperties2.default)(eventProps, ["childKey", "date", "meta", "summary"]);
	    var finalKey = childKey || [date, meta, summary].join('-');
	    return _react.default.createElement(_FeedEvent.default, (0, _extends2.default)({
	      date: date,
	      key: finalKey,
	      meta: meta,
	      summary: summary
	    }, eventData));
	  });
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), eventElements);
	}

	Feed.handledProps = ["as", "children", "className", "events", "size"];
	Feed.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand array of props for FeedEvent. */
	  events: _lib.customPropTypes.collectionShorthand,

	  /** A feed can have different sizes. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive'))
	} : {};
	Feed.Content = _FeedContent.default;
	Feed.Date = _FeedDate.default;
	Feed.Event = _FeedEvent.default;
	Feed.Extra = _FeedExtra.default;
	Feed.Label = _FeedLabel.default;
	Feed.Like = _FeedLike.default;
	Feed.Meta = _FeedMeta.default;
	Feed.Summary = _FeedSummary.default;
	Feed.User = _FeedUser.default;
	var _default = Feed;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 767 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _FeedDate = _interopRequireDefault(__webpack_require__(768));

	var _FeedExtra = _interopRequireDefault(__webpack_require__(769));

	var _FeedMeta = _interopRequireDefault(__webpack_require__(770));

	var _FeedSummary = _interopRequireDefault(__webpack_require__(772));

	function FeedContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      extraImages = props.extraImages,
	      extraText = props.extraText,
	      date = props.date,
	      meta = props.meta,
	      summary = props.summary;
	  var classes = (0, _classnames.default)('content', className);
	  var rest = (0, _lib.getUnhandledProps)(FeedContent, props);
	  var ElementType = (0, _lib.getElementType)(FeedContent, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), (0, _lib.createShorthand)(_FeedDate.default, function (val) {
	    return {
	      content: val
	    };
	  }, date, {
	    autoGenerateKey: false
	  }), (0, _lib.createShorthand)(_FeedSummary.default, function (val) {
	    return {
	      content: val
	    };
	  }, summary, {
	    autoGenerateKey: false
	  }), content, (0, _lib.createShorthand)(_FeedExtra.default, function (val) {
	    return {
	      text: true,
	      content: val
	    };
	  }, extraText, {
	    autoGenerateKey: false
	  }), (0, _lib.createShorthand)(_FeedExtra.default, function (val) {
	    return {
	      images: val
	    };
	  }, extraImages, {
	    autoGenerateKey: false
	  }), (0, _lib.createShorthand)(_FeedMeta.default, function (val) {
	    return {
	      content: val
	    };
	  }, meta, {
	    autoGenerateKey: false
	  }));
	}

	FeedContent.handledProps = ["as", "children", "className", "content", "date", "extraImages", "extraText", "meta", "summary"];
	FeedContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** An event can contain a date. */
	  date: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for FeedExtra with images. */
	  extraImages: _FeedExtra.default.propTypes.images,

	  /** Shorthand for FeedExtra with text. */
	  extraText: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for FeedMeta. */
	  meta: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for FeedSummary. */
	  summary: _lib.customPropTypes.itemShorthand
	} : {};
	var _default = FeedContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 768 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * An event or an event summary can contain a date.
	 */
	function FeedDate(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('date', className);
	  var rest = (0, _lib.getUnhandledProps)(FeedDate, props);
	  var ElementType = (0, _lib.getElementType)(FeedDate, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	FeedDate.handledProps = ["as", "children", "className", "content"];
	FeedDate.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	var _default = FeedDate;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 769 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A feed can contain an extra content.
	 */
	function FeedExtra(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      images = props.images,
	      text = props.text;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(images, 'images'), (0, _lib.useKeyOnly)(content || text, 'text'), 'extra', className);
	  var rest = (0, _lib.getUnhandledProps)(FeedExtra, props);
	  var ElementType = (0, _lib.getElementType)(FeedExtra, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  } // TODO need a "collection factory" to handle creating multiple image elements and their keys


	  var imageElements = (0, _map2.default)(images, function (image, index) {
	    var key = [index, image].join('-');
	    return (0, _lib.createHTMLImage)(image, {
	      key: key
	    });
	  });
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), content, imageElements);
	}

	FeedExtra.handledProps = ["as", "children", "className", "content", "images", "text"];
	FeedExtra.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** An event can contain additional information like a set of images. */
	  images: _lib.customPropTypes.every([_lib.customPropTypes.disallow(['text']), _propTypes.default.oneOfType([_propTypes.default.bool, _lib.customPropTypes.collectionShorthand])]),

	  /** An event can contain additional text information. */
	  text: _propTypes.default.bool
	} : {};
	var _default = FeedExtra;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 770 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _FeedLike = _interopRequireDefault(__webpack_require__(771));

	/**
	 * A feed can contain a meta.
	 */
	function FeedMeta(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      like = props.like;
	  var classes = (0, _classnames.default)('meta', className);
	  var rest = (0, _lib.getUnhandledProps)(FeedMeta, props);
	  var ElementType = (0, _lib.getElementType)(FeedMeta, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), (0, _lib.createShorthand)(_FeedLike.default, function (val) {
	    return {
	      content: val
	    };
	  }, like, {
	    autoGenerateKey: false
	  }), content);
	}

	FeedMeta.handledProps = ["as", "children", "className", "content", "like"];
	FeedMeta.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for FeedLike. */
	  like: _lib.customPropTypes.itemShorthand
	} : {};
	var _default = FeedMeta;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 771 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	/**
	 * A feed can contain a like element.
	 */
	function FeedLike(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      icon = props.icon;
	  var classes = (0, _classnames.default)('like', className);
	  var rest = (0, _lib.getUnhandledProps)(FeedLike, props);
	  var ElementType = (0, _lib.getElementType)(FeedLike, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _Icon.default.create(icon, {
	    autoGenerateKey: false
	  }), content);
	}

	FeedLike.handledProps = ["as", "children", "className", "content", "icon"];
	FeedLike.defaultProps = {
	  as: 'a'
	};
	FeedLike.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for icon. Mutually exclusive with children. */
	  icon: _lib.customPropTypes.itemShorthand
	} : {};
	var _default = FeedLike;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 772 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _FeedDate = _interopRequireDefault(__webpack_require__(768));

	var _FeedUser = _interopRequireDefault(__webpack_require__(773));

	/**
	 * A feed can contain a summary.
	 */
	function FeedSummary(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      date = props.date,
	      user = props.user;
	  var classes = (0, _classnames.default)('summary', className);
	  var rest = (0, _lib.getUnhandledProps)(FeedSummary, props);
	  var ElementType = (0, _lib.getElementType)(FeedSummary, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), (0, _lib.createShorthand)(_FeedUser.default, function (val) {
	    return {
	      content: val
	    };
	  }, user, {
	    autoGenerateKey: false
	  }), content, (0, _lib.createShorthand)(_FeedDate.default, function (val) {
	    return {
	      content: val
	    };
	  }, date, {
	    autoGenerateKey: false
	  }));
	}

	FeedSummary.handledProps = ["as", "children", "className", "content", "date", "user"];
	FeedSummary.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for FeedDate. */
	  date: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for FeedUser. */
	  user: _lib.customPropTypes.itemShorthand
	} : {};
	var _default = FeedSummary;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 773 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A feed can contain a user element.
	 */
	function FeedUser(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('user', className);
	  var rest = (0, _lib.getUnhandledProps)(FeedUser, props);
	  var ElementType = (0, _lib.getElementType)(FeedUser, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	FeedUser.handledProps = ["as", "children", "className", "content"];
	FeedUser.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	FeedUser.defaultProps = {
	  as: 'a'
	};
	var _default = FeedUser;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 774 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _FeedContent = _interopRequireDefault(__webpack_require__(767));

	var _FeedLabel = _interopRequireDefault(__webpack_require__(775));

	/**
	 * A feed contains an event.
	 */
	function FeedEvent(props) {
	  var content = props.content,
	      children = props.children,
	      className = props.className,
	      date = props.date,
	      extraImages = props.extraImages,
	      extraText = props.extraText,
	      image = props.image,
	      icon = props.icon,
	      meta = props.meta,
	      summary = props.summary;
	  var classes = (0, _classnames.default)('event', className);
	  var rest = (0, _lib.getUnhandledProps)(FeedEvent, props);
	  var ElementType = (0, _lib.getElementType)(FeedEvent, props);
	  var hasContentProp = content || date || extraImages || extraText || meta || summary;
	  var contentProps = {
	    content: content,
	    date: date,
	    extraImages: extraImages,
	    extraText: extraText,
	    meta: meta,
	    summary: summary
	  };
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), (0, _lib.createShorthand)(_FeedLabel.default, function (val) {
	    return {
	      icon: val
	    };
	  }, icon, {
	    autoGenerateKey: false
	  }), (0, _lib.createShorthand)(_FeedLabel.default, function (val) {
	    return {
	      image: val
	    };
	  }, image, {
	    autoGenerateKey: false
	  }), hasContentProp && _react.default.createElement(_FeedContent.default, contentProps), children);
	}

	FeedEvent.handledProps = ["as", "children", "className", "content", "date", "extraImages", "extraText", "icon", "image", "meta", "summary"];
	FeedEvent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for FeedContent. */
	  content: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for FeedDate. */
	  date: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for FeedExtra with images. */
	  extraImages: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for FeedExtra with content. */
	  extraText: _lib.customPropTypes.itemShorthand,

	  /** An event can contain icon label. */
	  icon: _lib.customPropTypes.itemShorthand,

	  /** An event can contain image label. */
	  image: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for FeedMeta. */
	  meta: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for FeedSummary. */
	  summary: _lib.customPropTypes.itemShorthand
	} : {};
	var _default = FeedEvent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 775 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Icon = _interopRequireDefault(__webpack_require__(547));

	/**
	 * An event can contain an image or icon label.
	 */
	function FeedLabel(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      icon = props.icon,
	      image = props.image;
	  var classes = (0, _classnames.default)('label', className);
	  var rest = (0, _lib.getUnhandledProps)(FeedLabel, props);
	  var ElementType = (0, _lib.getElementType)(FeedLabel, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), content, _Icon.default.create(icon, {
	    autoGenerateKey: false
	  }), (0, _lib.createHTMLImage)(image));
	}

	FeedLabel.handledProps = ["as", "children", "className", "content", "icon", "image"];
	FeedLabel.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** An event can contain icon label. */
	  icon: _lib.customPropTypes.itemShorthand,

	  /** An event can contain image label. */
	  image: _lib.customPropTypes.itemShorthand
	} : {};
	var _default = FeedLabel;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 776 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Item.default;
	  }
	});

	var _Item = _interopRequireDefault(__webpack_require__(777));

/***/ }),
/* 777 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _ItemContent = _interopRequireDefault(__webpack_require__(778));

	var _ItemDescription = _interopRequireDefault(__webpack_require__(780));

	var _ItemExtra = _interopRequireDefault(__webpack_require__(781));

	var _ItemGroup = _interopRequireDefault(__webpack_require__(783));

	var _ItemHeader = _interopRequireDefault(__webpack_require__(779));

	var _ItemImage = _interopRequireDefault(__webpack_require__(784));

	var _ItemMeta = _interopRequireDefault(__webpack_require__(782));

	/**
	 * An item view presents large collections of site content for display.
	 */
	function Item(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      description = props.description,
	      extra = props.extra,
	      header = props.header,
	      image = props.image,
	      meta = props.meta;
	  var classes = (0, _classnames.default)('item', className);
	  var rest = (0, _lib.getUnhandledProps)(Item, props);
	  var ElementType = (0, _lib.getElementType)(Item, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _ItemImage.default.create(image, {
	    autoGenerateKey: false
	  }), _react.default.createElement(_ItemContent.default, {
	    content: content,
	    description: description,
	    extra: extra,
	    header: header,
	    meta: meta
	  }));
	}

	Item.handledProps = ["as", "children", "className", "content", "description", "extra", "header", "image", "meta"];
	Item.Content = _ItemContent.default;
	Item.Description = _ItemDescription.default;
	Item.Extra = _ItemExtra.default;
	Item.Group = _ItemGroup.default;
	Item.Header = _ItemHeader.default;
	Item.Image = _ItemImage.default;
	Item.Meta = _ItemMeta.default;
	Item.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for ItemContent component. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for ItemDescription component. */
	  description: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for ItemExtra component. */
	  extra: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for ItemHeader component. */
	  header: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for ItemImage component. */
	  image: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for ItemMeta component. */
	  meta: _lib.customPropTypes.itemShorthand
	} : {};
	var _default = Item;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 778 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _ItemHeader = _interopRequireDefault(__webpack_require__(779));

	var _ItemDescription = _interopRequireDefault(__webpack_require__(780));

	var _ItemExtra = _interopRequireDefault(__webpack_require__(781));

	var _ItemMeta = _interopRequireDefault(__webpack_require__(782));

	/**
	 * An item can contain content.
	 */
	function ItemContent(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      description = props.description,
	      extra = props.extra,
	      header = props.header,
	      meta = props.meta,
	      verticalAlign = props.verticalAlign;
	  var classes = (0, _classnames.default)((0, _lib.useVerticalAlignProp)(verticalAlign), 'content', className);
	  var rest = (0, _lib.getUnhandledProps)(ItemContent, props);
	  var ElementType = (0, _lib.getElementType)(ItemContent, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _ItemHeader.default.create(header, {
	    autoGenerateKey: false
	  }), _ItemMeta.default.create(meta, {
	    autoGenerateKey: false
	  }), _ItemDescription.default.create(description, {
	    autoGenerateKey: false
	  }), _ItemExtra.default.create(extra, {
	    autoGenerateKey: false
	  }), content);
	}

	ItemContent.handledProps = ["as", "children", "className", "content", "description", "extra", "header", "meta", "verticalAlign"];
	ItemContent.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Shorthand for ItemDescription component. */
	  description: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for ItemExtra component. */
	  extra: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for ItemHeader component. */
	  header: _lib.customPropTypes.itemShorthand,

	  /** Shorthand for ItemMeta component. */
	  meta: _lib.customPropTypes.itemShorthand,

	  /** Content can specify its vertical alignment. */
	  verticalAlign: _propTypes.default.oneOf(_lib.SUI.VERTICAL_ALIGNMENTS)
	} : {};
	var _default = ItemContent;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 779 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * An item can contain a header.
	 */
	function ItemHeader(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('header', className);
	  var rest = (0, _lib.getUnhandledProps)(ItemHeader, props);
	  var ElementType = (0, _lib.getElementType)(ItemHeader, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ItemHeader.handledProps = ["as", "children", "className", "content"];
	ItemHeader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	ItemHeader.create = (0, _lib.createShorthandFactory)(ItemHeader, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = ItemHeader;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 780 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * An item can contain a description with a single or multiple paragraphs.
	 */
	function ItemDescription(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('description', className);
	  var rest = (0, _lib.getUnhandledProps)(ItemDescription, props);
	  var ElementType = (0, _lib.getElementType)(ItemDescription, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ItemDescription.handledProps = ["as", "children", "className", "content"];
	ItemDescription.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	ItemDescription.create = (0, _lib.createShorthandFactory)(ItemDescription, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = ItemDescription;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 781 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * An item can contain extra content meant to be formatted separately from the main content.
	 */
	function ItemExtra(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('extra', className);
	  var rest = (0, _lib.getUnhandledProps)(ItemExtra, props);
	  var ElementType = (0, _lib.getElementType)(ItemExtra, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ItemExtra.handledProps = ["as", "children", "className", "content"];
	ItemExtra.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	ItemExtra.create = (0, _lib.createShorthandFactory)(ItemExtra, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = ItemExtra;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 782 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * An item can contain content metadata.
	 */
	function ItemMeta(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('meta', className);
	  var rest = (0, _lib.getUnhandledProps)(ItemMeta, props);
	  var ElementType = (0, _lib.getElementType)(ItemMeta, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	ItemMeta.handledProps = ["as", "children", "className", "content"];
	ItemMeta.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	ItemMeta.create = (0, _lib.createShorthandFactory)(ItemMeta, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = ItemMeta;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 783 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(732));

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Item = _interopRequireDefault(__webpack_require__(777));

	/**
	 * A group of items.
	 */
	function ItemGroup(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      divided = props.divided,
	      items = props.items,
	      link = props.link,
	      relaxed = props.relaxed,
	      unstackable = props.unstackable;
	  var classes = (0, _classnames.default)('ui', (0, _lib.useKeyOnly)(divided, 'divided'), (0, _lib.useKeyOnly)(link, 'link'), (0, _lib.useKeyOnly)(unstackable, 'unstackable'), (0, _lib.useKeyOrValueAndKey)(relaxed, 'relaxed'), 'items', className);
	  var rest = (0, _lib.getUnhandledProps)(ItemGroup, props);
	  var ElementType = (0, _lib.getElementType)(ItemGroup, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  if (!_lib.childrenUtils.isNil(content)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), content);
	  }

	  var itemsJSX = (0, _map2.default)(items, function (item) {
	    var childKey = item.childKey,
	        itemProps = (0, _objectWithoutProperties2.default)(item, ["childKey"]);
	    var finalKey = childKey || [itemProps.content, itemProps.description, itemProps.header, itemProps.meta].join('-');
	    return _react.default.createElement(_Item.default, (0, _extends2.default)({}, itemProps, {
	      key: finalKey
	    }));
	  });
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), itemsJSX);
	}

	ItemGroup.handledProps = ["as", "children", "className", "content", "divided", "items", "link", "relaxed", "unstackable"];
	ItemGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Items can be divided to better distinguish between grouped content. */
	  divided: _propTypes.default.bool,

	  /** Shorthand array of props for Item. */
	  items: _lib.customPropTypes.collectionShorthand,

	  /** An item can be formatted so that the entire contents link to another page. */
	  link: _propTypes.default.bool,

	  /** A group of items can relax its padding to provide more negative space. */
	  relaxed: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['very'])]),

	  /** Prevent items from stacking on mobile. */
	  unstackable: _propTypes.default.bool
	} : {};
	var _default = ItemGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 784 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Image = _interopRequireDefault(__webpack_require__(619));

	/**
	 * An item can contain an image.
	 */
	function ItemImage(props) {
	  var size = props.size;
	  var rest = (0, _lib.getUnhandledProps)(ItemImage, props);
	  return _react.default.createElement(_Image.default, (0, _extends2.default)({}, rest, {
	    size: size,
	    ui: !!size,
	    wrapped: true
	  }));
	}

	ItemImage.handledProps = ["size"];
	ItemImage.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An image may appear at different sizes. */
	  size: _Image.default.propTypes.size
	} : {};
	ItemImage.create = (0, _lib.createShorthandFactory)(ItemImage, function (src) {
	  return {
	    src: src
	  };
	});
	var _default = ItemImage;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 785 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(exports, "default", {
	  enumerable: true,
	  get: function get() {
	    return _Statistic.default;
	  }
	});

	var _Statistic = _interopRequireDefault(__webpack_require__(786));

/***/ }),
/* 786 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _StatisticGroup = _interopRequireDefault(__webpack_require__(787));

	var _StatisticLabel = _interopRequireDefault(__webpack_require__(788));

	var _StatisticValue = _interopRequireDefault(__webpack_require__(789));

	/**
	 * A statistic emphasizes the current value of an attribute.
	 */
	function Statistic(props) {
	  var children = props.children,
	      className = props.className,
	      color = props.color,
	      content = props.content,
	      floated = props.floated,
	      horizontal = props.horizontal,
	      inverted = props.inverted,
	      label = props.label,
	      size = props.size,
	      text = props.text,
	      value = props.value;
	  var classes = (0, _classnames.default)('ui', color, size, (0, _lib.useValueAndKey)(floated, 'floated'), (0, _lib.useKeyOnly)(horizontal, 'horizontal'), (0, _lib.useKeyOnly)(inverted, 'inverted'), 'statistic', className);
	  var rest = (0, _lib.getUnhandledProps)(Statistic, props);
	  var ElementType = (0, _lib.getElementType)(Statistic, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  if (!_lib.childrenUtils.isNil(content)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), content);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _StatisticValue.default.create(value, {
	    defaultProps: {
	      text: text
	    },
	    autoGenerateKey: false
	  }), _StatisticLabel.default.create(label, {
	    autoGenerateKey: false
	  }));
	}

	Statistic.handledProps = ["as", "children", "className", "color", "content", "floated", "horizontal", "inverted", "label", "size", "text", "value"];
	Statistic.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A statistic can be formatted to be different colors. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A statistic can sit to the left or right of other content. */
	  floated: _propTypes.default.oneOf(_lib.SUI.FLOATS),

	  /** A statistic can present its measurement horizontally. */
	  horizontal: _propTypes.default.bool,

	  /** A statistic can be formatted to fit on a dark background. */
	  inverted: _propTypes.default.bool,

	  /** Label content of the Statistic. */
	  label: _lib.customPropTypes.contentShorthand,

	  /** A statistic can vary in size. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'big', 'massive', 'medium')),

	  /** Format the StatisticValue with smaller font size to fit nicely beside number values. */
	  text: _propTypes.default.bool,

	  /** Value content of the Statistic. */
	  value: _lib.customPropTypes.contentShorthand
	} : {};
	Statistic.Group = _StatisticGroup.default;
	Statistic.Label = _StatisticLabel.default;
	Statistic.Value = _StatisticValue.default;
	Statistic.create = (0, _lib.createShorthandFactory)(Statistic, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = Statistic;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 787 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _without2 = _interopRequireDefault(__webpack_require__(522));

	var _map2 = _interopRequireDefault(__webpack_require__(471));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	var _Statistic = _interopRequireDefault(__webpack_require__(786));

	/**
	 * A group of statistics.
	 */
	function StatisticGroup(props) {
	  var children = props.children,
	      className = props.className,
	      color = props.color,
	      content = props.content,
	      horizontal = props.horizontal,
	      inverted = props.inverted,
	      items = props.items,
	      size = props.size,
	      widths = props.widths;
	  var classes = (0, _classnames.default)('ui', color, size, (0, _lib.useKeyOnly)(horizontal, 'horizontal'), (0, _lib.useKeyOnly)(inverted, 'inverted'), (0, _lib.useWidthProp)(widths), 'statistics', className);
	  var rest = (0, _lib.getUnhandledProps)(StatisticGroup, props);
	  var ElementType = (0, _lib.getElementType)(StatisticGroup, props);

	  if (!_lib.childrenUtils.isNil(children)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), children);
	  }

	  if (!_lib.childrenUtils.isNil(content)) {
	    return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	      className: classes
	    }), content);
	  }

	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), (0, _map2.default)(items, function (item) {
	    return _Statistic.default.create(item);
	  }));
	}

	StatisticGroup.handledProps = ["as", "children", "className", "color", "content", "horizontal", "inverted", "items", "size", "widths"];
	StatisticGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** A statistic group can be formatted to be different colors. */
	  color: _propTypes.default.oneOf(_lib.SUI.COLORS),

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** A statistic group can present its measurement horizontally. */
	  horizontal: _propTypes.default.bool,

	  /** A statistic group can be formatted to fit on a dark background. */
	  inverted: _propTypes.default.bool,

	  /** Array of props for Statistic. */
	  items: _lib.customPropTypes.collectionShorthand,

	  /** A statistic group can vary in size. */
	  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'big', 'massive', 'medium')),

	  /** A statistic group can have its items divided evenly. */
	  widths: _propTypes.default.oneOf(_lib.SUI.WIDTHS)
	} : {};
	var _default = StatisticGroup;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 788 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A statistic can contain a label to help provide context for the presented value.
	 */
	function StatisticLabel(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content;
	  var classes = (0, _classnames.default)('label', className);
	  var rest = (0, _lib.getUnhandledProps)(StatisticLabel, props);
	  var ElementType = (0, _lib.getElementType)(StatisticLabel, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	StatisticLabel.handledProps = ["as", "children", "className", "content"];
	StatisticLabel.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand
	} : {};
	StatisticLabel.create = (0, _lib.createShorthandFactory)(StatisticLabel, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = StatisticLabel;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 789 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(163);

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = _interopRequireDefault(__webpack_require__(167));

	var _classnames = _interopRequireDefault(__webpack_require__(491));

	var _propTypes = _interopRequireDefault(__webpack_require__(20));

	var _react = _interopRequireDefault(__webpack_require__(4));

	var _lib = __webpack_require__(242);

	/**
	 * A statistic can contain a numeric, icon, image, or text value.
	 */
	function StatisticValue(props) {
	  var children = props.children,
	      className = props.className,
	      content = props.content,
	      text = props.text;
	  var classes = (0, _classnames.default)((0, _lib.useKeyOnly)(text, 'text'), 'value', className);
	  var rest = (0, _lib.getUnhandledProps)(StatisticValue, props);
	  var ElementType = (0, _lib.getElementType)(StatisticValue, props);
	  return _react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {
	    className: classes
	  }), _lib.childrenUtils.isNil(children) ? content : children);
	}

	StatisticValue.handledProps = ["as", "children", "className", "content", "text"];
	StatisticValue.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** An element type to render as (string or function). */
	  as: _lib.customPropTypes.as,

	  /** Primary content. */
	  children: _propTypes.default.node,

	  /** Additional classes. */
	  className: _propTypes.default.string,

	  /** Shorthand for primary content. */
	  content: _lib.customPropTypes.contentShorthand,

	  /** Format the value with smaller font size to fit nicely beside number values. */
	  text: _propTypes.default.bool
	} : {};
	StatisticValue.create = (0, _lib.createShorthandFactory)(StatisticValue, function (content) {
	  return {
	    content: content
	  };
	});
	var _default = StatisticValue;
	exports.default = _default;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 790 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	var tslib_1 = __webpack_require__(791);
	var core = __webpack_require__(792);

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var dist = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	/** JSDoc */
	var Severity;
	(function (Severity) {
	    /** JSDoc */
	    Severity["Fatal"] = "fatal";
	    /** JSDoc */
	    Severity["Error"] = "error";
	    /** JSDoc */
	    Severity["Warning"] = "warning";
	    /** JSDoc */
	    Severity["Log"] = "log";
	    /** JSDoc */
	    Severity["Info"] = "info";
	    /** JSDoc */
	    Severity["Debug"] = "debug";
	    /** JSDoc */
	    Severity["Critical"] = "critical";
	})(Severity = exports.Severity || (exports.Severity = {}));
	// tslint:disable:no-unnecessary-qualifier no-namespace
	(function (Severity) {
	    /**
	     * Converts a string-based level into a {@link Severity}.
	     *
	     * @param level string representation of Severity
	     * @returns Severity
	     */
	    function fromString(level) {
	        switch (level) {
	            case 'debug':
	                return Severity.Debug;
	            case 'info':
	                return Severity.Info;
	            case 'warn':
	            case 'warning':
	                return Severity.Warning;
	            case 'error':
	                return Severity.Error;
	            case 'fatal':
	                return Severity.Fatal;
	            case 'critical':
	                return Severity.Critical;
	            case 'log':
	            default:
	                return Severity.Log;
	        }
	    }
	    Severity.fromString = fromString;
	})(Severity = exports.Severity || (exports.Severity = {}));
	/** The status of an event. */
	var Status;
	(function (Status) {
	    /** The status could not be determined. */
	    Status["Unknown"] = "unknown";
	    /** The event was skipped due to configuration or callbacks. */
	    Status["Skipped"] = "skipped";
	    /** The event was sent to Sentry successfully. */
	    Status["Success"] = "success";
	    /** The client is currently rate limited and will try again later. */
	    Status["RateLimit"] = "rate_limit";
	    /** The event could not be processed. */
	    Status["Invalid"] = "invalid";
	    /** A server-side error ocurred during submission. */
	    Status["Failed"] = "failed";
	})(Status = exports.Status || (exports.Status = {}));
	// tslint:disable:no-unnecessary-qualifier no-namespace
	(function (Status) {
	    /**
	     * Converts a HTTP status code into a {@link Status}.
	     *
	     * @param code The HTTP response status code.
	     * @returns The send status or {@link Status.Unknown}.
	     */
	    function fromHttpCode(code) {
	        if (code >= 200 && code < 300) {
	            return Status.Success;
	        }
	        if (code === 429) {
	            return Status.RateLimit;
	        }
	        if (code >= 400 && code < 500) {
	            return Status.Invalid;
	        }
	        if (code >= 500) {
	            return Status.Failed;
	        }
	        return Status.Unknown;
	    }
	    Status.fromHttpCode = fromHttpCode;
	})(Status = exports.Status || (exports.Status = {}));

	});

	unwrapExports(dist);
	var dist_1 = dist.Severity;
	var dist_2 = dist.Status;

	var is = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Checks whether given value's type is one of a few Error or Error-like
	 * {@link isError}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isError(wat) {
	    switch (Object.prototype.toString.call(wat)) {
	        case '[object Error]':
	            return true;
	        case '[object Exception]':
	            return true;
	        case '[object DOMException]':
	            return true;
	        default:
	            return wat instanceof Error;
	    }
	}
	exports.isError = isError;
	/**
	 * Checks whether given value's type is ErrorEvent
	 * {@link isErrorEvent}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isErrorEvent(wat) {
	    return Object.prototype.toString.call(wat) === '[object ErrorEvent]';
	}
	exports.isErrorEvent = isErrorEvent;
	/**
	 * Checks whether given value's type is DOMError
	 * {@link isDOMError}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isDOMError(wat) {
	    return Object.prototype.toString.call(wat) === '[object DOMError]';
	}
	exports.isDOMError = isDOMError;
	/**
	 * Checks whether given value's type is DOMException
	 * {@link isDOMException}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isDOMException(wat) {
	    return Object.prototype.toString.call(wat) === '[object DOMException]';
	}
	exports.isDOMException = isDOMException;
	/**
	 * Checks whether given value's type is an undefined
	 * {@link isUndefined}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isUndefined(wat) {
	    return wat === void 0;
	}
	exports.isUndefined = isUndefined;
	/**
	 * Checks whether given value's type is a function
	 * {@link isFunction}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isFunction(wat) {
	    return typeof wat === 'function';
	}
	exports.isFunction = isFunction;
	/**
	 * Checks whether given value's type is a string
	 * {@link isString}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isString(wat) {
	    return Object.prototype.toString.call(wat) === '[object String]';
	}
	exports.isString = isString;
	/**
	 * Checks whether given value's is a primitive (undefined, null, number, boolean, string)
	 * {@link isPrimitive}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isPrimitive(wat) {
	    return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');
	}
	exports.isPrimitive = isPrimitive;
	/**
	 * Checks whether given value's type is an array
	 * {@link isArray}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isArray(wat) {
	    return Object.prototype.toString.call(wat) === '[object Array]';
	}
	exports.isArray = isArray;
	/**
	 * Checks whether given value's type is an object literal
	 * {@link isPlainObject}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isPlainObject(wat) {
	    return Object.prototype.toString.call(wat) === '[object Object]';
	}
	exports.isPlainObject = isPlainObject;
	/**
	 * Checks whether given value's type is an regexp
	 * {@link isRegExp}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isRegExp(wat) {
	    return Object.prototype.toString.call(wat) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	/**
	 * Checks whether given value's type is a NaN
	 * {@link isNaN}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isNaN(wat) {
	    return wat !== wat;
	}
	exports.isNaN = isNaN;
	/**
	 * Checks whether given value's type is a SyntheticEvent
	 * {@link isSyntheticEvent}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isSyntheticEvent(wat) {
	    // tslint:disable-next-line:no-unsafe-any
	    return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;
	}
	exports.isSyntheticEvent = isSyntheticEvent;

	});

	unwrapExports(is);
	var is_1 = is.isError;
	var is_2 = is.isErrorEvent;
	var is_3 = is.isDOMError;
	var is_4 = is.isDOMException;
	var is_5 = is.isUndefined;
	var is_6 = is.isFunction;
	var is_7 = is.isString;
	var is_8 = is.isPrimitive;
	var is_9 = is.isArray;
	var is_10 = is.isPlainObject;
	var is_11 = is.isRegExp;
	var is_12 = is.isNaN;
	var is_13 = is.isSyntheticEvent;

	var misc = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	/**
	 * Requires a module which is protected against bundler minification.
	 *
	 * @param request The module path to resolve
	 */
	function dynamicRequire(mod, request) {
	    return mod.require(request);
	}
	exports.dynamicRequire = dynamicRequire;
	/**
	 * Checks whether we're in the Node.js or Browser environment
	 *
	 * @returns Answer to given question
	 */
	function isNodeEnv() {
	    // tslint:disable:strict-type-predicates
	    return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
	}
	exports.isNodeEnv = isNodeEnv;
	var fallbackGlobalObject = {};
	/**
	 * Safely get global scope object
	 *
	 * @returns Global scope object
	 */
	// tslint:disable:strict-type-predicates
	function getGlobalObject() {
	    return isNodeEnv()
	        ? commonjsGlobal
	        : typeof window !== 'undefined'
	            ? window
	            : typeof self !== 'undefined'
	                ? self
	                : fallbackGlobalObject;
	}
	exports.getGlobalObject = getGlobalObject;
	/**
	 * UUID4 generator
	 *
	 * @returns string Generated UUID4.
	 */
	function uuid4() {
	    var global = getGlobalObject();
	    var crypto = global.crypto || global.msCrypto;
	    if (!(crypto === void 0) && crypto.getRandomValues) {
	        // Use window.crypto API if available
	        var arr = new Uint16Array(8);
	        crypto.getRandomValues(arr);
	        // set 4 in byte 7
	        // tslint:disable-next-line:no-bitwise
	        arr[3] = (arr[3] & 0xfff) | 0x4000;
	        // set 2 most significant bits of byte 9 to '10'
	        // tslint:disable-next-line:no-bitwise
	        arr[4] = (arr[4] & 0x3fff) | 0x8000;
	        var pad = function (num) {
	            var v = num.toString(16);
	            while (v.length < 4) {
	                v = "0" + v;
	            }
	            return v;
	        };
	        return (pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]));
	    }
	    else {
	        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
	        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	            // tslint:disable-next-line:no-bitwise
	            var r = (Math.random() * 16) | 0;
	            // tslint:disable-next-line:no-bitwise
	            var v = c === 'x' ? r : (r & 0x3) | 0x8;
	            return v.toString(16);
	        });
	    }
	}
	exports.uuid4 = uuid4;
	/**
	 * Given a child DOM element, returns a query-selector statement describing that
	 * and its ancestors
	 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
	 * @returns generated DOM path
	 */
	function htmlTreeAsString(elem) {
	    var currentElem = elem;
	    var MAX_TRAVERSE_HEIGHT = 5;
	    var MAX_OUTPUT_LEN = 80;
	    var out = [];
	    var height = 0;
	    var len = 0;
	    var separator = ' > ';
	    var sepLength = separator.length;
	    var nextStr;
	    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
	        nextStr = htmlElementAsString(currentElem);
	        // bail out if
	        // - nextStr is the 'html' element
	        // - the length of the string that would be created exceeds MAX_OUTPUT_LEN
	        //   (ignore this limit if we are on the first iteration)
	        if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {
	            break;
	        }
	        out.push(nextStr);
	        len += nextStr.length;
	        currentElem = currentElem.parentNode;
	    }
	    return out.reverse().join(separator);
	}
	exports.htmlTreeAsString = htmlTreeAsString;
	/**
	 * Returns a simple, query-selector representation of a DOM element
	 * e.g. [HTMLElement] => input#foo.btn[name=baz]
	 * @returns generated DOM path
	 */
	function htmlElementAsString(elem) {
	    var out = [];
	    var className;
	    var classes;
	    var key;
	    var attr;
	    var i;
	    if (!elem || !elem.tagName) {
	        return '';
	    }
	    out.push(elem.tagName.toLowerCase());
	    if (elem.id) {
	        out.push("#" + elem.id);
	    }
	    className = elem.className;
	    if (className && is.isString(className)) {
	        classes = className.split(/\s+/);
	        for (i = 0; i < classes.length; i++) {
	            out.push("." + classes[i]);
	        }
	    }
	    var attrWhitelist = ['type', 'name', 'title', 'alt'];
	    for (i = 0; i < attrWhitelist.length; i++) {
	        key = attrWhitelist[i];
	        attr = elem.getAttribute(key);
	        if (attr) {
	            out.push("[" + key + "=\"" + attr + "\"]");
	        }
	    }
	    return out.join('');
	}
	exports.htmlElementAsString = htmlElementAsString;
	/**
	 * Parses string form of URL into an object
	 * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
	 * // intentionally using regex and not <a/> href parsing trick because React Native and other
	 * // environments where DOM might not be available
	 * @returns parsed URL object
	 */
	function parseUrl(url) {
	    if (!url) {
	        return {};
	    }
	    var match = url.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
	    if (!match) {
	        return {};
	    }
	    // coerce to undefined values to empty string so we don't get 'undefined'
	    var query = match[6] || '';
	    var fragment = match[8] || '';
	    return {
	        host: match[4],
	        path: match[5],
	        protocol: match[2],
	        relative: match[5] + query + fragment,
	    };
	}
	exports.parseUrl = parseUrl;
	/**
	 * Extracts either message or type+value from an event that can be used for user-facing logs
	 * @returns event's description
	 */
	function getEventDescription(event) {
	    if (event.message) {
	        return event.message;
	    }
	    else if (event.exception && event.exception.values && event.exception.values[0]) {
	        var exception = event.exception.values[0];
	        if (exception.type && exception.value) {
	            return exception.type + ": " + exception.value;
	        }
	        else {
	            return exception.type || exception.value || event.event_id || '<unknown>';
	        }
	    }
	    else {
	        return event.event_id || '<unknown>';
	    }
	}
	exports.getEventDescription = getEventDescription;
	/** JSDoc */
	function consoleSandbox(callback) {
	    var global = getGlobalObject();
	    var levels = ['debug', 'info', 'warn', 'error', 'log'];
	    if (!('console' in global)) {
	        return callback();
	    }
	    var originalConsole = global.console;
	    var wrappedLevels = {};
	    // Restore all wrapped console methods
	    levels.forEach(function (level) {
	        if (level in global.console && originalConsole[level].__sentry__) {
	            wrappedLevels[level] = originalConsole[level].__sentry_wrapped__;
	            originalConsole[level] = originalConsole[level].__sentry_original__;
	        }
	    });
	    // Perform callback manipulations
	    var result = callback();
	    // Revert restoration to wrapped state
	    Object.keys(wrappedLevels).forEach(function (level) {
	        originalConsole[level] = wrappedLevels[level];
	    });
	    return result;
	}
	exports.consoleSandbox = consoleSandbox;

	});

	unwrapExports(misc);
	var misc_1 = misc.dynamicRequire;
	var misc_2 = misc.isNodeEnv;
	var misc_3 = misc.getGlobalObject;
	var misc_4 = misc.uuid4;
	var misc_5 = misc.htmlTreeAsString;
	var misc_6 = misc.htmlElementAsString;
	var misc_7 = misc.parseUrl;
	var misc_8 = misc.getEventDescription;
	var misc_9 = misc.consoleSandbox;

	var supports = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	/**
	 * Tells whether current environment supports ErrorEvent objects
	 * {@link supportsErrorEvent}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsErrorEvent() {
	    try {
	        // tslint:disable:no-unused-expression
	        new ErrorEvent('');
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	exports.supportsErrorEvent = supportsErrorEvent;
	/**
	 * Tells whether current environment supports DOMError objects
	 * {@link supportsDOMError}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsDOMError() {
	    try {
	        // It really needs 1 argument, not 0.
	        // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':
	        // 1 argument required, but only 0 present.
	        // @ts-ignore
	        // tslint:disable:no-unused-expression
	        new DOMError('');
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	exports.supportsDOMError = supportsDOMError;
	/**
	 * Tells whether current environment supports DOMException objects
	 * {@link supportsDOMException}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsDOMException() {
	    try {
	        // tslint:disable:no-unused-expression
	        new DOMException('');
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	exports.supportsDOMException = supportsDOMException;
	/**
	 * Tells whether current environment supports Fetch API
	 * {@link supportsFetch}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsFetch() {
	    if (!('fetch' in misc.getGlobalObject())) {
	        return false;
	    }
	    try {
	        // tslint:disable-next-line:no-unused-expression
	        new Headers();
	        // tslint:disable-next-line:no-unused-expression
	        new Request('');
	        // tslint:disable-next-line:no-unused-expression
	        new Response();
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	exports.supportsFetch = supportsFetch;
	/**
	 * Tells whether current environment supports Fetch API natively
	 * {@link supportsNativeFetch}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsNativeFetch() {
	    if (!supportsFetch()) {
	        return false;
	    }
	    var global = misc.getGlobalObject();
	    var fetch = global.fetch;
	    // tslint:disable-next-line:no-unsafe-any
	    return fetch.toString().indexOf('native') !== -1;
	}
	exports.supportsNativeFetch = supportsNativeFetch;
	/**
	 * Tells whether current environment supports sendBeacon API
	 * {@link supportsBeacon}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsBeacon() {
	    var global = misc.getGlobalObject();
	    return 'navigator' in global && 'sendBeacon' in global.navigator;
	}
	exports.supportsBeacon = supportsBeacon;
	/**
	 * Tells whether current environment supports ReportingObserver API
	 * {@link supportsReportingObserver}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsReportingObserver() {
	    return 'ReportingObserver' in misc.getGlobalObject();
	}
	exports.supportsReportingObserver = supportsReportingObserver;
	/**
	 * Tells whether current environment supports Referrer Policy API
	 * {@link supportsReferrerPolicy}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsReferrerPolicy() {
	    // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default
	    // https://caniuse.com/#feat=referrer-policy
	    // It doesn't. And it throw exception instead of ignoring this parameter...
	    // REF: https://github.com/getsentry/raven-js/issues/1233
	    if (!supportsFetch()) {
	        return false;
	    }
	    try {
	        // tslint:disable:no-unused-expression
	        new Request('pickleRick', {
	            referrerPolicy: 'origin',
	        });
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	}
	exports.supportsReferrerPolicy = supportsReferrerPolicy;
	/**
	 * Tells whether current environment supports History API
	 * {@link supportsHistory}.
	 *
	 * @returns Answer to the given question.
	 */
	function supportsHistory() {
	    // NOTE: in Chrome App environment, touching history.pushState, *even inside
	    //       a try/catch block*, will cause Chrome to output an error to console.error
	    // borrowed from: https://github.com/angular/angular.js/pull/13945/files
	    var global = misc.getGlobalObject();
	    var chrome = global.chrome;
	    // tslint:disable-next-line:no-unsafe-any
	    var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;
	    var hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;
	    return !isChromePackagedApp && hasHistoryApi;
	}
	exports.supportsHistory = supportsHistory;

	});

	unwrapExports(supports);
	var supports_1 = supports.supportsErrorEvent;
	var supports_2 = supports.supportsDOMError;
	var supports_3 = supports.supportsDOMException;
	var supports_4 = supports.supportsFetch;
	var supports_5 = supports.supportsNativeFetch;
	var supports_6 = supports.supportsBeacon;
	var supports_7 = supports.supportsReportingObserver;
	var supports_8 = supports.supportsReferrerPolicy;
	var supports_9 = supports.supportsHistory;

	var memo = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	// tslint:disable:no-unsafe-any
	/**
	 * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.
	 */
	var Memo = /** @class */ (function () {
	    function Memo() {
	        // tslint:disable-next-line
	        this.hasWeakSet = typeof WeakSet === 'function';
	        this.inner = this.hasWeakSet ? new WeakSet() : [];
	    }
	    /**
	     * Sets obj to remember.
	     * @param obj Object to remember
	     */
	    Memo.prototype.memoize = function (obj) {
	        if (this.hasWeakSet) {
	            if (this.inner.has(obj)) {
	                return true;
	            }
	            this.inner.add(obj);
	            return false;
	        }
	        else {
	            // tslint:disable-next-line:prefer-for-of
	            for (var i = 0; i < this.inner.length; i++) {
	                var value = this.inner[i];
	                if (value === obj) {
	                    return true;
	                }
	            }
	            this.inner.push(obj);
	            return false;
	        }
	    };
	    /**
	     * Removes object from internal storage.
	     * @param obj Object to forget
	     */
	    Memo.prototype.unmemoize = function (obj) {
	        if (this.hasWeakSet) {
	            this.inner.delete(obj);
	        }
	        else {
	            for (var i = 0; i < this.inner.length; i++) {
	                if (this.inner[i] === obj) {
	                    this.inner.splice(i, 1);
	                    break;
	                }
	            }
	        }
	    };
	    return Memo;
	}());
	exports.Memo = Memo;

	});

	unwrapExports(memo);
	var memo_1 = memo.Memo;

	var string = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	/**
	 * Truncates given string to the maximum characters count
	 *
	 * @param str An object that contains serializable values
	 * @param max Maximum number of characters in truncated string
	 * @returns string Encoded
	 */
	function truncate(str, max) {
	    if (max === void 0) { max = 0; }
	    if (max === 0 || !is.isString(str)) {
	        return str;
	    }
	    return str.length <= max ? str : str.substr(0, max) + "...";
	}
	exports.truncate = truncate;
	/**
	 * This is basically just `trim_line` from
	 * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67
	 *
	 * @param str An object that contains serializable values
	 * @param max Maximum number of characters in truncated string
	 * @returns string Encoded
	 */
	function snipLine(line, colno) {
	    var newLine = line;
	    var ll = newLine.length;
	    if (ll <= 150) {
	        return newLine;
	    }
	    if (colno > ll) {
	        colno = ll; // tslint:disable-line:no-parameter-reassignment
	    }
	    var start = Math.max(colno - 60, 0);
	    if (start < 5) {
	        start = 0;
	    }
	    var end = Math.min(start + 140, ll);
	    if (end > ll - 5) {
	        end = ll;
	    }
	    if (end === ll) {
	        start = Math.max(end - 140, 0);
	    }
	    newLine = newLine.slice(start, end);
	    if (start > 0) {
	        newLine = "'{snip} " + newLine;
	    }
	    if (end < ll) {
	        newLine += ' {snip}';
	    }
	    return newLine;
	}
	exports.snipLine = snipLine;
	/**
	 * Join values in array
	 * @param input array of values to be joined together
	 * @param delimiter string to be placed in-between values
	 * @returns Joined values
	 */
	function safeJoin(input, delimiter) {
	    if (!Array.isArray(input)) {
	        return '';
	    }
	    var output = [];
	    // tslint:disable-next-line:prefer-for-of
	    for (var i = 0; i < input.length; i++) {
	        var value = input[i];
	        try {
	            output.push(String(value));
	        }
	        catch (e) {
	            output.push('[value cannot be serialized]');
	        }
	    }
	    return output.join(delimiter);
	}
	exports.safeJoin = safeJoin;
	/**
	 * Checks if given value is included in the target
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill
	 * @param target source string
	 * @param search string to be looked for
	 * @returns An answer
	 */
	function includes(target, search) {
	    if (search.length > target.length) {
	        return false;
	    }
	    else {
	        return target.indexOf(search) !== -1;
	    }
	}
	exports.includes = includes;

	});

	unwrapExports(string);
	var string_1 = string.truncate;
	var string_2 = string.snipLine;
	var string_3 = string.safeJoin;
	var string_4 = string.includes;

	var object = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });



	/**
	 * Serializes the given object into a string.
	 * Like JSON.stringify, but doesn't throw on circular references.
	 *
	 * @param object A JSON-serializable object.
	 * @returns A string containing the serialized object.
	 */
	function serialize(object) {
	    return JSON.stringify(object, serializer({ normalize: false }));
	}
	exports.serialize = serialize;
	/**
	 * Deserializes an object from a string previously serialized with
	 * {@link serialize}.
	 *
	 * @param str A serialized object.
	 * @returns The deserialized object.
	 */
	function deserialize(str) {
	    return JSON.parse(str);
	}
	exports.deserialize = deserialize;
	/**
	 * Creates a deep copy of the given object.
	 *
	 * The object must be serializable, i.e.:
	 *  - It must not contain any cycles
	 *  - Only primitive types are allowed (object, array, number, string, boolean)
	 *  - Its depth should be considerably low for performance reasons
	 *
	 * @param object A JSON-serializable object.
	 * @returns The object clone.
	 */
	function clone(object) {
	    return deserialize(serialize(object));
	}
	exports.clone = clone;
	/**
	 * Wrap a given object method with a higher-order function
	 *
	 * @param source An object that contains a method to be wrapped.
	 * @param name A name of method to be wrapped.
	 * @param replacement A function that should be used to wrap a given method.
	 * @returns void
	 */
	function fill(source, name, replacement) {
	    if (!(name in source) || source[name].__sentry__) {
	        return;
	    }
	    var original = source[name];
	    var wrapped = replacement(original);
	    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work
	    // otherwise it'll throw "TypeError: Object.defineProperties called on non-object"
	    // tslint:disable-next-line:strict-type-predicates
	    if (typeof wrapped === 'function') {
	        wrapped.prototype = wrapped.prototype || {};
	        Object.defineProperties(wrapped, {
	            __sentry__: {
	                enumerable: false,
	                value: true,
	            },
	            __sentry_original__: {
	                enumerable: false,
	                value: original,
	            },
	            __sentry_wrapped__: {
	                enumerable: false,
	                value: wrapped,
	            },
	        });
	    }
	    source[name] = wrapped;
	}
	exports.fill = fill;
	/**
	 * Encodes given object into url-friendly format
	 *
	 * @param object An object that contains serializable values
	 * @returns string Encoded
	 */
	function urlEncode(object) {
	    return Object.keys(object)
	        .map(
	    // tslint:disable-next-line:no-unsafe-any
	    function (key) { return encodeURIComponent(key) + "=" + encodeURIComponent(object[key]); })
	        .join('&');
	}
	exports.urlEncode = urlEncode;
	// Default Node.js REPL depth
	var MAX_SERIALIZE_EXCEPTION_DEPTH = 3;
	// 100kB, as 200kB is max payload size, so half sounds reasonable
	var MAX_SERIALIZE_EXCEPTION_SIZE = 100 * 1024;
	var MAX_SERIALIZE_KEYS_LENGTH = 40;
	/** JSDoc */
	function utf8Length(value) {
	    // tslint:disable-next-line:no-bitwise
	    return ~-encodeURI(value).split(/%..|./).length;
	}
	/** JSDoc */
	function jsonSize(value) {
	    return utf8Length(JSON.stringify(value));
	}
	/** JSDoc */
	function serializeValue(value) {
	    var type = Object.prototype.toString.call(value);
	    // Node.js REPL notation
	    if (typeof value === 'string') {
	        return string.truncate(value, 40);
	    }
	    else if (type === '[object Object]') {
	        return '[Object]';
	    }
	    else if (type === '[object Array]') {
	        return '[Array]';
	    }
	    else {
	        var normalized = normalizeValue(value);
	        return is.isPrimitive(normalized) ? "" + normalized : type;
	    }
	}
	/** JSDoc */
	function serializeObject(value, depth) {
	    if (depth === 0) {
	        return serializeValue(value);
	    }
	    if (is.isPlainObject(value)) {
	        var serialized_1 = {};
	        var val_1 = value;
	        Object.keys(val_1).forEach(function (key) {
	            serialized_1[key] = serializeObject(val_1[key], depth - 1);
	        });
	        return serialized_1;
	    }
	    else if (is.isArray(value)) {
	        var val = value;
	        return val.map(function (v) { return serializeObject(v, depth - 1); });
	    }
	    return serializeValue(value);
	}
	exports.serializeObject = serializeObject;
	/** JSDoc */
	function limitObjectDepthToSize(object, depth, maxSize) {
	    if (depth === void 0) { depth = MAX_SERIALIZE_EXCEPTION_DEPTH; }
	    if (maxSize === void 0) { maxSize = MAX_SERIALIZE_EXCEPTION_SIZE; }
	    var serialized = serializeObject(object, depth);
	    if (jsonSize(serialize(serialized)) > maxSize) {
	        return limitObjectDepthToSize(object, depth - 1);
	    }
	    return serialized;
	}
	exports.limitObjectDepthToSize = limitObjectDepthToSize;
	/** JSDoc */
	function serializeKeysToEventMessage(keys, maxLength) {
	    if (maxLength === void 0) { maxLength = MAX_SERIALIZE_KEYS_LENGTH; }
	    if (!keys.length) {
	        return '[object has no keys]';
	    }
	    if (keys[0].length >= maxLength) {
	        return string.truncate(keys[0], maxLength);
	    }
	    for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {
	        var serialized = keys.slice(0, includedKeys).join(', ');
	        if (serialized.length > maxLength) {
	            continue;
	        }
	        if (includedKeys === keys.length) {
	            return serialized;
	        }
	        return string.truncate(serialized, maxLength);
	    }
	    return '';
	}
	exports.serializeKeysToEventMessage = serializeKeysToEventMessage;
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill
	/** JSDoc */
	function assign(target) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    if (target === null || target === undefined) {
	        throw new TypeError('Cannot convert undefined or null to object');
	    }
	    var to = Object(target);
	    // tslint:disable-next-line:prefer-for-of
	    for (var i = 0; i < args.length; i++) {
	        var source = args[i];
	        if (source !== null) {
	            for (var nextKey in source) {
	                if (Object.prototype.hasOwnProperty.call(source, nextKey)) {
	                    to[nextKey] = source[nextKey];
	                }
	            }
	        }
	    }
	    return to;
	}
	exports.assign = assign;
	/**
	 * Transforms Error object into an object literal with all it's attributes
	 * attached to it.
	 *
	 * Based on: https://github.com/ftlabs/js-abbreviate/blob/fa709e5f139e7770a71827b1893f22418097fbda/index.js#L95-L106
	 *
	 * @param error An Error containing all relevant information
	 * @returns An object with all error properties
	 */
	function objectifyError(error) {
	    // These properties are implemented as magical getters and don't show up in `for-in` loop
	    var err = {
	        message: error.message,
	        name: error.name,
	        stack: error.stack,
	    };
	    for (var i in error) {
	        if (Object.prototype.hasOwnProperty.call(error, i)) {
	            err[i] = error[i];
	        }
	    }
	    return err;
	}
	/**
	 * normalizeValue()
	 *
	 * Takes unserializable input and make it serializable friendly
	 *
	 * - translates undefined/NaN values to "[undefined]"/"[NaN]" respectively,
	 * - serializes Error objects
	 * - filter global objects
	 */
	function normalizeValue(value, key) {
	    if (key === 'domain' && typeof value === 'object' && value._events) {
	        return '[Domain]';
	    }
	    if (key === 'domainEmitter') {
	        return '[DomainEmitter]';
	    }
	    if (typeof commonjsGlobal !== 'undefined' && value === commonjsGlobal) {
	        return '[Global]';
	    }
	    if (typeof window !== 'undefined' && value === window) {
	        return '[Window]';
	    }
	    if (typeof document !== 'undefined' && value === document) {
	        return '[Document]';
	    }
	    // tslint:disable-next-line:strict-type-predicates
	    if (typeof Event !== 'undefined' && value instanceof Event) {
	        return Object.getPrototypeOf(value) ? value.constructor.name : 'Event';
	    }
	    // React's SyntheticEvent thingy
	    if (is.isSyntheticEvent(value)) {
	        return '[SyntheticEvent]';
	    }
	    if (is.isNaN(value)) {
	        return '[NaN]';
	    }
	    if (is.isUndefined(value)) {
	        return '[undefined]';
	    }
	    if (typeof value === 'function') {
	        return "[Function: " + (value.name || '<unknown-function-name>') + "]";
	    }
	    return value;
	}
	/**
	 * Decycles an object to make it safe for json serialization.
	 *
	 * @param obj Object to be decycled
	 * @param memo Optional Memo class handling decycling
	 */
	function decycle(obj, depth, memo$$1) {
	    if (depth === void 0) { depth = +Infinity; }
	    if (memo$$1 === void 0) { memo$$1 = new memo.Memo(); }
	    if (depth === 0) {
	        return serializeValue(obj);
	    }
	    // If an object was normalized to its string form, we should just bail out as theres no point in going down that branch
	    var normalized = normalizeValue(obj);
	    if (is.isPrimitive(normalized)) {
	        return normalized;
	    }
	    // tslint:disable-next-line:no-unsafe-any
	    var source = (is.isError(obj) ? objectifyError(obj) : obj);
	    var copy = is.isArray(obj) ? [] : {};
	    if (memo$$1.memoize(obj)) {
	        return '[Circular ~]';
	    }
	    for (var key in source) {
	        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
	        if (!Object.prototype.hasOwnProperty.call(source, key)) {
	            continue;
	        }
	        copy[key] = decycle(source[key], depth - 1, memo$$1);
	    }
	    memo$$1.unmemoize(obj);
	    return copy;
	}
	exports.decycle = decycle;
	/**
	 * serializer()
	 *
	 * Remove circular references,
	 * translates undefined/NaN values to "[undefined]"/"[NaN]" respectively,
	 * and takes care of Error objects serialization
	 */
	function serializer(options) {
	    if (options === void 0) { options = { normalize: true }; }
	    return function (key, value) {
	        // tslint:disable-next-line
	        return options.normalize ? normalizeValue(decycle(value, options.depth), key) : decycle(value, options.depth);
	    };
	}
	/**
	 * safeNormalize()
	 *
	 * Creates a copy of the input by applying serializer function on it and parsing it back to unify the data
	 */
	function safeNormalize(input, depth) {
	    try {
	        return JSON.parse(JSON.stringify(input, serializer({ normalize: true, depth: depth })));
	    }
	    catch (_oO) {
	        return '**non-serializable**';
	    }
	}
	exports.safeNormalize = safeNormalize;

	});

	unwrapExports(object);
	var object_1 = object.serialize;
	var object_2 = object.deserialize;
	var object_3 = object.clone;
	var object_4 = object.fill;
	var object_5 = object.urlEncode;
	var object_6 = object.serializeObject;
	var object_7 = object.limitObjectDepthToSize;
	var object_8 = object.serializeKeysToEventMessage;
	var object_9 = object.assign;
	var object_10 = object.decycle;
	var object_11 = object.safeNormalize;

	// tslint:disable
	/*
	 * JavaScript MD5
	 * https://github.com/blueimp/JavaScript-MD5
	 *
	 * Copyright 2011, Sebastian Tschan
	 * https://blueimp.net
	 *
	 * Licensed under the MIT license:
	 * https://opensource.org/licenses/MIT
	 *
	 * Based on
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */
	/**
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safeAdd(x, y) {
	    var lsw = (x & 0xffff) + (y & 0xffff);
	    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	    return (msw << 16) | (lsw & 0xffff);
	}
	/**
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bitRotateLeft(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	}
	/**
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5cmn(q, a, b, x, s, t) {
	    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
	}
	function md5ff(a, b, c, d, x, s, t) {
	    return md5cmn((b & c) | (~b & d), a, b, x, s, t);
	}
	function md5gg(a, b, c, d, x, s, t) {
	    return md5cmn((b & d) | (c & ~d), a, b, x, s, t);
	}
	function md5hh(a, b, c, d, x, s, t) {
	    return md5cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5ii(a, b, c, d, x, s, t) {
	    return md5cmn(c ^ (b | ~d), a, b, x, s, t);
	}
	/**
	 * Calculate the MD5 of an array of little-endian words, and a bit length.
	 */
	function binlMD5(x, len) {
	    /** append padding */
	    x[len >> 5] |= 0x80 << len % 32;
	    x[(((len + 64) >>> 9) << 4) + 14] = len;
	    var i;
	    var olda;
	    var oldb;
	    var oldc;
	    var oldd;
	    var a = 1732584193;
	    var b = -271733879;
	    var c = -1732584194;
	    var d = 271733878;
	    for (i = 0; i < x.length; i += 16) {
	        olda = a;
	        oldb = b;
	        oldc = c;
	        oldd = d;
	        a = md5ff(a, b, c, d, x[i], 7, -680876936);
	        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
	        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
	        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
	        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
	        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
	        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
	        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
	        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
	        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
	        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
	        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
	        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
	        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
	        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
	        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
	        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
	        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
	        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
	        b = md5gg(b, c, d, a, x[i], 20, -373897302);
	        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
	        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
	        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
	        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
	        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
	        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
	        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
	        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
	        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
	        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
	        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
	        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
	        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
	        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
	        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
	        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
	        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
	        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
	        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
	        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
	        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
	        d = md5hh(d, a, b, c, x[i], 11, -358537222);
	        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
	        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
	        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
	        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
	        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
	        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
	        a = md5ii(a, b, c, d, x[i], 6, -198630844);
	        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
	        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
	        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
	        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
	        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
	        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
	        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
	        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
	        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
	        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
	        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
	        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
	        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
	        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
	        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
	        a = safeAdd(a, olda);
	        b = safeAdd(b, oldb);
	        c = safeAdd(c, oldc);
	        d = safeAdd(d, oldd);
	    }
	    return [a, b, c, d];
	}
	/**
	 * Convert an array of little-endian words to a string
	 */
	function binl2rstr(input) {
	    var i;
	    var output = '';
	    var length32 = input.length * 32;
	    for (i = 0; i < length32; i += 8) {
	        output += String.fromCharCode((input[i >> 5] >>> i % 32) & 0xff);
	    }
	    return output;
	}
	/**
	 * Convert a raw string to an array of little-endian words
	 * Characters >255 have their high-byte silently ignored.
	 */
	function rstr2binl(input) {
	    var i;
	    var output = [];
	    output[(input.length >> 2) - 1] = undefined;
	    for (i = 0; i < output.length; i += 1) {
	        output[i] = 0;
	    }
	    var length8 = input.length * 8;
	    for (i = 0; i < length8; i += 8) {
	        output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << i % 32;
	    }
	    return output;
	}
	/**
	 * Calculate the MD5 of a raw string
	 */
	function rstrMD5(s) {
	    return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));
	}
	/**
	 * Calculate the HMAC-MD5, of a key and some data (raw strings)
	 */
	function rstrHMACMD5(key, data) {
	    var i;
	    var bkey = rstr2binl(key);
	    var ipad = [];
	    var opad = [];
	    var hash;
	    ipad[15] = opad[15] = undefined;
	    if (bkey.length > 16) {
	        bkey = binlMD5(bkey, key.length * 8);
	    }
	    for (i = 0; i < 16; i += 1) {
	        ipad[i] = bkey[i] ^ 0x36363636;
	        opad[i] = bkey[i] ^ 0x5c5c5c5c;
	    }
	    hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
	    return binl2rstr(binlMD5(opad.concat(hash), 512 + 128));
	}
	/**
	 * Convert a raw string to a hex string
	 */
	function rstr2hex(input) {
	    var hexTab = '0123456789abcdef';
	    var output = '';
	    var x;
	    var i;
	    for (i = 0; i < input.length; i += 1) {
	        x = input.charCodeAt(i);
	        output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f);
	    }
	    return output;
	}
	/**
	 * Encode a string as utf-8
	 */
	function str2rstrUTF8(input) {
	    return unescape(encodeURIComponent(input));
	}
	/*
	 * Take string arguments and return either raw or hex encoded strings
	 */
	function rawMD5(s) {
	    return rstrMD5(str2rstrUTF8(s));
	}
	function hexMD5(s) {
	    return rstr2hex(rawMD5(s));
	}
	function rawHMACMD5(k, d) {
	    return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));
	}
	function hexHMACMD5(k, d) {
	    return rstr2hex(rawHMACMD5(k, d));
	}
	function md5(string, key, raw) {
	    if (!key) {
	        if (!raw) {
	            return hexMD5(string);
	        }
	        return rawMD5(string);
	    }
	    if (!raw) {
	        return hexHMACMD5(key, string);
	    }
	    return rawHMACMD5(key, string);
	}

	// tslint:disable
	/**
	 * TraceKit - Cross brower stack traces
	 *
	 * This was originally forked from github.com/occ/TraceKit, but has since been
	 * largely modified and is now maintained as part of Sentry JS SDK.
	 *
	 * NOTE: Last merge with upstream repository
	 * Jul 11,2018 - #f03357c
	 *
	 * https://github.com/csnover/TraceKit
	 * @license MIT
	 * @namespace TraceKit
	 */
	var window$1 = misc_3();
	var TraceKit = {
	    wrap: function () { return function () { }; },
	    report: false,
	    collectWindowErrors: false,
	    computeStackTrace: false,
	    remoteFetching: false,
	    linesOfContext: false,
	    extendToAsynchronousCallbacks: false,
	};
	// var TraceKit: TraceKitInterface = {};
	// var TraceKit = {};
	// global reference to slice
	var _slice = [].slice;
	var UNKNOWN_FUNCTION = '?';
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types
	var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;
	/**
	 * A better form of hasOwnProperty<br/>
	 * Example: `_has(MainHostObject, property) === true/false`
	 *
	 * @param {Object} object to check property
	 * @param {string} key to check
	 * @return {Boolean} true if the object has the key and it is not inherited
	 */
	function _has(object, key) {
	    return Object.prototype.hasOwnProperty.call(object, key);
	}
	/**
	 * A safe form of location.href<br/>
	 *
	 * @return {string} location.href
	 */
	function getLocationHref() {
	    if (typeof document === 'undefined' || document.location == null)
	        return '';
	    return document.location.href;
	}
	/**
	 * A safe form of location.origin<br/>
	 *
	 * @return {string} location.origin
	 */
	function getLocationOrigin() {
	    if (typeof document === 'undefined' || document.location == null)
	        return '';
	    // Oh dear IE10...
	    if (!document.location.origin) {
	        return (document.location.protocol +
	            '//' +
	            document.location.hostname +
	            (document.location.port ? ':' + document.location.port : ''));
	    }
	    return document.location.origin;
	}
	/**
	 * Wrap any function in a TraceKit reporter<br/>
	 * Example: `func = TraceKit.wrap(func);`
	 *
	 * @param {Function} func Function to be wrapped
	 * @return {Function} The wrapped func
	 * @memberof TraceKit
	 */
	TraceKit.wrap = function traceKitWrapper(func) {
	    function wrapped() {
	        try {
	            // @ts-ignore
	            return func.apply(this, arguments);
	        }
	        catch (e) {
	            TraceKit.report(e);
	            throw e;
	        }
	    }
	    return wrapped;
	};
	/**
	 * Cross-browser processing of unhandled exceptions
	 *
	 * Syntax:
	 * ```js
	 *   TraceKit.report.subscribe(function(stackInfo) { ... })
	 *   TraceKit.report.unsubscribe(function(stackInfo) { ... })
	 *   TraceKit.report(exception)
	 *   try { ...code... } catch(ex) { TraceKit.report(ex); }
	 * ```
	 *
	 * Supports:
	 *   - Firefox: full stack trace with line numbers, plus column number
	 *     on top frame; column number is not guaranteed
	 *   - Opera: full stack trace with line and column numbers
	 *   - Chrome: full stack trace with line and column numbers
	 *   - Safari: line and column number for the top frame only; some frames
	 *     may be missing, and column number is not guaranteed
	 *   - IE: line and column number for the top frame only; some frames
	 *     may be missing, and column number is not guaranteed
	 *
	 * In theory, TraceKit should work on all of the following versions:
	 *   - IE5.5+ (only 8.0 tested)
	 *   - Firefox 0.9+ (only 3.5+ tested)
	 *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require
	 *     Exceptions Have Stacktrace to be enabled in opera:config)
	 *   - Safari 3+ (only 4+ tested)
	 *   - Chrome 1+ (only 5+ tested)
	 *   - Konqueror 3.5+ (untested)
	 *
	 * Requires TraceKit.computeStackTrace.
	 *
	 * Tries to catch all unhandled exceptions and report them to the
	 * subscribed handlers. Please note that TraceKit.report will rethrow the
	 * exception. This is REQUIRED in order to get a useful stack trace in IE.
	 * If the exception does not reach the top of the browser, you will only
	 * get a stack trace from the point where TraceKit.report was called.
	 *
	 * Handlers receive a TraceKit.StackTrace object as described in the
	 * TraceKit.computeStackTrace docs.
	 *
	 * @memberof TraceKit
	 * @namespace
	 */
	TraceKit.report = (function reportModuleWrapper() {
	    var handlers = [], lastException = null, lastExceptionStack = null;
	    /**
	     * Add a crash handler.
	     * @param {Function} handler
	     * @memberof TraceKit.report
	     */
	    function subscribe(handler) {
	        // NOTE: We call both handlers manually in browser/integrations/globalhandler.ts
	        // So user can choose which one he wants to attach
	        // installGlobalHandler();
	        // installGlobalUnhandledRejectionHandler();
	        handlers.push(handler);
	    }
	    /**
	     * Remove a crash handler.
	     * @param {Function} handler
	     * @memberof TraceKit.report
	     */
	    function unsubscribe(handler) {
	        for (var i = handlers.length - 1; i >= 0; --i) {
	            if (handlers[i] === handler) {
	                handlers.splice(i, 1);
	            }
	        }
	        if (handlers.length === 0) {
	            uninstallGlobalHandler();
	            uninstallGlobalUnhandledRejectionHandler();
	        }
	    }
	    /**
	     * Dispatch stack information to all handlers.
	     * @param {TraceKit.StackTrace} stack
	     * @param {boolean} isWindowError Is this a top-level window error?
	     * @param {Error=} error The error that's being handled (if available, null otherwise)
	     * @memberof TraceKit.report
	     * @throws An exception if an error occurs while calling an handler.
	     */
	    function notifyHandlers(stack, isWindowError, error) {
	        var exception = null;
	        if (isWindowError && !TraceKit.collectWindowErrors) {
	            return;
	        }
	        for (var i in handlers) {
	            if (_has(handlers, i)) {
	                try {
	                    handlers[i](stack, isWindowError, error);
	                }
	                catch (inner) {
	                    exception = inner;
	                }
	            }
	        }
	        if (exception) {
	            throw exception;
	        }
	    }
	    var _oldOnerrorHandler, _onErrorHandlerInstalled;
	    var _oldOnunhandledrejectionHandler, _onUnhandledRejectionHandlerInstalled;
	    /**
	     * Ensures all global unhandled exceptions are recorded.
	     * Supported by Gecko and IE.
	     * @param {string} message Error message.
	     * @param {string} url URL of script that generated the exception.
	     * @param {(number|string)} lineNo The line number at which the error occurred.
	     * @param {(number|string)=} columnNo The column number at which the error occurred.
	     * @param {Error=} errorObj The actual Error object.
	     * @memberof TraceKit.report
	     */
	    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {
	        var stack = null;
	        // If 'errorObj' is ErrorEvent, get real Error from inside
	        errorObj = is_2(errorObj) ? errorObj.error : errorObj;
	        // If 'message' is ErrorEvent, get real message from inside
	        message = is_2(message) ? message.message : message;
	        if (lastExceptionStack) {
	            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);
	            processLastException();
	        }
	        else if (errorObj && is_1(errorObj)) {
	            stack = TraceKit.computeStackTrace(errorObj);
	            stack.mechanism = 'onerror';
	            notifyHandlers(stack, true, errorObj);
	        }
	        else {
	            var location = {
	                url: url,
	                line: lineNo,
	                column: columnNo,
	            };
	            var name;
	            var msg = message; // must be new var or will modify original `arguments`
	            if ({}.toString.call(message) === '[object String]') {
	                var groups = message.match(ERROR_TYPES_RE);
	                if (groups) {
	                    name = groups[1];
	                    msg = groups[2];
	                }
	            }
	            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);
	            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);
	            stack = {
	                name: name,
	                message: msg,
	                mode: 'onerror',
	                mechanism: 'onerror',
	                stack: [
	                    tslib_1.__assign({}, location, { 
	                        // Firefox sometimes doesn't return url correctly and this is an old behavior
	                        // that I prefer to port here as well.
	                        // It can be altered only here, as previously it's using `location.url` for other things — Kamil
	                        url: location.url || getLocationHref() }),
	                ],
	            };
	            notifyHandlers(stack, true, null);
	        }
	        if (_oldOnerrorHandler) {
	            // @ts-ignore
	            return _oldOnerrorHandler.apply(this, arguments);
	        }
	        return false;
	    }
	    /**
	     * Ensures all unhandled rejections are recorded.
	     * @param {PromiseRejectionEvent} e event.
	     * @memberof TraceKit.report
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
	     */
	    function traceKitWindowOnUnhandledRejection(e) {
	        var err = (e && (e.detail ? e.detail.reason : e.reason)) || e;
	        var stack = TraceKit.computeStackTrace(err);
	        stack.mechanism = 'onunhandledrejection';
	        notifyHandlers(stack, true, err);
	    }
	    /**
	     * Install a global onerror handler
	     * @memberof TraceKit.report
	     */
	    function installGlobalHandler() {
	        if (_onErrorHandlerInstalled === true) {
	            return;
	        }
	        _oldOnerrorHandler = window$1.onerror;
	        window$1.onerror = traceKitWindowOnError;
	        _onErrorHandlerInstalled = true;
	    }
	    /**
	     * Uninstall the global onerror handler
	     * @memberof TraceKit.report
	     */
	    function uninstallGlobalHandler() {
	        if (_onErrorHandlerInstalled) {
	            window$1.onerror = _oldOnerrorHandler;
	            _onErrorHandlerInstalled = false;
	        }
	    }
	    /**
	     * Install a global onunhandledrejection handler
	     * @memberof TraceKit.report
	     */
	    function installGlobalUnhandledRejectionHandler() {
	        if (_onUnhandledRejectionHandlerInstalled === true) {
	            return;
	        }
	        _oldOnunhandledrejectionHandler = window$1.onunhandledrejection;
	        window$1.onunhandledrejection = traceKitWindowOnUnhandledRejection;
	        _onUnhandledRejectionHandlerInstalled = true;
	    }
	    /**
	     * Uninstall the global onunhandledrejection handler
	     * @memberof TraceKit.report
	     */
	    function uninstallGlobalUnhandledRejectionHandler() {
	        if (_onUnhandledRejectionHandlerInstalled) {
	            window$1.onunhandledrejection = _oldOnunhandledrejectionHandler;
	            _onUnhandledRejectionHandlerInstalled = false;
	        }
	    }
	    /**
	     * Process the most recent exception
	     * @memberof TraceKit.report
	     */
	    function processLastException() {
	        var _lastExceptionStack = lastExceptionStack, _lastException = lastException;
	        lastExceptionStack = null;
	        lastException = null;
	        notifyHandlers(_lastExceptionStack, false, _lastException);
	    }
	    /**
	     * Reports an unhandled Error to TraceKit.
	     * @param {Error} ex
	     * @memberof TraceKit.report
	     * @throws An exception if an incomplete stack trace is detected (old IE browsers).
	     */
	    function report(ex) {
	        if (lastExceptionStack) {
	            if (lastException === ex) {
	                return; // already caught by an inner catch block, ignore
	            }
	            else {
	                processLastException();
	            }
	        }
	        var stack = TraceKit.computeStackTrace(ex);
	        lastExceptionStack = stack;
	        lastException = ex;
	        // If the stack trace is incomplete, wait for 2 seconds for
	        // slow slow IE to see if onerror occurs or not before reporting
	        // this exception; otherwise, we will end up with an incomplete
	        // stack trace
	        setTimeout(function () {
	            if (lastException === ex) {
	                processLastException();
	            }
	        }, stack.incomplete ? 2000 : 0);
	        throw ex; // re-throw to propagate to the top level (and cause window.onerror)
	    }
	    report.subscribe = subscribe;
	    report.unsubscribe = unsubscribe;
	    report.installGlobalHandler = installGlobalHandler;
	    report.installGlobalUnhandledRejectionHandler = installGlobalUnhandledRejectionHandler;
	    return report;
	})();
	/**
	 * An object representing a single stack frame.
	 * @typedef {Object} StackFrame
	 * @property {string} url The JavaScript or HTML file URL.
	 * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).
	 * @property {string[]?} args The arguments passed to the function, if known.
	 * @property {number=} line The line number, if known.
	 * @property {number=} column The column number, if known.
	 * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.
	 * @memberof TraceKit
	 */
	/**
	 * An object representing a JavaScript stack trace.
	 * @typedef {Object} StackTrace
	 * @property {string} name The name of the thrown exception.
	 * @property {string} message The exception error message.
	 * @property {TraceKit.StackFrame[]} stack An array of stack frames.
	 * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.
	 * @memberof TraceKit
	 */
	/**
	 * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript
	 *
	 * Syntax:
	 *   ```js
	 *   s = TraceKit.computeStackTrace.ofCaller([depth])
	 *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)
	 *   ```
	 *
	 * Supports:
	 *   - Firefox:  full stack trace with line numbers and unreliable column
	 *               number on top frame
	 *   - Opera 10: full stack trace with line and column numbers
	 *   - Opera 9-: full stack trace with line numbers
	 *   - Chrome:   full stack trace with line and column numbers
	 *   - Safari:   line and column number for the topmost stacktrace element
	 *               only
	 *   - IE:       no line numbers whatsoever
	 *
	 * Tries to guess names of anonymous functions by looking for assignments
	 * in the source code. In IE and Safari, we have to guess source file names
	 * by searching for function bodies inside all page scripts. This will not
	 * work for scripts that are loaded cross-domain.
	 * Here be dragons: some function names may be guessed incorrectly, and
	 * duplicate functions may be mismatched.
	 *
	 * TraceKit.computeStackTrace should only be used for tracing purposes.
	 * Logging of unhandled exceptions should be done with TraceKit.report,
	 * which builds on top of TraceKit.computeStackTrace and provides better
	 * IE support by utilizing the window.onerror event to retrieve information
	 * about the top of the stack.
	 *
	 * Note: In IE and Safari, no stack trace is recorded on the Error object,
	 * so computeStackTrace instead walks its *own* chain of callers.
	 * This means that:
	 *  * in Safari, some methods may be missing from the stack trace;
	 *  * in IE, the topmost function in the stack trace will always be the
	 *    caller of computeStackTrace.
	 *
	 * This is okay for tracing (because you are likely to be calling
	 * computeStackTrace from the function you want to be the topmost element
	 * of the stack trace anyway), but not okay for logging unhandled
	 * exceptions (because your catch block will likely be far away from the
	 * inner function that actually caused the exception).
	 *
	 * Tracing example:
	 *  ```js
	 *     function trace(message) {
	 *         var stackInfo = TraceKit.computeStackTrace.ofCaller();
	 *         var data = message + "\n";
	 *         for(var i in stackInfo.stack) {
	 *             var item = stackInfo.stack[i];
	 *             data += (item.func || '[anonymous]') + "() in " + item.url + ":" + (item.line || '0') + "\n";
	 *         }
	 *         if (window.console)
	 *             console.info(data);
	 *         else
	 *             alert(data);
	 *     }
	 * ```
	 * @memberof TraceKit
	 * @namespace
	 */
	TraceKit.computeStackTrace = (function computeStackTraceWrapper() {
	    var debug = false, sourceCache = {};
	    /**
	     * Attempts to retrieve source code via XMLHttpRequest, which is used
	     * to look up anonymous function names.
	     * @param {string} url URL of source code.
	     * @return {string} Source contents.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function loadSource(url) {
	        if (!TraceKit.remoteFetching) {
	            //Only attempt request if remoteFetching is on.
	            return '';
	        }
	        try {
	            var getXHR = function () {
	                try {
	                    return new window$1.XMLHttpRequest();
	                }
	                catch (e) {
	                    // explicitly bubble up the exception if not found
	                    return new window$1.ActiveXObject('Microsoft.XMLHTTP');
	                }
	            };
	            var request = getXHR();
	            request.open('GET', url, false);
	            request.send('');
	            return request.responseText;
	        }
	        catch (e) {
	            return '';
	        }
	    }
	    /**
	     * Retrieves source code from the source code cache.
	     * @param {string} url URL of source code.
	     * @return {Array.<string>} Source contents.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function getSource(url) {
	        if (typeof url !== 'string') {
	            return [];
	        }
	        if (!_has(sourceCache, url)) {
	            // URL needs to be able to fetched within the acceptable domain.  Otherwise,
	            // cross-domain errors will be triggered.
	            /*
	                        Regex matches:
	                        0 - Full Url
	                        1 - Protocol
	                        2 - Domain
	                        3 - Port (Useful for internal applications)
	                        4 - Path
	                    */
	            var source = '';
	            var domain = '';
	            try {
	                domain = window$1.document.domain;
	            }
	            catch (e) { }
	            var match = /(.*)\:\/\/([^:\/]+)([:\d]*)\/{0,1}([\s\S]*)/.exec(url);
	            if (match && match[2] === domain) {
	                source = loadSource(url);
	            }
	            sourceCache[url] = source ? source.split('\n') : [];
	        }
	        return sourceCache[url];
	    }
	    /**
	     * Tries to use an externally loaded copy of source code to determine
	     * the name of a function by looking at the name of the variable it was
	     * assigned to, if any.
	     * @param {string} url URL of source code.
	     * @param {(string|number)} lineNo Line number in source code.
	     * @return {string} The function name, if discoverable.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function guessFunctionName(url, lineNo) {
	        var reFunctionArgNames = /function ([^(]*)\(([^)]*)\)/, reGuessFunction = /['"]?([0-9A-Za-z$_]+)['"]?\s*[:=]\s*(function|eval|new Function)/, line = '', maxLines = 10, source = getSource(url), m;
	        if (!source.length) {
	            return UNKNOWN_FUNCTION;
	        }
	        // Walk backwards from the first line in the function until we find the line which
	        // matches the pattern above, which is the function definition
	        for (var i = 0; i < maxLines; ++i) {
	            line = source[lineNo - i] + line;
	            if (!is_5(line)) {
	                if ((m = reGuessFunction.exec(line))) {
	                    return m[1];
	                }
	                else if ((m = reFunctionArgNames.exec(line))) {
	                    return m[1];
	                }
	            }
	        }
	        return UNKNOWN_FUNCTION;
	    }
	    /**
	     * Retrieves the surrounding lines from where an exception occurred.
	     * @param {string} url URL of source code.
	     * @param {(string|number)} line Line number in source code to center around for context.
	     * @return {?Array.<string>} Lines of source code.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function gatherContext(url, line) {
	        var source = getSource(url);
	        if (!source.length) {
	            return null;
	        }
	        var context = [], 
	        // linesBefore & linesAfter are inclusive with the offending line.
	        // if linesOfContext is even, there will be one extra line
	        //   *before* the offending line.
	        linesBefore = Math.floor(TraceKit.linesOfContext / 2), 
	        // Add one extra line if linesOfContext is odd
	        linesAfter = linesBefore + (TraceKit.linesOfContext % 2), start = Math.max(0, line - linesBefore - 1), end = Math.min(source.length, line + linesAfter - 1);
	        line -= 1; // convert to 0-based index
	        for (var i = start; i < end; ++i) {
	            if (!is_5(source[i])) {
	                context.push(source[i]);
	            }
	        }
	        return context.length > 0 ? context : null;
	    }
	    /**
	     * Escapes special characters, except for whitespace, in a string to be
	     * used inside a regular expression as a string literal.
	     * @param {string} text The string.
	     * @return {string} The escaped string literal.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function escapeRegExp(text) {
	        return text.replace(/[\-\[\]{}()*+?.,\\\^$|#]/g, '\\$&');
	    }
	    /**
	     * Escapes special characters in a string to be used inside a regular
	     * expression as a string literal. Also ensures that HTML entities will
	     * be matched the same as their literal friends.
	     * @param {string} body The string.
	     * @return {string} The escaped string.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function escapeCodeAsRegExpForMatchingInsideHTML(body) {
	        return escapeRegExp(body)
	            .replace('<', '(?:<|&lt;)')
	            .replace('>', '(?:>|&gt;)')
	            .replace('&', '(?:&|&amp;)')
	            .replace('"', '(?:"|&quot;)')
	            .replace(/\s+/g, '\\s+');
	    }
	    /**
	     * Determines where a code fragment occurs in the source code.
	     * @param {RegExp} re The function definition.
	     * @param {Array.<string>} urls A list of URLs to search.
	     * @return {?Object.<string, (string|number)>} An object containing
	     * the url, line, and column number of the defined function.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function findSourceInUrls(re, urls) {
	        var source, m;
	        for (var i = 0, j = urls.length; i < j; ++i) {
	            if ((source = getSource(urls[i])).length) {
	                source = source.join('\n');
	                if ((m = re.exec(source))) {
	                    return {
	                        url: urls[i],
	                        line: source.substring(0, m.index).split('\n').length,
	                        column: m.index - source.lastIndexOf('\n', m.index) - 1,
	                    };
	                }
	            }
	        }
	        return null;
	    }
	    /**
	     * Determines at which column a code fragment occurs on a line of the
	     * source code.
	     * @param {string} fragment The code fragment.
	     * @param {string} url The URL to search.
	     * @param {(string|number)} line The line number to examine.
	     * @return {?number} The column number.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function findSourceInLine(fragment, url, line) {
	        var source = getSource(url), re = new RegExp('\\b' + escapeRegExp(fragment) + '\\b'), m;
	        line -= 1;
	        if (source && source.length > line && (m = re.exec(source[line]))) {
	            return m.index;
	        }
	        return null;
	    }
	    /**
	     * Determines where a function was defined within the source code.
	     * @param {(Function|string)} func A function reference or serialized
	     * function definition.
	     * @return {?Object.<string, (string|number)>} An object containing
	     * the url, line, and column number of the defined function.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function findSourceByFunctionBody(func) {
	        if (is_5(window$1 && window$1.document)) {
	            return;
	        }
	        var urls = [getLocationHref()], scripts = window$1.document.getElementsByTagName('script'), body, code = '' + func, codeRE = /^function(?:\s+([\w$]+))?\s*\(([\w\s,]*)\)\s*\{\s*(\S[\s\S]*\S)\s*\}\s*$/, eventRE = /^function on([\w$]+)\s*\(event\)\s*\{\s*(\S[\s\S]*\S)\s*\}\s*$/, re, parts, result;
	        for (var i = 0; i < scripts.length; ++i) {
	            var script = scripts[i];
	            if (script.src) {
	                urls.push(script.src);
	            }
	        }
	        if (!(parts = codeRE.exec(code))) {
	            re = new RegExp(escapeRegExp(code).replace(/\s+/g, '\\s+'));
	        }
	        // not sure if this is really necessary, but I don’t have a test
	        // corpus large enough to confirm that and it was in the original.
	        else {
	            var name = parts[1] ? '\\s+' + parts[1] : '', args = parts[2].split(',').join('\\s*,\\s*');
	            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\s+/g, '\\s+');
	            re = new RegExp('function' + name + '\\s*\\(\\s*' + args + '\\s*\\)\\s*{\\s*' + body + '\\s*}');
	        }
	        // look for a normal function definition
	        if ((result = findSourceInUrls(re, urls))) {
	            return result;
	        }
	        // look for an old-school event handler function
	        if ((parts = eventRE.exec(code))) {
	            var event = parts[1];
	            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);
	            // look for a function defined in HTML as an onXXX handler
	            re = new RegExp('on' + event + '=[\\\'"]\\s*' + body + '\\s*[\\\'"]', 'i');
	            if ((result = findSourceInUrls(re, urls[0]))) {
	                return result;
	            }
	            // look for ???
	            re = new RegExp(body);
	            if ((result = findSourceInUrls(re, urls))) {
	                return result;
	            }
	        }
	        return null;
	    }
	    // Contents of Exception in various browsers.
	    //
	    // SAFARI:
	    // ex.message = Can't find variable: qq
	    // ex.line = 59
	    // ex.sourceId = 580238192
	    // ex.sourceURL = http://...
	    // ex.expressionBeginOffset = 96
	    // ex.expressionCaretOffset = 98
	    // ex.expressionEndOffset = 98
	    // ex.name = ReferenceError
	    //
	    // FIREFOX:
	    // ex.message = qq is not defined
	    // ex.fileName = http://...
	    // ex.lineNumber = 59
	    // ex.columnNumber = 69
	    // ex.stack = ...stack trace... (see the example below)
	    // ex.name = ReferenceError
	    //
	    // CHROME:
	    // ex.message = qq is not defined
	    // ex.name = ReferenceError
	    // ex.type = not_defined
	    // ex.arguments = ['aa']
	    // ex.stack = ...stack trace...
	    //
	    // INTERNET EXPLORER:
	    // ex.message = ...
	    // ex.name = ReferenceError
	    //
	    // OPERA:
	    // ex.message = ...message... (see the example below)
	    // ex.name = ReferenceError
	    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)
	    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'
	    /**
	     * Computes stack trace information from the stack property.
	     * Chrome and Gecko use this property.
	     * @param {Error} ex
	     * @return {?TraceKit.StackTrace} Stack trace information.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function computeStackTraceFromStackProp(ex) {
	        if (!ex.stack) {
	            return null;
	        }
	        var chrome = /^\s*at (?:(.*?) ?\()?((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[a-z]:|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i, gecko = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\/.*?|\[native code\]|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i, winjs = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i, 
	        // Used to additionally parse URL/line/column from eval frames
	        isEval, geckoEval = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i, chromeEval = /\((\S*)(?::(\d+))(?::(\d+))\)/, lines = ex.stack.split('\n'), stack = [], submatch, parts, element, reference = /^(.*) is undefined$/.exec(ex.message);
	        for (var i = 0, j = lines.length; i < j; ++i) {
	            if ((parts = chrome.exec(lines[i]))) {
	                var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line
	                isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line
	                if (isEval && (submatch = chromeEval.exec(parts[2]))) {
	                    // throw out eval line/column and use top-most line/column number
	                    parts[2] = submatch[1]; // url
	                    // NOTE: It's messing out our integration tests in Karma, let's see if we can live with it – Kamil
	                    // parts[3] = submatch[2]; // line
	                    // parts[4] = submatch[3]; // column
	                }
	                element = {
	                    url: !isNative ? parts[2] : null,
	                    func: parts[1] || UNKNOWN_FUNCTION,
	                    args: isNative ? [parts[2]] : [],
	                    line: parts[3] ? +parts[3] : null,
	                    column: parts[4] ? +parts[4] : null,
	                };
	            }
	            else if ((parts = winjs.exec(lines[i]))) {
	                element = {
	                    url: parts[2],
	                    func: parts[1] || UNKNOWN_FUNCTION,
	                    args: [],
	                    line: +parts[3],
	                    column: parts[4] ? +parts[4] : null,
	                };
	            }
	            else if ((parts = gecko.exec(lines[i]))) {
	                isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
	                if (isEval && (submatch = geckoEval.exec(parts[3]))) {
	                    // throw out eval line/column and use top-most line number
	                    parts[3] = submatch[1];
	                    // NOTE: It's messing out our integration tests in Karma, let's see if we can live with it – Kamil
	                    // parts[4] = submatch[2];
	                    // parts[5] = null; // no column when eval
	                }
	                else if (i === 0 && !parts[5] && !is_5(ex.columnNumber)) {
	                    // FireFox uses this awesome columnNumber property for its top frame
	                    // Also note, Firefox's column number is 0-based and everything else expects 1-based,
	                    // so adding 1
	                    // NOTE: this hack doesn't work if top-most frame is eval
	                    stack[0].column = ex.columnNumber + 1;
	                }
	                element = {
	                    url: parts[3],
	                    func: parts[1] || UNKNOWN_FUNCTION,
	                    args: parts[2] ? parts[2].split(',') : [],
	                    line: parts[4] ? +parts[4] : null,
	                    column: parts[5] ? +parts[5] : null,
	                };
	            }
	            else {
	                continue;
	            }
	            if (!element.func && element.line) {
	                element.func = guessFunctionName(element.url, element.line);
	            }
	            if (TraceKit.remoteFetching && element.url && element.url.substr(0, 5) === 'blob:') {
	                // Special case for handling JavaScript loaded into a blob.
	                // We use a synchronous AJAX request here as a blob is already in
	                // memory - it's not making a network request.  This will generate a warning
	                // in the browser console, but there has already been an error so that's not
	                // that much of an issue.
	                var xhr = new XMLHttpRequest();
	                xhr.open('GET', element.url, false);
	                xhr.send('');
	                // If we failed to download the source, skip this patch
	                if (xhr.status === 200) {
	                    var source = xhr.responseText || '';
	                    // We trim the source down to the last 300 characters as sourceMappingURL is always at the end of the file.
	                    // Why 300? To be in line with: https://github.com/getsentry/sentry/blob/4af29e8f2350e20c28a6933354e4f42437b4ba42/src/sentry/lang/javascript/processor.py#L164-L175
	                    source = source.slice(-300);
	                    // Now we dig out the source map URL
	                    var sourceMaps = source.match(/\/\/# sourceMappingURL=(.*)$/);
	                    // If we don't find a source map comment or we find more than one, continue on to the next element.
	                    if (sourceMaps) {
	                        var sourceMapAddress = sourceMaps[1];
	                        // Now we check to see if it's a relative URL.
	                        // If it is, convert it to an absolute one.
	                        if (sourceMapAddress.charAt(0) === '~') {
	                            sourceMapAddress = getLocationOrigin() + sourceMapAddress.slice(1);
	                        }
	                        // Now we strip the '.map' off of the end of the URL and update the
	                        // element so that Sentry can match the map to the blob.
	                        element.url = sourceMapAddress.slice(0, -4);
	                    }
	                }
	            }
	            element.context = element.line ? gatherContext(element.url, element.line) : null;
	            stack.push(element);
	        }
	        if (!stack.length) {
	            return null;
	        }
	        if (stack[0] && stack[0].line && !stack[0].column && reference) {
	            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);
	        }
	        return {
	            mode: 'stack',
	            name: ex.name,
	            message: ex.message,
	            stack: stack,
	        };
	    }
	    /**
	     * Computes stack trace information from the stacktrace property.
	     * Opera 10+ uses this property.
	     * @param {Error} ex
	     * @return {?TraceKit.StackTrace} Stack trace information.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function computeStackTraceFromStacktraceProp(ex) {
	        // Access and store the stacktrace property before doing ANYTHING
	        // else to it because Opera is not very good at providing it
	        // reliably in other circumstances.
	        var stacktrace = ex.stacktrace;
	        if (!stacktrace) {
	            return;
	        }
	        var opera10Regex = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i, opera11Regex = / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^\)]+))\((.*)\))? in (.*):\s*$/i, lines = stacktrace.split('\n'), stack = [], parts;
	        for (var line = 0; line < lines.length; line += 2) {
	            var element = null;
	            if ((parts = opera10Regex.exec(lines[line]))) {
	                element = {
	                    url: parts[2],
	                    line: +parts[1],
	                    column: null,
	                    func: parts[3],
	                    args: [],
	                };
	            }
	            else if ((parts = opera11Regex.exec(lines[line]))) {
	                element = {
	                    url: parts[6],
	                    line: +parts[1],
	                    column: +parts[2],
	                    func: parts[3] || parts[4],
	                    args: parts[5] ? parts[5].split(',') : [],
	                };
	            }
	            if (element) {
	                if (!element.func && element.line) {
	                    element.func = guessFunctionName(element.url, element.line);
	                }
	                if (element.line) {
	                    try {
	                        element.context = gatherContext(element.url, element.line);
	                    }
	                    catch (exc) { }
	                }
	                if (!element.context) {
	                    element.context = [lines[line + 1]];
	                }
	                stack.push(element);
	            }
	        }
	        if (!stack.length) {
	            return null;
	        }
	        return {
	            mode: 'stacktrace',
	            name: ex.name,
	            message: ex.message,
	            stack: stack,
	        };
	    }
	    /**
	     * NOT TESTED.
	     * Computes stack trace information from an error message that includes
	     * the stack trace.
	     * Opera 9 and earlier use this method if the option to show stack
	     * traces is turned on in opera:config.
	     * @param {Error} ex
	     * @return {?TraceKit.StackTrace} Stack information.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function computeStackTraceFromOperaMultiLineMessage(ex) {
	        // TODO: Clean this function up
	        // Opera includes a stack trace into the exception message. An example is:
	        //
	        // Statement on line 3: Undefined variable: undefinedFunc
	        // Backtrace:
	        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz
	        //         undefinedFunc(a);
	        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy
	        //           zzz(x, y, z);
	        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx
	        //           yyy(a, a, a);
	        //   Line 1 of function script
	        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }
	        //   ...
	        var lines = ex.message.split('\n');
	        if (lines.length < 4) {
	            return null;
	        }
	        var lineRE1 = /^\s*Line (\d+) of linked script ((?:file|https?|blob)\S+)(?:: in function (\S+))?\s*$/i, lineRE2 = /^\s*Line (\d+) of inline#(\d+) script in ((?:file|https?|blob)\S+)(?:: in function (\S+))?\s*$/i, lineRE3 = /^\s*Line (\d+) of function script\s*$/i, stack = [], scripts = window$1 && window$1.document && window$1.document.getElementsByTagName('script'), inlineScriptBlocks = [], parts;
	        for (var s in scripts) {
	            if (_has(scripts, s) && !scripts[s].src) {
	                inlineScriptBlocks.push(scripts[s]);
	            }
	        }
	        for (var line = 2; line < lines.length; line += 2) {
	            var item = null;
	            if ((parts = lineRE1.exec(lines[line]))) {
	                item = {
	                    url: parts[2],
	                    func: parts[3],
	                    args: [],
	                    line: +parts[1],
	                    column: null,
	                };
	            }
	            else if ((parts = lineRE2.exec(lines[line]))) {
	                item = {
	                    url: parts[3],
	                    func: parts[4],
	                    args: [],
	                    line: +parts[1],
	                    column: null,
	                };
	                var relativeLine = +parts[1]; // relative to the start of the <SCRIPT> block
	                var script = inlineScriptBlocks[parts[2] - 1];
	                if (script) {
	                    var source = getSource(item.url);
	                    if (source) {
	                        source = source.join('\n');
	                        var pos = source.indexOf(script.innerText);
	                        if (pos >= 0) {
	                            item.line = relativeLine + source.substring(0, pos).split('\n').length;
	                        }
	                    }
	                }
	            }
	            else if ((parts = lineRE3.exec(lines[line]))) {
	                var url = getLocationHref().replace(/#.*$/, '');
	                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));
	                var src = findSourceInUrls(re, [url]);
	                item = {
	                    url: url,
	                    func: '',
	                    args: [],
	                    line: src ? src.line : parts[1],
	                    column: null,
	                };
	            }
	            if (item) {
	                if (!item.func) {
	                    item.func = guessFunctionName(item.url, item.line);
	                }
	                var context = gatherContext(item.url, item.line);
	                var midline = context ? context[Math.floor(context.length / 2)] : null;
	                if (context && midline.replace(/^\s*/, '') === lines[line + 1].replace(/^\s*/, '')) {
	                    item.context = context;
	                }
	                else {
	                    // if (context) alert("Context mismatch. Correct midline:\n" + lines[i+1] + "\n\nMidline:\n" + midline + "\n\nContext:\n" + context.join("\n") + "\n\nURL:\n" + item.url);
	                    item.context = [lines[line + 1]];
	                }
	                stack.push(item);
	            }
	        }
	        if (!stack.length) {
	            return null; // could not parse multiline exception message as Opera stack trace
	        }
	        return {
	            mode: 'multiline',
	            name: ex.name,
	            message: lines[0],
	            stack: stack,
	        };
	    }
	    /**
	     * Adds information about the first frame to incomplete stack traces.
	     * Safari and IE require this to get complete data on the first frame.
	     * @param {TraceKit.StackTrace} stackInfo Stack trace information from
	     * one of the compute* methods.
	     * @param {string} url The URL of the script that caused an error.
	     * @param {(number|string)} lineNo The line number of the script that
	     * caused an error.
	     * @param {string=} message The error generated by the browser, which
	     * hopefully contains the name of the object that caused the error.
	     * @return {boolean} Whether or not the stack information was
	     * augmented.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {
	        var initial = {
	            url: url,
	            line: lineNo,
	        };
	        if (initial.url && initial.line) {
	            stackInfo.incomplete = false;
	            if (!initial.func) {
	                initial.func = guessFunctionName(initial.url, initial.line);
	            }
	            if (!initial.context) {
	                initial.context = gatherContext(initial.url, initial.line);
	            }
	            var reference = / '([^']+)' /.exec(message);
	            if (reference) {
	                initial.column = findSourceInLine(reference[1], initial.url, initial.line);
	            }
	            if (stackInfo.stack.length > 0) {
	                if (stackInfo.stack[0].url === initial.url) {
	                    if (stackInfo.stack[0].line === initial.line) {
	                        return false; // already in stack trace
	                    }
	                    else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {
	                        stackInfo.stack[0].line = initial.line;
	                        stackInfo.stack[0].context = initial.context;
	                        return false;
	                    }
	                }
	            }
	            stackInfo.stack.unshift(initial);
	            stackInfo.partial = true;
	            return true;
	        }
	        else {
	            stackInfo.incomplete = true;
	        }
	        return false;
	    }
	    /**
	     * Computes stack trace information by walking the arguments.caller
	     * chain at the time the exception occurred. This will cause earlier
	     * frames to be missed but is the only way to get any stack trace in
	     * Safari and IE. The top frame is restored by
	     * {@link augmentStackTraceWithInitialElement}.
	     * @param {Error} ex
	     * @return {TraceKit.StackTrace=} Stack trace information.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function computeStackTraceByWalkingCallerChain(ex, depth) {
	        var functionName = /function\s+([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?\s*\(/i, stack = [], funcs = {}, recursion = false, parts, item, source;
	        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {
	            if (curr === computeStackTrace || curr === TraceKit.report) {
	                continue;
	            }
	            item = {
	                url: null,
	                func: UNKNOWN_FUNCTION,
	                args: [],
	                line: null,
	                column: null,
	            };
	            if (curr.name) {
	                item.func = curr.name;
	            }
	            else if ((parts = functionName.exec(curr.toString()))) {
	                item.func = parts[1];
	            }
	            if (typeof item.func === 'undefined') {
	                try {
	                    item.func = parts.input.substring(0, parts.input.indexOf('{'));
	                }
	                catch (e) { }
	            }
	            if ((source = findSourceByFunctionBody(curr))) {
	                item.url = source.url;
	                item.line = source.line;
	                if (item.func === UNKNOWN_FUNCTION) {
	                    item.func = guessFunctionName(item.url, item.line);
	                }
	                var reference = / '([^']+)' /.exec(ex.message || ex.description);
	                if (reference) {
	                    item.column = findSourceInLine(reference[1], source.url, source.line);
	                }
	            }
	            if (funcs['' + curr]) {
	                recursion = true;
	            }
	            else {
	                funcs['' + curr] = true;
	            }
	            stack.push(item);
	        }
	        if (depth) {
	            stack.splice(0, depth);
	        }
	        var result = {
	            mode: 'callers',
	            name: ex.name,
	            message: ex.message,
	            stack: stack,
	        };
	        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);
	        return result;
	    }
	    /**
	     * Computes a stack trace for an exception.
	     * @param {Error} ex
	     * @param {(string|number)=} depth
	     * @memberof TraceKit.computeStackTrace
	     */
	    function computeStackTrace(ex, depth) {
	        var stack = null;
	        depth = depth == null ? 0 : +depth;
	        try {
	            // This must be tried first because Opera 10 *destroys*
	            // its stacktrace property if you try to access the stack
	            // property first!!
	            stack = computeStackTraceFromStacktraceProp(ex);
	            if (stack) {
	                return stack;
	            }
	        }
	        catch (e) {
	            if (debug) {
	                throw e;
	            }
	        }
	        try {
	            stack = computeStackTraceFromStackProp(ex);
	            if (stack) {
	                return stack;
	            }
	        }
	        catch (e) {
	            if (debug) {
	                throw e;
	            }
	        }
	        try {
	            stack = computeStackTraceFromOperaMultiLineMessage(ex);
	            if (stack) {
	                return stack;
	            }
	        }
	        catch (e) {
	            if (debug) {
	                throw e;
	            }
	        }
	        try {
	            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);
	            if (stack) {
	                return stack;
	            }
	        }
	        catch (e) {
	            if (debug) {
	                throw e;
	            }
	        }
	        return {
	            original: ex,
	            name: ex.name,
	            message: ex.message,
	            mode: 'failed',
	        };
	    }
	    /**
	     * Logs a stacktrace starting from the previous call and working down.
	     * @param {(number|string)=} depth How many frames deep to trace.
	     * @return {TraceKit.StackTrace} Stack trace information.
	     * @memberof TraceKit.computeStackTrace
	     */
	    function computeStackTraceOfCaller(depth) {
	        depth = (depth == null ? 0 : +depth) + 1; // "+ 1" because "ofCaller" should drop one frame
	        try {
	            throw new Error();
	        }
	        catch (ex) {
	            return computeStackTrace(ex, depth + 1);
	        }
	    }
	    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;
	    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;
	    computeStackTrace.guessFunctionName = guessFunctionName;
	    computeStackTrace.gatherContext = gatherContext;
	    computeStackTrace.ofCaller = computeStackTraceOfCaller;
	    computeStackTrace.getSource = getSource;
	    return computeStackTrace;
	})();
	/**
	 * Extends support for global error handling for asynchronous browser
	 * functions. Adopted from Closure Library's errorhandler.js
	 * @memberof TraceKit
	 */
	TraceKit.extendToAsynchronousCallbacks = function () {
	    var _helper = function _helper(fnName) {
	        var originalFn = window$1[fnName];
	        window$1[fnName] = function traceKitAsyncExtension() {
	            // Make a copy of the arguments
	            var args = _slice.call(arguments);
	            var originalCallback = args[0];
	            if (typeof originalCallback === 'function') {
	                args[0] = TraceKit.wrap(originalCallback);
	            }
	            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it
	            // also only supports 2 argument and doesn't care what "this" is, so we
	            // can just call the original function directly.
	            if (originalFn.apply) {
	                return originalFn.apply(this, args);
	            }
	            else {
	                return originalFn(args[0], args[1]);
	            }
	        };
	    };
	    _helper('setTimeout');
	    _helper('setInterval');
	};
	TraceKit.remoteFetching = false;
	TraceKit.collectWindowErrors = true;
	TraceKit.linesOfContext = 11;
	var subscribe = TraceKit.report.subscribe;
	var installGlobalHandler = TraceKit.report.installGlobalHandler;
	var installGlobalUnhandledRejectionHandler = TraceKit.report.installGlobalUnhandledRejectionHandler;
	var computeStackTrace = TraceKit.computeStackTrace;

	var STACKTRACE_LIMIT = 50;
	/**
	 * This function creates an exception from an TraceKitStackTrace
	 * @param stacktrace TraceKitStackTrace that will be converted to an exception
	 */
	function exceptionFromStacktrace(stacktrace) {
	    var frames = prepareFramesForEvent(stacktrace.stack);
	    var exception = {
	        type: stacktrace.name,
	        value: stacktrace.message,
	    };
	    if (frames && frames.length) {
	        exception.stacktrace = { frames: frames };
	    }
	    // tslint:disable-next-line:strict-type-predicates
	    if (exception.type === undefined && exception.value === '') {
	        exception.value = 'Unrecoverable error caught';
	    }
	    return exception;
	}
	/** JSDoc */
	function eventFromPlainObject(exception, syntheticException) {
	    var exceptionKeys = Object.keys(exception).sort();
	    var event = {
	        extra: {
	            __serialized__: object_7(exception),
	        },
	        fingerprint: [md5(exceptionKeys.join(''))],
	        message: "Non-Error exception captured with keys: " + object_8(exceptionKeys),
	    };
	    if (syntheticException) {
	        var stacktrace = computeStackTrace(syntheticException);
	        var frames_1 = prepareFramesForEvent(stacktrace.stack);
	        event.stacktrace = {
	            frames: frames_1,
	        };
	    }
	    return event;
	}
	/** JSDoc */
	function eventFromStacktrace(stacktrace) {
	    var exception = exceptionFromStacktrace(stacktrace);
	    return {
	        exception: {
	            values: [exception],
	        },
	    };
	}
	/** JSDoc */
	function prepareFramesForEvent(stack) {
	    if (!stack || !stack.length) {
	        return [];
	    }
	    var localStack = stack;
	    var firstFrameFunction = localStack[0].func || '';
	    var lastFrameFunction = localStack[localStack.length - 1].func || '';
	    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)
	    if (string_4(firstFrameFunction, 'captureMessage') || string_4(firstFrameFunction, 'captureException')) {
	        localStack = localStack.slice(1);
	    }
	    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)
	    if (string_4(lastFrameFunction, 'sentryWrapped')) {
	        localStack = localStack.slice(0, -1);
	    }
	    // The frame where the crash happened, should be the last entry in the array
	    return localStack
	        .map(function (frame) { return ({
	        colno: frame.column,
	        filename: frame.url || localStack[0].url,
	        function: frame.func || '?',
	        in_app: true,
	        lineno: frame.line,
	    }); })
	        .slice(0, STACKTRACE_LIMIT)
	        .reverse();
	}
	/**
	 * Adds exception values, type and value to an synthetic Exception.
	 * @param event The event to modify.
	 * @param value Value of the exception.
	 * @param type Type of the exception.
	 */
	function addExceptionTypeValue(event, value, type) {
	    event.exception = event.exception || {};
	    event.exception.values = event.exception.values || [];
	    event.exception.values[0] = event.exception.values[0] || {};
	    event.exception.values[0].value = event.exception.values[0].value || value || '';
	    event.exception.values[0].type = event.exception.values[0].type || type || 'Error';
	}

	/** Base Transport class implementation */
	var BaseTransport = /** @class */ (function () {
	    function BaseTransport(options) {
	        this.options = options;
	        /** A simple buffer holding all requests. */
	        this.buffer = new core.PromiseBuffer(30);
	        this.url = new core.API(this.options.dsn).getStoreEndpointWithUrlEncodedAuth();
	    }
	    /**
	     * @inheritDoc
	     */
	    BaseTransport.prototype.sendEvent = function (_) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                throw new core.SentryError('Transport Class has to implement `sendEvent` method');
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseTransport.prototype.close = function (timeout) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                return [2 /*return*/, this.buffer.drain(timeout)];
	            });
	        });
	    };
	    return BaseTransport;
	}());

	var global$1 = misc_3();
	/** `fetch` based transport */
	var FetchTransport = /** @class */ (function (_super) {
	    tslib_1.__extends(FetchTransport, _super);
	    function FetchTransport() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    FetchTransport.prototype.sendEvent = function (body) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var defaultOptions;
	            return tslib_1.__generator(this, function (_a) {
	                defaultOptions = {
	                    body: body,
	                    method: 'POST',
	                    // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default
	                    // https://caniuse.com/#feat=referrer-policy
	                    // It doesn't. And it throw exception instead of ignoring this parameter...
	                    // REF: https://github.com/getsentry/raven-js/issues/1233
	                    referrerPolicy: (supports_8() ? 'origin' : ''),
	                };
	                return [2 /*return*/, this.buffer.add(global$1.fetch(this.url, defaultOptions).then(function (response) { return ({
	                        status: dist_2.fromHttpCode(response.status),
	                    }); }))];
	            });
	        });
	    };
	    return FetchTransport;
	}(BaseTransport));

	/** `XHR` based transport */
	var XHRTransport = /** @class */ (function (_super) {
	    tslib_1.__extends(XHRTransport, _super);
	    function XHRTransport() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    XHRTransport.prototype.sendEvent = function (body) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return tslib_1.__generator(this, function (_a) {
	                return [2 /*return*/, this.buffer.add(new Promise(function (resolve, reject) {
	                        var request = new XMLHttpRequest();
	                        request.onreadystatechange = function () {
	                            if (request.readyState !== 4) {
	                                return;
	                            }
	                            if (request.status === 200) {
	                                resolve({
	                                    status: dist_2.fromHttpCode(request.status),
	                                });
	                            }
	                            reject(request);
	                        };
	                        request.open('POST', _this.url);
	                        request.send(body);
	                    }))];
	            });
	        });
	    };
	    return XHRTransport;
	}(BaseTransport));

	var global$2 = misc_3();
	/** `sendBeacon` based transport */
	var BeaconTransport = /** @class */ (function (_super) {
	    tslib_1.__extends(BeaconTransport, _super);
	    function BeaconTransport() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    BeaconTransport.prototype.sendEvent = function (body) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var result;
	            return tslib_1.__generator(this, function (_a) {
	                result = global$2.navigator.sendBeacon(this.url, body);
	                return [2 /*return*/, this.buffer.add(Promise.resolve({
	                        status: result ? dist_2.Success : dist_2.Failed,
	                    }))];
	            });
	        });
	    };
	    return BeaconTransport;
	}(BaseTransport));



	var index$1 = /*#__PURE__*/Object.freeze({
		BaseTransport: BaseTransport,
		FetchTransport: FetchTransport,
		XHRTransport: XHRTransport,
		BeaconTransport: BeaconTransport
	});

	/** The Sentry Browser SDK Backend. */
	var BrowserBackend = /** @class */ (function (_super) {
	    tslib_1.__extends(BrowserBackend, _super);
	    function BrowserBackend() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    BrowserBackend.prototype.install = function () {
	        // We are only called by the client if the SDK is enabled and a valid Dsn
	        // has been configured. If no Dsn is present, this indicates a programming
	        // error.
	        var dsn = this.options.dsn;
	        if (!dsn) {
	            throw new core.SentryError('Invariant exception: install() must not be called when disabled');
	        }
	        Error.stackTraceLimit = 50;
	        return true;
	    };
	    /**
	     * @inheritdoc
	     */
	    BrowserBackend.prototype.setupTransport = function () {
	        if (!this.options.dsn) {
	            // We return the noop transport here in case there is no Dsn.
	            return _super.prototype.setupTransport.call(this);
	        }
	        var transportOptions = this.options.transportOptions ? this.options.transportOptions : { dsn: this.options.dsn };
	        if (this.options.transport) {
	            return new this.options.transport(transportOptions);
	        }
	        else if (supports_6()) {
	            return new BeaconTransport(transportOptions);
	        }
	        else if (supports_4()) {
	            return new FetchTransport(transportOptions);
	        }
	        return new XHRTransport(transportOptions);
	    };
	    /**
	     * @inheritDoc
	     */
	    BrowserBackend.prototype.eventFromException = function (exception, hint) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var event, ex, ex, name_1, message, ex, ex;
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!(is_2(exception) && exception.error)) return [3 /*break*/, 1];
	                        ex = exception;
	                        exception = ex.error; // tslint:disable-line:no-parameter-reassignment
	                        event = eventFromStacktrace(computeStackTrace(exception));
	                        return [3 /*break*/, 7];
	                    case 1:
	                        if (!(is_3(exception) || is_4(exception))) return [3 /*break*/, 3];
	                        ex = exception;
	                        name_1 = ex.name || (is_3(ex) ? 'DOMError' : 'DOMException');
	                        message = ex.message ? name_1 + ": " + ex.message : name_1;
	                        return [4 /*yield*/, this.eventFromMessage(message, dist_1.Error, hint)];
	                    case 2:
	                        event = _a.sent();
	                        addExceptionTypeValue(event, message);
	                        return [3 /*break*/, 7];
	                    case 3:
	                        if (!is_1(exception)) return [3 /*break*/, 4];
	                        // we have a real Error object, do nothing
	                        event = eventFromStacktrace(computeStackTrace(exception));
	                        return [3 /*break*/, 7];
	                    case 4:
	                        if (!(is_10(exception) && hint && hint.syntheticException)) return [3 /*break*/, 5];
	                        ex = exception;
	                        event = eventFromPlainObject(ex, hint.syntheticException);
	                        addExceptionTypeValue(event, 'Custom Object');
	                        return [3 /*break*/, 7];
	                    case 5:
	                        ex = exception;
	                        return [4 /*yield*/, this.eventFromMessage(ex, undefined, hint)];
	                    case 6:
	                        event = _a.sent();
	                        addExceptionTypeValue(event, "" + ex);
	                        _a.label = 7;
	                    case 7:
	                        event = tslib_1.__assign({}, event, { event_id: hint && hint.event_id, exception: tslib_1.__assign({}, event.exception, { mechanism: {
	                                    handled: true,
	                                    type: 'generic',
	                                } }) });
	                        return [2 /*return*/, event];
	                }
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {
	        if (level === void 0) { level = dist_1.Info; }
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var event, stacktrace, frames_1;
	            return tslib_1.__generator(this, function (_a) {
	                event = {
	                    event_id: hint && hint.event_id,
	                    level: level,
	                    message: message,
	                };
	                if (this.options.attachStacktrace && hint && hint.syntheticException) {
	                    stacktrace = computeStackTrace(hint.syntheticException);
	                    frames_1 = prepareFramesForEvent(stacktrace.stack);
	                    event.stacktrace = {
	                        frames: frames_1,
	                    };
	                }
	                return [2 /*return*/, event];
	            });
	        });
	    };
	    return BrowserBackend;
	}(core.BaseBackend));

	var logger_1 = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });

	// TODO: Implement different loggers for different environments
	var global = misc.getGlobalObject();
	/** JSDoc */
	var Logger = /** @class */ (function () {
	    /** JSDoc */
	    function Logger() {
	        this.enabled = false;
	    }
	    /** JSDoc */
	    Logger.prototype.disable = function () {
	        this.enabled = false;
	    };
	    /** JSDoc */
	    Logger.prototype.enable = function () {
	        this.enabled = true;
	    };
	    /** JSDoc */
	    Logger.prototype.log = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (!this.enabled) {
	            return;
	        }
	        misc.consoleSandbox(function () {
	            global.console.log("Sentry Logger [Log]: " + args.join(' ')); // tslint:disable-line:no-console
	        });
	    };
	    /** JSDoc */
	    Logger.prototype.warn = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (!this.enabled) {
	            return;
	        }
	        misc.consoleSandbox(function () {
	            global.console.warn("Sentry Logger [Warn]: " + args.join(' ')); // tslint:disable-line:no-console
	        });
	    };
	    /** JSDoc */
	    Logger.prototype.error = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (!this.enabled) {
	            return;
	        }
	        misc.consoleSandbox(function () {
	            global.console.error("Sentry Logger [Error]: " + args.join(' ')); // tslint:disable-line:no-console
	        });
	    };
	    return Logger;
	}());
	var logger = new Logger();
	exports.logger = logger;

	});

	unwrapExports(logger_1);
	var logger_2 = logger_1.logger;

	var SDK_NAME = 'sentry.javascript.browser';
	var SDK_VERSION = '4.6.4';

	/**
	 * The Sentry Browser SDK Client.
	 *
	 * @see BrowserOptions for documentation on configuration options.
	 * @see SentryClient for usage documentation.
	 */
	var BrowserClient = /** @class */ (function (_super) {
	    tslib_1.__extends(BrowserClient, _super);
	    /**
	     * Creates a new Browser SDK instance.
	     *
	     * @param options Configuration options for this SDK.
	     */
	    function BrowserClient(options) {
	        return _super.call(this, BrowserBackend, options) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    BrowserClient.prototype.prepareEvent = function (event, scope, hint) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                event.platform = event.platform || 'javascript';
	                event.sdk = tslib_1.__assign({}, event.sdk, { name: SDK_NAME, packages: tslib_1.__spread(((event.sdk && event.sdk.packages) || []), [
	                        {
	                            name: 'npm:@sentry/browser',
	                            version: SDK_VERSION,
	                        },
	                    ]), version: SDK_VERSION });
	                return [2 /*return*/, _super.prototype.prepareEvent.call(this, event, scope, hint)];
	            });
	        });
	    };
	    /**
	     * Show a report dialog to the user to send feedback to a specific event.
	     *
	     * @param options Set individual options for the dialog
	     */
	    BrowserClient.prototype.showReportDialog = function (options) {
	        if (options === void 0) { options = {}; }
	        // doesn't work without a document (React Native)
	        var document = misc_3().document;
	        if (!document) {
	            return;
	        }
	        if (!this.isEnabled()) {
	            logger_2.error('Trying to call showReportDialog with Sentry Client is disabled');
	            return;
	        }
	        var dsn = options.dsn || this.getDsn();
	        if (!options.eventId) {
	            logger_2.error('Missing `eventId` option in showReportDialog call');
	            return;
	        }
	        if (!dsn) {
	            logger_2.error('Missing `Dsn` option in showReportDialog call');
	            return;
	        }
	        var script = document.createElement('script');
	        script.async = true;
	        script.src = new core.API(dsn).getReportDialogEndpoint(options);
	        (document.head || document.body).appendChild(script);
	    };
	    return BrowserClient;
	}(core.BaseClient));

	var debounceDuration = 1000;
	var keypressTimeout;
	var lastCapturedEvent;
	var ignoreOnError = 0;
	/** JSDoc */
	function shouldIgnoreOnError() {
	    return ignoreOnError > 0;
	}
	/** JSDoc */
	function ignoreNextOnError() {
	    // onerror should trigger before setTimeout
	    ignoreOnError += 1;
	    setTimeout(function () {
	        ignoreOnError -= 1;
	    });
	}
	/**
	 * Instruments the given function and sends an event to Sentry every time the
	 * function throws an exception.
	 *
	 * @param fn A function to wrap.
	 * @returns The wrapped function.
	 */
	function wrap(fn, options, before) {
	    if (options === void 0) { options = {}; }
	    if (!is_6(fn)) {
	        return fn;
	    }
	    try {
	        // We don't wanna wrap it twice
	        if (fn.__sentry__) {
	            return fn;
	        }
	        // If this has already been wrapped in the past, return that wrapped function
	        if (fn.__sentry_wrapped__) {
	            return fn.__sentry_wrapped__;
	        }
	    }
	    catch (e) {
	        // Just accessing custom props in some Selenium environments
	        // can cause a "Permission denied" exception (see raven-js#495).
	        // Bail on wrapping and return the function as-is (defers to window.onerror).
	        return fn;
	    }
	    var sentryWrapped = function () {
	        var _this = this;
	        if (before && is_6(before)) {
	            before.apply(this, arguments);
	        }
	        var args = Array.prototype.slice.call(arguments);
	        try {
	            // Attempt to invoke user-land function
	            // NOTE: If you are a Sentry user, and you are seeing this stack frame, it
	            //       means Raven caught an error invoking your application code. This is
	            //       expected behavior and NOT indicative of a bug with Raven.js.
	            var wrappedArguments = args.map(function (arg) { return wrap(arg, options); });
	            if (fn.handleEvent) {
	                return fn.handleEvent.apply(this, wrappedArguments);
	            }
	            else {
	                return fn.apply(this, wrappedArguments);
	            }
	        }
	        catch (ex) {
	            ignoreNextOnError();
	            core.withScope(function (scope) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                var _this = this;
	                return tslib_1.__generator(this, function (_a) {
	                    scope.addEventProcessor(function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                        var processedEvent;
	                        return tslib_1.__generator(this, function (_a) {
	                            processedEvent = tslib_1.__assign({}, event);
	                            if (options.mechanism) {
	                                processedEvent.exception = processedEvent.exception || {};
	                                processedEvent.exception.mechanism = options.mechanism;
	                            }
	                            processedEvent.extra = tslib_1.__assign({}, processedEvent.extra, { arguments: object_11(args, 3) });
	                            return [2 /*return*/, processedEvent];
	                        });
	                    }); });
	                    core.captureException(ex);
	                    return [2 /*return*/];
	                });
	            }); });
	            throw ex;
	        }
	    };
	    // Accessing some objects may throw
	    // ref: https://github.com/getsentry/sentry-javascript/issues/1168
	    try {
	        for (var property in fn) {
	            if (Object.prototype.hasOwnProperty.call(fn, property)) {
	                sentryWrapped[property] = fn[property];
	            }
	        }
	    }
	    catch (_oO) { } // tslint:disable-line:no-empty
	    fn.prototype = fn.prototype || {};
	    sentryWrapped.prototype = fn.prototype;
	    Object.defineProperty(fn, '__sentry_wrapped__', {
	        enumerable: false,
	        value: sentryWrapped,
	    });
	    // Signal that this function has been wrapped/filled already
	    // for both debugging and to prevent it to being wrapped/filled twice
	    Object.defineProperties(sentryWrapped, {
	        __sentry__: {
	            enumerable: false,
	            value: true,
	        },
	        __sentry_original__: {
	            enumerable: false,
	            value: fn,
	        },
	    });
	    // Restore original function name (not all browsers allow that)
	    try {
	        Object.defineProperty(sentryWrapped, 'name', {
	            get: function () {
	                return fn.name;
	            },
	        });
	    }
	    catch (_oO) {
	        /*no-empty*/
	    }
	    return sentryWrapped;
	}
	/**
	 * Wraps addEventListener to capture UI breadcrumbs
	 * @param eventName the event name (e.g. "click")
	 * @returns wrapped breadcrumb events handler
	 */
	function breadcrumbEventHandler(eventName) {
	    return function (event) {
	        // reset keypress timeout; e.g. triggering a 'click' after
	        // a 'keypress' will reset the keypress debounce so that a new
	        // set of keypresses can be recorded
	        keypressTimeout = undefined;
	        // It's possible this handler might trigger multiple times for the same
	        // event (e.g. event propagation through node ancestors). Ignore if we've
	        // already captured the event.
	        if (lastCapturedEvent === event) {
	            return;
	        }
	        lastCapturedEvent = event;
	        // try/catch both:
	        // - accessing event.target (see getsentry/raven-js#838, #768)
	        // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
	        //   can throw an exception in some circumstances.
	        var target;
	        try {
	            target = misc_5(event.target);
	        }
	        catch (e) {
	            target = '<unknown>';
	        }
	        core.getCurrentHub().addBreadcrumb({
	            category: "ui." + eventName,
	            message: target,
	        }, {
	            event: event,
	            name: eventName,
	        });
	    };
	}
	/**
	 * Wraps addEventListener to capture keypress UI events
	 * @returns wrapped keypress events handler
	 */
	function keypressEventHandler() {
	    // TODO: if somehow user switches keypress target before
	    //       debounce timeout is triggered, we will only capture
	    //       a single breadcrumb from the FIRST target (acceptable?)
	    return function (event) {
	        var target;
	        try {
	            target = event.target;
	        }
	        catch (e) {
	            // just accessing event properties can throw an exception in some rare circumstances
	            // see: https://github.com/getsentry/raven-js/issues/838
	            return;
	        }
	        var tagName = target && target.tagName;
	        // only consider keypress events on actual input elements
	        // this will disregard keypresses targeting body (e.g. tabbing
	        // through elements, hotkeys, etc)
	        if (!tagName || (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !target.isContentEditable)) {
	            return;
	        }
	        // record first keypress in a series, but ignore subsequent
	        // keypresses until debounce clears
	        if (!keypressTimeout) {
	            breadcrumbEventHandler('input')(event);
	        }
	        clearTimeout(keypressTimeout);
	        keypressTimeout = setTimeout(function () {
	            keypressTimeout = undefined;
	        }, debounceDuration);
	    };
	}

	/** Global handlers */
	var GlobalHandlers = /** @class */ (function () {
	    /** JSDoc */
	    function GlobalHandlers(options) {
	        /**
	         * @inheritDoc
	         */
	        this.name = GlobalHandlers.id;
	        this.options = tslib_1.__assign({ onerror: true, onunhandledrejection: true }, options);
	    }
	    /**
	     * @inheritDoc
	     */
	    GlobalHandlers.prototype.setupOnce = function () {
	        subscribe(function (stack, _, error) {
	            // TODO: use stack.context to get a valuable information from TraceKit, eg.
	            // [
	            //   0: "  })"
	            //   1: ""
	            //   2: "  function foo () {"
	            //   3: "    Sentry.captureException('some error')"
	            //   4: "    Sentry.captureMessage('some message')"
	            //   5: "    throw 'foo'"
	            //   6: "  }"
	            //   7: ""
	            //   8: "  function bar () {"
	            //   9: "    foo();"
	            //   10: "  }"
	            // ]
	            if (shouldIgnoreOnError()) {
	                return;
	            }
	            var self = core.getCurrentHub().getIntegration(GlobalHandlers);
	            if (self) {
	                core.getCurrentHub().captureEvent(self.eventFromGlobalHandler(stack), { originalException: error, data: { stack: stack } });
	            }
	        });
	        if (this.options.onerror) {
	            logger_2.log('Global Handler attached: onerror');
	            installGlobalHandler();
	        }
	        if (this.options.onunhandledrejection) {
	            logger_2.log('Global Handler attached: onunhandledrejection');
	            installGlobalUnhandledRejectionHandler();
	        }
	    };
	    /**
	     * This function creates an SentryEvent from an TraceKitStackTrace.
	     *
	     * @param stacktrace TraceKitStackTrace to be converted to an SentryEvent.
	     */
	    GlobalHandlers.prototype.eventFromGlobalHandler = function (stacktrace) {
	        var event = eventFromStacktrace(stacktrace);
	        var data = {
	            mode: stacktrace.mode,
	        };
	        if (stacktrace.message) {
	            data.message = stacktrace.message;
	        }
	        if (stacktrace.name) {
	            data.name = stacktrace.name;
	        }
	        var newEvent = tslib_1.__assign({}, event, { exception: tslib_1.__assign({}, event.exception, { mechanism: {
	                    data: data,
	                    handled: false,
	                    type: stacktrace.mechanism,
	                } }) });
	        var fallbackValue = typeof stacktrace.original !== 'undefined'
	            ? "" + string_1(object_1(object_11(stacktrace.original)), 300)
	            : '';
	        var fallbackType = stacktrace.mechanism === 'onunhandledrejection' ? 'UnhandledRejection' : 'Error';
	        // This makes sure we have type/value in every exception
	        addExceptionTypeValue(newEvent, fallbackValue, fallbackType);
	        return newEvent;
	    };
	    /**
	     * @inheritDoc
	     */
	    GlobalHandlers.id = 'GlobalHandlers';
	    return GlobalHandlers;
	}());

	/** Wrap timer functions and event targets to catch errors and provide better meta data */
	var TryCatch = /** @class */ (function () {
	    function TryCatch() {
	        /** JSDoc */
	        this.ignoreOnError = 0;
	        /**
	         * @inheritDoc
	         */
	        this.name = TryCatch.id;
	    }
	    /** JSDoc */
	    TryCatch.prototype.wrapTimeFunction = function (original) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var originalCallback = args[0];
	            args[0] = wrap(originalCallback, {
	                mechanism: {
	                    data: { function: getFunctionName(original) },
	                    handled: true,
	                    type: 'instrument',
	                },
	            });
	            return original.apply(this, args);
	        };
	    };
	    /** JSDoc */
	    TryCatch.prototype.wrapRAF = function (original) {
	        return function (callback) {
	            return original(wrap(callback, {
	                mechanism: {
	                    data: {
	                        function: 'requestAnimationFrame',
	                        handler: getFunctionName(original),
	                    },
	                    handled: true,
	                    type: 'instrument',
	                },
	            }));
	        };
	    };
	    /** JSDoc */
	    TryCatch.prototype.wrapEventTarget = function (target) {
	        var global = misc_3();
	        var proto = global[target] && global[target].prototype;
	        if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
	            return;
	        }
	        object_4(proto, 'addEventListener', function (original) {
	            return function (eventName, fn, options) {
	                try {
	                    fn.handleEvent = wrap(fn.handleEvent.bind(fn), {
	                        mechanism: {
	                            data: {
	                                function: 'handleEvent',
	                                handler: getFunctionName(fn),
	                                target: target,
	                            },
	                            handled: true,
	                            type: 'instrument',
	                        },
	                    });
	                }
	                catch (err) {
	                    // can sometimes get 'Permission denied to access property "handle Event'
	                }
	                // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`
	                // so that we don't have more than one wrapper function
	                var before;
	                var clickHandler;
	                var keypressHandler;
	                if (target === 'EventTarget' || target === 'Node') {
	                    // NOTE: generating multiple handlers per addEventListener invocation, should
	                    //       revisit and verify we can just use one (almost certainly)
	                    clickHandler = breadcrumbEventHandler('click');
	                    keypressHandler = keypressEventHandler();
	                    before = function (event) {
	                        // need to intercept every DOM event in `before` argument, in case that
	                        // same wrapped method is re-used for different events (e.g. mousemove THEN click)
	                        // see #724
	                        if (!event) {
	                            return;
	                        }
	                        var eventType;
	                        try {
	                            eventType = event.type;
	                        }
	                        catch (e) {
	                            // just accessing event properties can throw an exception in some rare circumstances
	                            // see: https://github.com/getsentry/raven-js/issues/838
	                            return;
	                        }
	                        if (eventType === 'click') {
	                            return clickHandler(event);
	                        }
	                        else if (eventType === 'keypress') {
	                            return keypressHandler(event);
	                        }
	                    };
	                }
	                return original.call(this, eventName, wrap(fn, {
	                    mechanism: {
	                        data: {
	                            function: 'addEventListener',
	                            handler: getFunctionName(fn),
	                            target: target,
	                        },
	                        handled: true,
	                        type: 'instrument',
	                    },
	                }, before), options);
	            };
	        });
	        object_4(proto, 'removeEventListener', function (original) {
	            return function (eventName, fn, options) {
	                var callback = fn;
	                try {
	                    callback = callback && (callback.__sentry_wrapped__ || callback);
	                }
	                catch (e) {
	                    // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments
	                }
	                return original.call(this, eventName, callback, options);
	            };
	        });
	    };
	    /**
	     * Wrap timer functions and event targets to catch errors
	     * and provide better metadata.
	     */
	    TryCatch.prototype.setupOnce = function () {
	        this.ignoreOnError = this.ignoreOnError;
	        var global = misc_3();
	        object_4(global, 'setTimeout', this.wrapTimeFunction.bind(this));
	        object_4(global, 'setInterval', this.wrapTimeFunction.bind(this));
	        object_4(global, 'requestAnimationFrame', this.wrapRAF.bind(this));
	        [
	            'EventTarget',
	            'Window',
	            'Node',
	            'ApplicationCache',
	            'AudioTrackList',
	            'ChannelMergerNode',
	            'CryptoOperation',
	            'EventSource',
	            'FileReader',
	            'HTMLUnknownElement',
	            'IDBDatabase',
	            'IDBRequest',
	            'IDBTransaction',
	            'KeyOperation',
	            'MediaController',
	            'MessagePort',
	            'ModalWindow',
	            'Notification',
	            'SVGElementInstance',
	            'Screen',
	            'TextTrack',
	            'TextTrackCue',
	            'TextTrackList',
	            'WebSocket',
	            'WebSocketWorker',
	            'Worker',
	            'XMLHttpRequest',
	            'XMLHttpRequestEventTarget',
	            'XMLHttpRequestUpload',
	        ].forEach(this.wrapEventTarget.bind(this));
	    };
	    /**
	     * @inheritDoc
	     */
	    TryCatch.id = 'TryCatch';
	    return TryCatch;
	}());
	/**
	 * Safely extract function name from itself
	 */
	function getFunctionName(fn) {
	    try {
	        return (fn && fn.name) || '<anonymous>';
	    }
	    catch (e) {
	        // Just accessing custom props in some Selenium environments
	        // can cause a "Permission denied" exception (see raven-js#495).
	        return '<anonymous>';
	    }
	}

	var global$3 = misc_3();
	var lastHref;
	/** Default Breadcrumbs instrumentations */
	var Breadcrumbs = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function Breadcrumbs(options) {
	        /**
	         * @inheritDoc
	         */
	        this.name = Breadcrumbs.id;
	        this.options = tslib_1.__assign({ beacon: true, console: true, dom: true, fetch: true, history: true, sentry: true, xhr: true }, options);
	    }
	    /** JSDoc */
	    Breadcrumbs.prototype.instrumentBeacon = function () {
	        if (!supports_6()) {
	            return;
	        }
	        /** JSDoc */
	        function beaconReplacementFunction(originalBeaconFunction) {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var url = args[0];
	                var data = args[1];
	                // If the browser successfully queues the request for delivery, the method returns "true" and returns "false" otherwise.
	                // https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API/Using_the_Beacon_API
	                var result = originalBeaconFunction.apply(this, args);
	                var client = core.getCurrentHub().getClient();
	                var dsn = client && client.getDsn();
	                if (dsn) {
	                    var filterUrl = new core.API(dsn).getStoreEndpoint();
	                    // if Sentry key appears in URL, don't capture it as a request
	                    // but rather as our own 'sentry' type breadcrumb
	                    if (filterUrl && string_4(url, filterUrl)) {
	                        addSentryBreadcrumb(data);
	                        return result;
	                    }
	                }
	                // What is wrong with you TypeScript...
	                var breadcrumbData = {
	                    category: 'beacon',
	                    data: data,
	                    type: 'http',
	                };
	                if (!result) {
	                    breadcrumbData.level = dist_1.Error;
	                }
	                Breadcrumbs.addBreadcrumb(breadcrumbData, {
	                    input: args,
	                    result: result,
	                });
	                return result;
	            };
	        }
	        object_4(global$3.navigator, 'sendBeacon', beaconReplacementFunction);
	    };
	    /** JSDoc */
	    Breadcrumbs.prototype.instrumentConsole = function () {
	        if (!('console' in global$3)) {
	            return;
	        }
	        ['debug', 'info', 'warn', 'error', 'log'].forEach(function (level) {
	            if (!(level in global$3.console)) {
	                return;
	            }
	            object_4(global$3.console, level, function (originalConsoleLevel) {
	                return function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i] = arguments[_i];
	                    }
	                    var breadcrumbData = {
	                        category: 'console',
	                        data: {
	                            extra: {
	                                arguments: object_11(args, 3),
	                            },
	                            logger: 'console',
	                        },
	                        level: dist_1.fromString(level),
	                        message: string_3(args, ' '),
	                    };
	                    if (level === 'assert') {
	                        if (args[0] === false) {
	                            breadcrumbData.message = "Assertion failed: " + (string_3(args.slice(1), ' ') || 'console.assert');
	                            breadcrumbData.data.extra.arguments = object_11(args.slice(1), 3);
	                        }
	                    }
	                    Breadcrumbs.addBreadcrumb(breadcrumbData, {
	                        input: args,
	                        level: level,
	                    });
	                    // this fails for some browsers. :(
	                    if (originalConsoleLevel) {
	                        Function.prototype.apply.call(originalConsoleLevel, global$3.console, args);
	                    }
	                };
	            });
	        });
	    };
	    /** JSDoc */
	    Breadcrumbs.prototype.instrumentDOM = function () {
	        if (!('document' in global$3)) {
	            return;
	        }
	        // Capture breadcrumbs from any click that is unhandled / bubbled up all the way
	        // to the document. Do this before we instrument addEventListener.
	        global$3.document.addEventListener('click', breadcrumbEventHandler('click'), false);
	        global$3.document.addEventListener('keypress', keypressEventHandler(), false);
	    };
	    /** JSDoc */
	    Breadcrumbs.prototype.instrumentFetch = function () {
	        if (!supports_5()) {
	            return;
	        }
	        object_4(global$3, 'fetch', function (originalFetch) {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var fetchInput = args[0];
	                var method = 'GET';
	                var url;
	                if (typeof fetchInput === 'string') {
	                    url = fetchInput;
	                }
	                else if ('Request' in global$3 && fetchInput instanceof Request) {
	                    url = fetchInput.url;
	                    if (fetchInput.method) {
	                        method = fetchInput.method;
	                    }
	                }
	                else {
	                    url = String(fetchInput);
	                }
	                if (args[1] && args[1].method) {
	                    method = args[1].method;
	                }
	                var client = core.getCurrentHub().getClient();
	                var dsn = client && client.getDsn();
	                if (dsn) {
	                    var filterUrl = new core.API(dsn).getStoreEndpoint();
	                    // if Sentry key appears in URL, don't capture it as a request
	                    // but rather as our own 'sentry' type breadcrumb
	                    if (filterUrl && string_4(url, filterUrl)) {
	                        if (method === 'POST' && args[1] && args[1].body) {
	                            addSentryBreadcrumb(args[1].body);
	                        }
	                        return originalFetch.apply(global$3, args);
	                    }
	                }
	                var fetchData = {
	                    method: method,
	                    url: url,
	                };
	                return originalFetch
	                    .apply(global$3, args)
	                    .then(function (response) {
	                    fetchData.status_code = response.status;
	                    Breadcrumbs.addBreadcrumb({
	                        category: 'fetch',
	                        data: fetchData,
	                        type: 'http',
	                    }, {
	                        input: args,
	                        response: response,
	                    });
	                    return response;
	                })
	                    .catch(function (error) {
	                    Breadcrumbs.addBreadcrumb({
	                        category: 'fetch',
	                        data: fetchData,
	                        level: dist_1.Error,
	                        type: 'http',
	                    }, {
	                        error: error,
	                        input: args,
	                    });
	                    throw error;
	                });
	            };
	        });
	    };
	    /** JSDoc */
	    Breadcrumbs.prototype.instrumentHistory = function () {
	        var _this = this;
	        if (!supports_9()) {
	            return;
	        }
	        var captureUrlChange = function (from, to) {
	            var parsedLoc = misc_7(global$3.location.href);
	            var parsedTo = misc_7(to);
	            var parsedFrom = misc_7(from);
	            // Initial pushState doesn't provide `from` information
	            if (!parsedFrom.path) {
	                parsedFrom = parsedLoc;
	            }
	            // because onpopstate only tells you the "new" (to) value of location.href, and
	            // not the previous (from) value, we need to track the value of the current URL
	            // state ourselves
	            lastHref = to;
	            // Use only the path component of the URL if the URL matches the current
	            // document (almost all the time when using pushState)
	            if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {
	                // tslint:disable-next-line:no-parameter-reassignment
	                to = parsedTo.relative;
	            }
	            if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {
	                // tslint:disable-next-line:no-parameter-reassignment
	                from = parsedFrom.relative;
	            }
	            Breadcrumbs.addBreadcrumb({
	                category: 'navigation',
	                data: {
	                    from: from,
	                    to: to,
	                },
	            });
	        };
	        // record navigation (URL) changes
	        var oldOnPopState = global$3.onpopstate;
	        global$3.onpopstate = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var currentHref = global$3.location.href;
	            captureUrlChange(lastHref, currentHref);
	            if (oldOnPopState) {
	                return oldOnPopState.apply(_this, args);
	            }
	        };
	        /** JSDoc */
	        function historyReplacementFunction(originalHistoryFunction) {
	            // note history.pushState.length is 0; intentionally not declaring
	            // params to preserve 0 arity
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var url = args.length > 2 ? args[2] : undefined;
	                // url argument is optional
	                if (url) {
	                    // coerce to string (this is what pushState does)
	                    captureUrlChange(lastHref, String(url));
	                }
	                return originalHistoryFunction.apply(this, args);
	            };
	        }
	        object_4(global$3.history, 'pushState', historyReplacementFunction);
	        object_4(global$3.history, 'replaceState', historyReplacementFunction);
	    };
	    /** JSDoc */
	    Breadcrumbs.prototype.instrumentXHR = function () {
	        if (!('XMLHttpRequest' in global$3)) {
	            return;
	        }
	        /** JSDoc */
	        function wrapProp(prop, xhr) {
	            // TODO: Fix XHR types
	            if (prop in xhr && is_6(xhr[prop])) {
	                object_4(xhr, prop, function (original) {
	                    return wrap(original, {
	                        mechanism: {
	                            data: {
	                                function: prop,
	                                handler: (original && original.name) || '<anonymous>',
	                            },
	                            handled: true,
	                            type: 'instrument',
	                        },
	                    });
	                });
	            }
	        }
	        var xhrproto = XMLHttpRequest.prototype;
	        object_4(xhrproto, 'open', function (originalOpen) {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var url = args[1];
	                this.__sentry_xhr__ = {
	                    method: args[0],
	                    url: args[1],
	                };
	                var client = core.getCurrentHub().getClient();
	                var dsn = client && client.getDsn();
	                if (dsn) {
	                    var filterUrl = new core.API(dsn).getStoreEndpoint();
	                    // if Sentry key appears in URL, don't capture it as a request
	                    // but rather as our own 'sentry' type breadcrumb
	                    if (is_7(url) && (filterUrl && string_4(url, filterUrl))) {
	                        this.__sentry_own_request__ = true;
	                    }
	                }
	                return originalOpen.apply(this, args);
	            };
	        });
	        object_4(xhrproto, 'send', function (originalSend) {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var xhr = this; // tslint:disable-line:no-this-assignment
	                if (xhr.__sentry_own_request__) {
	                    addSentryBreadcrumb(args[0]);
	                }
	                /** JSDoc */
	                function onreadystatechangeHandler() {
	                    if (xhr.readyState === 4) {
	                        if (xhr.__sentry_own_request__) {
	                            return;
	                        }
	                        try {
	                            // touching statusCode in some platforms throws
	                            // an exception
	                            if (xhr.__sentry_xhr__) {
	                                xhr.__sentry_xhr__.status_code = xhr.status;
	                            }
	                        }
	                        catch (e) {
	                            /* do nothing */
	                        }
	                        Breadcrumbs.addBreadcrumb({
	                            category: 'xhr',
	                            data: xhr.__sentry_xhr__,
	                            type: 'http',
	                        }, {
	                            xhr: xhr,
	                        });
	                    }
	                }
	                ['onload', 'onerror', 'onprogress'].forEach(function (prop) {
	                    wrapProp(prop, xhr);
	                });
	                if ('onreadystatechange' in xhr && is_6(xhr.onreadystatechange)) {
	                    object_4(xhr, 'onreadystatechange', function (original) {
	                        return wrap(original, {
	                            mechanism: {
	                                data: {
	                                    function: 'onreadystatechange',
	                                    handler: (original && original.name) || '<anonymous>',
	                                },
	                                handled: true,
	                                type: 'instrument',
	                            },
	                        }, onreadystatechangeHandler);
	                    });
	                }
	                else {
	                    // if onreadystatechange wasn't actually set by the page on this xhr, we
	                    // are free to set our own and capture the breadcrumb
	                    xhr.onreadystatechange = onreadystatechangeHandler;
	                }
	                return originalSend.apply(this, args);
	            };
	        });
	    };
	    /**
	     * Helper that checks if integration is enabled on the client.
	     * @param breadcrumb Breadcrumb
	     * @param hint SentryBreadcrumbHint
	     */
	    Breadcrumbs.addBreadcrumb = function (breadcrumb, hint) {
	        if (core.getCurrentHub().getIntegration(Breadcrumbs)) {
	            core.getCurrentHub().addBreadcrumb(breadcrumb, hint);
	        }
	    };
	    /**
	     * Instrument browser built-ins w/ breadcrumb capturing
	     *  - Console API
	     *  - DOM API (click/typing)
	     *  - XMLHttpRequest API
	     *  - Fetch API
	     *  - History API
	     */
	    Breadcrumbs.prototype.setupOnce = function () {
	        if (this.options.console) {
	            this.instrumentConsole();
	        }
	        if (this.options.dom) {
	            this.instrumentDOM();
	        }
	        if (this.options.xhr) {
	            this.instrumentXHR();
	        }
	        if (this.options.fetch) {
	            this.instrumentFetch();
	        }
	        if (this.options.beacon) {
	            this.instrumentBeacon();
	        }
	        if (this.options.history) {
	            this.instrumentHistory();
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    Breadcrumbs.id = 'Breadcrumbs';
	    return Breadcrumbs;
	}());
	/** JSDoc */
	function addSentryBreadcrumb(serializedData) {
	    // There's always something that can go wrong with deserialization...
	    try {
	        var event_1 = object_2(serializedData);
	        Breadcrumbs.addBreadcrumb({
	            category: 'sentry',
	            event_id: event_1.event_id,
	            level: event_1.level || dist_1.fromString('error'),
	            message: misc_8(event_1),
	        }, {
	            event: event_1,
	        });
	    }
	    catch (_oO) {
	        logger_2.error('Error while adding sentry type breadcrumb');
	    }
	}

	var DEFAULT_KEY = 'cause';
	var DEFAULT_LIMIT = 5;
	/** Adds SDK info to an event. */
	var LinkedErrors = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function LinkedErrors(options) {
	        if (options === void 0) { options = {}; }
	        /**
	         * @inheritDoc
	         */
	        this.name = LinkedErrors.id;
	        this.key = options.key || DEFAULT_KEY;
	        this.limit = options.limit || DEFAULT_LIMIT;
	    }
	    /**
	     * @inheritDoc
	     */
	    LinkedErrors.prototype.setupOnce = function () {
	        var _this = this;
	        core.addGlobalEventProcessor(function (event, hint) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var self;
	            return tslib_1.__generator(this, function (_a) {
	                self = core.getCurrentHub().getIntegration(LinkedErrors);
	                if (self) {
	                    return [2 /*return*/, self.handler(event, hint)];
	                }
	                return [2 /*return*/, event];
	            });
	        }); });
	    };
	    /**
	     * @inheritDoc
	     */
	    LinkedErrors.prototype.handler = function (event, hint) {
	        if (!event.exception || !event.exception.values || !hint || !(hint.originalException instanceof Error)) {
	            return event;
	        }
	        var linkedErrors = this.walkErrorTree(hint.originalException, this.key);
	        event.exception.values = tslib_1.__spread(linkedErrors, event.exception.values);
	        return event;
	    };
	    /**
	     * @inheritDoc
	     */
	    LinkedErrors.prototype.walkErrorTree = function (error, key, stack) {
	        if (stack === void 0) { stack = []; }
	        if (!(error[key] instanceof Error) || stack.length + 1 >= this.limit) {
	            return stack;
	        }
	        var stacktrace = computeStackTrace(error[key]);
	        var exception = exceptionFromStacktrace(stacktrace);
	        return this.walkErrorTree(error[key], key, tslib_1.__spread([exception], stack));
	    };
	    /**
	     * @inheritDoc
	     */
	    LinkedErrors.id = 'LinkedErrors';
	    return LinkedErrors;
	}());

	var global$4 = misc_3();
	/** UserAgent */
	var UserAgent = /** @class */ (function () {
	    function UserAgent() {
	        /**
	         * @inheritDoc
	         */
	        this.name = UserAgent.id;
	    }
	    /**
	     * @inheritDoc
	     */
	    UserAgent.prototype.setupOnce = function () {
	        var _this = this;
	        core.addGlobalEventProcessor(function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var request;
	            return tslib_1.__generator(this, function (_a) {
	                if (core.getCurrentHub().getIntegration(UserAgent)) {
	                    if (!global$4.navigator || !global$4.location) {
	                        return [2 /*return*/, event];
	                    }
	                    request = event.request || {};
	                    request.url = request.url || global$4.location.href;
	                    request.headers = request.headers || {};
	                    request.headers['User-Agent'] = global$4.navigator.userAgent;
	                    return [2 /*return*/, tslib_1.__assign({}, event, { request: request })];
	                }
	                return [2 /*return*/, event];
	            });
	        }); });
	    };
	    /**
	     * @inheritDoc
	     */
	    UserAgent.id = 'UserAgent';
	    return UserAgent;
	}());

	/** JSDoc */
	var Ember = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function Ember(options) {
	        if (options === void 0) { options = {}; }
	        /**
	         * @inheritDoc
	         */
	        this.name = Ember.id;
	        this.Ember =
	            options.Ember ||
	                misc_3().Ember;
	    }
	    /**
	     * @inheritDoc
	     */
	    Ember.prototype.setupOnce = function () {
	        var _this = this;
	        if (!this.Ember) {
	            logger_2.error('EmberIntegration is missing an Ember instance');
	            return;
	        }
	        var oldOnError = this.Ember.onerror;
	        this.Ember.onerror = function (error) {
	            if (core.getCurrentHub().getIntegration(Ember)) {
	                core.withScope(function (scope) {
	                    _this.addIntegrationToSdkInfo(scope);
	                    core.captureException(error);
	                });
	            }
	            if (typeof oldOnError === 'function') {
	                oldOnError.call(_this.Ember, error);
	            }
	            else if (_this.Ember.testing) {
	                throw error;
	            }
	        };
	        this.Ember.RSVP.on('error', function (reason) {
	            if (core.getCurrentHub().getIntegration(Ember)) {
	                core.withScope(function (scope) {
	                    if (reason instanceof Error) {
	                        scope.setExtra('context', 'Unhandled Promise error detected');
	                        _this.addIntegrationToSdkInfo(scope);
	                        core.captureException(reason);
	                    }
	                    else {
	                        scope.setExtra('reason', reason);
	                        _this.addIntegrationToSdkInfo(scope);
	                        core.captureMessage('Unhandled Promise error detected');
	                    }
	                });
	            }
	        });
	    };
	    /**
	     * Appends SDK integrations
	     * @param scope The scope currently used.
	     */
	    Ember.prototype.addIntegrationToSdkInfo = function (scope) {
	        var _this = this;
	        scope.addEventProcessor(function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var integrations;
	            return tslib_1.__generator(this, function (_a) {
	                if (event.sdk) {
	                    integrations = event.sdk.integrations || [];
	                    event.sdk = tslib_1.__assign({}, event.sdk, { integrations: tslib_1.__spread(integrations, ['ember']) });
	                }
	                return [2 /*return*/, event];
	            });
	        }); });
	    };
	    /**
	     * @inheritDoc
	     */
	    Ember.id = 'Ember';
	    return Ember;
	}());

	/** JSDoc */
	var Vue = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function Vue(options) {
	        if (options === void 0) { options = {}; }
	        /**
	         * @inheritDoc
	         */
	        this.name = Vue.id;
	        this.Vue =
	            options.Vue ||
	                misc_3().Vue;
	        this.attachProps = options.attachProps || true;
	    }
	    /** JSDoc */
	    Vue.prototype.formatComponentName = function (vm) {
	        if (vm.$root === vm) {
	            return 'root instance';
	        }
	        var name = vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;
	        return ((name ? "component <" + name + ">" : 'anonymous component') +
	            (vm._isVue && vm.$options.__file ? " at " + vm.$options.__file : ''));
	    };
	    /**
	     * @inheritDoc
	     */
	    Vue.prototype.setupOnce = function () {
	        var _this = this;
	        if (!this.Vue || !this.Vue.config) {
	            logger_2.error('VueIntegration is missing a Vue instance');
	            return;
	        }
	        var oldOnError = this.Vue.config.errorHandler;
	        this.Vue.config.errorHandler = function (error, vm, info) {
	            var metadata = {};
	            if (is_10(vm)) {
	                metadata.componentName = _this.formatComponentName(vm);
	                if (_this.attachProps) {
	                    metadata.propsData = vm.$options.propsData;
	                }
	            }
	            if (!is_5(info)) {
	                metadata.lifecycleHook = info;
	            }
	            if (core.getCurrentHub().getIntegration(Vue)) {
	                core.withScope(function (scope) {
	                    Object.keys(metadata).forEach(function (key) {
	                        scope.setExtra(key, metadata[key]);
	                    });
	                    scope.addEventProcessor(function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                        var integrations;
	                        return tslib_1.__generator(this, function (_a) {
	                            if (event.sdk) {
	                                integrations = event.sdk.integrations || [];
	                                event.sdk = tslib_1.__assign({}, event.sdk, { integrations: tslib_1.__spread(integrations, ['vue']) });
	                            }
	                            return [2 /*return*/, event];
	                        });
	                    }); });
	                    core.captureException(error);
	                });
	            }
	            if (typeof oldOnError === 'function') {
	                oldOnError.call(_this.Vue, error, vm, info);
	            }
	        };
	    };
	    /**
	     * @inheritDoc
	     */
	    Vue.id = 'Vue';
	    return Vue;
	}());

	/** JSDoc */
	var ReportTypes;
	(function (ReportTypes) {
	    /** JSDoc */
	    ReportTypes["Crash"] = "crash";
	    /** JSDoc */
	    ReportTypes["Deprecation"] = "deprecation";
	    /** JSDoc */
	    ReportTypes["Intervention"] = "intervention";
	})(ReportTypes || (ReportTypes = {}));
	/** Reporting API integration - https://w3c.github.io/reporting/ */
	var ReportingObserver = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function ReportingObserver(options) {
	        if (options === void 0) { options = {
	            types: [ReportTypes.Crash, ReportTypes.Deprecation, ReportTypes.Intervention],
	        }; }
	        this.options = options;
	        /**
	         * @inheritDoc
	         */
	        this.name = ReportingObserver.id;
	    }
	    /**
	     * @inheritDoc
	     */
	    ReportingObserver.prototype.setupOnce = function () {
	        if (!supports_7()) {
	            return;
	        }
	        var observer = new (misc_3().ReportingObserver)(this.handler.bind(this), {
	            buffered: true,
	            types: this.options.types,
	        });
	        observer.observe();
	    };
	    /**
	     * @inheritDoc
	     */
	    ReportingObserver.prototype.handler = function (reports) {
	        var e_1, _a;
	        if (!core.getCurrentHub().getIntegration(ReportingObserver)) {
	            return;
	        }
	        var _loop_1 = function (report) {
	            core.withScope(function (scope) {
	                scope.setExtra('url', report.url);
	                var label = "ReportingObserver [" + report.type + "]";
	                var details = 'No details available';
	                if (report.body) {
	                    // Object.keys doesn't work on ReportBody, as all properties are inheirted
	                    var plainBody = {};
	                    // tslint:disable-next-line:forin
	                    for (var prop in report.body) {
	                        plainBody[prop] = report.body[prop];
	                    }
	                    scope.setExtra('body', plainBody);
	                    if (report.type === ReportTypes.Crash) {
	                        var body = report.body;
	                        // A fancy way to create a message out of crashId OR reason OR both OR fallback
	                        details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;
	                    }
	                    else {
	                        var body = report.body;
	                        details = body.message || details;
	                    }
	                }
	                core.captureMessage(label + ": " + details);
	            });
	        };
	        try {
	            for (var reports_1 = tslib_1.__values(reports), reports_1_1 = reports_1.next(); !reports_1_1.done; reports_1_1 = reports_1.next()) {
	                var report = reports_1_1.value;
	                _loop_1(report);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (reports_1_1 && !reports_1_1.done && (_a = reports_1.return)) _a.call(reports_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ReportingObserver.id = 'ReportingObserver';
	    return ReportingObserver;
	}());



	var BrowserIntegrations = /*#__PURE__*/Object.freeze({
		GlobalHandlers: GlobalHandlers,
		TryCatch: TryCatch,
		Breadcrumbs: Breadcrumbs,
		LinkedErrors: LinkedErrors,
		UserAgent: UserAgent,
		Ember: Ember,
		Vue: Vue,
		ReportingObserver: ReportingObserver
	});

	var defaultIntegrations = [
	    // Common
	    new core.Integrations.Dedupe(),
	    new core.Integrations.InboundFilters(),
	    new core.Integrations.FunctionToString(),
	    new core.Integrations.ExtraErrorData(),
	    // Native Wrappers
	    new TryCatch(),
	    new Breadcrumbs(),
	    // Global Handlers
	    new GlobalHandlers(),
	    // Misc
	    new LinkedErrors(),
	    new UserAgent(),
	];
	/**
	 * The Sentry Browser SDK Client.
	 *
	 * To use this SDK, call the {@link init} function as early as possible when
	 * loading the web page. To set context information or send manual events, use
	 * the provided methods.
	 *
	 * @example
	 * import { init } from '@sentry/browser';
	 *
	 * init({
	 *   dsn: '__DSN__',
	 *   // ...
	 * });
	 *
	 * @example
	 * import { configureScope } from '@sentry/browser';
	 * configureScope((scope: Scope) => {
	 *   scope.setExtra({ battery: 0.7 });
	 *   scope.setTag({ user_mode: 'admin' });
	 *   scope.setUser({ id: '4711' });
	 * });
	 *
	 * @example
	 * import { addBreadcrumb } from '@sentry/browser';
	 * addBreadcrumb({
	 *   message: 'My Breadcrumb',
	 *   // ...
	 * });
	 *
	 * @example
	 * import * as Sentry from '@sentry/browser';
	 * Sentry.captureMessage('Hello, world!');
	 * Sentry.captureException(new Error('Good bye'));
	 * Sentry.captureEvent({
	 *   message: 'Manual',
	 *   stacktrace: [
	 *     // ...
	 *   ],
	 * });
	 *
	 * @see BrowserOptions for documentation on configuration options.
	 */
	function init(options) {
	    if (options === void 0) { options = {}; }
	    if (options.defaultIntegrations === undefined) {
	        options.defaultIntegrations = defaultIntegrations;
	    }
	    core.initAndBind(BrowserClient, options);
	}
	/**
	 * Present the user with a report dialog.
	 *
	 * @param options Everything is optional, we try to fetch all info need from the global scope.
	 */
	function showReportDialog(options) {
	    if (options === void 0) { options = {}; }
	    if (!options.eventId) {
	        options.eventId = core.getCurrentHub().lastEventId();
	    }
	    core.getCurrentHub().getClient().showReportDialog(options);
	}
	/**
	 * This is the getter for lastEventId.
	 *
	 * @returns The last event id of a captured event.
	 */
	function lastEventId() {
	    return core.getCurrentHub().lastEventId();
	}
	/**
	 * This function is here to be API compatible with the loader
	 */
	function forceLoad() {
	    // Noop
	}
	/**
	 * This function is here to be API compatible with the loader
	 */
	function onLoad(callback) {
	    callback();
	}
	/**
	 * A promise that resolves when all current events have been sent.
	 * If you provide a timeout and the queue takes longer to drain the promise returns false.
	 *
	 * @param timeout Maximum time in ms the client should wait.
	 */
	function flush(timeout) {
	    return tslib_1.__awaiter(this, void 0, void 0, function () {
	        return tslib_1.__generator(this, function (_a) {
	            return [2 /*return*/, core.getCurrentHub().getClient().flush(timeout)];
	        });
	    });
	}
	/**
	 * A promise that resolves when all current events have been sent.
	 * If you provide a timeout and the queue takes longer to drain the promise returns false.
	 *
	 * @param timeout Maximum time in ms the client should wait.
	 */
	function close(timeout) {
	    return tslib_1.__awaiter(this, void 0, void 0, function () {
	        return tslib_1.__generator(this, function (_a) {
	            return [2 /*return*/, core.getCurrentHub().getClient().close(timeout)];
	        });
	    });
	}

	var INTEGRATIONS = tslib_1.__assign({}, core.Integrations, BrowserIntegrations);

	exports.addGlobalEventProcessor = core.addGlobalEventProcessor;
	exports.addBreadcrumb = core.addBreadcrumb;
	exports.captureException = core.captureException;
	exports.captureEvent = core.captureEvent;
	exports.captureMessage = core.captureMessage;
	exports.configureScope = core.configureScope;
	exports.withScope = core.withScope;
	exports.getHubFromCarrier = core.getHubFromCarrier;
	exports.getCurrentHub = core.getCurrentHub;
	exports.Hub = core.Hub;
	exports.Scope = core.Scope;
	exports.Integrations = INTEGRATIONS;
	exports.Transports = index$1;
	exports.Severity = dist_1;
	exports.Status = dist_2;
	exports.BrowserBackend = BrowserBackend;
	exports.BrowserClient = BrowserClient;
	exports.defaultIntegrations = defaultIntegrations;
	exports.forceLoad = forceLoad;
	exports.init = init;
	exports.lastEventId = lastEventId;
	exports.onLoad = onLoad;
	exports.showReportDialog = showReportDialog;
	exports.flush = flush;
	exports.close = close;
	exports.SDK_NAME = SDK_NAME;
	exports.SDK_VERSION = SDK_VERSION;
	//# sourceMappingURL=index.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ }),
/* 791 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	/* global global, define, System, Reflect, Promise */
	var __extends;
	var __assign;
	var __rest;
	var __decorate;
	var __param;
	var __metadata;
	var __awaiter;
	var __generator;
	var __exportStar;
	var __values;
	var __read;
	var __spread;
	var __await;
	var __asyncGenerator;
	var __asyncDelegator;
	var __asyncValues;
	var __makeTemplateObject;
	var __importStar;
	var __importDefault;
	(function (factory) {
	    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (exports) { factory(createExporter(root, createExporter(exports))); }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    else if (typeof module === "object" && typeof module.exports === "object") {
	        factory(createExporter(root, createExporter(module.exports)));
	    }
	    else {
	        factory(createExporter(root));
	    }
	    function createExporter(exports, previous) {
	        if (exports !== root) {
	            if (typeof Object.create === "function") {
	                Object.defineProperty(exports, "__esModule", { value: true });
	            }
	            else {
	                exports.__esModule = true;
	            }
	        }
	        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
	    }
	})
	(function (exporter) {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

	    __extends = function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };

	    __assign = Object.assign || function (t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };

	    __rest = function (s, e) {
	        var t = {};
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	            t[p] = s[p];
	        if (s != null && typeof Object.getOwnPropertySymbols === "function")
	            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
	                t[p[i]] = s[p[i]];
	        return t;
	    };

	    __decorate = function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };

	    __param = function (paramIndex, decorator) {
	        return function (target, key) { decorator(target, key, paramIndex); }
	    };

	    __metadata = function (metadataKey, metadataValue) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	    };

	    __awaiter = function (thisArg, _arguments, P, generator) {
	        return new (P || (P = Promise))(function (resolve, reject) {
	            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	            step((generator = generator.apply(thisArg, _arguments || [])).next());
	        });
	    };

	    __generator = function (thisArg, body) {
	        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	        function verb(n) { return function (v) { return step([n, v]); }; }
	        function step(op) {
	            if (f) throw new TypeError("Generator is already executing.");
	            while (_) try {
	                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	                if (y = 0, t) op = [op[0] & 2, t.value];
	                switch (op[0]) {
	                    case 0: case 1: t = op; break;
	                    case 4: _.label++; return { value: op[1], done: false };
	                    case 5: _.label++; y = op[1]; op = [0]; continue;
	                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                    default:
	                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                        if (t[2]) _.ops.pop();
	                        _.trys.pop(); continue;
	                }
	                op = body.call(thisArg, _);
	            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	        }
	    };

	    __exportStar = function (m, exports) {
	        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	    };

	    __values = function (o) {
	        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
	        if (m) return m.call(o);
	        return {
	            next: function () {
	                if (o && i >= o.length) o = void 0;
	                return { value: o && o[i++], done: !o };
	            }
	        };
	    };

	    __read = function (o, n) {
	        var m = typeof Symbol === "function" && o[Symbol.iterator];
	        if (!m) return o;
	        var i = m.call(o), r, ar = [], e;
	        try {
	            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	        }
	        catch (error) { e = { error: error }; }
	        finally {
	            try {
	                if (r && !r.done && (m = i["return"])) m.call(i);
	            }
	            finally { if (e) throw e.error; }
	        }
	        return ar;
	    };

	    __spread = function () {
	        for (var ar = [], i = 0; i < arguments.length; i++)
	            ar = ar.concat(__read(arguments[i]));
	        return ar;
	    };

	    __await = function (v) {
	        return this instanceof __await ? (this.v = v, this) : new __await(v);
	    };

	    __asyncGenerator = function (thisArg, _arguments, generator) {
	        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	        var g = generator.apply(thisArg, _arguments || []), i, q = [];
	        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
	        function fulfill(value) { resume("next", value); }
	        function reject(value) { resume("throw", value); }
	        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	    };

	    __asyncDelegator = function (o) {
	        var i, p;
	        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
	        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
	    };

	    __asyncValues = function (o) {
	        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	        var m = o[Symbol.asyncIterator], i;
	        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
	        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
	        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	    };

	    __makeTemplateObject = function (cooked, raw) {
	        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
	        return cooked;
	    };

	    __importStar = function (mod) {
	        if (mod && mod.__esModule) return mod;
	        var result = {};
	        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	        result["default"] = mod;
	        return result;
	    };

	    __importDefault = function (mod) {
	        return (mod && mod.__esModule) ? mod : { "default": mod };
	    };

	    exporter("__extends", __extends);
	    exporter("__assign", __assign);
	    exporter("__rest", __rest);
	    exporter("__decorate", __decorate);
	    exporter("__param", __param);
	    exporter("__metadata", __metadata);
	    exporter("__awaiter", __awaiter);
	    exporter("__generator", __generator);
	    exporter("__exportStar", __exportStar);
	    exporter("__values", __values);
	    exporter("__read", __read);
	    exporter("__spread", __spread);
	    exporter("__await", __await);
	    exporter("__asyncGenerator", __asyncGenerator);
	    exporter("__asyncDelegator", __asyncDelegator);
	    exporter("__asyncValues", __asyncValues);
	    exporter("__makeTemplateObject", __makeTemplateObject);
	    exporter("__importStar", __importStar);
	    exporter("__importDefault", __importDefault);
	});

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 792 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var minimal_1 = __webpack_require__(793);
	exports.addBreadcrumb = minimal_1.addBreadcrumb;
	exports.captureException = minimal_1.captureException;
	exports.captureEvent = minimal_1.captureEvent;
	exports.captureMessage = minimal_1.captureMessage;
	exports.configureScope = minimal_1.configureScope;
	exports.withScope = minimal_1.withScope;
	var hub_1 = __webpack_require__(794);
	exports.addGlobalEventProcessor = hub_1.addGlobalEventProcessor;
	exports.getCurrentHub = hub_1.getCurrentHub;
	exports.Hub = hub_1.Hub;
	exports.getHubFromCarrier = hub_1.getHubFromCarrier;
	exports.Scope = hub_1.Scope;
	var api_1 = __webpack_require__(803);
	exports.API = api_1.API;
	var baseclient_1 = __webpack_require__(806);
	exports.BaseClient = baseclient_1.BaseClient;
	var basebackend_1 = __webpack_require__(811);
	exports.BaseBackend = basebackend_1.BaseBackend;
	var dsn_1 = __webpack_require__(804);
	exports.Dsn = dsn_1.Dsn;
	var error_1 = __webpack_require__(805);
	exports.SentryError = error_1.SentryError;
	var promisebuffer_1 = __webpack_require__(810);
	exports.PromiseBuffer = promisebuffer_1.PromiseBuffer;
	var interfaces_1 = __webpack_require__(813);
	exports.LogLevel = interfaces_1.LogLevel;
	var sdk_1 = __webpack_require__(814);
	exports.initAndBind = sdk_1.initAndBind;
	var noop_1 = __webpack_require__(812);
	exports.NoopTransport = noop_1.NoopTransport;
	var Integrations = __webpack_require__(815);
	exports.Integrations = Integrations;
	//# sourceMappingURL=index.js.map

/***/ }),
/* 793 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var hub_1 = __webpack_require__(794);
	/**
	 * This calls a function on the current hub.
	 * @param method function to call on hub.
	 * @param args to pass to function.
	 */
	function callOnHub(method) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    var hub = hub_1.getCurrentHub();
	    if (hub && hub[method]) {
	        // tslint:disable-next-line:no-unsafe-any
	        return hub[method].apply(hub, tslib_1.__spread(args));
	    }
	    throw new Error("No hub defined or " + method + " was not found on the hub, please open a bug report.");
	}
	/**
	 * Captures an exception event and sends it to Sentry.
	 *
	 * @param exception An exception-like object.
	 * @returns The generated eventId.
	 */
	function captureException(exception) {
	    var syntheticException;
	    try {
	        throw new Error('Sentry syntheticException');
	    }
	    catch (exception) {
	        syntheticException = exception;
	    }
	    return callOnHub('captureException', exception, {
	        originalException: exception,
	        syntheticException: syntheticException,
	    });
	}
	exports.captureException = captureException;
	/**
	 * Captures a message event and sends it to Sentry.
	 *
	 * @param message The message to send to Sentry.
	 * @param level Define the level of the message.
	 * @returns The generated eventId.
	 */
	function captureMessage(message, level) {
	    var syntheticException;
	    try {
	        throw new Error(message);
	    }
	    catch (exception) {
	        syntheticException = exception;
	    }
	    return callOnHub('captureMessage', message, level, {
	        originalException: message,
	        syntheticException: syntheticException,
	    });
	}
	exports.captureMessage = captureMessage;
	/**
	 * Captures a manually created event and sends it to Sentry.
	 *
	 * @param event The event to send to Sentry.
	 * @returns The generated eventId.
	 */
	function captureEvent(event) {
	    return callOnHub('captureEvent', event);
	}
	exports.captureEvent = captureEvent;
	/**
	 * Records a new breadcrumb which will be attached to future events.
	 *
	 * Breadcrumbs will be added to subsequent events to provide more context on
	 * user's actions prior to an error or crash.
	 *
	 * @param breadcrumb The breadcrumb to record.
	 */
	function addBreadcrumb(breadcrumb) {
	    callOnHub('addBreadcrumb', breadcrumb);
	}
	exports.addBreadcrumb = addBreadcrumb;
	/**
	 * Callback to set context information onto the scope.
	 * @param callback Callback function that receives Scope.
	 */
	function configureScope(callback) {
	    callOnHub('configureScope', callback);
	}
	exports.configureScope = configureScope;
	/**
	 * Creates a new scope with and executes the given operation within.
	 * The scope is automatically removed once the operation
	 * finishes or throws.
	 *
	 * This is essentially a convenience function for:
	 *
	 *     pushScope();
	 *     callback();
	 *     popScope();
	 *
	 * @param callback that will be enclosed into push/popScope.
	 */
	function withScope(callback) {
	    callOnHub('withScope', callback);
	}
	exports.withScope = withScope;
	/**
	 * Calls a function on the latest client. Use this with caution, it's meant as
	 * in "internal" helper so we don't need to expose every possible function in
	 * the shim. It is not guaranteed that the client actually implements the
	 * function.
	 *
	 * @param method The method to call on the client/client.
	 * @param args Arguments to pass to the client/fontend.
	 */
	function _callOnClient(method) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    callOnHub.apply(void 0, tslib_1.__spread(['invokeClient', method], args));
	}
	exports._callOnClient = _callOnClient;
	//# sourceMappingURL=index.js.map

/***/ }),
/* 794 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var scope_1 = __webpack_require__(795);
	exports.addGlobalEventProcessor = scope_1.addGlobalEventProcessor;
	exports.Scope = scope_1.Scope;
	var hub_1 = __webpack_require__(801);
	exports.getCurrentHub = hub_1.getCurrentHub;
	exports.getHubFromCarrier = hub_1.getHubFromCarrier;
	exports.getMainCarrier = hub_1.getMainCarrier;
	exports.Hub = hub_1.Hub;
	exports.setHubOnCarrier = hub_1.setHubOnCarrier;
	//# sourceMappingURL=index.js.map

/***/ }),
/* 795 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var misc_1 = __webpack_require__(796);
	var object_1 = __webpack_require__(798);
	/**
	 * Holds additional event information. {@link Scope.applyToEvent} will be
	 * called by the client before an event will be sent.
	 */
	var Scope = /** @class */ (function () {
	    function Scope() {
	        /** Flag if notifiying is happening. */
	        this.notifyingListeners = false;
	        /** Callback for client to receive scope changes. */
	        this.scopeListeners = [];
	        /** Callback list that will be called after {@link applyToEvent}. */
	        this.eventProcessors = [];
	        /** Array of breadcrumbs. */
	        this.breadcrumbs = [];
	        /** User */
	        this.user = {};
	        /** Tags */
	        this.tags = {};
	        /** Extra */
	        this.extra = {};
	    }
	    /** Add internal on change listener. */
	    Scope.prototype.addScopeListener = function (callback) {
	        this.scopeListeners.push(callback);
	    };
	    /** Add new event processor that will be called after {@link applyToEvent}. */
	    Scope.prototype.addEventProcessor = function (callback) {
	        this.eventProcessors.push(callback);
	        return this;
	    };
	    /**
	     * This will be called on every set call.
	     */
	    Scope.prototype.notifyScopeListeners = function () {
	        var _this = this;
	        if (!this.notifyingListeners) {
	            this.notifyingListeners = true;
	            setTimeout(function () {
	                _this.scopeListeners.forEach(function (callback) {
	                    callback(_this);
	                });
	                _this.notifyingListeners = false;
	            });
	        }
	    };
	    /**
	     * This will be called after {@link applyToEvent} is finished.
	     */
	    Scope.prototype.notifyEventProcessors = function (event, hint) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var e_1, _a, processedEvent, _b, _c, processor, e_2, e_1_1;
	            return tslib_1.__generator(this, function (_d) {
	                switch (_d.label) {
	                    case 0:
	                        processedEvent = event;
	                        _d.label = 1;
	                    case 1:
	                        _d.trys.push([1, 8, 9, 10]);
	                        _b = tslib_1.__values(tslib_1.__spread(getGlobalEventProcessors(), this.eventProcessors)), _c = _b.next();
	                        _d.label = 2;
	                    case 2:
	                        if (!!_c.done) return [3 /*break*/, 7];
	                        processor = _c.value;
	                        _d.label = 3;
	                    case 3:
	                        _d.trys.push([3, 5, , 6]);
	                        return [4 /*yield*/, processor(tslib_1.__assign({}, processedEvent), hint)];
	                    case 4:
	                        processedEvent = _d.sent();
	                        if (processedEvent === null) {
	                            return [2 /*return*/, null];
	                        }
	                        return [3 /*break*/, 6];
	                    case 5:
	                        e_2 = _d.sent();
	                        return [3 /*break*/, 6];
	                    case 6:
	                        _c = _b.next();
	                        return [3 /*break*/, 2];
	                    case 7: return [3 /*break*/, 10];
	                    case 8:
	                        e_1_1 = _d.sent();
	                        e_1 = { error: e_1_1 };
	                        return [3 /*break*/, 10];
	                    case 9:
	                        try {
	                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	                        }
	                        finally { if (e_1) throw e_1.error; }
	                        return [7 /*endfinally*/];
	                    case 10: return [2 /*return*/, processedEvent];
	                }
	            });
	        });
	    };
	    /**
	     * Updates user context information for future events.
	     * @param user User context object to be set in the current context.
	     */
	    Scope.prototype.setUser = function (user) {
	        this.user = object_1.safeNormalize(user);
	        this.notifyScopeListeners();
	        return this;
	    };
	    /**
	     * Updates tags context information for future events.
	     * @param tags Tags context object to merge into current context.
	     */
	    Scope.prototype.setTag = function (key, value) {
	        var _a;
	        this.tags = tslib_1.__assign({}, this.tags, (_a = {}, _a[key] = object_1.safeNormalize(value), _a));
	        this.notifyScopeListeners();
	        return this;
	    };
	    /**
	     * Updates extra context information for future events.
	     * @param extra context object to merge into current context.
	     */
	    Scope.prototype.setExtra = function (key, extra) {
	        var _a;
	        this.extra = tslib_1.__assign({}, this.extra, (_a = {}, _a[key] = object_1.safeNormalize(extra), _a));
	        this.notifyScopeListeners();
	        return this;
	    };
	    /**
	     * Sets the fingerprint on the scope to send with the events.
	     * @param fingerprint string[] to group events in Sentry.
	     */
	    Scope.prototype.setFingerprint = function (fingerprint) {
	        this.fingerprint = object_1.safeNormalize(fingerprint);
	        this.notifyScopeListeners();
	        return this;
	    };
	    /**
	     * Sets the level on the scope for future events.
	     * @param level string {@link Severity}
	     */
	    Scope.prototype.setLevel = function (level) {
	        this.level = object_1.safeNormalize(level);
	        this.notifyScopeListeners();
	        return this;
	    };
	    /**
	     * Inherit values from the parent scope.
	     * @param scope to clone.
	     */
	    Scope.clone = function (scope) {
	        var newScope = new Scope();
	        object_1.assign(newScope, scope, {
	            scopeListeners: [],
	        });
	        if (scope) {
	            newScope.extra = object_1.assign(scope.extra);
	            newScope.tags = object_1.assign(scope.tags);
	            newScope.breadcrumbs = tslib_1.__spread(scope.breadcrumbs);
	            newScope.eventProcessors = tslib_1.__spread(scope.eventProcessors);
	        }
	        return newScope;
	    };
	    /** Clears the current scope and resets its properties. */
	    Scope.prototype.clear = function () {
	        this.breadcrumbs = [];
	        this.tags = {};
	        this.extra = {};
	        this.user = {};
	        this.level = undefined;
	        this.fingerprint = undefined;
	        this.notifyScopeListeners();
	    };
	    /**
	     * Sets the breadcrumbs in the scope
	     * @param breadcrumbs Breadcrumb
	     * @param maxBreadcrumbs number of max breadcrumbs to merged into event.
	     */
	    Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {
	        this.breadcrumbs =
	            maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0
	                ? tslib_1.__spread(this.breadcrumbs, [object_1.safeNormalize(breadcrumb)]).slice(-maxBreadcrumbs)
	                : tslib_1.__spread(this.breadcrumbs, [object_1.safeNormalize(breadcrumb)]);
	        this.notifyScopeListeners();
	    };
	    /**
	     * Applies fingerprint from the scope to the event if there's one,
	     * uses message if there's one instead or get rid of empty fingerprint
	     */
	    Scope.prototype.applyFingerprint = function (event) {
	        // Make sure it's an array first and we actually have something in place
	        event.fingerprint = event.fingerprint
	            ? Array.isArray(event.fingerprint)
	                ? event.fingerprint
	                : [event.fingerprint]
	            : [];
	        // If we have something on the scope, then merge it with event
	        if (this.fingerprint) {
	            event.fingerprint = event.fingerprint.concat(this.fingerprint);
	        }
	        else if (event.message) {
	            // If not, but we have message, use it instead
	            event.fingerprint = event.fingerprint.concat(event.message);
	        }
	        // If we have no data at all, remove empty array default
	        if (event.fingerprint && !event.fingerprint.length) {
	            delete event.fingerprint;
	        }
	    };
	    /**
	     * Applies the current context and fingerprint to the event.
	     * Note that breadcrumbs will be added by the client.
	     * Also if the event has already breadcrumbs on it, we do not merge them.
	     * @param event SentryEvent
	     * @param hint May contain additional informartion about the original exception.
	     * @param maxBreadcrumbs number of max breadcrumbs to merged into event.
	     */
	    Scope.prototype.applyToEvent = function (event, hint, maxBreadcrumbs) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var hasNoBreadcrumbs;
	            return tslib_1.__generator(this, function (_a) {
	                if (this.extra && Object.keys(this.extra).length) {
	                    event.extra = tslib_1.__assign({}, this.extra, event.extra);
	                }
	                if (this.tags && Object.keys(this.tags).length) {
	                    event.tags = tslib_1.__assign({}, this.tags, event.tags);
	                }
	                if (this.user && Object.keys(this.user).length) {
	                    event.user = tslib_1.__assign({}, this.user, event.user);
	                }
	                if (this.level) {
	                    event.level = this.level;
	                }
	                this.applyFingerprint(event);
	                hasNoBreadcrumbs = !event.breadcrumbs || event.breadcrumbs.length === 0;
	                if (hasNoBreadcrumbs && this.breadcrumbs.length > 0) {
	                    event.breadcrumbs =
	                        maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0
	                            ? this.breadcrumbs.slice(-maxBreadcrumbs)
	                            : this.breadcrumbs;
	                }
	                return [2 /*return*/, this.notifyEventProcessors(event, hint)];
	            });
	        });
	    };
	    return Scope;
	}());
	exports.Scope = Scope;
	/**
	 * Retruns the global event processors.
	 */
	function getGlobalEventProcessors() {
	    var global = misc_1.getGlobalObject();
	    global.__SENTRY__ = global.__SENTRY__ || {};
	    global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];
	    return global.__SENTRY__.globalEventProcessors;
	}
	/**
	 * Add a EventProcessor to be kept globally.
	 * @param callback EventProcessor to add
	 */
	function addGlobalEventProcessor(callback) {
	    getGlobalEventProcessors().push(callback);
	}
	exports.addGlobalEventProcessor = addGlobalEventProcessor;
	//# sourceMappingURL=scope.js.map

/***/ }),
/* 796 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var is_1 = __webpack_require__(797);
	/**
	 * Requires a module which is protected against bundler minification.
	 *
	 * @param request The module path to resolve
	 */
	function dynamicRequire(mod, request) {
	    return mod.require(request);
	}
	exports.dynamicRequire = dynamicRequire;
	/**
	 * Checks whether we're in the Node.js or Browser environment
	 *
	 * @returns Answer to given question
	 */
	function isNodeEnv() {
	    // tslint:disable:strict-type-predicates
	    return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
	}
	exports.isNodeEnv = isNodeEnv;
	var fallbackGlobalObject = {};
	/**
	 * Safely get global scope object
	 *
	 * @returns Global scope object
	 */
	// tslint:disable:strict-type-predicates
	function getGlobalObject() {
	    return isNodeEnv()
	        ? global
	        : typeof window !== 'undefined'
	            ? window
	            : typeof self !== 'undefined'
	                ? self
	                : fallbackGlobalObject;
	}
	exports.getGlobalObject = getGlobalObject;
	/**
	 * UUID4 generator
	 *
	 * @returns string Generated UUID4.
	 */
	function uuid4() {
	    var global = getGlobalObject();
	    var crypto = global.crypto || global.msCrypto;
	    if (!(crypto === void 0) && crypto.getRandomValues) {
	        // Use window.crypto API if available
	        var arr = new Uint16Array(8);
	        crypto.getRandomValues(arr);
	        // set 4 in byte 7
	        // tslint:disable-next-line:no-bitwise
	        arr[3] = (arr[3] & 0xfff) | 0x4000;
	        // set 2 most significant bits of byte 9 to '10'
	        // tslint:disable-next-line:no-bitwise
	        arr[4] = (arr[4] & 0x3fff) | 0x8000;
	        var pad = function (num) {
	            var v = num.toString(16);
	            while (v.length < 4) {
	                v = "0" + v;
	            }
	            return v;
	        };
	        return (pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]));
	    }
	    else {
	        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
	        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	            // tslint:disable-next-line:no-bitwise
	            var r = (Math.random() * 16) | 0;
	            // tslint:disable-next-line:no-bitwise
	            var v = c === 'x' ? r : (r & 0x3) | 0x8;
	            return v.toString(16);
	        });
	    }
	}
	exports.uuid4 = uuid4;
	/**
	 * Given a child DOM element, returns a query-selector statement describing that
	 * and its ancestors
	 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
	 * @returns generated DOM path
	 */
	function htmlTreeAsString(elem) {
	    var currentElem = elem;
	    var MAX_TRAVERSE_HEIGHT = 5;
	    var MAX_OUTPUT_LEN = 80;
	    var out = [];
	    var height = 0;
	    var len = 0;
	    var separator = ' > ';
	    var sepLength = separator.length;
	    var nextStr;
	    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
	        nextStr = htmlElementAsString(currentElem);
	        // bail out if
	        // - nextStr is the 'html' element
	        // - the length of the string that would be created exceeds MAX_OUTPUT_LEN
	        //   (ignore this limit if we are on the first iteration)
	        if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {
	            break;
	        }
	        out.push(nextStr);
	        len += nextStr.length;
	        currentElem = currentElem.parentNode;
	    }
	    return out.reverse().join(separator);
	}
	exports.htmlTreeAsString = htmlTreeAsString;
	/**
	 * Returns a simple, query-selector representation of a DOM element
	 * e.g. [HTMLElement] => input#foo.btn[name=baz]
	 * @returns generated DOM path
	 */
	function htmlElementAsString(elem) {
	    var out = [];
	    var className;
	    var classes;
	    var key;
	    var attr;
	    var i;
	    if (!elem || !elem.tagName) {
	        return '';
	    }
	    out.push(elem.tagName.toLowerCase());
	    if (elem.id) {
	        out.push("#" + elem.id);
	    }
	    className = elem.className;
	    if (className && is_1.isString(className)) {
	        classes = className.split(/\s+/);
	        for (i = 0; i < classes.length; i++) {
	            out.push("." + classes[i]);
	        }
	    }
	    var attrWhitelist = ['type', 'name', 'title', 'alt'];
	    for (i = 0; i < attrWhitelist.length; i++) {
	        key = attrWhitelist[i];
	        attr = elem.getAttribute(key);
	        if (attr) {
	            out.push("[" + key + "=\"" + attr + "\"]");
	        }
	    }
	    return out.join('');
	}
	exports.htmlElementAsString = htmlElementAsString;
	/**
	 * Parses string form of URL into an object
	 * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
	 * // intentionally using regex and not <a/> href parsing trick because React Native and other
	 * // environments where DOM might not be available
	 * @returns parsed URL object
	 */
	function parseUrl(url) {
	    if (!url) {
	        return {};
	    }
	    var match = url.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
	    if (!match) {
	        return {};
	    }
	    // coerce to undefined values to empty string so we don't get 'undefined'
	    var query = match[6] || '';
	    var fragment = match[8] || '';
	    return {
	        host: match[4],
	        path: match[5],
	        protocol: match[2],
	        relative: match[5] + query + fragment,
	    };
	}
	exports.parseUrl = parseUrl;
	/**
	 * Extracts either message or type+value from an event that can be used for user-facing logs
	 * @returns event's description
	 */
	function getEventDescription(event) {
	    if (event.message) {
	        return event.message;
	    }
	    else if (event.exception && event.exception.values && event.exception.values[0]) {
	        var exception = event.exception.values[0];
	        if (exception.type && exception.value) {
	            return exception.type + ": " + exception.value;
	        }
	        else {
	            return exception.type || exception.value || event.event_id || '<unknown>';
	        }
	    }
	    else {
	        return event.event_id || '<unknown>';
	    }
	}
	exports.getEventDescription = getEventDescription;
	/** JSDoc */
	function consoleSandbox(callback) {
	    var global = getGlobalObject();
	    var levels = ['debug', 'info', 'warn', 'error', 'log'];
	    if (!('console' in global)) {
	        return callback();
	    }
	    var originalConsole = global.console;
	    var wrappedLevels = {};
	    // Restore all wrapped console methods
	    levels.forEach(function (level) {
	        if (level in global.console && originalConsole[level].__sentry__) {
	            wrappedLevels[level] = originalConsole[level].__sentry_wrapped__;
	            originalConsole[level] = originalConsole[level].__sentry_original__;
	        }
	    });
	    // Perform callback manipulations
	    var result = callback();
	    // Revert restoration to wrapped state
	    Object.keys(wrappedLevels).forEach(function (level) {
	        originalConsole[level] = wrappedLevels[level];
	    });
	    return result;
	}
	exports.consoleSandbox = consoleSandbox;
	//# sourceMappingURL=misc.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), (function() { return this; }())))

/***/ }),
/* 797 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Checks whether given value's type is one of a few Error or Error-like
	 * {@link isError}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isError(wat) {
	    switch (Object.prototype.toString.call(wat)) {
	        case '[object Error]':
	            return true;
	        case '[object Exception]':
	            return true;
	        case '[object DOMException]':
	            return true;
	        default:
	            return wat instanceof Error;
	    }
	}
	exports.isError = isError;
	/**
	 * Checks whether given value's type is ErrorEvent
	 * {@link isErrorEvent}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isErrorEvent(wat) {
	    return Object.prototype.toString.call(wat) === '[object ErrorEvent]';
	}
	exports.isErrorEvent = isErrorEvent;
	/**
	 * Checks whether given value's type is DOMError
	 * {@link isDOMError}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isDOMError(wat) {
	    return Object.prototype.toString.call(wat) === '[object DOMError]';
	}
	exports.isDOMError = isDOMError;
	/**
	 * Checks whether given value's type is DOMException
	 * {@link isDOMException}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isDOMException(wat) {
	    return Object.prototype.toString.call(wat) === '[object DOMException]';
	}
	exports.isDOMException = isDOMException;
	/**
	 * Checks whether given value's type is an undefined
	 * {@link isUndefined}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isUndefined(wat) {
	    return wat === void 0;
	}
	exports.isUndefined = isUndefined;
	/**
	 * Checks whether given value's type is a function
	 * {@link isFunction}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isFunction(wat) {
	    return typeof wat === 'function';
	}
	exports.isFunction = isFunction;
	/**
	 * Checks whether given value's type is a string
	 * {@link isString}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isString(wat) {
	    return Object.prototype.toString.call(wat) === '[object String]';
	}
	exports.isString = isString;
	/**
	 * Checks whether given value's is a primitive (undefined, null, number, boolean, string)
	 * {@link isPrimitive}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isPrimitive(wat) {
	    return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');
	}
	exports.isPrimitive = isPrimitive;
	/**
	 * Checks whether given value's type is an array
	 * {@link isArray}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isArray(wat) {
	    return Object.prototype.toString.call(wat) === '[object Array]';
	}
	exports.isArray = isArray;
	/**
	 * Checks whether given value's type is an object literal
	 * {@link isPlainObject}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isPlainObject(wat) {
	    return Object.prototype.toString.call(wat) === '[object Object]';
	}
	exports.isPlainObject = isPlainObject;
	/**
	 * Checks whether given value's type is an regexp
	 * {@link isRegExp}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isRegExp(wat) {
	    return Object.prototype.toString.call(wat) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	/**
	 * Checks whether given value's type is a NaN
	 * {@link isNaN}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isNaN(wat) {
	    return wat !== wat;
	}
	exports.isNaN = isNaN;
	/**
	 * Checks whether given value's type is a SyntheticEvent
	 * {@link isSyntheticEvent}.
	 *
	 * @param wat A value to be checked.
	 * @returns A boolean representing the result.
	 */
	function isSyntheticEvent(wat) {
	    // tslint:disable-next-line:no-unsafe-any
	    return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;
	}
	exports.isSyntheticEvent = isSyntheticEvent;
	//# sourceMappingURL=is.js.map

/***/ }),
/* 798 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var is_1 = __webpack_require__(797);
	var memo_1 = __webpack_require__(799);
	var string_1 = __webpack_require__(800);
	/**
	 * Serializes the given object into a string.
	 * Like JSON.stringify, but doesn't throw on circular references.
	 *
	 * @param object A JSON-serializable object.
	 * @returns A string containing the serialized object.
	 */
	function serialize(object) {
	    return JSON.stringify(object, serializer({ normalize: false }));
	}
	exports.serialize = serialize;
	/**
	 * Deserializes an object from a string previously serialized with
	 * {@link serialize}.
	 *
	 * @param str A serialized object.
	 * @returns The deserialized object.
	 */
	function deserialize(str) {
	    return JSON.parse(str);
	}
	exports.deserialize = deserialize;
	/**
	 * Creates a deep copy of the given object.
	 *
	 * The object must be serializable, i.e.:
	 *  - It must not contain any cycles
	 *  - Only primitive types are allowed (object, array, number, string, boolean)
	 *  - Its depth should be considerably low for performance reasons
	 *
	 * @param object A JSON-serializable object.
	 * @returns The object clone.
	 */
	function clone(object) {
	    return deserialize(serialize(object));
	}
	exports.clone = clone;
	/**
	 * Wrap a given object method with a higher-order function
	 *
	 * @param source An object that contains a method to be wrapped.
	 * @param name A name of method to be wrapped.
	 * @param replacement A function that should be used to wrap a given method.
	 * @returns void
	 */
	function fill(source, name, replacement) {
	    if (!(name in source) || source[name].__sentry__) {
	        return;
	    }
	    var original = source[name];
	    var wrapped = replacement(original);
	    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work
	    // otherwise it'll throw "TypeError: Object.defineProperties called on non-object"
	    // tslint:disable-next-line:strict-type-predicates
	    if (typeof wrapped === 'function') {
	        wrapped.prototype = wrapped.prototype || {};
	        Object.defineProperties(wrapped, {
	            __sentry__: {
	                enumerable: false,
	                value: true,
	            },
	            __sentry_original__: {
	                enumerable: false,
	                value: original,
	            },
	            __sentry_wrapped__: {
	                enumerable: false,
	                value: wrapped,
	            },
	        });
	    }
	    source[name] = wrapped;
	}
	exports.fill = fill;
	/**
	 * Encodes given object into url-friendly format
	 *
	 * @param object An object that contains serializable values
	 * @returns string Encoded
	 */
	function urlEncode(object) {
	    return Object.keys(object)
	        .map(
	    // tslint:disable-next-line:no-unsafe-any
	    function (key) { return encodeURIComponent(key) + "=" + encodeURIComponent(object[key]); })
	        .join('&');
	}
	exports.urlEncode = urlEncode;
	// Default Node.js REPL depth
	var MAX_SERIALIZE_EXCEPTION_DEPTH = 3;
	// 100kB, as 200kB is max payload size, so half sounds reasonable
	var MAX_SERIALIZE_EXCEPTION_SIZE = 100 * 1024;
	var MAX_SERIALIZE_KEYS_LENGTH = 40;
	/** JSDoc */
	function utf8Length(value) {
	    // tslint:disable-next-line:no-bitwise
	    return ~-encodeURI(value).split(/%..|./).length;
	}
	/** JSDoc */
	function jsonSize(value) {
	    return utf8Length(JSON.stringify(value));
	}
	/** JSDoc */
	function serializeValue(value) {
	    var type = Object.prototype.toString.call(value);
	    // Node.js REPL notation
	    if (typeof value === 'string') {
	        return string_1.truncate(value, 40);
	    }
	    else if (type === '[object Object]') {
	        return '[Object]';
	    }
	    else if (type === '[object Array]') {
	        return '[Array]';
	    }
	    else {
	        var normalized = normalizeValue(value);
	        return is_1.isPrimitive(normalized) ? "" + normalized : type;
	    }
	}
	/** JSDoc */
	function serializeObject(value, depth) {
	    if (depth === 0) {
	        return serializeValue(value);
	    }
	    if (is_1.isPlainObject(value)) {
	        var serialized_1 = {};
	        var val_1 = value;
	        Object.keys(val_1).forEach(function (key) {
	            serialized_1[key] = serializeObject(val_1[key], depth - 1);
	        });
	        return serialized_1;
	    }
	    else if (is_1.isArray(value)) {
	        var val = value;
	        return val.map(function (v) { return serializeObject(v, depth - 1); });
	    }
	    return serializeValue(value);
	}
	exports.serializeObject = serializeObject;
	/** JSDoc */
	function limitObjectDepthToSize(object, depth, maxSize) {
	    if (depth === void 0) { depth = MAX_SERIALIZE_EXCEPTION_DEPTH; }
	    if (maxSize === void 0) { maxSize = MAX_SERIALIZE_EXCEPTION_SIZE; }
	    var serialized = serializeObject(object, depth);
	    if (jsonSize(serialize(serialized)) > maxSize) {
	        return limitObjectDepthToSize(object, depth - 1);
	    }
	    return serialized;
	}
	exports.limitObjectDepthToSize = limitObjectDepthToSize;
	/** JSDoc */
	function serializeKeysToEventMessage(keys, maxLength) {
	    if (maxLength === void 0) { maxLength = MAX_SERIALIZE_KEYS_LENGTH; }
	    if (!keys.length) {
	        return '[object has no keys]';
	    }
	    if (keys[0].length >= maxLength) {
	        return string_1.truncate(keys[0], maxLength);
	    }
	    for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {
	        var serialized = keys.slice(0, includedKeys).join(', ');
	        if (serialized.length > maxLength) {
	            continue;
	        }
	        if (includedKeys === keys.length) {
	            return serialized;
	        }
	        return string_1.truncate(serialized, maxLength);
	    }
	    return '';
	}
	exports.serializeKeysToEventMessage = serializeKeysToEventMessage;
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill
	/** JSDoc */
	function assign(target) {
	    var args = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        args[_i - 1] = arguments[_i];
	    }
	    if (target === null || target === undefined) {
	        throw new TypeError('Cannot convert undefined or null to object');
	    }
	    var to = Object(target);
	    // tslint:disable-next-line:prefer-for-of
	    for (var i = 0; i < args.length; i++) {
	        var source = args[i];
	        if (source !== null) {
	            for (var nextKey in source) {
	                if (Object.prototype.hasOwnProperty.call(source, nextKey)) {
	                    to[nextKey] = source[nextKey];
	                }
	            }
	        }
	    }
	    return to;
	}
	exports.assign = assign;
	/**
	 * Transforms Error object into an object literal with all it's attributes
	 * attached to it.
	 *
	 * Based on: https://github.com/ftlabs/js-abbreviate/blob/fa709e5f139e7770a71827b1893f22418097fbda/index.js#L95-L106
	 *
	 * @param error An Error containing all relevant information
	 * @returns An object with all error properties
	 */
	function objectifyError(error) {
	    // These properties are implemented as magical getters and don't show up in `for-in` loop
	    var err = {
	        message: error.message,
	        name: error.name,
	        stack: error.stack,
	    };
	    for (var i in error) {
	        if (Object.prototype.hasOwnProperty.call(error, i)) {
	            err[i] = error[i];
	        }
	    }
	    return err;
	}
	/**
	 * normalizeValue()
	 *
	 * Takes unserializable input and make it serializable friendly
	 *
	 * - translates undefined/NaN values to "[undefined]"/"[NaN]" respectively,
	 * - serializes Error objects
	 * - filter global objects
	 */
	function normalizeValue(value, key) {
	    if (key === 'domain' && typeof value === 'object' && value._events) {
	        return '[Domain]';
	    }
	    if (key === 'domainEmitter') {
	        return '[DomainEmitter]';
	    }
	    if (typeof global !== 'undefined' && value === global) {
	        return '[Global]';
	    }
	    if (typeof window !== 'undefined' && value === window) {
	        return '[Window]';
	    }
	    if (typeof document !== 'undefined' && value === document) {
	        return '[Document]';
	    }
	    // tslint:disable-next-line:strict-type-predicates
	    if (typeof Event !== 'undefined' && value instanceof Event) {
	        return Object.getPrototypeOf(value) ? value.constructor.name : 'Event';
	    }
	    // React's SyntheticEvent thingy
	    if (is_1.isSyntheticEvent(value)) {
	        return '[SyntheticEvent]';
	    }
	    if (is_1.isNaN(value)) {
	        return '[NaN]';
	    }
	    if (is_1.isUndefined(value)) {
	        return '[undefined]';
	    }
	    if (typeof value === 'function') {
	        return "[Function: " + (value.name || '<unknown-function-name>') + "]";
	    }
	    return value;
	}
	/**
	 * Decycles an object to make it safe for json serialization.
	 *
	 * @param obj Object to be decycled
	 * @param memo Optional Memo class handling decycling
	 */
	function decycle(obj, depth, memo) {
	    if (depth === void 0) { depth = +Infinity; }
	    if (memo === void 0) { memo = new memo_1.Memo(); }
	    if (depth === 0) {
	        return serializeValue(obj);
	    }
	    // If an object was normalized to its string form, we should just bail out as theres no point in going down that branch
	    var normalized = normalizeValue(obj);
	    if (is_1.isPrimitive(normalized)) {
	        return normalized;
	    }
	    // tslint:disable-next-line:no-unsafe-any
	    var source = (is_1.isError(obj) ? objectifyError(obj) : obj);
	    var copy = is_1.isArray(obj) ? [] : {};
	    if (memo.memoize(obj)) {
	        return '[Circular ~]';
	    }
	    for (var key in source) {
	        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
	        if (!Object.prototype.hasOwnProperty.call(source, key)) {
	            continue;
	        }
	        copy[key] = decycle(source[key], depth - 1, memo);
	    }
	    memo.unmemoize(obj);
	    return copy;
	}
	exports.decycle = decycle;
	/**
	 * serializer()
	 *
	 * Remove circular references,
	 * translates undefined/NaN values to "[undefined]"/"[NaN]" respectively,
	 * and takes care of Error objects serialization
	 */
	function serializer(options) {
	    if (options === void 0) { options = { normalize: true }; }
	    return function (key, value) {
	        // tslint:disable-next-line
	        return options.normalize ? normalizeValue(decycle(value, options.depth), key) : decycle(value, options.depth);
	    };
	}
	/**
	 * safeNormalize()
	 *
	 * Creates a copy of the input by applying serializer function on it and parsing it back to unify the data
	 */
	function safeNormalize(input, depth) {
	    try {
	        return JSON.parse(JSON.stringify(input, serializer({ normalize: true, depth: depth })));
	    }
	    catch (_oO) {
	        return '**non-serializable**';
	    }
	}
	exports.safeNormalize = safeNormalize;
	//# sourceMappingURL=object.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 799 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// tslint:disable:no-unsafe-any
	/**
	 * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.
	 */
	var Memo = /** @class */ (function () {
	    function Memo() {
	        // tslint:disable-next-line
	        this.hasWeakSet = typeof WeakSet === 'function';
	        this.inner = this.hasWeakSet ? new WeakSet() : [];
	    }
	    /**
	     * Sets obj to remember.
	     * @param obj Object to remember
	     */
	    Memo.prototype.memoize = function (obj) {
	        if (this.hasWeakSet) {
	            if (this.inner.has(obj)) {
	                return true;
	            }
	            this.inner.add(obj);
	            return false;
	        }
	        else {
	            // tslint:disable-next-line:prefer-for-of
	            for (var i = 0; i < this.inner.length; i++) {
	                var value = this.inner[i];
	                if (value === obj) {
	                    return true;
	                }
	            }
	            this.inner.push(obj);
	            return false;
	        }
	    };
	    /**
	     * Removes object from internal storage.
	     * @param obj Object to forget
	     */
	    Memo.prototype.unmemoize = function (obj) {
	        if (this.hasWeakSet) {
	            this.inner.delete(obj);
	        }
	        else {
	            for (var i = 0; i < this.inner.length; i++) {
	                if (this.inner[i] === obj) {
	                    this.inner.splice(i, 1);
	                    break;
	                }
	            }
	        }
	    };
	    return Memo;
	}());
	exports.Memo = Memo;
	//# sourceMappingURL=memo.js.map

/***/ }),
/* 800 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var is_1 = __webpack_require__(797);
	/**
	 * Truncates given string to the maximum characters count
	 *
	 * @param str An object that contains serializable values
	 * @param max Maximum number of characters in truncated string
	 * @returns string Encoded
	 */
	function truncate(str, max) {
	    if (max === void 0) { max = 0; }
	    if (max === 0 || !is_1.isString(str)) {
	        return str;
	    }
	    return str.length <= max ? str : str.substr(0, max) + "...";
	}
	exports.truncate = truncate;
	/**
	 * This is basically just `trim_line` from
	 * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67
	 *
	 * @param str An object that contains serializable values
	 * @param max Maximum number of characters in truncated string
	 * @returns string Encoded
	 */
	function snipLine(line, colno) {
	    var newLine = line;
	    var ll = newLine.length;
	    if (ll <= 150) {
	        return newLine;
	    }
	    if (colno > ll) {
	        colno = ll; // tslint:disable-line:no-parameter-reassignment
	    }
	    var start = Math.max(colno - 60, 0);
	    if (start < 5) {
	        start = 0;
	    }
	    var end = Math.min(start + 140, ll);
	    if (end > ll - 5) {
	        end = ll;
	    }
	    if (end === ll) {
	        start = Math.max(end - 140, 0);
	    }
	    newLine = newLine.slice(start, end);
	    if (start > 0) {
	        newLine = "'{snip} " + newLine;
	    }
	    if (end < ll) {
	        newLine += ' {snip}';
	    }
	    return newLine;
	}
	exports.snipLine = snipLine;
	/**
	 * Join values in array
	 * @param input array of values to be joined together
	 * @param delimiter string to be placed in-between values
	 * @returns Joined values
	 */
	function safeJoin(input, delimiter) {
	    if (!Array.isArray(input)) {
	        return '';
	    }
	    var output = [];
	    // tslint:disable-next-line:prefer-for-of
	    for (var i = 0; i < input.length; i++) {
	        var value = input[i];
	        try {
	            output.push(String(value));
	        }
	        catch (e) {
	            output.push('[value cannot be serialized]');
	        }
	    }
	    return output.join(delimiter);
	}
	exports.safeJoin = safeJoin;
	/**
	 * Checks if given value is included in the target
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill
	 * @param target source string
	 * @param search string to be looked for
	 * @returns An answer
	 */
	function includes(target, search) {
	    if (search.length > target.length) {
	        return false;
	    }
	    else {
	        return target.indexOf(search) !== -1;
	    }
	}
	exports.includes = includes;
	//# sourceMappingURL=string.js.map

/***/ }),
/* 801 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var logger_1 = __webpack_require__(802);
	var misc_1 = __webpack_require__(796);
	var scope_1 = __webpack_require__(795);
	/**
	 * API compatibility version of this hub.
	 *
	 * WARNING: This number should only be incresed when the global interface
	 * changes a and new methods are introduced.
	 */
	exports.API_VERSION = 3;
	/**
	 * Internal class used to make sure we always have the latest internal functions
	 * working in case we have a version conflict.
	 */
	var Hub = /** @class */ (function () {
	    /**
	     * Creates a new instance of the hub, will push one {@link Layer} into the
	     * internal stack on creation.
	     *
	     * @param client bound to the hub.
	     * @param scope bound to the hub.
	     * @param version number, higher number means higher priority.
	     */
	    function Hub(client, scope, version) {
	        if (scope === void 0) { scope = new scope_1.Scope(); }
	        if (version === void 0) { version = exports.API_VERSION; }
	        this.version = version;
	        /** Is a {@link Layer}[] containing the client and scope */
	        this.stack = [];
	        this.stack.push({ client: client, scope: scope });
	    }
	    /**
	     * Internal helper function to call a method on the top client if it exists.
	     *
	     * @param method The method to call on the client/client.
	     * @param args Arguments to pass to the client/frontend.
	     */
	    Hub.prototype.invokeClient = function (method) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var _a;
	        var top = this.getStackTop();
	        if (top && top.client && top.client[method]) {
	            (_a = top.client)[method].apply(_a, tslib_1.__spread(args, [top.scope]));
	        }
	    };
	    /**
	     * Internal helper function to call an async method on the top client if it
	     * exists.
	     *
	     * @param method The method to call on the client/client.
	     * @param args Arguments to pass to the client/frontend.
	     */
	    Hub.prototype.invokeClientAsync = function (method) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var _a;
	        var top = this.getStackTop();
	        if (top && top.client && top.client[method]) {
	            (_a = top.client)[method].apply(_a, tslib_1.__spread(args, [top.scope])).catch(function (err) {
	                logger_1.logger.error(err);
	            });
	        }
	    };
	    /**
	     * Checks if this hub's version is older than the given version.
	     *
	     * @param version A version number to compare to.
	     * @return True if the given version is newer; otherwise false.
	     */
	    Hub.prototype.isOlderThan = function (version) {
	        return this.version < version;
	    };
	    /**
	     * This binds the given client to the current scope.
	     * @param client An SDK client (client) instance.
	     */
	    Hub.prototype.bindClient = function (client) {
	        var top = this.getStackTop();
	        top.client = client;
	        if (top && top.scope && client) {
	            top.scope.addScopeListener(function (s) {
	                if (client.getBackend) {
	                    try {
	                        client.getBackend().storeScope(s);
	                    }
	                    catch (_a) {
	                        // Do nothing
	                    }
	                }
	            });
	        }
	    };
	    /**
	     * Create a new scope to store context information.
	     *
	     * The scope will be layered on top of the current one. It is isolated, i.e. all
	     * breadcrumbs and context information added to this scope will be removed once
	     * the scope ends. Be sure to always remove this scope with {@link this.popScope}
	     * when the operation finishes or throws.
	     *
	     * @returns Scope, the new cloned scope
	     */
	    Hub.prototype.pushScope = function () {
	        // We want to clone the content of prev scope
	        var stack = this.getStack();
	        var parentScope = stack.length > 0 ? stack[stack.length - 1].scope : undefined;
	        var scope = scope_1.Scope.clone(parentScope);
	        this.getStack().push({
	            client: this.getClient(),
	            scope: scope,
	        });
	        return scope;
	    };
	    /**
	     * Removes a previously pushed scope from the stack.
	     *
	     * This restores the state before the scope was pushed. All breadcrumbs and
	     * context information added since the last call to {@link this.pushScope} are
	     * discarded.
	     */
	    Hub.prototype.popScope = function () {
	        return this.getStack().pop() !== undefined;
	    };
	    /**
	     * Creates a new scope with and executes the given operation within.
	     * The scope is automatically removed once the operation
	     * finishes or throws.
	     *
	     * This is essentially a convenience function for:
	     *
	     *     pushScope();
	     *     callback();
	     *     popScope();
	     *
	     * @param callback that will be enclosed into push/popScope.
	     */
	    Hub.prototype.withScope = function (callback) {
	        var scope = this.pushScope();
	        try {
	            callback(scope);
	        }
	        finally {
	            this.popScope();
	        }
	    };
	    /** Returns the client of the top stack. */
	    Hub.prototype.getClient = function () {
	        return this.getStackTop().client;
	    };
	    /** Returns the scope of the top stack. */
	    Hub.prototype.getScope = function () {
	        return this.getStackTop().scope;
	    };
	    /** Returns the scope stack for domains or the process. */
	    Hub.prototype.getStack = function () {
	        return this.stack;
	    };
	    /** Returns the topmost scope layer in the order domain > local > process. */
	    Hub.prototype.getStackTop = function () {
	        return this.stack[this.stack.length - 1];
	    };
	    /**
	     * Captures an exception event and sends it to Sentry.
	     *
	     * @param exception An exception-like object.
	     * @param hint May contain additional information about the original exception.
	     * @returns The generated eventId.
	     */
	    Hub.prototype.captureException = function (exception, hint) {
	        var eventId = (this._lastEventId = misc_1.uuid4());
	        this.invokeClientAsync('captureException', exception, tslib_1.__assign({}, hint, { event_id: eventId }));
	        return eventId;
	    };
	    /**
	     * Captures a message event and sends it to Sentry.
	     *
	     * @param message The message to send to Sentry.
	     * @param level Define the level of the message.
	     * @param hint May contain additional information about the original exception.
	     * @returns The generated eventId.
	     */
	    Hub.prototype.captureMessage = function (message, level, hint) {
	        var eventId = (this._lastEventId = misc_1.uuid4());
	        this.invokeClientAsync('captureMessage', message, level, tslib_1.__assign({}, hint, { event_id: eventId }));
	        return eventId;
	    };
	    /**
	     * Captures a manually created event and sends it to Sentry.
	     *
	     * @param event The event to send to Sentry.
	     * @param hint May contain additional information about the original exception.
	     */
	    Hub.prototype.captureEvent = function (event, hint) {
	        var eventId = (this._lastEventId = misc_1.uuid4());
	        this.invokeClientAsync('captureEvent', event, tslib_1.__assign({}, hint, { event_id: eventId }));
	        return eventId;
	    };
	    /**
	     * This is the getter for lastEventId.
	     *
	     * @returns The last event id of a captured event.
	     */
	    Hub.prototype.lastEventId = function () {
	        return this._lastEventId;
	    };
	    /**
	     * Records a new breadcrumb which will be attached to future events.
	     *
	     * Breadcrumbs will be added to subsequent events to provide more context on
	     * user's actions prior to an error or crash.
	     *
	     * @param breadcrumb The breadcrumb to record.
	     * @param hint May contain additional information about the original breadcrumb.
	     */
	    Hub.prototype.addBreadcrumb = function (breadcrumb, hint) {
	        this.invokeClient('addBreadcrumb', breadcrumb, tslib_1.__assign({}, hint));
	    };
	    /**
	     * Callback to set context information onto the scope.
	     *
	     * @param callback Callback function that receives Scope.
	     */
	    Hub.prototype.configureScope = function (callback) {
	        var top = this.getStackTop();
	        if (top.scope && top.client) {
	            // TODO: freeze flag
	            callback(top.scope);
	        }
	    };
	    /**
	     * For the duraction of the callback, this hub will be set as the global current Hub.
	     * This function is useful if you want to run your own client and hook into an already initialized one
	     * e.g.: Reporting issues to your own sentry when running in your component while still using the users configuration.
	     */
	    Hub.prototype.run = function (callback) {
	        var oldHub = makeMain(this);
	        try {
	            callback(this);
	        }
	        finally {
	            makeMain(oldHub);
	        }
	    };
	    /** Returns the integration if installed on the current client. */
	    Hub.prototype.getIntegration = function (integration) {
	        try {
	            return this.getClient().getIntegration(integration);
	        }
	        catch (_oO) {
	            logger_1.logger.warn("Cannot retrieve integration " + integration.id + " from the current Hub");
	            return null;
	        }
	    };
	    return Hub;
	}());
	exports.Hub = Hub;
	/** Returns the global shim registry. */
	function getMainCarrier() {
	    var carrier = misc_1.getGlobalObject();
	    carrier.__SENTRY__ = carrier.__SENTRY__ || {
	        hub: undefined,
	    };
	    return carrier;
	}
	exports.getMainCarrier = getMainCarrier;
	/**
	 * Replaces the current main hub with the passed one on the global object
	 *
	 * @returns The old replaced hub
	 */
	function makeMain(hub) {
	    var registry = getMainCarrier();
	    var oldHub = getHubFromCarrier(registry);
	    setHubOnCarrier(registry, hub);
	    return oldHub;
	}
	exports.makeMain = makeMain;
	/**
	 * Returns the default hub instance.
	 *
	 * If a hub is already registered in the global carrier but this module
	 * contains a more recent version, it replaces the registered version.
	 * Otherwise, the currently registered hub will be returned.
	 */
	function getCurrentHub() {
	    // Get main carrier (global for every environment)
	    var registry = getMainCarrier();
	    // If there's no hub, or its an old API, assign a new one
	    if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(exports.API_VERSION)) {
	        setHubOnCarrier(registry, new Hub());
	    }
	    // Prefer domains over global if they are there
	    try {
	        // We need to use `dynamicRequire` because `require` on it's own will be optimized by webpack.
	        // We do not want this to happen, we need to try to `require` the domain node module and fail if we are in browser
	        // for example so we do not have to shim it and use `getCurrentHub` universally.
	        var domain = misc_1.dynamicRequire(module, 'domain');
	        var activeDomain = domain.active;
	        // If there no active domain, just return global hub
	        if (!activeDomain) {
	            return getHubFromCarrier(registry);
	        }
	        // If there's no hub on current domain, or its an old API, assign a new one
	        if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(exports.API_VERSION)) {
	            var registryHubTopStack = getHubFromCarrier(registry).getStackTop();
	            setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, scope_1.Scope.clone(registryHubTopStack.scope)));
	        }
	        // Return hub that lives on a domain
	        return getHubFromCarrier(activeDomain);
	    }
	    catch (_Oo) {
	        // Return hub that lives on a global object
	        return getHubFromCarrier(registry);
	    }
	}
	exports.getCurrentHub = getCurrentHub;
	/**
	 * This will tell whether a carrier has a hub on it or not
	 * @param carrier object
	 */
	function hasHubOnCarrier(carrier) {
	    if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	exports.hasHubOnCarrier = hasHubOnCarrier;
	/**
	 * This will create a new {@link Hub} and add to the passed object on
	 * __SENTRY__.hub.
	 * @param carrier object
	 */
	function getHubFromCarrier(carrier) {
	    if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {
	        return carrier.__SENTRY__.hub;
	    }
	    else {
	        carrier.__SENTRY__ = {};
	        carrier.__SENTRY__.hub = new Hub();
	        return carrier.__SENTRY__.hub;
	    }
	}
	exports.getHubFromCarrier = getHubFromCarrier;
	/**
	 * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute
	 * @param carrier object
	 * @param hub Hub
	 */
	function setHubOnCarrier(carrier, hub) {
	    if (!carrier) {
	        return false;
	    }
	    carrier.__SENTRY__ = carrier.__SENTRY__ || {};
	    carrier.__SENTRY__.hub = hub;
	    return true;
	}
	exports.setHubOnCarrier = setHubOnCarrier;
	//# sourceMappingURL=hub.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(44)(module)))

/***/ }),
/* 802 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var misc_1 = __webpack_require__(796);
	// TODO: Implement different loggers for different environments
	var global = misc_1.getGlobalObject();
	/** JSDoc */
	var Logger = /** @class */ (function () {
	    /** JSDoc */
	    function Logger() {
	        this.enabled = false;
	    }
	    /** JSDoc */
	    Logger.prototype.disable = function () {
	        this.enabled = false;
	    };
	    /** JSDoc */
	    Logger.prototype.enable = function () {
	        this.enabled = true;
	    };
	    /** JSDoc */
	    Logger.prototype.log = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (!this.enabled) {
	            return;
	        }
	        misc_1.consoleSandbox(function () {
	            global.console.log("Sentry Logger [Log]: " + args.join(' ')); // tslint:disable-line:no-console
	        });
	    };
	    /** JSDoc */
	    Logger.prototype.warn = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (!this.enabled) {
	            return;
	        }
	        misc_1.consoleSandbox(function () {
	            global.console.warn("Sentry Logger [Warn]: " + args.join(' ')); // tslint:disable-line:no-console
	        });
	    };
	    /** JSDoc */
	    Logger.prototype.error = function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (!this.enabled) {
	            return;
	        }
	        misc_1.consoleSandbox(function () {
	            global.console.error("Sentry Logger [Error]: " + args.join(' ')); // tslint:disable-line:no-console
	        });
	    };
	    return Logger;
	}());
	var logger = new Logger();
	exports.logger = logger;
	//# sourceMappingURL=logger.js.map

/***/ }),
/* 803 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var object_1 = __webpack_require__(798);
	var dsn_1 = __webpack_require__(804);
	var SENTRY_API_VERSION = '7';
	/** Helper class to provide urls to different Sentry endpoints. */
	var API = /** @class */ (function () {
	    /** Create a new instance of API */
	    function API(dsn) {
	        this.dsn = dsn;
	        this.dsnObject = new dsn_1.Dsn(dsn);
	    }
	    /** Returns the Dsn object. */
	    API.prototype.getDsn = function () {
	        return this.dsnObject;
	    };
	    /** Returns a string with auth headers in the url to the store endpoint. */
	    API.prototype.getStoreEndpoint = function () {
	        return "" + this.getBaseUrl() + this.getStoreEndpointPath();
	    };
	    /** Returns the store endpoint with auth added in url encoded. */
	    API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {
	        var dsn = this.dsnObject;
	        var auth = {
	            sentry_key: dsn.user,
	            sentry_version: SENTRY_API_VERSION,
	        };
	        // Auth is intentionally sent as part of query string (NOT as custom HTTP header)
	        // to avoid preflight CORS requests
	        return this.getStoreEndpoint() + "?" + object_1.urlEncode(auth);
	    };
	    /** Returns the base path of the url including the port. */
	    API.prototype.getBaseUrl = function () {
	        var dsn = this.dsnObject;
	        var protocol = dsn.protocol ? dsn.protocol + ":" : '';
	        var port = dsn.port ? ":" + dsn.port : '';
	        return protocol + "//" + dsn.host + port;
	    };
	    /** Returns only the path component for the store endpoint. */
	    API.prototype.getStoreEndpointPath = function () {
	        var dsn = this.dsnObject;
	        return (dsn.path ? "/" + dsn.path : '') + "/api/" + dsn.projectId + "/store/";
	    };
	    /** Returns an object that can be used in request headers. */
	    API.prototype.getRequestHeaders = function (clientName, clientVersion) {
	        var dsn = this.dsnObject;
	        var header = ["Sentry sentry_version=" + SENTRY_API_VERSION];
	        header.push("sentry_timestamp=" + new Date().getTime());
	        header.push("sentry_client=" + clientName + "/" + clientVersion);
	        header.push("sentry_key=" + dsn.user);
	        if (dsn.pass) {
	            header.push("sentry_secret=" + dsn.pass);
	        }
	        return {
	            'Content-Type': 'application/json',
	            'X-Sentry-Auth': header.join(', '),
	        };
	    };
	    /** Returns the url to the report dialog endpoint. */
	    API.prototype.getReportDialogEndpoint = function (dialogOptions) {
	        if (dialogOptions === void 0) { dialogOptions = {}; }
	        var dsn = this.dsnObject;
	        var endpoint = "" + this.getBaseUrl() + (dsn.path ? "/" + dsn.path : '') + "/api/embed/error-page/";
	        var encodedOptions = [];
	        encodedOptions.push("dsn=" + dsn.toString());
	        for (var key in dialogOptions) {
	            if (key === 'user') {
	                if (!dialogOptions.user) {
	                    continue;
	                }
	                if (dialogOptions.user.name) {
	                    encodedOptions.push("name=" + encodeURIComponent(dialogOptions.user.name));
	                }
	                if (dialogOptions.user.email) {
	                    encodedOptions.push("email=" + encodeURIComponent(dialogOptions.user.email));
	                }
	            }
	            else {
	                encodedOptions.push(encodeURIComponent(key) + "=" + encodeURIComponent(dialogOptions[key]));
	            }
	        }
	        if (encodedOptions.length) {
	            return endpoint + "?" + encodedOptions.join('&');
	        }
	        return endpoint;
	    };
	    return API;
	}());
	exports.API = API;
	//# sourceMappingURL=api.js.map

/***/ }),
/* 804 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var is_1 = __webpack_require__(797);
	var object_1 = __webpack_require__(798);
	var error_1 = __webpack_require__(805);
	/** Regular expression used to parse a Dsn. */
	var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w\.-]+)(?::(\d+))?\/(.+)/;
	/** The Sentry Dsn, identifying a Sentry instance and project. */
	var Dsn = /** @class */ (function () {
	    /** Creates a new Dsn component */
	    function Dsn(from) {
	        if (typeof from === 'string') {
	            this.fromString(from);
	        }
	        else {
	            this.fromComponents(from);
	        }
	        this.validate();
	    }
	    /**
	     * Renders the string representation of this Dsn.
	     *
	     * By default, this will render the public representation without the password
	     * component. To get the deprecated private representation, set `withPassword`
	     * to true.
	     *
	     * @param withPassword When set to true, the password will be included.
	     */
	    Dsn.prototype.toString = function (withPassword) {
	        if (withPassword === void 0) { withPassword = false; }
	        // tslint:disable-next-line:no-this-assignment
	        var _a = this, host = _a.host, path = _a.path, pass = _a.pass, port = _a.port, projectId = _a.projectId, protocol = _a.protocol, user = _a.user;
	        return (protocol + "://" + user + (withPassword && pass ? ":" + pass : '') +
	            ("@" + host + (port ? ":" + port : '') + "/" + (path ? path + "/" : path) + projectId));
	    };
	    /** Parses a string into this Dsn. */
	    Dsn.prototype.fromString = function (str) {
	        var match = DSN_REGEX.exec(str);
	        if (!match) {
	            throw new error_1.SentryError('Invalid Dsn');
	        }
	        var _a = tslib_1.__read(match.slice(1), 6), protocol = _a[0], user = _a[1], _b = _a[2], pass = _b === void 0 ? '' : _b, host = _a[3], _c = _a[4], port = _c === void 0 ? '' : _c, lastPath = _a[5];
	        var path = '';
	        var projectId = lastPath;
	        var split = projectId.split('/');
	        if (split.length > 1) {
	            path = split.slice(0, -1).join('/');
	            projectId = split.pop();
	        }
	        object_1.assign(this, { host: host, pass: pass, path: path, projectId: projectId, port: port, protocol: protocol, user: user });
	    };
	    /** Maps Dsn components into this instance. */
	    Dsn.prototype.fromComponents = function (components) {
	        this.protocol = components.protocol;
	        this.user = components.user;
	        this.pass = components.pass || '';
	        this.host = components.host;
	        this.port = components.port || '';
	        this.path = components.path || '';
	        this.projectId = components.projectId;
	    };
	    /** Validates this Dsn and throws on error. */
	    Dsn.prototype.validate = function () {
	        var e_1, _a;
	        try {
	            for (var _b = tslib_1.__values(['protocol', 'user', 'host', 'projectId']), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var component = _c.value;
	                if (!this[component]) {
	                    throw new error_1.SentryError("Invalid Dsn: Missing " + component);
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        if (this.protocol !== 'http' && this.protocol !== 'https') {
	            throw new error_1.SentryError("Invalid Dsn: Unsupported protocol \"" + this.protocol + "\"");
	        }
	        if (this.port && is_1.isNaN(parseInt(this.port, 10))) {
	            throw new error_1.SentryError("Invalid Dsn: Invalid port number \"" + this.port + "\"");
	        }
	    };
	    return Dsn;
	}());
	exports.Dsn = Dsn;
	//# sourceMappingURL=dsn.js.map

/***/ }),
/* 805 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	/** An error emitted by Sentry SDKs and related utilities. */
	var SentryError = /** @class */ (function (_super) {
	    tslib_1.__extends(SentryError, _super);
	    function SentryError(message) {
	        var _newTarget = this.constructor;
	        var _this = _super.call(this, message) || this;
	        _this.message = message;
	        // tslint:disable:no-unsafe-any
	        _this.name = _newTarget.prototype.constructor.name;
	        Object.setPrototypeOf(_this, _newTarget.prototype);
	        return _this;
	    }
	    return SentryError;
	}(Error));
	exports.SentryError = SentryError;
	//# sourceMappingURL=error.js.map

/***/ }),
/* 806 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var types_1 = __webpack_require__(807);
	var async_1 = __webpack_require__(808);
	var is_1 = __webpack_require__(797);
	var logger_1 = __webpack_require__(802);
	var misc_1 = __webpack_require__(796);
	var string_1 = __webpack_require__(800);
	var dsn_1 = __webpack_require__(804);
	var integration_1 = __webpack_require__(809);
	var promisebuffer_1 = __webpack_require__(810);
	/**
	 * Default maximum number of breadcrumbs added to an event. Can be overwritten
	 * with {@link Options.maxBreadcrumbs}.
	 */
	var DEFAULT_BREADCRUMBS = 30;
	/**
	 * Absolute maximum number of breadcrumbs added to an event. The
	 * `maxBreadcrumbs` option cannot be higher than this value.
	 */
	var MAX_BREADCRUMBS = 100;
	/**
	 * By default, truncates URL values to 250 chars
	 */
	var MAX_URL_LENGTH = 250;
	/**
	 * Base implementation for all JavaScript SDK clients.
	 *
	 * Call the constructor with the corresponding backend constructor and options
	 * specific to the client subclass. To access these options later, use
	 * {@link Client.getOptions}. Also, the Backend instance is available via
	 * {@link Client.getBackend}.
	 *
	 * If a Dsn is specified in the options, it will be parsed and stored. Use
	 * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is
	 * invalid, the constructor will throw a {@link SentryException}. Note that
	 * without a valid Dsn, the SDK will not send any events to Sentry.
	 *
	 * Before sending an event via the backend, it is passed through
	 * {@link BaseClient.prepareEvent} to add SDK information and scope data
	 * (breadcrumbs and context). To add more custom information, override this
	 * method and extend the resulting prepared event.
	 *
	 * To issue automatically created events (e.g. via instrumentation), use
	 * {@link Client.captureEvent}. It will prepare the event and pass it through
	 * the callback lifecycle. To issue auto-breadcrumbs, use
	 * {@link Client.addBreadcrumb}.
	 *
	 * @example
	 * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {
	 *   public constructor(options: NodeOptions) {
	 *     super(NodeBackend, options);
	 *   }
	 *
	 *   // ...
	 * }
	 */
	var BaseClient = /** @class */ (function () {
	    /**
	     * Initializes this client instance.
	     *
	     * @param backendClass A constructor function to create the backend.
	     * @param options Options for the client.
	     */
	    function BaseClient(backendClass, options) {
	        /** A simple buffer holding all requests. */
	        this.buffer = new promisebuffer_1.PromiseBuffer();
	        this.backend = new backendClass(options);
	        this.options = options;
	        if (options.dsn) {
	            this.dsn = new dsn_1.Dsn(options.dsn);
	        }
	        // We have to setup the integrations in the constructor since we do not want
	        // that anyone needs to call client.install();
	        this.integrations = integration_1.setupIntegrations(this.options);
	    }
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.install = function () {
	        if (!this.isEnabled()) {
	            return (this.installed = false);
	        }
	        var backend = this.getBackend();
	        if (!this.installed && backend.install) {
	            backend.install();
	        }
	        return (this.installed = true);
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.captureException = function (exception, hint, scope) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return tslib_1.__generator(this, function (_a) {
	                return [2 /*return*/, this.buffer.add((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                        var event;
	                        return tslib_1.__generator(this, function (_a) {
	                            switch (_a.label) {
	                                case 0: return [4 /*yield*/, this.getBackend().eventFromException(exception, hint)];
	                                case 1:
	                                    event = _a.sent();
	                                    return [2 /*return*/, this.captureEvent(event, hint, scope)];
	                            }
	                        });
	                    }); })())];
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.captureMessage = function (message, level, hint, scope) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return tslib_1.__generator(this, function (_a) {
	                return [2 /*return*/, this.buffer.add((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                        var event, _a;
	                        return tslib_1.__generator(this, function (_b) {
	                            switch (_b.label) {
	                                case 0:
	                                    if (!is_1.isPrimitive(message)) return [3 /*break*/, 2];
	                                    return [4 /*yield*/, this.getBackend().eventFromMessage("" + message, level, hint)];
	                                case 1:
	                                    _a = _b.sent();
	                                    return [3 /*break*/, 4];
	                                case 2: return [4 /*yield*/, this.getBackend().eventFromException(message, hint)];
	                                case 3:
	                                    _a = _b.sent();
	                                    _b.label = 4;
	                                case 4:
	                                    event = _a;
	                                    return [2 /*return*/, this.captureEvent(event, hint, scope)];
	                            }
	                        });
	                    }); })())];
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.captureEvent = function (event, hint, scope) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return tslib_1.__generator(this, function (_a) {
	                // Adding this here is technically not correct since if you call captureMessage/captureException it's already
	                // buffered. But since we not really need the count and we only need to know if the buffer is full or not,
	                // This is fine...
	                return [2 /*return*/, this.buffer.add((function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                        var _this = this;
	                        return tslib_1.__generator(this, function (_a) {
	                            return [2 /*return*/, this.processEvent(event, function (finalEvent) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
	                                    return [2 /*return*/, this.getBackend().sendEvent(finalEvent)];
	                                }); }); }, hint, scope)];
	                        });
	                    }); })())];
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.addBreadcrumb = function (breadcrumb, hint, scope) {
	        var _a = this.getOptions(), beforeBreadcrumb = _a.beforeBreadcrumb, _b = _a.maxBreadcrumbs, maxBreadcrumbs = _b === void 0 ? DEFAULT_BREADCRUMBS : _b;
	        if (maxBreadcrumbs <= 0) {
	            return;
	        }
	        var timestamp = new Date().getTime() / 1000;
	        var mergedBreadcrumb = tslib_1.__assign({ timestamp: timestamp }, breadcrumb);
	        var finalBreadcrumb = beforeBreadcrumb
	            ? misc_1.consoleSandbox(function () { return beforeBreadcrumb(mergedBreadcrumb, hint); })
	            : mergedBreadcrumb;
	        if (finalBreadcrumb === null) {
	            return;
	        }
	        if (this.getBackend().storeBreadcrumb(finalBreadcrumb) && scope) {
	            scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.getDsn = function () {
	        return this.dsn;
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.getOptions = function () {
	        return this.options;
	    };
	    /** Returns the current backend. */
	    BaseClient.prototype.getBackend = function () {
	        return this.backend;
	    };
	    /** Determines whether this SDK is enabled and a valid Dsn is present. */
	    BaseClient.prototype.isEnabled = function () {
	        return this.getOptions().enabled !== false && this.dsn !== undefined;
	    };
	    /**
	     * Adds common information to events.
	     *
	     * The information includes release and environment from `options`,
	     * breadcrumbs and context (extra, tags and user) from the scope.
	     *
	     * Information that is already present in the event is never overwritten. For
	     * nested objects, such as the context, keys are merged.
	     *
	     * @param event The original event.
	     * @param hint May contain additional informartion about the original exception.
	     * @param scope A scope containing event metadata.
	     * @returns A new event with more information.
	     */
	    BaseClient.prototype.prepareEvent = function (event, scope, hint) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _a, environment, _b, maxBreadcrumbs, release, dist, prepared, exception, request;
	            return tslib_1.__generator(this, function (_c) {
	                _a = this.getOptions(), environment = _a.environment, _b = _a.maxBreadcrumbs, maxBreadcrumbs = _b === void 0 ? DEFAULT_BREADCRUMBS : _b, release = _a.release, dist = _a.dist;
	                prepared = tslib_1.__assign({}, event);
	                if (prepared.environment === undefined && environment !== undefined) {
	                    prepared.environment = environment;
	                }
	                if (prepared.release === undefined && release !== undefined) {
	                    prepared.release = release;
	                }
	                if (prepared.dist === undefined && dist !== undefined) {
	                    prepared.dist = dist;
	                }
	                if (prepared.message) {
	                    prepared.message = string_1.truncate(prepared.message, MAX_URL_LENGTH);
	                }
	                exception = prepared.exception && prepared.exception.values && prepared.exception.values[0];
	                if (exception && exception.value) {
	                    exception.value = string_1.truncate(exception.value, MAX_URL_LENGTH);
	                }
	                request = prepared.request;
	                if (request && request.url) {
	                    request.url = string_1.truncate(request.url, MAX_URL_LENGTH);
	                }
	                if (prepared.event_id === undefined) {
	                    prepared.event_id = misc_1.uuid4();
	                }
	                // This should be the last thing called, since we want that
	                // {@link Hub.addEventProcessor} gets the finished prepared event.
	                if (scope) {
	                    return [2 /*return*/, scope.applyToEvent(prepared, hint, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS))];
	                }
	                return [2 /*return*/, prepared];
	            });
	        });
	    };
	    /**
	     * Processes an event (either error or message) and sends it to Sentry.
	     *
	     * This also adds breadcrumbs and context information to the event. However,
	     * platform specific meta data (such as the User's IP address) must be added
	     * by the SDK implementor.
	     *
	     * The returned event status offers clues to whether the event was sent to
	     * Sentry and accepted there. If the {@link Options.shouldSend} hook returns
	     * `false`, the status will be {@link SendStatus.Skipped}. If the rate limit
	     * was exceeded, the status will be {@link SendStatus.RateLimit}.
	     *
	     * @param event The event to send to Sentry.
	     * @param send A function to actually send the event.
	     * @param scope A scope containing event metadata.
	     * @param hint May contain additional informartion about the original exception.
	     * @returns A Promise that resolves with the event status.
	     */
	    BaseClient.prototype.processEvent = function (event, send, hint, scope) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _a, beforeSend, sampleRate, prepared, finalEvent, isInternalException, exception_1, response, error_1;
	            return tslib_1.__generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        if (!this.isEnabled()) {
	                            return [2 /*return*/, {
	                                    status: types_1.Status.Skipped,
	                                }];
	                        }
	                        _a = this.getOptions(), beforeSend = _a.beforeSend, sampleRate = _a.sampleRate;
	                        // 1.0 === 100% events are sent
	                        // 0.0 === 0% events are sent
	                        if (typeof sampleRate === 'number' && Math.random() > sampleRate) {
	                            return [2 /*return*/, {
	                                    status: types_1.Status.Skipped,
	                                }];
	                        }
	                        return [4 /*yield*/, this.prepareEvent(event, scope, hint)];
	                    case 1:
	                        prepared = _b.sent();
	                        if (prepared === null) {
	                            return [2 /*return*/, {
	                                    status: types_1.Status.Skipped,
	                                }];
	                        }
	                        finalEvent = prepared;
	                        _b.label = 2;
	                    case 2:
	                        _b.trys.push([2, 5, , 6]);
	                        isInternalException = hint && hint.data && hint.data.__sentry__ === true;
	                        if (!(!isInternalException && beforeSend)) return [3 /*break*/, 4];
	                        return [4 /*yield*/, beforeSend(prepared, hint)];
	                    case 3:
	                        finalEvent = _b.sent();
	                        if (typeof finalEvent === 'undefined') {
	                            logger_1.logger.error('`beforeSend` method has to return `null` or a valid event');
	                        }
	                        _b.label = 4;
	                    case 4: return [3 /*break*/, 6];
	                    case 5:
	                        exception_1 = _b.sent();
	                        async_1.forget(this.captureException(exception_1, {
	                            data: {
	                                __sentry__: true,
	                            },
	                            originalException: exception_1,
	                        }));
	                        return [2 /*return*/, {
	                                reason: 'Event processing in beforeSend method threw an exception',
	                                status: types_1.Status.Invalid,
	                            }];
	                    case 6:
	                        if (finalEvent === null) {
	                            return [2 /*return*/, {
	                                    reason: 'Event dropped due to being discarded by beforeSend method',
	                                    status: types_1.Status.Skipped,
	                                }];
	                        }
	                        _b.label = 7;
	                    case 7:
	                        _b.trys.push([7, 9, , 10]);
	                        return [4 /*yield*/, send(finalEvent)];
	                    case 8:
	                        response = _b.sent();
	                        response.event = finalEvent;
	                        if (response.status === types_1.Status.RateLimit) {
	                            // TODO: Handle rate limits and maintain a queue. For now, we require SDK
	                            // implementors to override this method and handle it themselves.
	                        }
	                        return [2 /*return*/, response];
	                    case 9:
	                        error_1 = _b.sent();
	                        // We have a catch here since the transport can reject the request internally.
	                        // If we do not catch this here, we will run into an endless loop.
	                        logger_1.logger.error("" + error_1);
	                        return [2 /*return*/, {
	                                reason: "" + error_1,
	                                status: types_1.Status.Failed,
	                            }];
	                    case 10: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.flush = function (timeout) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, Promise.all([
	                            this.getBackend()
	                                .getTransport()
	                                .close(timeout),
	                            this.buffer.drain(timeout),
	                        ])];
	                    case 1: return [2 /*return*/, (_a.sent()).reduce(function (prev, current) { return prev && current; })];
	                }
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.close = function (timeout) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                return [2 /*return*/, this.flush(timeout)];
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.getIntegrations = function () {
	        return this.integrations || {};
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseClient.prototype.getIntegration = function (integration) {
	        try {
	            return this.integrations[integration.id] || null;
	        }
	        catch (_oO) {
	            logger_1.logger.warn("Cannot retrieve integration " + integration.id + " from the current Client");
	            return null;
	        }
	    };
	    return BaseClient;
	}());
	exports.BaseClient = BaseClient;
	//# sourceMappingURL=baseclient.js.map

/***/ }),
/* 807 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/** JSDoc */
	var Severity;
	(function (Severity) {
	    /** JSDoc */
	    Severity["Fatal"] = "fatal";
	    /** JSDoc */
	    Severity["Error"] = "error";
	    /** JSDoc */
	    Severity["Warning"] = "warning";
	    /** JSDoc */
	    Severity["Log"] = "log";
	    /** JSDoc */
	    Severity["Info"] = "info";
	    /** JSDoc */
	    Severity["Debug"] = "debug";
	    /** JSDoc */
	    Severity["Critical"] = "critical";
	})(Severity = exports.Severity || (exports.Severity = {}));
	// tslint:disable:no-unnecessary-qualifier no-namespace
	(function (Severity) {
	    /**
	     * Converts a string-based level into a {@link Severity}.
	     *
	     * @param level string representation of Severity
	     * @returns Severity
	     */
	    function fromString(level) {
	        switch (level) {
	            case 'debug':
	                return Severity.Debug;
	            case 'info':
	                return Severity.Info;
	            case 'warn':
	            case 'warning':
	                return Severity.Warning;
	            case 'error':
	                return Severity.Error;
	            case 'fatal':
	                return Severity.Fatal;
	            case 'critical':
	                return Severity.Critical;
	            case 'log':
	            default:
	                return Severity.Log;
	        }
	    }
	    Severity.fromString = fromString;
	})(Severity = exports.Severity || (exports.Severity = {}));
	/** The status of an event. */
	var Status;
	(function (Status) {
	    /** The status could not be determined. */
	    Status["Unknown"] = "unknown";
	    /** The event was skipped due to configuration or callbacks. */
	    Status["Skipped"] = "skipped";
	    /** The event was sent to Sentry successfully. */
	    Status["Success"] = "success";
	    /** The client is currently rate limited and will try again later. */
	    Status["RateLimit"] = "rate_limit";
	    /** The event could not be processed. */
	    Status["Invalid"] = "invalid";
	    /** A server-side error ocurred during submission. */
	    Status["Failed"] = "failed";
	})(Status = exports.Status || (exports.Status = {}));
	// tslint:disable:no-unnecessary-qualifier no-namespace
	(function (Status) {
	    /**
	     * Converts a HTTP status code into a {@link Status}.
	     *
	     * @param code The HTTP response status code.
	     * @returns The send status or {@link Status.Unknown}.
	     */
	    function fromHttpCode(code) {
	        if (code >= 200 && code < 300) {
	            return Status.Success;
	        }
	        if (code === 429) {
	            return Status.RateLimit;
	        }
	        if (code >= 400 && code < 500) {
	            return Status.Invalid;
	        }
	        if (code >= 500) {
	            return Status.Failed;
	        }
	        return Status.Unknown;
	    }
	    Status.fromHttpCode = fromHttpCode;
	})(Status = exports.Status || (exports.Status = {}));
	//# sourceMappingURL=index.js.map

/***/ }),
/* 808 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	/**
	 * Consumes the promise and logs the error when it rejects.
	 * @param promise A promise to forget.
	 */
	function forget(promise) {
	    promise.catch(function (e) {
	        // TODO: Use a better logging mechanism
	        console.error(e);
	    });
	}
	exports.forget = forget;
	/**
	 * Helper to filter an array with asynchronous callbacks.
	 *
	 * @param array An array containing items to filter.
	 * @param predicate An async predicate evaluated on every item.
	 * @param thisArg Optional value passed as "this" into the callback.
	 * @returns An array containing only values where the callback returned true.
	 */
	function filterAsync(array, predicate, thisArg) {
	    return tslib_1.__awaiter(this, void 0, void 0, function () {
	        var verdicts;
	        return tslib_1.__generator(this, function (_a) {
	            switch (_a.label) {
	                case 0: return [4 /*yield*/, Promise.all(array.map(predicate, thisArg))];
	                case 1:
	                    verdicts = _a.sent();
	                    return [2 /*return*/, array.filter(function (_, index) { return verdicts[index]; })];
	            }
	        });
	    });
	}
	exports.filterAsync = filterAsync;
	//# sourceMappingURL=async.js.map

/***/ }),
/* 809 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var logger_1 = __webpack_require__(802);
	exports.installedIntegrations = [];
	/** Gets integration to install */
	function getIntegrationsToSetup(options) {
	    var e_1, _a, e_2, _b;
	    var defaultIntegrations = (options.defaultIntegrations && tslib_1.__spread(options.defaultIntegrations)) || [];
	    var userIntegrations = options.integrations;
	    var integrations = [];
	    if (Array.isArray(userIntegrations)) {
	        var userIntegrationsNames = userIntegrations.map(function (i) { return i.name; });
	        var pickedIntegrationsNames = [];
	        try {
	            // Leave only unique default integrations, that were not overridden with provided user integrations
	            for (var defaultIntegrations_1 = tslib_1.__values(defaultIntegrations), defaultIntegrations_1_1 = defaultIntegrations_1.next(); !defaultIntegrations_1_1.done; defaultIntegrations_1_1 = defaultIntegrations_1.next()) {
	                var defaultIntegration = defaultIntegrations_1_1.value;
	                if (userIntegrationsNames.indexOf(getIntegrationName(defaultIntegration)) === -1 &&
	                    pickedIntegrationsNames.indexOf(getIntegrationName(defaultIntegration)) === -1) {
	                    integrations.push(defaultIntegration);
	                    pickedIntegrationsNames.push(getIntegrationName(defaultIntegration));
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (defaultIntegrations_1_1 && !defaultIntegrations_1_1.done && (_a = defaultIntegrations_1.return)) _a.call(defaultIntegrations_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        try {
	            // Don't add same user integration twice
	            for (var userIntegrations_1 = tslib_1.__values(userIntegrations), userIntegrations_1_1 = userIntegrations_1.next(); !userIntegrations_1_1.done; userIntegrations_1_1 = userIntegrations_1.next()) {
	                var userIntegration = userIntegrations_1_1.value;
	                if (pickedIntegrationsNames.indexOf(getIntegrationName(userIntegration)) === -1) {
	                    integrations.push(userIntegration);
	                    pickedIntegrationsNames.push(getIntegrationName(userIntegration));
	                }
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (userIntegrations_1_1 && !userIntegrations_1_1.done && (_b = userIntegrations_1.return)) _b.call(userIntegrations_1);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    }
	    else if (typeof userIntegrations === 'function') {
	        integrations = userIntegrations(defaultIntegrations);
	        integrations = Array.isArray(integrations) ? integrations : [integrations];
	    }
	    else {
	        return tslib_1.__spread(defaultIntegrations);
	    }
	    return integrations;
	}
	exports.getIntegrationsToSetup = getIntegrationsToSetup;
	/** Setup given integration */
	function setupIntegration(integration, options) {
	    if (exports.installedIntegrations.indexOf(getIntegrationName(integration)) !== -1) {
	        return;
	    }
	    try {
	        integration.setupOnce();
	    }
	    catch (_Oo) {
	        /** @deprecated */
	        // TODO: Remove in v5
	        // tslint:disable:deprecation
	        if (integration.install) {
	            logger_1.logger.warn("Integration " + getIntegrationName(integration) + ": The install method is deprecated. Use \"setupOnce\".");
	            integration.install(options);
	        }
	        // tslint:enable:deprecation
	    }
	    exports.installedIntegrations.push(getIntegrationName(integration));
	    logger_1.logger.log("Integration installed: " + getIntegrationName(integration));
	}
	exports.setupIntegration = setupIntegration;
	/**
	 * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default
	 * integrations are added unless they were already provided before.
	 * @param integrations array of integration instances
	 * @param withDefault should enable default integrations
	 */
	function setupIntegrations(options) {
	    var integrations = {};
	    getIntegrationsToSetup(options).forEach(function (integration) {
	        integrations[getIntegrationName(integration)] = integration;
	        setupIntegration(integration, options);
	    });
	    return integrations;
	}
	exports.setupIntegrations = setupIntegrations;
	/**
	 * Returns the integration static id.
	 * @param integration Integration to retrieve id
	 */
	function getIntegrationName(integration) {
	    /**
	     * @depracted
	     */
	    // tslint:disable-next-line:no-unsafe-any
	    return integration.constructor.id || integration.name;
	}
	//# sourceMappingURL=integration.js.map

/***/ }),
/* 810 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var error_1 = __webpack_require__(805);
	/** A simple queue that holds promises. */
	var PromiseBuffer = /** @class */ (function () {
	    function PromiseBuffer(limit) {
	        this.limit = limit;
	        /** Internal set of queued Promises */
	        this.buffer = [];
	    }
	    /**
	     * Says if the buffer is ready to take more requests
	     */
	    PromiseBuffer.prototype.isReady = function () {
	        return this.limit === undefined || this.length() < this.limit;
	    };
	    /**
	     * Add a promise to the queue.
	     *
	     * @param task Can be any Promise<T>
	     * @returns The original promise.
	     */
	    PromiseBuffer.prototype.add = function (task) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return tslib_1.__generator(this, function (_a) {
	                if (!this.isReady()) {
	                    return [2 /*return*/, Promise.reject(new error_1.SentryError('Not adding Promise due to buffer limit reached.'))];
	                }
	                if (this.buffer.indexOf(task) === -1) {
	                    this.buffer.push(task);
	                }
	                task
	                    .then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
	                    return [2 /*return*/, this.remove(task)];
	                }); }); })
	                    .catch(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	                    return tslib_1.__generator(this, function (_a) {
	                        return [2 /*return*/, this.remove(task).catch(function () {
	                                // We have to add this catch here otherwise we have an unhandledPromiseRejection
	                                // because it's a new Promise chain.
	                            })];
	                    });
	                }); });
	                return [2 /*return*/, task];
	            });
	        });
	    };
	    /**
	     * Remove a promise to the queue.
	     *
	     * @param task Can be any Promise<T>
	     * @returns Removed promise.
	     */
	    PromiseBuffer.prototype.remove = function (task) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var removedTask;
	            return tslib_1.__generator(this, function (_a) {
	                removedTask = this.buffer.splice(this.buffer.indexOf(task), 1)[0];
	                return [2 /*return*/, removedTask];
	            });
	        });
	    };
	    /**
	     * This function returns the number of unresolved promises in the queue.
	     */
	    PromiseBuffer.prototype.length = function () {
	        return this.buffer.length;
	    };
	    /**
	     * This will drain the whole queue, returns true if queue is empty or drained.
	     * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.
	     *
	     * @param timeout Number in ms to wait until it resolves with false.
	     */
	    PromiseBuffer.prototype.drain = function (timeout) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return tslib_1.__generator(this, function (_a) {
	                return [2 /*return*/, new Promise(function (resolve) {
	                        var capturedSetTimeout = setTimeout(function () {
	                            if (timeout && timeout > 0) {
	                                resolve(false);
	                            }
	                        }, timeout);
	                        Promise.all(_this.buffer)
	                            .then(function () {
	                            clearTimeout(capturedSetTimeout);
	                            resolve(true);
	                        })
	                            .catch(function () {
	                            resolve(true);
	                        });
	                    })];
	            });
	        });
	    };
	    return PromiseBuffer;
	}());
	exports.PromiseBuffer = PromiseBuffer;
	//# sourceMappingURL=promisebuffer.js.map

/***/ }),
/* 811 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var logger_1 = __webpack_require__(802);
	var object_1 = __webpack_require__(798);
	var error_1 = __webpack_require__(805);
	var noop_1 = __webpack_require__(812);
	/**
	 * This is the base implemention of a Backend.
	 */
	var BaseBackend = /** @class */ (function () {
	    /** Creates a new browser backend instance. */
	    function BaseBackend(options) {
	        this.options = options;
	        if (!this.options.dsn) {
	            logger_1.logger.warn('No DSN provided, backend will not do anything.');
	        }
	        this.transport = this.setupTransport();
	    }
	    /**
	     * Sets up the transport so it can be used later to send requests.
	     */
	    BaseBackend.prototype.setupTransport = function () {
	        return new noop_1.NoopTransport();
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseBackend.prototype.eventFromException = function (_exception, _hint) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                throw new error_1.SentryError('Backend has to implement `eventFromException` method');
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseBackend.prototype.eventFromMessage = function (_message, _level, _hint) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                throw new error_1.SentryError('Backend has to implement `eventFromMessage` method');
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseBackend.prototype.sendEvent = function (event) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                // TODO: Remove with v5
	                // tslint:disable-next-line
	                if (this.transport.captureEvent) {
	                    // tslint:disable-next-line
	                    return [2 /*return*/, this.transport.captureEvent(event)];
	                }
	                // --------------------
	                return [2 /*return*/, this.transport.sendEvent(object_1.serialize(event))];
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseBackend.prototype.storeBreadcrumb = function (_) {
	        return true;
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseBackend.prototype.storeScope = function (_) {
	        // Noop
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseBackend.prototype.getTransport = function () {
	        return this.transport;
	    };
	    return BaseBackend;
	}());
	exports.BaseBackend = BaseBackend;
	//# sourceMappingURL=basebackend.js.map

/***/ }),
/* 812 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var types_1 = __webpack_require__(807);
	/** Noop transport */
	var NoopTransport = /** @class */ (function () {
	    function NoopTransport() {
	    }
	    /**
	     * @inheritDoc
	     */
	    NoopTransport.prototype.sendEvent = function (_) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                return [2 /*return*/, Promise.resolve({
	                        reason: "NoopTransport: Event has been skipped because no Dsn is configured.",
	                        status: types_1.Status.Skipped,
	                    })];
	            });
	        });
	    };
	    /**
	     * @inheritDoc
	     */
	    NoopTransport.prototype.close = function (_) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            return tslib_1.__generator(this, function (_a) {
	                return [2 /*return*/, Promise.resolve(true)];
	            });
	        });
	    };
	    return NoopTransport;
	}());
	exports.NoopTransport = NoopTransport;
	//# sourceMappingURL=noop.js.map

/***/ }),
/* 813 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/** Console logging verbosity for the SDK. */
	var LogLevel;
	(function (LogLevel) {
	    /** No logs will be generated. */
	    LogLevel[LogLevel["None"] = 0] = "None";
	    /** Only SDK internal errors will be logged. */
	    LogLevel[LogLevel["Error"] = 1] = "Error";
	    /** Information useful for debugging the SDK will be logged. */
	    LogLevel[LogLevel["Debug"] = 2] = "Debug";
	    /** All SDK actions will be logged. */
	    LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
	})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
	//# sourceMappingURL=interfaces.js.map

/***/ }),
/* 814 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var hub_1 = __webpack_require__(794);
	var logger_1 = __webpack_require__(802);
	/**
	 * Internal function to create a new SDK client instance. The client is
	 * installed and then bound to the current scope.
	 *
	 * @param clientClass The client class to instanciate.
	 * @param options Options to pass to the client.
	 * @returns The installed and bound client instance.
	 */
	function initAndBind(clientClass, options) {
	    if (options.debug === true) {
	        logger_1.logger.enable();
	    }
	    var client = new clientClass(options);
	    hub_1.getCurrentHub().bindClient(client);
	    client.install();
	}
	exports.initAndBind = initAndBind;
	//# sourceMappingURL=sdk.js.map

/***/ }),
/* 815 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var dedupe_1 = __webpack_require__(816);
	exports.Dedupe = dedupe_1.Dedupe;
	var functiontostring_1 = __webpack_require__(817);
	exports.FunctionToString = functiontostring_1.FunctionToString;
	var sdkinformation_1 = __webpack_require__(818);
	exports.SDKInformation = sdkinformation_1.SDKInformation;
	var inboundfilters_1 = __webpack_require__(819);
	exports.InboundFilters = inboundfilters_1.InboundFilters;
	var extraerrordata_1 = __webpack_require__(820);
	exports.ExtraErrorData = extraerrordata_1.ExtraErrorData;
	var debug_1 = __webpack_require__(821);
	exports.Debug = debug_1.Debug;
	var rewriteframes_1 = __webpack_require__(822);
	exports.RewriteFrames = rewriteframes_1.RewriteFrames;
	//# sourceMappingURL=index.js.map

/***/ }),
/* 816 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var hub_1 = __webpack_require__(794);
	var logger_1 = __webpack_require__(802);
	var misc_1 = __webpack_require__(796);
	/** Deduplication filter */
	var Dedupe = /** @class */ (function () {
	    function Dedupe() {
	        /**
	         * @inheritDoc
	         */
	        this.name = Dedupe.id;
	    }
	    /**
	     * @inheritDoc
	     */
	    Dedupe.prototype.setupOnce = function () {
	        var _this = this;
	        hub_1.addGlobalEventProcessor(function (currentEvent) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var self;
	            return tslib_1.__generator(this, function (_a) {
	                self = hub_1.getCurrentHub().getIntegration(Dedupe);
	                if (self) {
	                    // Juuust in case something goes wrong
	                    try {
	                        if (self.shouldDropEvent(currentEvent, self.previousEvent)) {
	                            return [2 /*return*/, null];
	                        }
	                    }
	                    catch (_oO) {
	                        return [2 /*return*/, (self.previousEvent = currentEvent)];
	                    }
	                    return [2 /*return*/, (self.previousEvent = currentEvent)];
	                }
	                return [2 /*return*/, currentEvent];
	            });
	        }); });
	    };
	    /** JSDoc */
	    Dedupe.prototype.shouldDropEvent = function (currentEvent, previousEvent) {
	        if (!previousEvent) {
	            return false;
	        }
	        if (this.isSameMessageEvent(currentEvent, previousEvent)) {
	            logger_1.logger.warn("Event dropped due to being a duplicate of previous event (same message).\nEvent: " + misc_1.getEventDescription(currentEvent));
	            return true;
	        }
	        if (this.isSameExceptionEvent(currentEvent, previousEvent)) {
	            logger_1.logger.warn("Event dropped due to being a duplicate of previous event (same exception).\nEvent: " + misc_1.getEventDescription(currentEvent));
	            return true;
	        }
	        return false;
	    };
	    /** JSDoc */
	    Dedupe.prototype.isSameMessageEvent = function (currentEvent, previousEvent) {
	        var currentMessage = currentEvent.message;
	        var previousMessage = previousEvent.message;
	        // If no event has a message, they were both exceptions, so bail out
	        if (!currentMessage && !previousMessage) {
	            return false;
	        }
	        // If only one event has a stacktrace, but not the other one, they are not the same
	        if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {
	            return false;
	        }
	        if (currentMessage !== previousMessage) {
	            return false;
	        }
	        if (!this.isSameFingerprint(currentEvent, previousEvent)) {
	            return false;
	        }
	        if (!this.isSameStacktrace(currentEvent, previousEvent)) {
	            return false;
	        }
	        return true;
	    };
	    /** JSDoc */
	    Dedupe.prototype.getFramesFromEvent = function (event) {
	        var exception = event.exception;
	        if (exception) {
	            try {
	                // @ts-ignore
	                return exception.values[0].stacktrace.frames;
	            }
	            catch (_oO) {
	                return undefined;
	            }
	        }
	        else if (event.stacktrace) {
	            return event.stacktrace.frames;
	        }
	        else {
	            return undefined;
	        }
	    };
	    /** JSDoc */
	    Dedupe.prototype.isSameStacktrace = function (currentEvent, previousEvent) {
	        var currentFrames = this.getFramesFromEvent(currentEvent);
	        var previousFrames = this.getFramesFromEvent(previousEvent);
	        // If no event has a fingerprint, they are assumed to be the same
	        if (!currentFrames && !previousFrames) {
	            return true;
	        }
	        // If only one event has a stacktrace, but not the other one, they are not the same
	        if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {
	            return false;
	        }
	        currentFrames = currentFrames;
	        previousFrames = previousFrames;
	        // If number of frames differ, they are not the same
	        if (previousFrames.length !== currentFrames.length) {
	            return false;
	        }
	        // Otherwise, compare the two
	        for (var i = 0; i < previousFrames.length; i++) {
	            var frameA = previousFrames[i];
	            var frameB = currentFrames[i];
	            if (frameA.filename !== frameB.filename ||
	                frameA.lineno !== frameB.lineno ||
	                frameA.colno !== frameB.colno ||
	                frameA.function !== frameB.function) {
	                return false;
	            }
	        }
	        return true;
	    };
	    /** JSDoc */
	    Dedupe.prototype.getExceptionFromEvent = function (event) {
	        return event.exception && event.exception.values && event.exception.values[0];
	    };
	    /** JSDoc */
	    Dedupe.prototype.isSameExceptionEvent = function (currentEvent, previousEvent) {
	        var previousException = this.getExceptionFromEvent(previousEvent);
	        var currentException = this.getExceptionFromEvent(currentEvent);
	        if (!previousException || !currentException) {
	            return false;
	        }
	        if (previousException.type !== currentException.type || previousException.value !== currentException.value) {
	            return false;
	        }
	        if (!this.isSameFingerprint(currentEvent, previousEvent)) {
	            return false;
	        }
	        if (!this.isSameStacktrace(currentEvent, previousEvent)) {
	            return false;
	        }
	        return true;
	    };
	    /** JSDoc */
	    Dedupe.prototype.isSameFingerprint = function (currentEvent, previousEvent) {
	        var currentFingerprint = currentEvent.fingerprint;
	        var previousFingerprint = previousEvent.fingerprint;
	        // If no event has a fingerprint, they are assumed to be the same
	        if (!currentFingerprint && !previousFingerprint) {
	            return true;
	        }
	        // If only one event has a fingerprint, but not the other one, they are not the same
	        if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {
	            return false;
	        }
	        currentFingerprint = currentFingerprint;
	        previousFingerprint = previousFingerprint;
	        // Otherwise, compare the two
	        try {
	            return !!(currentFingerprint.join('') === previousFingerprint.join(''));
	        }
	        catch (_oO) {
	            return false;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    Dedupe.id = 'Dedupe';
	    return Dedupe;
	}());
	exports.Dedupe = Dedupe;
	//# sourceMappingURL=dedupe.js.map

/***/ }),
/* 817 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var originalFunctionToString;
	/** Patch toString calls to return proper name for wrapped functions */
	var FunctionToString = /** @class */ (function () {
	    function FunctionToString() {
	        /**
	         * @inheritDoc
	         */
	        this.name = FunctionToString.id;
	    }
	    /**
	     * @inheritDoc
	     */
	    FunctionToString.prototype.setupOnce = function () {
	        originalFunctionToString = Function.prototype.toString;
	        Function.prototype.toString = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var context = this.__sentry__ ? this.__sentry_original__ : this;
	            // tslint:disable-next-line:no-unsafe-any
	            return originalFunctionToString.apply(context, args);
	        };
	    };
	    /**
	     * @inheritDoc
	     */
	    FunctionToString.id = 'FunctionToString';
	    return FunctionToString;
	}());
	exports.FunctionToString = FunctionToString;
	//# sourceMappingURL=functiontostring.js.map

/***/ }),
/* 818 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var logger_1 = __webpack_require__(802);
	/**
	 * @deprecated
	 * This file can be safely removed in the next major bump
	 */
	/** Adds SDK info to an event. */
	var SDKInformation = /** @class */ (function () {
	    function SDKInformation() {
	        /**
	         * @inheritDoc
	         */
	        this.name = 'SDKInformation';
	    }
	    /**
	     * @inheritDoc
	     */
	    SDKInformation.prototype.setupOnce = function () {
	        logger_1.logger.warn("SDKInformation Integration is deprecated and can be safely removed. It's functionality has been merged into the SDK's core.");
	    };
	    return SDKInformation;
	}());
	exports.SDKInformation = SDKInformation;
	//# sourceMappingURL=sdkinformation.js.map

/***/ }),
/* 819 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var hub_1 = __webpack_require__(794);
	var is_1 = __webpack_require__(797);
	var logger_1 = __webpack_require__(802);
	var misc_1 = __webpack_require__(796);
	var string_1 = __webpack_require__(800);
	// "Script error." is hard coded into browsers for errors that it can't read.
	// this is the result of a script being pulled in from an external domain and CORS.
	var DEFAULT_IGNORE_ERRORS = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/];
	/** Inbound filters configurable by the user */
	var InboundFilters = /** @class */ (function () {
	    function InboundFilters(options) {
	        if (options === void 0) { options = {}; }
	        this.options = options;
	        /**
	         * @inheritDoc
	         */
	        this.name = InboundFilters.id;
	    }
	    /**
	     * @inheritDoc
	     */
	    InboundFilters.prototype.setupOnce = function () {
	        var _this = this;
	        hub_1.addGlobalEventProcessor(function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var hub, self, client, clientOptions, options;
	            return tslib_1.__generator(this, function (_a) {
	                hub = hub_1.getCurrentHub();
	                if (!hub) {
	                    return [2 /*return*/, event];
	                }
	                self = hub.getIntegration(InboundFilters);
	                if (self) {
	                    client = hub.getClient();
	                    clientOptions = client ? client.getOptions() : {};
	                    options = self.mergeOptions(clientOptions);
	                    if (self.shouldDropEvent(event, options)) {
	                        return [2 /*return*/, null];
	                    }
	                }
	                return [2 /*return*/, event];
	            });
	        }); });
	    };
	    /** JSDoc */
	    InboundFilters.prototype.shouldDropEvent = function (event, options) {
	        if (this.isSentryError(event, options)) {
	            logger_1.logger.warn("Event dropped due to being internal Sentry Error.\nEvent: " + misc_1.getEventDescription(event));
	            return true;
	        }
	        if (this.isIgnoredError(event, options)) {
	            logger_1.logger.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: " + misc_1.getEventDescription(event));
	            return true;
	        }
	        if (this.isBlacklistedUrl(event, options)) {
	            logger_1.logger.warn("Event dropped due to being matched by `blacklistUrls` option.\nEvent: " + misc_1.getEventDescription(event) + ".\nUrl: " + this.getEventFilterUrl(event));
	            return true;
	        }
	        if (!this.isWhitelistedUrl(event, options)) {
	            logger_1.logger.warn("Event dropped due to not being matched by `whitelistUrls` option.\nEvent: " + misc_1.getEventDescription(event) + ".\nUrl: " + this.getEventFilterUrl(event));
	            return true;
	        }
	        return false;
	    };
	    /** JSDoc */
	    InboundFilters.prototype.isSentryError = function (event, options) {
	        if (options === void 0) { options = {}; }
	        if (!options.ignoreInternal) {
	            return false;
	        }
	        try {
	            // tslint:disable-next-line:no-unsafe-any
	            return event.exception.values[0].type === 'SentryError';
	        }
	        catch (_oO) {
	            return false;
	        }
	    };
	    /** JSDoc */
	    InboundFilters.prototype.isIgnoredError = function (event, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        if (!options.ignoreErrors || !options.ignoreErrors.length) {
	            return false;
	        }
	        return this.getPossibleEventMessages(event).some(function (message) {
	            // Not sure why TypeScript complains here...
	            return options.ignoreErrors.some(function (pattern) { return _this.isMatchingPattern(message, pattern); });
	        });
	    };
	    /** JSDoc */
	    InboundFilters.prototype.isBlacklistedUrl = function (event, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        // TODO: Use Glob instead?
	        if (!options.blacklistUrls || !options.blacklistUrls.length) {
	            return false;
	        }
	        var url = this.getEventFilterUrl(event);
	        return !url ? false : options.blacklistUrls.some(function (pattern) { return _this.isMatchingPattern(url, pattern); });
	    };
	    /** JSDoc */
	    InboundFilters.prototype.isWhitelistedUrl = function (event, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        // TODO: Use Glob instead?
	        if (!options.whitelistUrls || !options.whitelistUrls.length) {
	            return true;
	        }
	        var url = this.getEventFilterUrl(event);
	        return !url ? true : options.whitelistUrls.some(function (pattern) { return _this.isMatchingPattern(url, pattern); });
	    };
	    /** JSDoc */
	    InboundFilters.prototype.mergeOptions = function (clientOptions) {
	        if (clientOptions === void 0) { clientOptions = {}; }
	        return {
	            blacklistUrls: tslib_1.__spread((this.options.blacklistUrls || []), (clientOptions.blacklistUrls || [])),
	            ignoreErrors: tslib_1.__spread((this.options.ignoreErrors || []), (clientOptions.ignoreErrors || []), DEFAULT_IGNORE_ERRORS),
	            ignoreInternal: typeof this.options.ignoreInternal !== 'undefined' ? this.options.ignoreInternal : true,
	            whitelistUrls: tslib_1.__spread((this.options.whitelistUrls || []), (clientOptions.whitelistUrls || [])),
	        };
	    };
	    /** JSDoc */
	    InboundFilters.prototype.isMatchingPattern = function (value, pattern) {
	        if (is_1.isRegExp(pattern)) {
	            return pattern.test(value);
	        }
	        else if (typeof pattern === 'string') {
	            return string_1.includes(value, pattern);
	        }
	        else {
	            return false;
	        }
	    };
	    /** JSDoc */
	    InboundFilters.prototype.getPossibleEventMessages = function (event) {
	        if (event.message) {
	            return [event.message];
	        }
	        else if (event.exception) {
	            try {
	                // tslint:disable-next-line:no-unsafe-any
	                var _a = event.exception.values[0], type = _a.type, value = _a.value;
	                return ["" + value, type + ": " + value];
	            }
	            catch (oO) {
	                logger_1.logger.error("Cannot extract message for event " + misc_1.getEventDescription(event));
	                return [];
	            }
	        }
	        else {
	            return [];
	        }
	    };
	    /** JSDoc */
	    InboundFilters.prototype.getEventFilterUrl = function (event) {
	        try {
	            if (event.stacktrace) {
	                // tslint:disable:no-unsafe-any
	                var frames_1 = event.stacktrace.frames;
	                return frames_1[frames_1.length - 1].filename;
	            }
	            else if (event.exception) {
	                // tslint:disable:no-unsafe-any
	                var frames_2 = event.exception.values[0].stacktrace.frames;
	                return frames_2[frames_2.length - 1].filename;
	            }
	            else {
	                return null;
	            }
	        }
	        catch (oO) {
	            logger_1.logger.error("Cannot extract url for event " + misc_1.getEventDescription(event));
	            return null;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    InboundFilters.id = 'InboundFilters';
	    return InboundFilters;
	}());
	exports.InboundFilters = InboundFilters;
	//# sourceMappingURL=inboundfilters.js.map

/***/ }),
/* 820 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var hub_1 = __webpack_require__(794);
	var is_1 = __webpack_require__(797);
	var logger_1 = __webpack_require__(802);
	var object_1 = __webpack_require__(798);
	/** Patch toString calls to return proper name for wrapped functions */
	var ExtraErrorData = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function ExtraErrorData(options) {
	        if (options === void 0) { options = { depth: 3 }; }
	        this.options = options;
	        /**
	         * @inheritDoc
	         */
	        this.name = ExtraErrorData.id;
	    }
	    /**
	     * @inheritDoc
	     */
	    ExtraErrorData.prototype.setupOnce = function () {
	        var _this = this;
	        hub_1.addGlobalEventProcessor(function (event, hint) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var self;
	            return tslib_1.__generator(this, function (_a) {
	                self = hub_1.getCurrentHub().getIntegration(ExtraErrorData);
	                if (!self) {
	                    return [2 /*return*/, event];
	                }
	                return [2 /*return*/, self.enhanceEventWithErrorData(event, hint)];
	            });
	        }); });
	    };
	    /**
	     * Attaches extracted information from the Error object to extra field in the SentryEvent
	     */
	    ExtraErrorData.prototype.enhanceEventWithErrorData = function (event, hint) {
	        if (!hint || !hint.originalException || !is_1.isError(hint.originalException)) {
	            return event;
	        }
	        var errorData = this.extractErrorData(hint.originalException);
	        if (errorData) {
	            var extra = tslib_1.__assign({}, event.extra);
	            var normalizedErrorData = object_1.safeNormalize(errorData, this.options.depth);
	            if (!is_1.isString(normalizedErrorData)) {
	                extra = tslib_1.__assign({}, event.extra, normalizedErrorData);
	            }
	            return tslib_1.__assign({}, event, { extra: extra });
	        }
	        return event;
	    };
	    /**
	     * Extract extra information from the Error object
	     */
	    ExtraErrorData.prototype.extractErrorData = function (error) {
	        var e_1, _a, _b;
	        var result = null;
	        // We are trying to enhance already existing event, so no harm done if it won't succeed
	        try {
	            var nativeKeys_1 = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];
	            var name_1 = error.name || error.constructor.name;
	            var errorKeys = Object.getOwnPropertyNames(error).filter(function (key) { return nativeKeys_1.indexOf(key) === -1; });
	            if (errorKeys.length) {
	                var extraErrorInfo = {};
	                try {
	                    for (var errorKeys_1 = tslib_1.__values(errorKeys), errorKeys_1_1 = errorKeys_1.next(); !errorKeys_1_1.done; errorKeys_1_1 = errorKeys_1.next()) {
	                        var key = errorKeys_1_1.value;
	                        var value = error[key];
	                        if (is_1.isError(value)) {
	                            value = value.name || value.constructor.name;
	                        }
	                        extraErrorInfo[key] = value;
	                    }
	                }
	                catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                finally {
	                    try {
	                        if (errorKeys_1_1 && !errorKeys_1_1.done && (_a = errorKeys_1.return)) _a.call(errorKeys_1);
	                    }
	                    finally { if (e_1) throw e_1.error; }
	                }
	                result = (_b = {},
	                    _b[name_1] = extraErrorInfo,
	                    _b);
	            }
	        }
	        catch (oO) {
	            logger_1.logger.error('Unable to extract extra data from the Error object:', oO);
	        }
	        return result;
	    };
	    /**
	     * @inheritDoc
	     */
	    ExtraErrorData.id = 'ExtraErrorData';
	    return ExtraErrorData;
	}());
	exports.ExtraErrorData = ExtraErrorData;
	//# sourceMappingURL=extraerrordata.js.map

/***/ }),
/* 821 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var hub_1 = __webpack_require__(794);
	/** JSDoc */
	var Debug = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function Debug(options) {
	        /**
	         * @inheritDoc
	         */
	        this.name = Debug.id;
	        this.options = tslib_1.__assign({ debugger: false, stringify: false }, options);
	    }
	    /**
	     * @inheritDoc
	     */
	    Debug.prototype.setupOnce = function () {
	        var _this = this;
	        hub_1.addGlobalEventProcessor(function (event, hint) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var self;
	            return tslib_1.__generator(this, function (_a) {
	                self = hub_1.getCurrentHub().getIntegration(Debug);
	                if (self) {
	                    // tslint:disable:no-console
	                    // tslint:disable:no-debugger
	                    if (self.options.debugger) {
	                        debugger;
	                    }
	                    if (self.options.stringify) {
	                        console.log(JSON.stringify(event, null, 2));
	                        if (hint) {
	                            console.log(JSON.stringify(hint, null, 2));
	                        }
	                    }
	                    else {
	                        console.log(event);
	                        if (hint) {
	                            console.log(hint);
	                        }
	                    }
	                }
	                return [2 /*return*/, event];
	            });
	        }); });
	    };
	    /**
	     * @inheritDoc
	     */
	    Debug.id = 'Debug';
	    return Debug;
	}());
	exports.Debug = Debug;
	//# sourceMappingURL=debug.js.map

/***/ }),
/* 822 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = __webpack_require__(791);
	var hub_1 = __webpack_require__(794);
	var path_1 = __webpack_require__(823);
	/** Rewrite event frames paths */
	var RewriteFrames = /** @class */ (function () {
	    /**
	     * @inheritDoc
	     */
	    function RewriteFrames(options) {
	        if (options === void 0) { options = {}; }
	        var _this = this;
	        /**
	         * @inheritDoc
	         */
	        this.name = RewriteFrames.id;
	        /**
	         * @inheritDoc
	         */
	        this.iteratee = function (frame) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var base;
	            return tslib_1.__generator(this, function (_a) {
	                if (frame.filename && frame.filename.startsWith('/')) {
	                    base = this.root ? path_1.relative(this.root, frame.filename) : path_1.basename(frame.filename);
	                    frame.filename = "app:///" + base;
	                }
	                return [2 /*return*/, frame];
	            });
	        }); };
	        if (options.root) {
	            this.root = options.root;
	        }
	        if (options.iteratee) {
	            this.iteratee = options.iteratee;
	        }
	    }
	    /**
	     * @inheritDoc
	     */
	    RewriteFrames.prototype.setupOnce = function () {
	        var _this = this;
	        hub_1.addGlobalEventProcessor(function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
	            var self;
	            return tslib_1.__generator(this, function (_a) {
	                self = hub_1.getCurrentHub().getIntegration(RewriteFrames);
	                if (self) {
	                    return [2 /*return*/, self.process(event)];
	                }
	                return [2 /*return*/, event];
	            });
	        }); });
	    };
	    /** JSDoc */
	    RewriteFrames.prototype.process = function (event) {
	        return tslib_1.__awaiter(this, void 0, void 0, function () {
	            var frames, _a, _b, _i, i, _c, _d;
	            return tslib_1.__generator(this, function (_e) {
	                switch (_e.label) {
	                    case 0:
	                        frames = this.getFramesFromEvent(event);
	                        if (!frames) return [3 /*break*/, 4];
	                        _a = [];
	                        for (_b in frames)
	                            _a.push(_b);
	                        _i = 0;
	                        _e.label = 1;
	                    case 1:
	                        if (!(_i < _a.length)) return [3 /*break*/, 4];
	                        i = _a[_i];
	                        // tslint:disable-next-line
	                        _c = frames;
	                        _d = i;
	                        return [4 /*yield*/, this.iteratee(frames[i])];
	                    case 2:
	                        // tslint:disable-next-line
	                        _c[_d] = _e.sent();
	                        _e.label = 3;
	                    case 3:
	                        _i++;
	                        return [3 /*break*/, 1];
	                    case 4: return [2 /*return*/, event];
	                }
	            });
	        });
	    };
	    /** JSDoc */
	    RewriteFrames.prototype.getFramesFromEvent = function (event) {
	        var exception = event.exception;
	        if (exception) {
	            try {
	                // tslint:disable-next-line:no-unsafe-any
	                return exception.values[0].stacktrace.frames;
	            }
	            catch (_oO) {
	                return undefined;
	            }
	        }
	        else if (event.stacktrace) {
	            return event.stacktrace.frames;
	        }
	        else {
	            return undefined;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    RewriteFrames.id = 'RewriteFrames';
	    return RewriteFrames;
	}());
	exports.RewriteFrames = RewriteFrames;
	//# sourceMappingURL=rewriteframes.js.map

/***/ }),
/* 823 */
/***/ (function(module, exports) {

	"use strict";
	// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript
	// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js
	Object.defineProperty(exports, "__esModule", { value: true });
	/** JSDoc */
	function normalizeArray(parts, allowAboveRoot) {
	    // if the path tries to go above the root, `up` ends up > 0
	    var up = 0;
	    for (var i = parts.length - 1; i >= 0; i--) {
	        var last = parts[i];
	        if (last === '.') {
	            parts.splice(i, 1);
	        }
	        else if (last === '..') {
	            parts.splice(i, 1);
	            up++;
	        }
	        else if (up) {
	            parts.splice(i, 1);
	            up--;
	        }
	    }
	    // if the path is allowed to go above the root, restore leading ..s
	    if (allowAboveRoot) {
	        for (; up--; up) {
	            parts.unshift('..');
	        }
	    }
	    return parts;
	}
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	/** JSDoc */
	function splitPath(filename) {
	    var parts = splitPathRe.exec(filename);
	    return parts ? parts.slice(1) : [];
	}
	// path.resolve([from ...], to)
	// posix version
	/** JSDoc */
	function resolve() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resolvedPath = '';
	    var resolvedAbsolute = false;
	    for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	        var path = i >= 0 ? args[i] : '/';
	        // Skip empty entries
	        if (!path) {
	            continue;
	        }
	        resolvedPath = path + "/" + resolvedPath;
	        resolvedAbsolute = path.charAt(0) === '/';
	    }
	    // At this point the path should be resolved to a full absolute path, but
	    // handle relative paths to be safe (might happen when process.cwd() fails)
	    // Normalize the path
	    resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) { return !!p; }), !resolvedAbsolute).join('/');
	    return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
	}
	exports.resolve = resolve;
	/** JSDoc */
	function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	        if (arr[start] !== '') {
	            break;
	        }
	    }
	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	        if (arr[end] !== '') {
	            break;
	        }
	    }
	    if (start > end) {
	        return [];
	    }
	    return arr.slice(start, end - start + 1);
	}
	// path.relative(from, to)
	// posix version
	/** JSDoc */
	function relative(from, to) {
	    // tslint:disable:no-parameter-reassignment
	    from = resolve(from).substr(1);
	    to = resolve(to).substr(1);
	    var fromParts = trim(from.split('/'));
	    var toParts = trim(to.split('/'));
	    var length = Math.min(fromParts.length, toParts.length);
	    var samePartsLength = length;
	    for (var i = 0; i < length; i++) {
	        if (fromParts[i] !== toParts[i]) {
	            samePartsLength = i;
	            break;
	        }
	    }
	    var outputParts = [];
	    for (var i = samePartsLength; i < fromParts.length; i++) {
	        outputParts.push('..');
	    }
	    outputParts = outputParts.concat(toParts.slice(samePartsLength));
	    return outputParts.join('/');
	}
	exports.relative = relative;
	// path.normalize(path)
	// posix version
	/** JSDoc */
	function normalize(path) {
	    var isPathAbsolute = isAbsolute(path);
	    var trailingSlash = path.substr(-1) === '/';
	    // Normalize the path
	    var normalizedPath = normalizeArray(path.split('/').filter(function (p) { return !!p; }), !isPathAbsolute).join('/');
	    if (!normalizedPath && !isPathAbsolute) {
	        normalizedPath = '.';
	    }
	    if (normalizedPath && trailingSlash) {
	        normalizedPath += '/';
	    }
	    return (isPathAbsolute ? '/' : '') + normalizedPath;
	}
	exports.normalize = normalize;
	// posix version
	/** JSDoc */
	function isAbsolute(path) {
	    return path.charAt(0) === '/';
	}
	exports.isAbsolute = isAbsolute;
	// posix version
	/** JSDoc */
	function join() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    return normalize(args.join('/'));
	}
	exports.join = join;
	/** JSDoc */
	function dirname(path) {
	    var result = splitPath(path);
	    var root = result[0];
	    var dir = result[1];
	    if (!root && !dir) {
	        // No dirname whatsoever
	        return '.';
	    }
	    if (dir) {
	        // It has a dirname, strip trailing slash
	        dir = dir.substr(0, dir.length - 1);
	    }
	    return root + dir;
	}
	exports.dirname = dirname;
	/** JSDoc */
	function basename(path, ext) {
	    var f = splitPath(path)[2];
	    if (ext && f.substr(ext.length * -1) === ext) {
	        f = f.substr(0, f.length - ext.length);
	    }
	    return f;
	}
	exports.basename = basename;
	//# sourceMappingURL=path.js.map

/***/ }),
/* 824 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Footer = exports.Timer = exports.DrawThumbnail = exports.Navbar = exports.AdBlock = exports.InfoMessage = exports.Message = exports.InputText = exports.PrimaryButton = undefined;

	var _PrimaryButton = __webpack_require__(825);

	var _PrimaryButton2 = _interopRequireDefault(_PrimaryButton);

	var _InputText = __webpack_require__(849);

	var _InputText2 = _interopRequireDefault(_InputText);

	var _Message = __webpack_require__(850);

	var _Message2 = _interopRequireDefault(_Message);

	var _InfoMessage = __webpack_require__(853);

	var _InfoMessage2 = _interopRequireDefault(_InfoMessage);

	var _AdBlock = __webpack_require__(855);

	var _AdBlock2 = _interopRequireDefault(_AdBlock);

	var _Navbar = __webpack_require__(856);

	var _Navbar2 = _interopRequireDefault(_Navbar);

	var _Footer = __webpack_require__(858);

	var _Footer2 = _interopRequireDefault(_Footer);

	var _DrawThumbnail = __webpack_require__(861);

	var _DrawThumbnail2 = _interopRequireDefault(_DrawThumbnail);

	var _Timer = __webpack_require__(863);

	var _Timer2 = _interopRequireDefault(_Timer);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.PrimaryButton = _PrimaryButton2.default;
	exports.InputText = _InputText2.default;
	exports.Message = _Message2.default;
	exports.InfoMessage = _InfoMessage2.default;
	exports.AdBlock = _AdBlock2.default;
	exports.Navbar = _Navbar2.default;
	exports.DrawThumbnail = _DrawThumbnail2.default;
	exports.Timer = _Timer2.default;
	exports.Footer = _Footer2.default;

/***/ }),
/* 825 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _PrimaryButton = __webpack_require__(826);

	var _PrimaryButton2 = _interopRequireDefault(_PrimaryButton);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _PrimaryButton2.default;

/***/ }),
/* 826 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _semanticUiReact = __webpack_require__(162);

	var _reactIntl = __webpack_require__(827);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	var PrimaryButton = function PrimaryButton(props) {
	    var intlValue = _react2.default.createElement(_reactIntl.FormattedMessage, { id: props.value });
	    return _react2.default.createElement(_semanticUiReact.Button, {
	        className: props.className,
	        color: props.color,
	        onClick: props.onClick,
	        content: intlValue,
	        size: 'massive',
	        fluid: true
	    });
	};

	exports.default = PrimaryButton;

/***/ }),
/* 827 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
	 * Copyright 2019, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var allLocaleData = _interopDefault(__webpack_require__(828));
	var IntlMessageFormat = _interopDefault(__webpack_require__(829));
	var IntlRelativeFormat = _interopDefault(__webpack_require__(839));
	var PropTypes = _interopDefault(__webpack_require__(20));
	var React = __webpack_require__(4);
	var React__default = _interopDefault(React);
	var hoistNonReactStatics = _interopDefault(__webpack_require__(51));
	var invariant = _interopDefault(__webpack_require__(52));
	var memoizeIntlConstructor = _interopDefault(__webpack_require__(846));

	// GENERATED FILE
	var defaultLocaleData = { "locale": "en", "pluralRuleFunction": function pluralRuleFunction(n, ord) {
	    var s = String(n).split("."),
	        v0 = !s[1],
	        t0 = Number(s[0]) == n,
	        n10 = t0 && s[0].slice(-1),
	        n100 = t0 && s[0].slice(-2);if (ord) return n10 == 1 && n100 != 11 ? "one" : n10 == 2 && n100 != 12 ? "two" : n10 == 3 && n100 != 13 ? "few" : "other";return n == 1 && v0 ? "one" : "other";
	  }, "fields": { "year": { "displayName": "year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "year-short": { "displayName": "yr.", "relative": { "0": "this yr.", "1": "next yr.", "-1": "last yr." }, "relativeTime": { "future": { "one": "in {0} yr.", "other": "in {0} yr." }, "past": { "one": "{0} yr. ago", "other": "{0} yr. ago" } } }, "month": { "displayName": "month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "month-short": { "displayName": "mo.", "relative": { "0": "this mo.", "1": "next mo.", "-1": "last mo." }, "relativeTime": { "future": { "one": "in {0} mo.", "other": "in {0} mo." }, "past": { "one": "{0} mo. ago", "other": "{0} mo. ago" } } }, "day": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "day-short": { "displayName": "day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "hour", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "hour-short": { "displayName": "hr.", "relative": { "0": "this hour" }, "relativeTime": { "future": { "one": "in {0} hr.", "other": "in {0} hr." }, "past": { "one": "{0} hr. ago", "other": "{0} hr. ago" } } }, "minute": { "displayName": "minute", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "minute-short": { "displayName": "min.", "relative": { "0": "this minute" }, "relativeTime": { "future": { "one": "in {0} min.", "other": "in {0} min." }, "past": { "one": "{0} min. ago", "other": "{0} min. ago" } } }, "second": { "displayName": "second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } }, "second-short": { "displayName": "sec.", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} sec.", "other": "in {0} sec." }, "past": { "one": "{0} sec. ago", "other": "{0} sec. ago" } } } } };

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	function addLocaleData() {
	  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	  var locales = Array.isArray(data) ? data : [data];

	  locales.forEach(function (localeData) {
	    if (localeData && localeData.locale) {
	      IntlMessageFormat.__addLocaleData(localeData);
	      IntlRelativeFormat.__addLocaleData(localeData);
	    }
	  });
	}

	function hasLocaleData(locale) {
	  var localeParts = (locale || '').split('-');

	  while (localeParts.length > 0) {
	    if (hasIMFAndIRFLocaleData(localeParts.join('-'))) {
	      return true;
	    }

	    localeParts.pop();
	  }

	  return false;
	}

	function hasIMFAndIRFLocaleData(locale) {
	  var normalizedLocale = locale && locale.toLowerCase();

	  return !!(IntlMessageFormat.__localeData__[normalizedLocale] && IntlRelativeFormat.__localeData__[normalizedLocale]);
	}

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	};





	var asyncGenerator = function () {
	  function AwaitValue(value) {
	    this.value = value;
	  }

	  function AsyncGenerator(gen) {
	    var front, back;

	    function send(key, arg) {
	      return new Promise(function (resolve, reject) {
	        var request = {
	          key: key,
	          arg: arg,
	          resolve: resolve,
	          reject: reject,
	          next: null
	        };

	        if (back) {
	          back = back.next = request;
	        } else {
	          front = back = request;
	          resume(key, arg);
	        }
	      });
	    }

	    function resume(key, arg) {
	      try {
	        var result = gen[key](arg);
	        var value = result.value;

	        if (value instanceof AwaitValue) {
	          Promise.resolve(value.value).then(function (arg) {
	            resume("next", arg);
	          }, function (arg) {
	            resume("throw", arg);
	          });
	        } else {
	          settle(result.done ? "return" : "normal", result.value);
	        }
	      } catch (err) {
	        settle("throw", err);
	      }
	    }

	    function settle(type, value) {
	      switch (type) {
	        case "return":
	          front.resolve({
	            value: value,
	            done: true
	          });
	          break;

	        case "throw":
	          front.reject(value);
	          break;

	        default:
	          front.resolve({
	            value: value,
	            done: false
	          });
	          break;
	      }

	      front = front.next;

	      if (front) {
	        resume(front.key, front.arg);
	      } else {
	        back = null;
	      }
	    }

	    this._invoke = send;

	    if (typeof gen.return !== "function") {
	      this.return = undefined;
	    }
	  }

	  if (typeof Symbol === "function" && Symbol.asyncIterator) {
	    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
	      return this;
	    };
	  }

	  AsyncGenerator.prototype.next = function (arg) {
	    return this._invoke("next", arg);
	  };

	  AsyncGenerator.prototype.throw = function (arg) {
	    return this._invoke("throw", arg);
	  };

	  AsyncGenerator.prototype.return = function (arg) {
	    return this._invoke("return", arg);
	  };

	  return {
	    wrap: function (fn) {
	      return function () {
	        return new AsyncGenerator(fn.apply(this, arguments));
	      };
	    },
	    await: function (value) {
	      return new AwaitValue(value);
	    }
	  };
	}();





	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();





	var defineProperty = function (obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};



	var inherits = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};









	var objectWithoutProperties = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

	var possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};



















	var toConsumableArray = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	    return arr2;
	  } else {
	    return Array.from(arr);
	  }
	};

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	var bool = PropTypes.bool;
	var number = PropTypes.number;
	var string = PropTypes.string;
	var func = PropTypes.func;
	var object = PropTypes.object;
	var oneOf = PropTypes.oneOf;
	var shape = PropTypes.shape;
	var any = PropTypes.any;
	var oneOfType = PropTypes.oneOfType;

	var localeMatcher = oneOf(['best fit', 'lookup']);
	var narrowShortLong = oneOf(['narrow', 'short', 'long']);
	var numeric2digit = oneOf(['numeric', '2-digit']);
	var funcReq = func.isRequired;

	var intlConfigPropTypes = {
	  locale: string,
	  timeZone: string,
	  formats: object,
	  messages: object,
	  textComponent: any,

	  defaultLocale: string,
	  defaultFormats: object,

	  onError: func
	};

	var intlFormatPropTypes = {
	  formatDate: funcReq,
	  formatTime: funcReq,
	  formatRelative: funcReq,
	  formatNumber: funcReq,
	  formatPlural: funcReq,
	  formatMessage: funcReq,
	  formatHTMLMessage: funcReq
	};

	var intlShape = shape(_extends({}, intlConfigPropTypes, intlFormatPropTypes, {
	  formatters: object,
	  now: funcReq
	}));

	var messageDescriptorPropTypes = {
	  id: string.isRequired,
	  description: oneOfType([string, object]),
	  defaultMessage: string
	};

	var dateTimeFormatPropTypes = {
	  localeMatcher: localeMatcher,
	  formatMatcher: oneOf(['basic', 'best fit']),

	  timeZone: string,
	  hour12: bool,

	  weekday: narrowShortLong,
	  era: narrowShortLong,
	  year: numeric2digit,
	  month: oneOf(['numeric', '2-digit', 'narrow', 'short', 'long']),
	  day: numeric2digit,
	  hour: numeric2digit,
	  minute: numeric2digit,
	  second: numeric2digit,
	  timeZoneName: oneOf(['short', 'long'])
	};

	var numberFormatPropTypes = {
	  localeMatcher: localeMatcher,

	  style: oneOf(['decimal', 'currency', 'percent']),
	  currency: string,
	  currencyDisplay: oneOf(['symbol', 'code', 'name']),
	  useGrouping: bool,

	  minimumIntegerDigits: number,
	  minimumFractionDigits: number,
	  maximumFractionDigits: number,
	  minimumSignificantDigits: number,
	  maximumSignificantDigits: number
	};

	var relativeFormatPropTypes = {
	  style: oneOf(['best fit', 'numeric']),
	  units: oneOf(['second', 'minute', 'hour', 'day', 'month', 'year', 'second-short', 'minute-short', 'hour-short', 'day-short', 'month-short', 'year-short'])
	};

	var pluralFormatPropTypes = {
	  style: oneOf(['cardinal', 'ordinal'])
	};

	/*
	HTML escaping and shallow-equals implementations are the same as React's
	(on purpose.) Therefore, it has the following Copyright and Licensing:

	Copyright 2013-2014, Facebook, Inc.
	All rights reserved.

	This source code is licensed under the BSD-style license found in the LICENSE
	file in the root directory of React's source tree.
	*/

	var intlConfigPropNames = Object.keys(intlConfigPropTypes);

	var ESCAPED_CHARS = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  "'": '&#x27;'
	};

	var UNSAFE_CHARS_REGEX = /[&><"']/g;

	function escape(str) {
	  return ('' + str).replace(UNSAFE_CHARS_REGEX, function (match) {
	    return ESCAPED_CHARS[match];
	  });
	}

	function filterProps(props, whitelist) {
	  var defaults$$1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	  return whitelist.reduce(function (filtered, name) {
	    if (props.hasOwnProperty(name)) {
	      filtered[name] = props[name];
	    } else if (defaults$$1.hasOwnProperty(name)) {
	      filtered[name] = defaults$$1[name];
	    }

	    return filtered;
	  }, {});
	}

	function invariantIntlContext() {
	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      intl = _ref.intl;

	  invariant(intl, '[React Intl] Could not find required `intl` object. ' + '<IntlProvider> needs to exist in the component ancestry.');
	}

	function shallowEquals(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	function shouldIntlComponentUpdate(_ref2, nextProps, nextState) {
	  var props = _ref2.props,
	      state = _ref2.state,
	      _ref2$context = _ref2.context,
	      context = _ref2$context === undefined ? {} : _ref2$context;
	  var nextContext = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	  var _context$intl = context.intl,
	      intl = _context$intl === undefined ? {} : _context$intl;
	  var _nextContext$intl = nextContext.intl,
	      nextIntl = _nextContext$intl === undefined ? {} : _nextContext$intl;


	  return !shallowEquals(nextProps, props) || !shallowEquals(nextState, state) || !(nextIntl === intl || shallowEquals(filterProps(nextIntl, intlConfigPropNames), filterProps(intl, intlConfigPropNames)));
	}

	function createError(message, exception) {
	  var eMsg = exception ? '\n' + exception : '';
	  return '[React Intl] ' + message + eMsg;
	}

	function defaultErrorHandler(error) {
	  if (process.env.NODE_ENV !== 'production') {
	    console.error(error);
	  }
	}

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	// Inspired by react-redux's `connect()` HOC factory function implementation:
	// https://github.com/rackt/react-redux

	function getDisplayName(Component$$1) {
	  return Component$$1.displayName || Component$$1.name || 'Component';
	}

	function injectIntl(WrappedComponent) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var _options$intlPropName = options.intlPropName,
	      intlPropName = _options$intlPropName === undefined ? 'intl' : _options$intlPropName,
	      _options$withRef = options.withRef,
	      withRef = _options$withRef === undefined ? false : _options$withRef;

	  var InjectIntl = function (_Component) {
	    inherits(InjectIntl, _Component);

	    function InjectIntl(props, context) {
	      classCallCheck(this, InjectIntl);

	      var _this = possibleConstructorReturn(this, (InjectIntl.__proto__ || Object.getPrototypeOf(InjectIntl)).call(this, props, context));

	      invariantIntlContext(context);
	      return _this;
	    }

	    createClass(InjectIntl, [{
	      key: 'getWrappedInstance',
	      value: function getWrappedInstance() {
	        invariant(withRef, '[React Intl] To access the wrapped instance, ' + 'the `{withRef: true}` option must be set when calling: ' + '`injectIntl()`');

	        return this._wrappedInstance;
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _this2 = this;

	        return React__default.createElement(WrappedComponent, _extends({}, this.props, defineProperty({}, intlPropName, this.context.intl), {
	          ref: withRef ? /* istanbul ignore next */function (ref) {
	            return _this2._wrappedInstance = ref;
	          } : null
	        }));
	      }
	    }]);
	    return InjectIntl;
	  }(React.Component);

	  InjectIntl.displayName = 'InjectIntl(' + getDisplayName(WrappedComponent) + ')';
	  InjectIntl.contextTypes = {
	    intl: intlShape
	  };
	  InjectIntl.WrappedComponent = WrappedComponent;


	  return hoistNonReactStatics(InjectIntl, WrappedComponent);
	}

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	function defineMessages(messageDescriptors) {
	  // This simply returns what's passed-in because it's meant to be a hook for
	  // babel-plugin-react-intl.
	  return messageDescriptors;
	}

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	// This is a "hack" until a proper `intl-pluralformat` package is created.

	function resolveLocale(locales) {
	  // IntlMessageFormat#_resolveLocale() does not depend on `this`.
	  return IntlMessageFormat.prototype._resolveLocale(locales);
	}

	function findPluralFunction(locale) {
	  // IntlMessageFormat#_findPluralFunction() does not depend on `this`.
	  return IntlMessageFormat.prototype._findPluralRuleFunction(locale);
	}

	var IntlPluralFormat = function IntlPluralFormat(locales) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  classCallCheck(this, IntlPluralFormat);

	  var useOrdinal = options.style === 'ordinal';
	  var pluralFn = findPluralFunction(resolveLocale(locales));

	  this.format = function (value) {
	    return pluralFn(value, useOrdinal);
	  };
	};

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	var DATE_TIME_FORMAT_OPTIONS = Object.keys(dateTimeFormatPropTypes);
	var NUMBER_FORMAT_OPTIONS = Object.keys(numberFormatPropTypes);
	var RELATIVE_FORMAT_OPTIONS = Object.keys(relativeFormatPropTypes);
	var PLURAL_FORMAT_OPTIONS = Object.keys(pluralFormatPropTypes);

	var RELATIVE_FORMAT_THRESHOLDS = {
	  second: 60, // seconds to minute
	  minute: 60, // minutes to hour
	  hour: 24, // hours to day
	  day: 30, // days to month
	  month: 12 };

	function updateRelativeFormatThresholds(newThresholds) {
	  var thresholds = IntlRelativeFormat.thresholds;
	  thresholds.second = newThresholds.second;
	  thresholds.minute = newThresholds.minute;
	  thresholds.hour = newThresholds.hour;
	  thresholds.day = newThresholds.day;
	  thresholds.month = newThresholds.month;
	  thresholds['second-short'] = newThresholds['second-short'];
	  thresholds['minute-short'] = newThresholds['minute-short'];
	  thresholds['hour-short'] = newThresholds['hour-short'];
	  thresholds['day-short'] = newThresholds['day-short'];
	  thresholds['month-short'] = newThresholds['month-short'];
	}

	function getNamedFormat(formats, type, name, onError) {
	  var format = formats && formats[type] && formats[type][name];
	  if (format) {
	    return format;
	  }

	  onError(createError('No ' + type + ' format named: ' + name));
	}

	function formatDate(config, state, value) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	  var locale = config.locale,
	      formats = config.formats,
	      timeZone = config.timeZone;
	  var format = options.format;


	  var onError = config.onError || defaultErrorHandler;
	  var date = new Date(value);
	  var defaults$$1 = _extends({}, timeZone && { timeZone: timeZone }, format && getNamedFormat(formats, 'date', format, onError));
	  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults$$1);

	  try {
	    return state.getDateTimeFormat(locale, filteredOptions).format(date);
	  } catch (e) {
	    onError(createError('Error formatting date.', e));
	  }

	  return String(date);
	}

	function formatTime(config, state, value) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	  var locale = config.locale,
	      formats = config.formats,
	      timeZone = config.timeZone;
	  var format = options.format;


	  var onError = config.onError || defaultErrorHandler;
	  var date = new Date(value);
	  var defaults$$1 = _extends({}, timeZone && { timeZone: timeZone }, format && getNamedFormat(formats, 'time', format, onError));
	  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults$$1);

	  if (!filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second) {
	    // Add default formatting options if hour, minute, or second isn't defined.
	    filteredOptions = _extends({}, filteredOptions, { hour: 'numeric', minute: 'numeric' });
	  }

	  try {
	    return state.getDateTimeFormat(locale, filteredOptions).format(date);
	  } catch (e) {
	    onError(createError('Error formatting time.', e));
	  }

	  return String(date);
	}

	function formatRelative(config, state, value) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	  var locale = config.locale,
	      formats = config.formats;
	  var format = options.format;


	  var onError = config.onError || defaultErrorHandler;
	  var date = new Date(value);
	  var now = new Date(options.now);
	  var defaults$$1 = format && getNamedFormat(formats, 'relative', format, onError);
	  var filteredOptions = filterProps(options, RELATIVE_FORMAT_OPTIONS, defaults$$1);

	  // Capture the current threshold values, then temporarily override them with
	  // specific values just for this render.
	  var oldThresholds = _extends({}, IntlRelativeFormat.thresholds);
	  updateRelativeFormatThresholds(RELATIVE_FORMAT_THRESHOLDS);

	  try {
	    return state.getRelativeFormat(locale, filteredOptions).format(date, {
	      now: isFinite(now) ? now : state.now()
	    });
	  } catch (e) {
	    onError(createError('Error formatting relative time.', e));
	  } finally {
	    updateRelativeFormatThresholds(oldThresholds);
	  }

	  return String(date);
	}

	function formatNumber(config, state, value) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	  var locale = config.locale,
	      formats = config.formats;
	  var format = options.format;


	  var onError = config.onError || defaultErrorHandler;
	  var defaults$$1 = format && getNamedFormat(formats, 'number', format, onError);
	  var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults$$1);

	  try {
	    return state.getNumberFormat(locale, filteredOptions).format(value);
	  } catch (e) {
	    onError(createError('Error formatting number.', e));
	  }

	  return String(value);
	}

	function formatPlural(config, state, value) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	  var locale = config.locale;


	  var filteredOptions = filterProps(options, PLURAL_FORMAT_OPTIONS);
	  var onError = config.onError || defaultErrorHandler;

	  try {
	    return state.getPluralFormat(locale, filteredOptions).format(value);
	  } catch (e) {
	    onError(createError('Error formatting plural.', e));
	  }

	  return 'other';
	}

	function formatMessage(config, state) {
	  var messageDescriptor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	  var locale = config.locale,
	      formats = config.formats,
	      messages = config.messages,
	      defaultLocale = config.defaultLocale,
	      defaultFormats = config.defaultFormats;
	  var id = messageDescriptor.id,
	      defaultMessage = messageDescriptor.defaultMessage;

	  // Produce a better error if the user calls `intl.formatMessage(element)`

	  if (process.env.NODE_ENV !== 'production') {
	    invariant(!React.isValidElement(config), '[React Intl] Don\'t pass React elements to ' + 'formatMessage(), pass `.props`.');
	  }

	  // `id` is a required field of a Message Descriptor.
	  invariant(id, '[React Intl] An `id` must be provided to format a message.');

	  var message = messages && messages[id];
	  var hasValues = Object.keys(values).length > 0;

	  // Avoid expensive message formatting for simple messages without values. In
	  // development messages will always be formatted in case of missing values.
	  if (!hasValues && process.env.NODE_ENV === 'production') {
	    return message || defaultMessage || id;
	  }

	  var formattedMessage = void 0;
	  var onError = config.onError || defaultErrorHandler;

	  if (message) {
	    try {
	      var formatter = state.getMessageFormat(message, locale, formats);

	      formattedMessage = formatter.format(values);
	    } catch (e) {
	      onError(createError('Error formatting message: "' + id + '" for locale: "' + locale + '"' + (defaultMessage ? ', using default message as fallback.' : ''), e));
	    }
	  } else {
	    // This prevents warnings from littering the console in development
	    // when no `messages` are passed into the <IntlProvider> for the
	    // default locale, and a default message is in the source.
	    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {
	      onError(createError('Missing message: "' + id + '" for locale: "' + locale + '"' + (defaultMessage ? ', using default message as fallback.' : '')));
	    }
	  }

	  if (!formattedMessage && defaultMessage) {
	    try {
	      var _formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);

	      formattedMessage = _formatter.format(values);
	    } catch (e) {
	      onError(createError('Error formatting the default message for: "' + id + '"', e));
	    }
	  }

	  if (!formattedMessage) {
	    onError(createError('Cannot format message: "' + id + '", ' + ('using message ' + (message || defaultMessage ? 'source' : 'id') + ' as fallback.')));
	  }

	  return formattedMessage || message || defaultMessage || id;
	}

	function formatHTMLMessage(config, state, messageDescriptor) {
	  var rawValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	  // Process all the values before they are used when formatting the ICU
	  // Message string. Since the formatted message might be injected via
	  // `innerHTML`, all String-based values need to be HTML-escaped.
	  var escapedValues = Object.keys(rawValues).reduce(function (escaped, name) {
	    var value = rawValues[name];
	    escaped[name] = typeof value === 'string' ? escape(value) : value;
	    return escaped;
	  }, {});

	  return formatMessage(config, state, messageDescriptor, escapedValues);
	}



	var format = Object.freeze({
		formatDate: formatDate,
		formatTime: formatTime,
		formatRelative: formatRelative,
		formatNumber: formatNumber,
		formatPlural: formatPlural,
		formatMessage: formatMessage,
		formatHTMLMessage: formatHTMLMessage
	});

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	var intlConfigPropNames$1 = Object.keys(intlConfigPropTypes);
	var intlFormatPropNames = Object.keys(intlFormatPropTypes);

	// These are not a static property on the `IntlProvider` class so the intl
	// config values can be inherited from an <IntlProvider> ancestor.
	var defaultProps = {
	  formats: {},
	  messages: {},
	  timeZone: null,
	  textComponent: 'span',

	  defaultLocale: 'en',
	  defaultFormats: {},

	  onError: defaultErrorHandler
	};

	var IntlProvider = function (_Component) {
	  inherits(IntlProvider, _Component);

	  function IntlProvider(props) {
	    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    classCallCheck(this, IntlProvider);

	    var _this = possibleConstructorReturn(this, (IntlProvider.__proto__ || Object.getPrototypeOf(IntlProvider)).call(this, props, context));

	    invariant(typeof Intl !== 'undefined', '[React Intl] The `Intl` APIs must be available in the runtime, ' + 'and do not appear to be built-in. An `Intl` polyfill should be loaded.\n' + 'See: http://formatjs.io/guides/runtime-environments/');

	    var intlContext = context.intl;

	    // Used to stabilize time when performing an initial rendering so that
	    // all relative times use the same reference "now" time.

	    var initialNow = void 0;
	    if (isFinite(props.initialNow)) {
	      initialNow = Number(props.initialNow);
	    } else {
	      // When an `initialNow` isn't provided via `props`, look to see an
	      // <IntlProvider> exists in the ancestry and call its `now()`
	      // function to propagate its value for "now".
	      initialNow = intlContext ? intlContext.now() : Date.now();
	    }

	    // Creating `Intl*` formatters is expensive. If there's a parent
	    // `<IntlProvider>`, then its formatters will be used. Otherwise, this
	    // memoize the `Intl*` constructors and cache them for the lifecycle of
	    // this IntlProvider instance.

	    var _ref = intlContext || {},
	        _ref$formatters = _ref.formatters,
	        formatters = _ref$formatters === undefined ? {
	      getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat),
	      getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat),
	      getMessageFormat: memoizeIntlConstructor(IntlMessageFormat),
	      getRelativeFormat: memoizeIntlConstructor(IntlRelativeFormat),
	      getPluralFormat: memoizeIntlConstructor(IntlPluralFormat)
	    } : _ref$formatters;

	    _this.state = _extends({}, formatters, {

	      // Wrapper to provide stable "now" time for initial render.
	      now: function now() {
	        return _this._didDisplay ? Date.now() : initialNow;
	      }
	    });
	    return _this;
	  }

	  createClass(IntlProvider, [{
	    key: 'getConfig',
	    value: function getConfig() {
	      var intlContext = this.context.intl;

	      // Build a whitelisted config object from `props`, defaults, and
	      // `context.intl`, if an <IntlProvider> exists in the ancestry.

	      var config = filterProps(this.props, intlConfigPropNames$1, intlContext);

	      // Apply default props. This must be applied last after the props have
	      // been resolved and inherited from any <IntlProvider> in the ancestry.
	      // This matches how React resolves `defaultProps`.
	      for (var propName in defaultProps) {
	        if (config[propName] === undefined) {
	          config[propName] = defaultProps[propName];
	        }
	      }

	      if (!hasLocaleData(config.locale)) {
	        var _config = config,
	            locale = _config.locale,
	            defaultLocale = _config.defaultLocale,
	            defaultFormats = _config.defaultFormats,
	            onError = _config.onError;


	        onError(createError('Missing locale data for locale: "' + locale + '". ' + ('Using default locale: "' + defaultLocale + '" as fallback.')));

	        // Since there's no registered locale data for `locale`, this will
	        // fallback to the `defaultLocale` to make sure things can render.
	        // The `messages` are overridden to the `defaultProps` empty object
	        // to maintain referential equality across re-renders. It's assumed
	        // each <FormattedMessage> contains a `defaultMessage` prop.
	        config = _extends({}, config, {
	          locale: defaultLocale,
	          formats: defaultFormats,
	          messages: defaultProps.messages
	        });
	      }

	      return config;
	    }
	  }, {
	    key: 'getBoundFormatFns',
	    value: function getBoundFormatFns(config, state) {
	      return intlFormatPropNames.reduce(function (boundFormatFns, name) {
	        boundFormatFns[name] = format[name].bind(null, config, state);
	        return boundFormatFns;
	      }, {});
	    }
	  }, {
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var config = this.getConfig();

	      // Bind intl factories and current config to the format functions.
	      var boundFormatFns = this.getBoundFormatFns(config, this.state);

	      var _state = this.state,
	          now = _state.now,
	          formatters = objectWithoutProperties(_state, ['now']);


	      return {
	        intl: _extends({}, config, boundFormatFns, {
	          formatters: formatters,
	          now: now
	        })
	      };
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate() {
	      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	        next[_key] = arguments[_key];
	      }

	      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._didDisplay = true;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return React.Children.only(this.props.children);
	    }
	  }]);
	  return IntlProvider;
	}(React.Component);

	IntlProvider.displayName = 'IntlProvider';
	IntlProvider.contextTypes = {
	  intl: intlShape
	};
	IntlProvider.childContextTypes = {
	  intl: intlShape.isRequired
	};
	process.env.NODE_ENV !== "production" ? IntlProvider.propTypes = _extends({}, intlConfigPropTypes, {
	  children: PropTypes.element.isRequired,
	  initialNow: PropTypes.any
	}) : void 0;

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	var FormattedDate = function (_Component) {
	  inherits(FormattedDate, _Component);

	  function FormattedDate(props, context) {
	    classCallCheck(this, FormattedDate);

	    var _this = possibleConstructorReturn(this, (FormattedDate.__proto__ || Object.getPrototypeOf(FormattedDate)).call(this, props, context));

	    invariantIntlContext(context);
	    return _this;
	  }

	  createClass(FormattedDate, [{
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate() {
	      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	        next[_key] = arguments[_key];
	      }

	      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _context$intl = this.context.intl,
	          formatDate = _context$intl.formatDate,
	          Text = _context$intl.textComponent;
	      var _props = this.props,
	          value = _props.value,
	          children = _props.children;


	      var formattedDate = formatDate(value, this.props);

	      if (typeof children === 'function') {
	        return children(formattedDate);
	      }

	      return React__default.createElement(
	        Text,
	        null,
	        formattedDate
	      );
	    }
	  }]);
	  return FormattedDate;
	}(React.Component);

	FormattedDate.displayName = 'FormattedDate';
	FormattedDate.contextTypes = {
	  intl: intlShape
	};
	process.env.NODE_ENV !== "production" ? FormattedDate.propTypes = _extends({}, dateTimeFormatPropTypes, {
	  value: PropTypes.any.isRequired,
	  format: PropTypes.string,
	  children: PropTypes.func
	}) : void 0;

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	var FormattedTime = function (_Component) {
	  inherits(FormattedTime, _Component);

	  function FormattedTime(props, context) {
	    classCallCheck(this, FormattedTime);

	    var _this = possibleConstructorReturn(this, (FormattedTime.__proto__ || Object.getPrototypeOf(FormattedTime)).call(this, props, context));

	    invariantIntlContext(context);
	    return _this;
	  }

	  createClass(FormattedTime, [{
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate() {
	      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	        next[_key] = arguments[_key];
	      }

	      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _context$intl = this.context.intl,
	          formatTime = _context$intl.formatTime,
	          Text = _context$intl.textComponent;
	      var _props = this.props,
	          value = _props.value,
	          children = _props.children;


	      var formattedTime = formatTime(value, this.props);

	      if (typeof children === 'function') {
	        return children(formattedTime);
	      }

	      return React__default.createElement(
	        Text,
	        null,
	        formattedTime
	      );
	    }
	  }]);
	  return FormattedTime;
	}(React.Component);

	FormattedTime.displayName = 'FormattedTime';
	FormattedTime.contextTypes = {
	  intl: intlShape
	};
	process.env.NODE_ENV !== "production" ? FormattedTime.propTypes = _extends({}, dateTimeFormatPropTypes, {
	  value: PropTypes.any.isRequired,
	  format: PropTypes.string,
	  children: PropTypes.func
	}) : void 0;

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	var SECOND = 1000;
	var MINUTE = 1000 * 60;
	var HOUR = 1000 * 60 * 60;
	var DAY = 1000 * 60 * 60 * 24;

	// The maximum timer delay value is a 32-bit signed integer.
	// See: https://mdn.io/setTimeout
	var MAX_TIMER_DELAY = 2147483647;

	function selectUnits(delta) {
	  var absDelta = Math.abs(delta);

	  if (absDelta < MINUTE) {
	    return 'second';
	  }

	  if (absDelta < HOUR) {
	    return 'minute';
	  }

	  if (absDelta < DAY) {
	    return 'hour';
	  }

	  // The maximum scheduled delay will be measured in days since the maximum
	  // timer delay is less than the number of milliseconds in 25 days.
	  return 'day';
	}

	function getUnitDelay(units) {
	  switch (units) {
	    case 'second':
	      return SECOND;
	    case 'minute':
	      return MINUTE;
	    case 'hour':
	      return HOUR;
	    case 'day':
	      return DAY;
	    default:
	      return MAX_TIMER_DELAY;
	  }
	}

	function isSameDate(a, b) {
	  if (a === b) {
	    return true;
	  }

	  var aTime = new Date(a).getTime();
	  var bTime = new Date(b).getTime();

	  return isFinite(aTime) && isFinite(bTime) && aTime === bTime;
	}

	var FormattedRelative = function (_Component) {
	  inherits(FormattedRelative, _Component);

	  function FormattedRelative(props, context) {
	    classCallCheck(this, FormattedRelative);

	    var _this = possibleConstructorReturn(this, (FormattedRelative.__proto__ || Object.getPrototypeOf(FormattedRelative)).call(this, props, context));

	    invariantIntlContext(context);

	    var now = isFinite(props.initialNow) ? Number(props.initialNow) : context.intl.now();

	    // `now` is stored as state so that `render()` remains a function of
	    // props + state, instead of accessing `Date.now()` inside `render()`.
	    _this.state = { now: now };
	    return _this;
	  }

	  createClass(FormattedRelative, [{
	    key: 'scheduleNextUpdate',
	    value: function scheduleNextUpdate(props, state) {
	      var _this2 = this;

	      // Cancel and pending update because we're scheduling a new update.
	      clearTimeout(this._timer);

	      var value = props.value,
	          units = props.units,
	          updateInterval = props.updateInterval;

	      var time = new Date(value).getTime();

	      // If the `updateInterval` is falsy, including `0` or we don't have a
	      // valid date, then auto updates have been turned off, so we bail and
	      // skip scheduling an update.
	      if (!updateInterval || !isFinite(time)) {
	        return;
	      }

	      var delta = time - state.now;
	      var unitDelay = getUnitDelay(units || selectUnits(delta));
	      var unitRemainder = Math.abs(delta % unitDelay);

	      // We want the largest possible timer delay which will still display
	      // accurate information while reducing unnecessary re-renders. The delay
	      // should be until the next "interesting" moment, like a tick from
	      // "1 minute ago" to "2 minutes ago" when the delta is 120,000ms.
	      var delay = delta < 0 ? Math.max(updateInterval, unitDelay - unitRemainder) : Math.max(updateInterval, unitRemainder);

	      this._timer = setTimeout(function () {
	        _this2.setState({ now: _this2.context.intl.now() });
	      }, delay);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.scheduleNextUpdate(this.props, this.state);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(_ref) {
	      var nextValue = _ref.value;

	      // When the `props.value` date changes, `state.now` needs to be updated,
	      // and the next update can be rescheduled.
	      if (!isSameDate(nextValue, this.props.value)) {
	        this.setState({ now: this.context.intl.now() });
	      }
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate() {
	      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	        next[_key] = arguments[_key];
	      }

	      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      this.scheduleNextUpdate(nextProps, nextState);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this._timer);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _context$intl = this.context.intl,
	          formatRelative = _context$intl.formatRelative,
	          Text = _context$intl.textComponent;
	      var _props = this.props,
	          value = _props.value,
	          children = _props.children;


	      var formattedRelative = formatRelative(value, _extends({}, this.props, this.state));

	      if (typeof children === 'function') {
	        return children(formattedRelative);
	      }

	      return React__default.createElement(
	        Text,
	        null,
	        formattedRelative
	      );
	    }
	  }]);
	  return FormattedRelative;
	}(React.Component);

	FormattedRelative.displayName = 'FormattedRelative';
	FormattedRelative.contextTypes = {
	  intl: intlShape
	};
	FormattedRelative.defaultProps = {
	  updateInterval: 1000 * 10
	};
	process.env.NODE_ENV !== "production" ? FormattedRelative.propTypes = _extends({}, relativeFormatPropTypes, {
	  value: PropTypes.any.isRequired,
	  format: PropTypes.string,
	  updateInterval: PropTypes.number,
	  initialNow: PropTypes.any,
	  children: PropTypes.func
	}) : void 0;

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	var FormattedNumber = function (_Component) {
	  inherits(FormattedNumber, _Component);

	  function FormattedNumber(props, context) {
	    classCallCheck(this, FormattedNumber);

	    var _this = possibleConstructorReturn(this, (FormattedNumber.__proto__ || Object.getPrototypeOf(FormattedNumber)).call(this, props, context));

	    invariantIntlContext(context);
	    return _this;
	  }

	  createClass(FormattedNumber, [{
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate() {
	      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	        next[_key] = arguments[_key];
	      }

	      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _context$intl = this.context.intl,
	          formatNumber = _context$intl.formatNumber,
	          Text = _context$intl.textComponent;
	      var _props = this.props,
	          value = _props.value,
	          children = _props.children;


	      var formattedNumber = formatNumber(value, this.props);

	      if (typeof children === 'function') {
	        return children(formattedNumber);
	      }

	      return React__default.createElement(
	        Text,
	        null,
	        formattedNumber
	      );
	    }
	  }]);
	  return FormattedNumber;
	}(React.Component);

	FormattedNumber.displayName = 'FormattedNumber';
	FormattedNumber.contextTypes = {
	  intl: intlShape
	};
	process.env.NODE_ENV !== "production" ? FormattedNumber.propTypes = _extends({}, numberFormatPropTypes, {
	  value: PropTypes.any.isRequired,
	  format: PropTypes.string,
	  children: PropTypes.func
	}) : void 0;

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	var FormattedPlural = function (_Component) {
	  inherits(FormattedPlural, _Component);

	  function FormattedPlural(props, context) {
	    classCallCheck(this, FormattedPlural);

	    var _this = possibleConstructorReturn(this, (FormattedPlural.__proto__ || Object.getPrototypeOf(FormattedPlural)).call(this, props, context));

	    invariantIntlContext(context);
	    return _this;
	  }

	  createClass(FormattedPlural, [{
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate() {
	      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
	        next[_key] = arguments[_key];
	      }

	      return shouldIntlComponentUpdate.apply(undefined, [this].concat(next));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _context$intl = this.context.intl,
	          formatPlural = _context$intl.formatPlural,
	          Text = _context$intl.textComponent;
	      var _props = this.props,
	          value = _props.value,
	          other = _props.other,
	          children = _props.children;


	      var pluralCategory = formatPlural(value, this.props);
	      var formattedPlural = this.props[pluralCategory] || other;

	      if (typeof children === 'function') {
	        return children(formattedPlural);
	      }

	      return React__default.createElement(
	        Text,
	        null,
	        formattedPlural
	      );
	    }
	  }]);
	  return FormattedPlural;
	}(React.Component);

	FormattedPlural.displayName = 'FormattedPlural';
	FormattedPlural.contextTypes = {
	  intl: intlShape
	};
	FormattedPlural.defaultProps = {
	  style: 'cardinal'
	};
	process.env.NODE_ENV !== "production" ? FormattedPlural.propTypes = _extends({}, pluralFormatPropTypes, {
	  value: PropTypes.any.isRequired,

	  other: PropTypes.node.isRequired,
	  zero: PropTypes.node,
	  one: PropTypes.node,
	  two: PropTypes.node,
	  few: PropTypes.node,
	  many: PropTypes.node,

	  children: PropTypes.func
	}) : void 0;

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	var defaultFormatMessage = function defaultFormatMessage(descriptor, values) {
	  if (process.env.NODE_ENV !== 'production') {
	    console.error('[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry. Using default message as fallback.');
	  }
	  return formatMessage({}, { getMessageFormat: memoizeIntlConstructor(IntlMessageFormat) }, descriptor, values);
	};

	var FormattedMessage = function (_Component) {
	  inherits(FormattedMessage, _Component);

	  function FormattedMessage(props, context) {
	    classCallCheck(this, FormattedMessage);

	    var _this = possibleConstructorReturn(this, (FormattedMessage.__proto__ || Object.getPrototypeOf(FormattedMessage)).call(this, props, context));

	    if (!props.defaultMessage) {
	      invariantIntlContext(context);
	    }
	    return _this;
	  }

	  createClass(FormattedMessage, [{
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps) {
	      var values = this.props.values;
	      var nextValues = nextProps.values;


	      if (!shallowEquals(nextValues, values)) {
	        return true;
	      }

	      // Since `values` has already been checked, we know they're not
	      // different, so the current `values` are carried over so the shallow
	      // equals comparison on the other props isn't affected by the `values`.
	      var nextPropsToCheck = _extends({}, nextProps, {
	        values: values
	      });

	      for (var _len = arguments.length, next = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        next[_key - 1] = arguments[_key];
	      }

	      return shouldIntlComponentUpdate.apply(undefined, [this, nextPropsToCheck].concat(next));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _ref = this.context.intl || {},
	          _ref$formatMessage = _ref.formatMessage,
	          formatMessage$$1 = _ref$formatMessage === undefined ? defaultFormatMessage : _ref$formatMessage,
	          _ref$textComponent = _ref.textComponent,
	          Text = _ref$textComponent === undefined ? 'span' : _ref$textComponent;

	      var _props = this.props,
	          id = _props.id,
	          description = _props.description,
	          defaultMessage = _props.defaultMessage,
	          values = _props.values,
	          _props$tagName = _props.tagName,
	          Component$$1 = _props$tagName === undefined ? Text : _props$tagName,
	          children = _props.children;


	      var tokenDelimiter = void 0;
	      var tokenizedValues = void 0;
	      var elements = void 0;

	      var hasValues = values && Object.keys(values).length > 0;
	      if (hasValues) {
	        // Creates a token with a random UID that should not be guessable or
	        // conflict with other parts of the `message` string.
	        var uid = Math.floor(Math.random() * 0x10000000000).toString(16);

	        var generateToken = function () {
	          var counter = 0;
	          return function () {
	            return 'ELEMENT-' + uid + '-' + (counter += 1);
	          };
	        }();

	        // Splitting with a delimiter to support IE8. When using a regex
	        // with a capture group IE8 does not include the capture group in
	        // the resulting array.
	        tokenDelimiter = '@__' + uid + '__@';
	        tokenizedValues = {};
	        elements = {};

	        // Iterates over the `props` to keep track of any React Element
	        // values so they can be represented by the `token` as a placeholder
	        // when the `message` is formatted. This allows the formatted
	        // message to then be broken-up into parts with references to the
	        // React Elements inserted back in.
	        Object.keys(values).forEach(function (name) {
	          var value = values[name];

	          if (React.isValidElement(value)) {
	            var token = generateToken();
	            tokenizedValues[name] = tokenDelimiter + token + tokenDelimiter;
	            elements[token] = value;
	          } else {
	            tokenizedValues[name] = value;
	          }
	        });
	      }

	      var descriptor = { id: id, description: description, defaultMessage: defaultMessage };
	      var formattedMessage = formatMessage$$1(descriptor, tokenizedValues || values);

	      var nodes = void 0;

	      var hasElements = elements && Object.keys(elements).length > 0;
	      if (hasElements) {
	        // Split the message into parts so the React Element values captured
	        // above can be inserted back into the rendered message. This
	        // approach allows messages to render with React Elements while
	        // keeping React's virtual diffing working properly.
	        nodes = formattedMessage.split(tokenDelimiter).filter(function (part) {
	          return !!part;
	        }).map(function (part) {
	          return elements[part] || part;
	        });
	      } else {
	        nodes = [formattedMessage];
	      }

	      if (typeof children === 'function') {
	        return children.apply(undefined, toConsumableArray(nodes));
	      }

	      // Needs to use `createElement()` instead of JSX, otherwise React will
	      // warn about a missing `key` prop with rich-text message formatting.
	      return React.createElement.apply(undefined, [Component$$1, null].concat(toConsumableArray(nodes)));
	    }
	  }]);
	  return FormattedMessage;
	}(React.Component);

	FormattedMessage.displayName = 'FormattedMessage';
	FormattedMessage.contextTypes = {
	  intl: intlShape
	};
	FormattedMessage.defaultProps = {
	  values: {}
	};
	process.env.NODE_ENV !== "production" ? FormattedMessage.propTypes = _extends({}, messageDescriptorPropTypes, {
	  values: PropTypes.object,
	  tagName: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
	  children: PropTypes.func
	}) : void 0;

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	var FormattedHTMLMessage = function (_Component) {
	  inherits(FormattedHTMLMessage, _Component);

	  function FormattedHTMLMessage(props, context) {
	    classCallCheck(this, FormattedHTMLMessage);

	    var _this = possibleConstructorReturn(this, (FormattedHTMLMessage.__proto__ || Object.getPrototypeOf(FormattedHTMLMessage)).call(this, props, context));

	    invariantIntlContext(context);
	    return _this;
	  }

	  createClass(FormattedHTMLMessage, [{
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps) {
	      var values = this.props.values;
	      var nextValues = nextProps.values;


	      if (!shallowEquals(nextValues, values)) {
	        return true;
	      }

	      // Since `values` has already been checked, we know they're not
	      // different, so the current `values` are carried over so the shallow
	      // equals comparison on the other props isn't affected by the `values`.
	      var nextPropsToCheck = _extends({}, nextProps, {
	        values: values
	      });

	      for (var _len = arguments.length, next = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        next[_key - 1] = arguments[_key];
	      }

	      return shouldIntlComponentUpdate.apply(undefined, [this, nextPropsToCheck].concat(next));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _context$intl = this.context.intl,
	          formatHTMLMessage = _context$intl.formatHTMLMessage,
	          Text = _context$intl.textComponent;
	      var _props = this.props,
	          id = _props.id,
	          description = _props.description,
	          defaultMessage = _props.defaultMessage,
	          rawValues = _props.values,
	          _props$tagName = _props.tagName,
	          Component$$1 = _props$tagName === undefined ? Text : _props$tagName,
	          children = _props.children;


	      var descriptor = { id: id, description: description, defaultMessage: defaultMessage };
	      var formattedHTMLMessage = formatHTMLMessage(descriptor, rawValues);

	      if (typeof children === 'function') {
	        return children(formattedHTMLMessage);
	      }

	      // Since the message presumably has HTML in it, we need to set
	      // `innerHTML` in order for it to be rendered and not escaped by React.
	      // To be safe, all string prop values were escaped when formatting the
	      // message. It is assumed that the message is not UGC, and came from the
	      // developer making it more like a template.
	      //
	      // Note: There's a perf impact of using this component since there's no
	      // way for React to do its virtual DOM diffing.
	      var html = { __html: formattedHTMLMessage };
	      return React__default.createElement(Component$$1, { dangerouslySetInnerHTML: html });
	    }
	  }]);
	  return FormattedHTMLMessage;
	}(React.Component);

	FormattedHTMLMessage.displayName = 'FormattedHTMLMessage';
	FormattedHTMLMessage.contextTypes = {
	  intl: intlShape
	};
	FormattedHTMLMessage.defaultProps = {
	  values: {}
	};
	process.env.NODE_ENV !== "production" ? FormattedHTMLMessage.propTypes = _extends({}, messageDescriptorPropTypes, {
	  values: PropTypes.object,
	  tagName: PropTypes.string,
	  children: PropTypes.func
	}) : void 0;

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	addLocaleData(defaultLocaleData);

	/*
	 * Copyright 2015, Yahoo Inc.
	 * Copyrights licensed under the New BSD License.
	 * See the accompanying LICENSE file for terms.
	 */

	addLocaleData(allLocaleData);

	exports.addLocaleData = addLocaleData;
	exports.intlShape = intlShape;
	exports.injectIntl = injectIntl;
	exports.defineMessages = defineMessages;
	exports.IntlProvider = IntlProvider;
	exports.FormattedDate = FormattedDate;
	exports.FormattedTime = FormattedTime;
	exports.FormattedRelative = FormattedRelative;
	exports.FormattedNumber = FormattedNumber;
	exports.FormattedPlural = FormattedPlural;
	exports.FormattedMessage = FormattedMessage;
	exports.FormattedHTMLMessage = FormattedHTMLMessage;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 828 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 829 */
/***/ (function(module, exports, __webpack_require__) {

	/* jshint node:true */

	'use strict';

	var IntlMessageFormat = __webpack_require__(830)['default'];

	// Add all locale data to `IntlMessageFormat`. This module will be ignored when
	// bundling for the browser with Browserify/Webpack.
	__webpack_require__(838);

	// Re-export `IntlMessageFormat` as the CommonJS default exports with all the
	// locale data registered, and with English set as the default locale. Define
	// the `default` prop for use with other compiled ES6 Modules.
	exports = module.exports = IntlMessageFormat;
	exports['default'] = exports;


/***/ }),
/* 830 */
/***/ (function(module, exports, __webpack_require__) {

	/* jslint esnext: true */

	"use strict";
	var src$core$$ = __webpack_require__(831), src$en$$ = __webpack_require__(837);

	src$core$$["default"].__addLocaleData(src$en$$["default"]);
	src$core$$["default"].defaultLocale = 'en';

	exports["default"] = src$core$$["default"];

	//# sourceMappingURL=main.js.map

/***/ }),
/* 831 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";
	var src$utils$$ = __webpack_require__(832), src$es5$$ = __webpack_require__(833), src$compiler$$ = __webpack_require__(834), intl$messageformat$parser$$ = __webpack_require__(835);
	exports["default"] = MessageFormat;

	// -- MessageFormat --------------------------------------------------------

	function MessageFormat(message, locales, formats) {
	    // Parse string messages into an AST.
	    var ast = typeof message === 'string' ?
	            MessageFormat.__parse(message) : message;

	    if (!(ast && ast.type === 'messageFormatPattern')) {
	        throw new TypeError('A message must be provided as a String or AST.');
	    }

	    // Creates a new object with the specified `formats` merged with the default
	    // formats.
	    formats = this._mergeFormats(MessageFormat.formats, formats);

	    // Defined first because it's used to build the format pattern.
	    src$es5$$.defineProperty(this, '_locale',  {value: this._resolveLocale(locales)});

	    // Compile the `ast` to a pattern that is highly optimized for repeated
	    // `format()` invocations. **Note:** This passes the `locales` set provided
	    // to the constructor instead of just the resolved locale.
	    var pluralFn = this._findPluralRuleFunction(this._locale);
	    var pattern  = this._compilePattern(ast, locales, formats, pluralFn);

	    // "Bind" `format()` method to `this` so it can be passed by reference like
	    // the other `Intl` APIs.
	    var messageFormat = this;
	    this.format = function (values) {
	      try {
	        return messageFormat._format(pattern, values);
	      } catch (e) {
	        if (e.variableId) {
	          throw new Error(
	            'The intl string context variable \'' + e.variableId + '\'' +
	            ' was not provided to the string \'' + message + '\''
	          );
	        } else {
	          throw e;
	        }
	      }
	    };
	}

	// Default format options used as the prototype of the `formats` provided to the
	// constructor. These are used when constructing the internal Intl.NumberFormat
	// and Intl.DateTimeFormat instances.
	src$es5$$.defineProperty(MessageFormat, 'formats', {
	    enumerable: true,

	    value: {
	        number: {
	            'currency': {
	                style: 'currency'
	            },

	            'percent': {
	                style: 'percent'
	            }
	        },

	        date: {
	            'short': {
	                month: 'numeric',
	                day  : 'numeric',
	                year : '2-digit'
	            },

	            'medium': {
	                month: 'short',
	                day  : 'numeric',
	                year : 'numeric'
	            },

	            'long': {
	                month: 'long',
	                day  : 'numeric',
	                year : 'numeric'
	            },

	            'full': {
	                weekday: 'long',
	                month  : 'long',
	                day    : 'numeric',
	                year   : 'numeric'
	            }
	        },

	        time: {
	            'short': {
	                hour  : 'numeric',
	                minute: 'numeric'
	            },

	            'medium':  {
	                hour  : 'numeric',
	                minute: 'numeric',
	                second: 'numeric'
	            },

	            'long': {
	                hour        : 'numeric',
	                minute      : 'numeric',
	                second      : 'numeric',
	                timeZoneName: 'short'
	            },

	            'full': {
	                hour        : 'numeric',
	                minute      : 'numeric',
	                second      : 'numeric',
	                timeZoneName: 'short'
	            }
	        }
	    }
	});

	// Define internal private properties for dealing with locale data.
	src$es5$$.defineProperty(MessageFormat, '__localeData__', {value: src$es5$$.objCreate(null)});
	src$es5$$.defineProperty(MessageFormat, '__addLocaleData', {value: function (data) {
	    if (!(data && data.locale)) {
	        throw new Error(
	            'Locale data provided to IntlMessageFormat is missing a ' +
	            '`locale` property'
	        );
	    }

	    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;
	}});

	// Defines `__parse()` static method as an exposed private.
	src$es5$$.defineProperty(MessageFormat, '__parse', {value: intl$messageformat$parser$$["default"].parse});

	// Define public `defaultLocale` property which defaults to English, but can be
	// set by the developer.
	src$es5$$.defineProperty(MessageFormat, 'defaultLocale', {
	    enumerable: true,
	    writable  : true,
	    value     : undefined
	});

	MessageFormat.prototype.resolvedOptions = function () {
	    // TODO: Provide anything else?
	    return {
	        locale: this._locale
	    };
	};

	MessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {
	    var compiler = new src$compiler$$["default"](locales, formats, pluralFn);
	    return compiler.compile(ast);
	};

	MessageFormat.prototype._findPluralRuleFunction = function (locale) {
	    var localeData = MessageFormat.__localeData__;
	    var data       = localeData[locale.toLowerCase()];

	    // The locale data is de-duplicated, so we have to traverse the locale's
	    // hierarchy until we find a `pluralRuleFunction` to return.
	    while (data) {
	        if (data.pluralRuleFunction) {
	            return data.pluralRuleFunction;
	        }

	        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];
	    }

	    throw new Error(
	        'Locale data added to IntlMessageFormat is missing a ' +
	        '`pluralRuleFunction` for :' + locale
	    );
	};

	MessageFormat.prototype._format = function (pattern, values) {
	    var result = '',
	        i, len, part, id, value, err;

	    for (i = 0, len = pattern.length; i < len; i += 1) {
	        part = pattern[i];

	        // Exist early for string parts.
	        if (typeof part === 'string') {
	            result += part;
	            continue;
	        }

	        id = part.id;

	        // Enforce that all required values are provided by the caller.
	        if (!(values && src$utils$$.hop.call(values, id))) {
	          err = new Error('A value must be provided for: ' + id);
	          err.variableId = id;
	          throw err;
	        }

	        value = values[id];

	        // Recursively format plural and select parts' option — which can be a
	        // nested pattern structure. The choosing of the option to use is
	        // abstracted-by and delegated-to the part helper object.
	        if (part.options) {
	            result += this._format(part.getOption(value), values);
	        } else {
	            result += part.format(value);
	        }
	    }

	    return result;
	};

	MessageFormat.prototype._mergeFormats = function (defaults, formats) {
	    var mergedFormats = {},
	        type, mergedType;

	    for (type in defaults) {
	        if (!src$utils$$.hop.call(defaults, type)) { continue; }

	        mergedFormats[type] = mergedType = src$es5$$.objCreate(defaults[type]);

	        if (formats && src$utils$$.hop.call(formats, type)) {
	            src$utils$$.extend(mergedType, formats[type]);
	        }
	    }

	    return mergedFormats;
	};

	MessageFormat.prototype._resolveLocale = function (locales) {
	    if (typeof locales === 'string') {
	        locales = [locales];
	    }

	    // Create a copy of the array so we can push on the default locale.
	    locales = (locales || []).concat(MessageFormat.defaultLocale);

	    var localeData = MessageFormat.__localeData__;
	    var i, len, localeParts, data;

	    // Using the set of locales + the default locale, we look for the first one
	    // which that has been registered. When data does not exist for a locale, we
	    // traverse its ancestors to find something that's been registered within
	    // its hierarchy of locales. Since we lack the proper `parentLocale` data
	    // here, we must take a naive approach to traversal.
	    for (i = 0, len = locales.length; i < len; i += 1) {
	        localeParts = locales[i].toLowerCase().split('-');

	        while (localeParts.length) {
	            data = localeData[localeParts.join('-')];
	            if (data) {
	                // Return the normalized locale string; e.g., we return "en-US",
	                // instead of "en-us".
	                return data.locale;
	            }

	            localeParts.pop();
	        }
	    }

	    var defaultLocale = locales.pop();
	    throw new Error(
	        'No locale data has been added to IntlMessageFormat for: ' +
	        locales.join(', ') + ', or the default locale: ' + defaultLocale
	    );
	};

	//# sourceMappingURL=core.js.map

/***/ }),
/* 832 */
/***/ (function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";
	exports.extend = extend;
	var hop = Object.prototype.hasOwnProperty;

	function extend(obj) {
	    var sources = Array.prototype.slice.call(arguments, 1),
	        i, len, source, key;

	    for (i = 0, len = sources.length; i < len; i += 1) {
	        source = sources[i];
	        if (!source) { continue; }

	        for (key in source) {
	            if (hop.call(source, key)) {
	                obj[key] = source[key];
	            }
	        }
	    }

	    return obj;
	}
	exports.hop = hop;

	//# sourceMappingURL=utils.js.map

/***/ }),
/* 833 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";
	var src$utils$$ = __webpack_require__(832);

	// Purposely using the same implementation as the Intl.js `Intl` polyfill.
	// Copyright 2013 Andy Earnshaw, MIT License

	var realDefineProp = (function () {
	    try { return !!Object.defineProperty({}, 'a', {}); }
	    catch (e) { return false; }
	})();

	var es3 = !realDefineProp && !Object.prototype.__defineGetter__;

	var defineProperty = realDefineProp ? Object.defineProperty :
	        function (obj, name, desc) {

	    if ('get' in desc && obj.__defineGetter__) {
	        obj.__defineGetter__(name, desc.get);
	    } else if (!src$utils$$.hop.call(obj, name) || 'value' in desc) {
	        obj[name] = desc.value;
	    }
	};

	var objCreate = Object.create || function (proto, props) {
	    var obj, k;

	    function F() {}
	    F.prototype = proto;
	    obj = new F();

	    for (k in props) {
	        if (src$utils$$.hop.call(props, k)) {
	            defineProperty(obj, k, props[k]);
	        }
	    }

	    return obj;
	};

	exports.defineProperty = defineProperty, exports.objCreate = objCreate;

	//# sourceMappingURL=es5.js.map

/***/ }),
/* 834 */
/***/ (function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";
	exports["default"] = Compiler;

	function Compiler(locales, formats, pluralFn) {
	    this.locales  = locales;
	    this.formats  = formats;
	    this.pluralFn = pluralFn;
	}

	Compiler.prototype.compile = function (ast) {
	    this.pluralStack        = [];
	    this.currentPlural      = null;
	    this.pluralNumberFormat = null;

	    return this.compileMessage(ast);
	};

	Compiler.prototype.compileMessage = function (ast) {
	    if (!(ast && ast.type === 'messageFormatPattern')) {
	        throw new Error('Message AST is not of type: "messageFormatPattern"');
	    }

	    var elements = ast.elements,
	        pattern  = [];

	    var i, len, element;

	    for (i = 0, len = elements.length; i < len; i += 1) {
	        element = elements[i];

	        switch (element.type) {
	            case 'messageTextElement':
	                pattern.push(this.compileMessageText(element));
	                break;

	            case 'argumentElement':
	                pattern.push(this.compileArgument(element));
	                break;

	            default:
	                throw new Error('Message element does not have a valid type');
	        }
	    }

	    return pattern;
	};

	Compiler.prototype.compileMessageText = function (element) {
	    // When this `element` is part of plural sub-pattern and its value contains
	    // an unescaped '#', use a `PluralOffsetString` helper to properly output
	    // the number with the correct offset in the string.
	    if (this.currentPlural && /(^|[^\\])#/g.test(element.value)) {
	        // Create a cache a NumberFormat instance that can be reused for any
	        // PluralOffsetString instance in this message.
	        if (!this.pluralNumberFormat) {
	            this.pluralNumberFormat = new Intl.NumberFormat(this.locales);
	        }

	        return new PluralOffsetString(
	                this.currentPlural.id,
	                this.currentPlural.format.offset,
	                this.pluralNumberFormat,
	                element.value);
	    }

	    // Unescape the escaped '#'s in the message text.
	    return element.value.replace(/\\#/g, '#');
	};

	Compiler.prototype.compileArgument = function (element) {
	    var format = element.format;

	    if (!format) {
	        return new StringFormat(element.id);
	    }

	    var formats  = this.formats,
	        locales  = this.locales,
	        pluralFn = this.pluralFn,
	        options;

	    switch (format.type) {
	        case 'numberFormat':
	            options = formats.number[format.style];
	            return {
	                id    : element.id,
	                format: new Intl.NumberFormat(locales, options).format
	            };

	        case 'dateFormat':
	            options = formats.date[format.style];
	            return {
	                id    : element.id,
	                format: new Intl.DateTimeFormat(locales, options).format
	            };

	        case 'timeFormat':
	            options = formats.time[format.style];
	            return {
	                id    : element.id,
	                format: new Intl.DateTimeFormat(locales, options).format
	            };

	        case 'pluralFormat':
	            options = this.compileOptions(element);
	            return new PluralFormat(
	                element.id, format.ordinal, format.offset, options, pluralFn
	            );

	        case 'selectFormat':
	            options = this.compileOptions(element);
	            return new SelectFormat(element.id, options);

	        default:
	            throw new Error('Message element does not have a valid format type');
	    }
	};

	Compiler.prototype.compileOptions = function (element) {
	    var format      = element.format,
	        options     = format.options,
	        optionsHash = {};

	    // Save the current plural element, if any, then set it to a new value when
	    // compiling the options sub-patterns. This conforms the spec's algorithm
	    // for handling `"#"` syntax in message text.
	    this.pluralStack.push(this.currentPlural);
	    this.currentPlural = format.type === 'pluralFormat' ? element : null;

	    var i, len, option;

	    for (i = 0, len = options.length; i < len; i += 1) {
	        option = options[i];

	        // Compile the sub-pattern and save it under the options's selector.
	        optionsHash[option.selector] = this.compileMessage(option.value);
	    }

	    // Pop the plural stack to put back the original current plural value.
	    this.currentPlural = this.pluralStack.pop();

	    return optionsHash;
	};

	// -- Compiler Helper Classes --------------------------------------------------

	function StringFormat(id) {
	    this.id = id;
	}

	StringFormat.prototype.format = function (value) {
	    if (!value && typeof value !== 'number') {
	        return '';
	    }

	    return typeof value === 'string' ? value : String(value);
	};

	function PluralFormat(id, useOrdinal, offset, options, pluralFn) {
	    this.id         = id;
	    this.useOrdinal = useOrdinal;
	    this.offset     = offset;
	    this.options    = options;
	    this.pluralFn   = pluralFn;
	}

	PluralFormat.prototype.getOption = function (value) {
	    var options = this.options;

	    var option = options['=' + value] ||
	            options[this.pluralFn(value - this.offset, this.useOrdinal)];

	    return option || options.other;
	};

	function PluralOffsetString(id, offset, numberFormat, string) {
	    this.id           = id;
	    this.offset       = offset;
	    this.numberFormat = numberFormat;
	    this.string       = string;
	}

	PluralOffsetString.prototype.format = function (value) {
	    var number = this.numberFormat.format(value - this.offset);

	    return this.string
	            .replace(/(^|[^\\])#/g, '$1' + number)
	            .replace(/\\#/g, '#');
	};

	function SelectFormat(id, options) {
	    this.id      = id;
	    this.options = options;
	}

	SelectFormat.prototype.getOption = function (value) {
	    var options = this.options;
	    return options[value] || options.other;
	};

	//# sourceMappingURL=compiler.js.map

/***/ }),
/* 835 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports = module.exports = __webpack_require__(836)['default'];
	exports['default'] = exports;


/***/ }),
/* 836 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = (function() {
	  "use strict";

	  /*
	   * Generated by PEG.js 0.9.0.
	   *
	   * http://pegjs.org/
	   */

	  function peg$subclass(child, parent) {
	    function ctor() { this.constructor = child; }
	    ctor.prototype = parent.prototype;
	    child.prototype = new ctor();
	  }

	  function peg$SyntaxError(message, expected, found, location) {
	    this.message  = message;
	    this.expected = expected;
	    this.found    = found;
	    this.location = location;
	    this.name     = "SyntaxError";

	    if (typeof Error.captureStackTrace === "function") {
	      Error.captureStackTrace(this, peg$SyntaxError);
	    }
	  }

	  peg$subclass(peg$SyntaxError, Error);

	  function peg$parse(input) {
	    var options = arguments.length > 1 ? arguments[1] : {},
	        parser  = this,

	        peg$FAILED = {},

	        peg$startRuleFunctions = { start: peg$parsestart },
	        peg$startRuleFunction  = peg$parsestart,

	        peg$c0 = function(elements) {
	                return {
	                    type    : 'messageFormatPattern',
	                    elements: elements,
	                    location: location()
	                };
	            },
	        peg$c1 = function(text) {
	                var string = '',
	                    i, j, outerLen, inner, innerLen;

	                for (i = 0, outerLen = text.length; i < outerLen; i += 1) {
	                    inner = text[i];

	                    for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {
	                        string += inner[j];
	                    }
	                }

	                return string;
	            },
	        peg$c2 = function(messageText) {
	                return {
	                    type : 'messageTextElement',
	                    value: messageText,
	                    location: location()
	                };
	            },
	        peg$c3 = /^[^ \t\n\r,.+={}#]/,
	        peg$c4 = { type: "class", value: "[^ \\t\\n\\r,.+={}#]", description: "[^ \\t\\n\\r,.+={}#]" },
	        peg$c5 = "{",
	        peg$c6 = { type: "literal", value: "{", description: "\"{\"" },
	        peg$c7 = ",",
	        peg$c8 = { type: "literal", value: ",", description: "\",\"" },
	        peg$c9 = "}",
	        peg$c10 = { type: "literal", value: "}", description: "\"}\"" },
	        peg$c11 = function(id, format) {
	                return {
	                    type  : 'argumentElement',
	                    id    : id,
	                    format: format && format[2],
	                    location: location()
	                };
	            },
	        peg$c12 = "number",
	        peg$c13 = { type: "literal", value: "number", description: "\"number\"" },
	        peg$c14 = "date",
	        peg$c15 = { type: "literal", value: "date", description: "\"date\"" },
	        peg$c16 = "time",
	        peg$c17 = { type: "literal", value: "time", description: "\"time\"" },
	        peg$c18 = function(type, style) {
	                return {
	                    type : type + 'Format',
	                    style: style && style[2],
	                    location: location()
	                };
	            },
	        peg$c19 = "plural",
	        peg$c20 = { type: "literal", value: "plural", description: "\"plural\"" },
	        peg$c21 = function(pluralStyle) {
	                return {
	                    type   : pluralStyle.type,
	                    ordinal: false,
	                    offset : pluralStyle.offset || 0,
	                    options: pluralStyle.options,
	                    location: location()
	                };
	            },
	        peg$c22 = "selectordinal",
	        peg$c23 = { type: "literal", value: "selectordinal", description: "\"selectordinal\"" },
	        peg$c24 = function(pluralStyle) {
	                return {
	                    type   : pluralStyle.type,
	                    ordinal: true,
	                    offset : pluralStyle.offset || 0,
	                    options: pluralStyle.options,
	                    location: location()
	                }
	            },
	        peg$c25 = "select",
	        peg$c26 = { type: "literal", value: "select", description: "\"select\"" },
	        peg$c27 = function(options) {
	                return {
	                    type   : 'selectFormat',
	                    options: options,
	                    location: location()
	                };
	            },
	        peg$c28 = "=",
	        peg$c29 = { type: "literal", value: "=", description: "\"=\"" },
	        peg$c30 = function(selector, pattern) {
	                return {
	                    type    : 'optionalFormatPattern',
	                    selector: selector,
	                    value   : pattern,
	                    location: location()
	                };
	            },
	        peg$c31 = "offset:",
	        peg$c32 = { type: "literal", value: "offset:", description: "\"offset:\"" },
	        peg$c33 = function(number) {
	                return number;
	            },
	        peg$c34 = function(offset, options) {
	                return {
	                    type   : 'pluralFormat',
	                    offset : offset,
	                    options: options,
	                    location: location()
	                };
	            },
	        peg$c35 = { type: "other", description: "whitespace" },
	        peg$c36 = /^[ \t\n\r]/,
	        peg$c37 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
	        peg$c38 = { type: "other", description: "optionalWhitespace" },
	        peg$c39 = /^[0-9]/,
	        peg$c40 = { type: "class", value: "[0-9]", description: "[0-9]" },
	        peg$c41 = /^[0-9a-f]/i,
	        peg$c42 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
	        peg$c43 = "0",
	        peg$c44 = { type: "literal", value: "0", description: "\"0\"" },
	        peg$c45 = /^[1-9]/,
	        peg$c46 = { type: "class", value: "[1-9]", description: "[1-9]" },
	        peg$c47 = function(digits) {
	            return parseInt(digits, 10);
	        },
	        peg$c48 = /^[^{}\\\0-\x1F \t\n\r]/,
	        peg$c49 = { type: "class", value: "[^{}\\\\\\0-\\x1F\\x7f \\t\\n\\r]", description: "[^{}\\\\\\0-\\x1F\\x7f \\t\\n\\r]" },
	        peg$c50 = "\\\\",
	        peg$c51 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
	        peg$c52 = function() { return '\\'; },
	        peg$c53 = "\\#",
	        peg$c54 = { type: "literal", value: "\\#", description: "\"\\\\#\"" },
	        peg$c55 = function() { return '\\#'; },
	        peg$c56 = "\\{",
	        peg$c57 = { type: "literal", value: "\\{", description: "\"\\\\{\"" },
	        peg$c58 = function() { return '\u007B'; },
	        peg$c59 = "\\}",
	        peg$c60 = { type: "literal", value: "\\}", description: "\"\\\\}\"" },
	        peg$c61 = function() { return '\u007D'; },
	        peg$c62 = "\\u",
	        peg$c63 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },
	        peg$c64 = function(digits) {
	                return String.fromCharCode(parseInt(digits, 16));
	            },
	        peg$c65 = function(chars) { return chars.join(''); },

	        peg$currPos          = 0,
	        peg$savedPos         = 0,
	        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
	        peg$maxFailPos       = 0,
	        peg$maxFailExpected  = [],
	        peg$silentFails      = 0,

	        peg$result;

	    if ("startRule" in options) {
	      if (!(options.startRule in peg$startRuleFunctions)) {
	        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	      }

	      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	    }

	    function text() {
	      return input.substring(peg$savedPos, peg$currPos);
	    }

	    function location() {
	      return peg$computeLocation(peg$savedPos, peg$currPos);
	    }

	    function expected(description) {
	      throw peg$buildException(
	        null,
	        [{ type: "other", description: description }],
	        input.substring(peg$savedPos, peg$currPos),
	        peg$computeLocation(peg$savedPos, peg$currPos)
	      );
	    }

	    function error(message) {
	      throw peg$buildException(
	        message,
	        null,
	        input.substring(peg$savedPos, peg$currPos),
	        peg$computeLocation(peg$savedPos, peg$currPos)
	      );
	    }

	    function peg$computePosDetails(pos) {
	      var details = peg$posDetailsCache[pos],
	          p, ch;

	      if (details) {
	        return details;
	      } else {
	        p = pos - 1;
	        while (!peg$posDetailsCache[p]) {
	          p--;
	        }

	        details = peg$posDetailsCache[p];
	        details = {
	          line:   details.line,
	          column: details.column,
	          seenCR: details.seenCR
	        };

	        while (p < pos) {
	          ch = input.charAt(p);
	          if (ch === "\n") {
	            if (!details.seenCR) { details.line++; }
	            details.column = 1;
	            details.seenCR = false;
	          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
	            details.line++;
	            details.column = 1;
	            details.seenCR = true;
	          } else {
	            details.column++;
	            details.seenCR = false;
	          }

	          p++;
	        }

	        peg$posDetailsCache[pos] = details;
	        return details;
	      }
	    }

	    function peg$computeLocation(startPos, endPos) {
	      var startPosDetails = peg$computePosDetails(startPos),
	          endPosDetails   = peg$computePosDetails(endPos);

	      return {
	        start: {
	          offset: startPos,
	          line:   startPosDetails.line,
	          column: startPosDetails.column
	        },
	        end: {
	          offset: endPos,
	          line:   endPosDetails.line,
	          column: endPosDetails.column
	        }
	      };
	    }

	    function peg$fail(expected) {
	      if (peg$currPos < peg$maxFailPos) { return; }

	      if (peg$currPos > peg$maxFailPos) {
	        peg$maxFailPos = peg$currPos;
	        peg$maxFailExpected = [];
	      }

	      peg$maxFailExpected.push(expected);
	    }

	    function peg$buildException(message, expected, found, location) {
	      function cleanupExpected(expected) {
	        var i = 1;

	        expected.sort(function(a, b) {
	          if (a.description < b.description) {
	            return -1;
	          } else if (a.description > b.description) {
	            return 1;
	          } else {
	            return 0;
	          }
	        });

	        while (i < expected.length) {
	          if (expected[i - 1] === expected[i]) {
	            expected.splice(i, 1);
	          } else {
	            i++;
	          }
	        }
	      }

	      function buildMessage(expected, found) {
	        function stringEscape(s) {
	          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

	          return s
	            .replace(/\\/g,   '\\\\')
	            .replace(/"/g,    '\\"')
	            .replace(/\x08/g, '\\b')
	            .replace(/\t/g,   '\\t')
	            .replace(/\n/g,   '\\n')
	            .replace(/\f/g,   '\\f')
	            .replace(/\r/g,   '\\r')
	            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
	            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
	            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
	            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
	        }

	        var expectedDescs = new Array(expected.length),
	            expectedDesc, foundDesc, i;

	        for (i = 0; i < expected.length; i++) {
	          expectedDescs[i] = expected[i].description;
	        }

	        expectedDesc = expected.length > 1
	          ? expectedDescs.slice(0, -1).join(", ")
	              + " or "
	              + expectedDescs[expected.length - 1]
	          : expectedDescs[0];

	        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

	        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
	      }

	      if (expected !== null) {
	        cleanupExpected(expected);
	      }

	      return new peg$SyntaxError(
	        message !== null ? message : buildMessage(expected, found),
	        expected,
	        found,
	        location
	      );
	    }

	    function peg$parsestart() {
	      var s0;

	      s0 = peg$parsemessageFormatPattern();

	      return s0;
	    }

	    function peg$parsemessageFormatPattern() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsemessageFormatElement();
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$parsemessageFormatElement();
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c0(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsemessageFormatElement() {
	      var s0;

	      s0 = peg$parsemessageTextElement();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parseargumentElement();
	      }

	      return s0;
	    }

	    function peg$parsemessageText() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$currPos;
	      s3 = peg$parse_();
	      if (s3 !== peg$FAILED) {
	        s4 = peg$parsechars();
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parse_();
	          if (s5 !== peg$FAILED) {
	            s3 = [s3, s4, s5];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$currPos;
	          s3 = peg$parse_();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsechars();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parse_();
	              if (s5 !== peg$FAILED) {
	                s3 = [s3, s4, s5];
	                s2 = s3;
	              } else {
	                peg$currPos = s2;
	                s2 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c1(s1);
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parsews();
	        if (s1 !== peg$FAILED) {
	          s0 = input.substring(s0, peg$currPos);
	        } else {
	          s0 = s1;
	        }
	      }

	      return s0;
	    }

	    function peg$parsemessageTextElement() {
	      var s0, s1;

	      s0 = peg$currPos;
	      s1 = peg$parsemessageText();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c2(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parseargument() {
	      var s0, s1, s2;

	      s0 = peg$parsenumber();
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = [];
	        if (peg$c3.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c4); }
	        }
	        if (s2 !== peg$FAILED) {
	          while (s2 !== peg$FAILED) {
	            s1.push(s2);
	            if (peg$c3.test(input.charAt(peg$currPos))) {
	              s2 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c4); }
	            }
	          }
	        } else {
	          s1 = peg$FAILED;
	        }
	        if (s1 !== peg$FAILED) {
	          s0 = input.substring(s0, peg$currPos);
	        } else {
	          s0 = s1;
	        }
	      }

	      return s0;
	    }

	    function peg$parseargumentElement() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 123) {
	        s1 = peg$c5;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c6); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseargument();
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$currPos;
	              if (input.charCodeAt(peg$currPos) === 44) {
	                s6 = peg$c7;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c8); }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parse_();
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parseelementFormat();
	                  if (s8 !== peg$FAILED) {
	                    s6 = [s6, s7, s8];
	                    s5 = s6;
	                  } else {
	                    peg$currPos = s5;
	                    s5 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s5;
	                  s5 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s5;
	                s5 = peg$FAILED;
	              }
	              if (s5 === peg$FAILED) {
	                s5 = null;
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parse_();
	                if (s6 !== peg$FAILED) {
	                  if (input.charCodeAt(peg$currPos) === 125) {
	                    s7 = peg$c9;
	                    peg$currPos++;
	                  } else {
	                    s7 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c10); }
	                  }
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c11(s3, s5);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseelementFormat() {
	      var s0;

	      s0 = peg$parsesimpleFormat();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsepluralFormat();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parseselectOrdinalFormat();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parseselectFormat();
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsesimpleFormat() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c12) {
	        s1 = peg$c12;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c13); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.substr(peg$currPos, 4) === peg$c14) {
	          s1 = peg$c14;
	          peg$currPos += 4;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c15); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.substr(peg$currPos, 4) === peg$c16) {
	            s1 = peg$c16;
	            peg$currPos += 4;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c17); }
	          }
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s4 = peg$c7;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c8); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parsechars();
	              if (s6 !== peg$FAILED) {
	                s4 = [s4, s5, s6];
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c18(s1, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsepluralFormat() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c19) {
	        s1 = peg$c19;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c20); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s3 = peg$c7;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c8); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsepluralStyle();
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c21(s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseselectOrdinalFormat() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 13) === peg$c22) {
	        s1 = peg$c22;
	        peg$currPos += 13;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c23); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s3 = peg$c7;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c8); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsepluralStyle();
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c24(s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseselectFormat() {
	      var s0, s1, s2, s3, s4, s5, s6;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 6) === peg$c25) {
	        s1 = peg$c25;
	        peg$currPos += 6;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c26); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s3 = peg$c7;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c8); }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = [];
	              s6 = peg$parseoptionalFormatPattern();
	              if (s6 !== peg$FAILED) {
	                while (s6 !== peg$FAILED) {
	                  s5.push(s6);
	                  s6 = peg$parseoptionalFormatPattern();
	                }
	              } else {
	                s5 = peg$FAILED;
	              }
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c27(s5);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseselector() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 61) {
	        s2 = peg$c28;
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c29); }
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parsenumber();
	        if (s3 !== peg$FAILED) {
	          s2 = [s2, s3];
	          s1 = s2;
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s1;
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s0 = input.substring(s0, peg$currPos);
	      } else {
	        s0 = s1;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsechars();
	      }

	      return s0;
	    }

	    function peg$parseoptionalFormatPattern() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

	      s0 = peg$currPos;
	      s1 = peg$parse_();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseselector();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parse_();
	          if (s3 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 123) {
	              s4 = peg$c5;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c6); }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parse_();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parsemessageFormatPattern();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parse_();
	                  if (s7 !== peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 125) {
	                      s8 = peg$c9;
	                      peg$currPos++;
	                    } else {
	                      s8 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c10); }
	                    }
	                    if (s8 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c30(s2, s6);
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parseoffset() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 7) === peg$c31) {
	        s1 = peg$c31;
	        peg$currPos += 7;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c32); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsenumber();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c33(s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsepluralStyle() {
	      var s0, s1, s2, s3, s4;

	      s0 = peg$currPos;
	      s1 = peg$parseoffset();
	      if (s1 === peg$FAILED) {
	        s1 = null;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = [];
	          s4 = peg$parseoptionalFormatPattern();
	          if (s4 !== peg$FAILED) {
	            while (s4 !== peg$FAILED) {
	              s3.push(s4);
	              s4 = peg$parseoptionalFormatPattern();
	            }
	          } else {
	            s3 = peg$FAILED;
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c34(s1, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }

	      return s0;
	    }

	    function peg$parsews() {
	      var s0, s1;

	      peg$silentFails++;
	      s0 = [];
	      if (peg$c36.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c37); }
	      }
	      if (s1 !== peg$FAILED) {
	        while (s1 !== peg$FAILED) {
	          s0.push(s1);
	          if (peg$c36.test(input.charAt(peg$currPos))) {
	            s1 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c37); }
	          }
	        }
	      } else {
	        s0 = peg$FAILED;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c35); }
	      }

	      return s0;
	    }

	    function peg$parse_() {
	      var s0, s1, s2;

	      peg$silentFails++;
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsews();
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$parsews();
	      }
	      if (s1 !== peg$FAILED) {
	        s0 = input.substring(s0, peg$currPos);
	      } else {
	        s0 = s1;
	      }
	      peg$silentFails--;
	      if (s0 === peg$FAILED) {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c38); }
	      }

	      return s0;
	    }

	    function peg$parsedigit() {
	      var s0;

	      if (peg$c39.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c40); }
	      }

	      return s0;
	    }

	    function peg$parsehexDigit() {
	      var s0;

	      if (peg$c41.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c42); }
	      }

	      return s0;
	    }

	    function peg$parsenumber() {
	      var s0, s1, s2, s3, s4, s5;

	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 48) {
	        s1 = peg$c43;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c44); }
	      }
	      if (s1 === peg$FAILED) {
	        s1 = peg$currPos;
	        s2 = peg$currPos;
	        if (peg$c45.test(input.charAt(peg$currPos))) {
	          s3 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c46); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = [];
	          s5 = peg$parsedigit();
	          while (s5 !== peg$FAILED) {
	            s4.push(s5);
	            s5 = peg$parsedigit();
	          }
	          if (s4 !== peg$FAILED) {
	            s3 = [s3, s4];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = input.substring(s1, peg$currPos);
	        } else {
	          s1 = s2;
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c47(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    function peg$parsechar() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;

	      if (peg$c48.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c49); }
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 2) === peg$c50) {
	          s1 = peg$c50;
	          peg$currPos += 2;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c51); }
	        }
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c52();
	        }
	        s0 = s1;
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.substr(peg$currPos, 2) === peg$c53) {
	            s1 = peg$c53;
	            peg$currPos += 2;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c54); }
	          }
	          if (s1 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c55();
	          }
	          s0 = s1;
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 2) === peg$c56) {
	              s1 = peg$c56;
	              peg$currPos += 2;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c57); }
	            }
	            if (s1 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c58();
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              if (input.substr(peg$currPos, 2) === peg$c59) {
	                s1 = peg$c59;
	                peg$currPos += 2;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c60); }
	              }
	              if (s1 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c61();
	              }
	              s0 = s1;
	              if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.substr(peg$currPos, 2) === peg$c62) {
	                  s1 = peg$c62;
	                  peg$currPos += 2;
	                } else {
	                  s1 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c63); }
	                }
	                if (s1 !== peg$FAILED) {
	                  s2 = peg$currPos;
	                  s3 = peg$currPos;
	                  s4 = peg$parsehexDigit();
	                  if (s4 !== peg$FAILED) {
	                    s5 = peg$parsehexDigit();
	                    if (s5 !== peg$FAILED) {
	                      s6 = peg$parsehexDigit();
	                      if (s6 !== peg$FAILED) {
	                        s7 = peg$parsehexDigit();
	                        if (s7 !== peg$FAILED) {
	                          s4 = [s4, s5, s6, s7];
	                          s3 = s4;
	                        } else {
	                          peg$currPos = s3;
	                          s3 = peg$FAILED;
	                        }
	                      } else {
	                        peg$currPos = s3;
	                        s3 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s3;
	                      s3 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                  if (s3 !== peg$FAILED) {
	                    s2 = input.substring(s2, peg$currPos);
	                  } else {
	                    s2 = s3;
	                  }
	                  if (s2 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c64(s2);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parsechars() {
	      var s0, s1, s2;

	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parsechar();
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$parsechar();
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c65(s1);
	      }
	      s0 = s1;

	      return s0;
	    }

	    peg$result = peg$startRuleFunction();

	    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	      return peg$result;
	    } else {
	      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	        peg$fail({ type: "end", description: "end of input" });
	      }

	      throw peg$buildException(
	        null,
	        peg$maxFailExpected,
	        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
	        peg$maxFailPos < input.length
	          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
	          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
	      );
	    }
	  }

	  return {
	    SyntaxError: peg$SyntaxError,
	    parse:       peg$parse
	  };
	})();

	//# sourceMappingURL=parser.js.map

/***/ }),
/* 837 */
/***/ (function(module, exports) {

	// GENERATED FILE
	"use strict";
	exports["default"] = {"locale":"en","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?"one":n10==2&&n100!=12?"two":n10==3&&n100!=13?"few":"other";return n==1&&v0?"one":"other"}};

	//# sourceMappingURL=en.js.map

/***/ }),
/* 838 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 839 */
/***/ (function(module, exports, __webpack_require__) {

	/* jshint node:true */

	'use strict';

	var IntlRelativeFormat = __webpack_require__(840)['default'];

	// Add all locale data to `IntlRelativeFormat`. This module will be ignored when
	// bundling for the browser with Browserify/Webpack.
	__webpack_require__(845);

	// Re-export `IntlRelativeFormat` as the CommonJS default exports with all the
	// locale data registered, and with English set as the default locale. Define
	// the `default` prop for use with other compiled ES6 Modules.
	exports = module.exports = IntlRelativeFormat;
	exports['default'] = exports;


/***/ }),
/* 840 */
/***/ (function(module, exports, __webpack_require__) {

	/* jslint esnext: true */

	"use strict";
	var src$core$$ = __webpack_require__(841), src$en$$ = __webpack_require__(844);

	src$core$$["default"].__addLocaleData(src$en$$["default"]);
	src$core$$["default"].defaultLocale = 'en';

	exports["default"] = src$core$$["default"];

	//# sourceMappingURL=main.js.map

/***/ }),
/* 841 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";
	var intl$messageformat$$ = __webpack_require__(829), src$diff$$ = __webpack_require__(842), src$es5$$ = __webpack_require__(843);
	exports["default"] = RelativeFormat;

	// -----------------------------------------------------------------------------

	var FIELDS = [
	    'second', 'second-short',
	    'minute', 'minute-short',
	    'hour', 'hour-short',
	    'day', 'day-short',
	    'month', 'month-short',
	    'year', 'year-short'
	];
	var STYLES = ['best fit', 'numeric'];

	// -- RelativeFormat -----------------------------------------------------------

	function RelativeFormat(locales, options) {
	    options = options || {};

	    // Make a copy of `locales` if it's an array, so that it doesn't change
	    // since it's used lazily.
	    if (src$es5$$.isArray(locales)) {
	        locales = locales.concat();
	    }

	    src$es5$$.defineProperty(this, '_locale', {value: this._resolveLocale(locales)});
	    src$es5$$.defineProperty(this, '_options', {value: {
	        style: this._resolveStyle(options.style),
	        units: this._isValidUnits(options.units) && options.units
	    }});

	    src$es5$$.defineProperty(this, '_locales', {value: locales});
	    src$es5$$.defineProperty(this, '_fields', {value: this._findFields(this._locale)});
	    src$es5$$.defineProperty(this, '_messages', {value: src$es5$$.objCreate(null)});

	    // "Bind" `format()` method to `this` so it can be passed by reference like
	    // the other `Intl` APIs.
	    var relativeFormat = this;
	    this.format = function format(date, options) {
	        return relativeFormat._format(date, options);
	    };
	}

	// Define internal private properties for dealing with locale data.
	src$es5$$.defineProperty(RelativeFormat, '__localeData__', {value: src$es5$$.objCreate(null)});
	src$es5$$.defineProperty(RelativeFormat, '__addLocaleData', {value: function (data) {
	    if (!(data && data.locale)) {
	        throw new Error(
	            'Locale data provided to IntlRelativeFormat is missing a ' +
	            '`locale` property value'
	        );
	    }

	    RelativeFormat.__localeData__[data.locale.toLowerCase()] = data;

	    // Add data to IntlMessageFormat.
	    intl$messageformat$$["default"].__addLocaleData(data);
	}});

	// Define public `defaultLocale` property which can be set by the developer, or
	// it will be set when the first RelativeFormat instance is created by
	// leveraging the resolved locale from `Intl`.
	src$es5$$.defineProperty(RelativeFormat, 'defaultLocale', {
	    enumerable: true,
	    writable  : true,
	    value     : undefined
	});

	// Define public `thresholds` property which can be set by the developer, and
	// defaults to relative time thresholds from moment.js.
	src$es5$$.defineProperty(RelativeFormat, 'thresholds', {
	    enumerable: true,

	    value: {
	        second: 45, 'second-short': 45,  // seconds to minute
	        minute: 45, 'minute-short': 45, // minutes to hour
	        hour  : 22, 'hour-short': 22, // hours to day
	        day   : 26, 'day-short': 26, // days to month
	        month : 11, 'month-short': 11 // months to year
	    }
	});

	RelativeFormat.prototype.resolvedOptions = function () {
	    return {
	        locale: this._locale,
	        style : this._options.style,
	        units : this._options.units
	    };
	};

	RelativeFormat.prototype._compileMessage = function (units) {
	    // `this._locales` is the original set of locales the user specified to the
	    // constructor, while `this._locale` is the resolved root locale.
	    var locales        = this._locales;
	    var resolvedLocale = this._locale;

	    var field        = this._fields[units];
	    var relativeTime = field.relativeTime;
	    var future       = '';
	    var past         = '';
	    var i;

	    for (i in relativeTime.future) {
	        if (relativeTime.future.hasOwnProperty(i)) {
	            future += ' ' + i + ' {' +
	                relativeTime.future[i].replace('{0}', '#') + '}';
	        }
	    }

	    for (i in relativeTime.past) {
	        if (relativeTime.past.hasOwnProperty(i)) {
	            past += ' ' + i + ' {' +
	                relativeTime.past[i].replace('{0}', '#') + '}';
	        }
	    }

	    var message = '{when, select, future {{0, plural, ' + future + '}}' +
	                                 'past {{0, plural, ' + past + '}}}';

	    // Create the synthetic IntlMessageFormat instance using the original
	    // locales value specified by the user when constructing the the parent
	    // IntlRelativeFormat instance.
	    return new intl$messageformat$$["default"](message, locales);
	};

	RelativeFormat.prototype._getMessage = function (units) {
	    var messages = this._messages;

	    // Create a new synthetic message based on the locale data from CLDR.
	    if (!messages[units]) {
	        messages[units] = this._compileMessage(units);
	    }

	    return messages[units];
	};

	RelativeFormat.prototype._getRelativeUnits = function (diff, units) {
	    var field = this._fields[units];

	    if (field.relative) {
	        return field.relative[diff];
	    }
	};

	RelativeFormat.prototype._findFields = function (locale) {
	    var localeData = RelativeFormat.__localeData__;
	    var data       = localeData[locale.toLowerCase()];

	    // The locale data is de-duplicated, so we have to traverse the locale's
	    // hierarchy until we find `fields` to return.
	    while (data) {
	        if (data.fields) {
	            return data.fields;
	        }

	        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];
	    }

	    throw new Error(
	        'Locale data added to IntlRelativeFormat is missing `fields` for :' +
	        locale
	    );
	};

	RelativeFormat.prototype._format = function (date, options) {
	    var now = options && options.now !== undefined ? options.now : src$es5$$.dateNow();

	    if (date === undefined) {
	        date = now;
	    }

	    // Determine if the `date` and optional `now` values are valid, and throw a
	    // similar error to what `Intl.DateTimeFormat#format()` would throw.
	    if (!isFinite(now)) {
	        throw new RangeError(
	            'The `now` option provided to IntlRelativeFormat#format() is not ' +
	            'in valid range.'
	        );
	    }

	    if (!isFinite(date)) {
	        throw new RangeError(
	            'The date value provided to IntlRelativeFormat#format() is not ' +
	            'in valid range.'
	        );
	    }

	    var diffReport  = src$diff$$["default"](now, date);
	    var units       = this._options.units || this._selectUnits(diffReport);
	    var diffInUnits = diffReport[units];

	    if (this._options.style !== 'numeric') {
	        var relativeUnits = this._getRelativeUnits(diffInUnits, units);
	        if (relativeUnits) {
	            return relativeUnits;
	        }
	    }

	    return this._getMessage(units).format({
	        '0' : Math.abs(diffInUnits),
	        when: diffInUnits < 0 ? 'past' : 'future'
	    });
	};

	RelativeFormat.prototype._isValidUnits = function (units) {
	    if (!units || src$es5$$.arrIndexOf.call(FIELDS, units) >= 0) {
	        return true;
	    }

	    if (typeof units === 'string') {
	        var suggestion = /s$/.test(units) && units.substr(0, units.length - 1);
	        if (suggestion && src$es5$$.arrIndexOf.call(FIELDS, suggestion) >= 0) {
	            throw new Error(
	                '"' + units + '" is not a valid IntlRelativeFormat `units` ' +
	                'value, did you mean: ' + suggestion
	            );
	        }
	    }

	    throw new Error(
	        '"' + units + '" is not a valid IntlRelativeFormat `units` value, it ' +
	        'must be one of: "' + FIELDS.join('", "') + '"'
	    );
	};

	RelativeFormat.prototype._resolveLocale = function (locales) {
	    if (typeof locales === 'string') {
	        locales = [locales];
	    }

	    // Create a copy of the array so we can push on the default locale.
	    locales = (locales || []).concat(RelativeFormat.defaultLocale);

	    var localeData = RelativeFormat.__localeData__;
	    var i, len, localeParts, data;

	    // Using the set of locales + the default locale, we look for the first one
	    // which that has been registered. When data does not exist for a locale, we
	    // traverse its ancestors to find something that's been registered within
	    // its hierarchy of locales. Since we lack the proper `parentLocale` data
	    // here, we must take a naive approach to traversal.
	    for (i = 0, len = locales.length; i < len; i += 1) {
	        localeParts = locales[i].toLowerCase().split('-');

	        while (localeParts.length) {
	            data = localeData[localeParts.join('-')];
	            if (data) {
	                // Return the normalized locale string; e.g., we return "en-US",
	                // instead of "en-us".
	                return data.locale;
	            }

	            localeParts.pop();
	        }
	    }

	    var defaultLocale = locales.pop();
	    throw new Error(
	        'No locale data has been added to IntlRelativeFormat for: ' +
	        locales.join(', ') + ', or the default locale: ' + defaultLocale
	    );
	};

	RelativeFormat.prototype._resolveStyle = function (style) {
	    // Default to "best fit" style.
	    if (!style) {
	        return STYLES[0];
	    }

	    if (src$es5$$.arrIndexOf.call(STYLES, style) >= 0) {
	        return style;
	    }

	    throw new Error(
	        '"' + style + '" is not a valid IntlRelativeFormat `style` value, it ' +
	        'must be one of: "' + STYLES.join('", "') + '"'
	    );
	};

	RelativeFormat.prototype._selectUnits = function (diffReport) {
	    var i, l, units;
	    var fields = FIELDS.filter(function(field) {
	        return field.indexOf('-short') < 1;
	    });

	    for (i = 0, l = fields.length; i < l; i += 1) {
	        units = fields[i];

	        if (Math.abs(diffReport[units]) < RelativeFormat.thresholds[units]) {
	            break;
	        }
	    }

	    return units;
	};

	//# sourceMappingURL=core.js.map

/***/ }),
/* 842 */
/***/ (function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	"use strict";

	var round = Math.round;

	function daysToYears(days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    return days * 400 / 146097;
	}

	exports["default"] = function (from, to) {
	    // Convert to ms timestamps.
	    from = +from;
	    to   = +to;

	    var millisecond = round(to - from),
	        second      = round(millisecond / 1000),
	        minute      = round(second / 60),
	        hour        = round(minute / 60),
	        day         = round(hour / 24),
	        week        = round(day / 7);

	    var rawYears = daysToYears(day),
	        month    = round(rawYears * 12),
	        year     = round(rawYears);

	    return {
	        millisecond    : millisecond,
	        second         : second,
	        'second-short' : second,
	        minute         : minute,
	        'minute-short' : minute,
	        hour           : hour,
	        'hour-short'   : hour,
	        day            : day,
	        'day-short'    : day,
	        week           : week,
	        'week-short'   : week,
	        month          : month,
	        'month-short'  : month,
	        year           : year,
	        'year-short'   : year
	    };
	};

	//# sourceMappingURL=diff.js.map

/***/ }),
/* 843 */
/***/ (function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	// Purposely using the same implementation as the Intl.js `Intl` polyfill.
	// Copyright 2013 Andy Earnshaw, MIT License

	"use strict";

	var hop = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;

	var realDefineProp = (function () {
	    try { return !!Object.defineProperty({}, 'a', {}); }
	    catch (e) { return false; }
	})();

	var es3 = !realDefineProp && !Object.prototype.__defineGetter__;

	var defineProperty = realDefineProp ? Object.defineProperty :
	        function (obj, name, desc) {

	    if ('get' in desc && obj.__defineGetter__) {
	        obj.__defineGetter__(name, desc.get);
	    } else if (!hop.call(obj, name) || 'value' in desc) {
	        obj[name] = desc.value;
	    }
	};

	var objCreate = Object.create || function (proto, props) {
	    var obj, k;

	    function F() {}
	    F.prototype = proto;
	    obj = new F();

	    for (k in props) {
	        if (hop.call(props, k)) {
	            defineProperty(obj, k, props[k]);
	        }
	    }

	    return obj;
	};

	var arrIndexOf = Array.prototype.indexOf || function (search, fromIndex) {
	    /*jshint validthis:true */
	    var arr = this;
	    if (!arr.length) {
	        return -1;
	    }

	    for (var i = fromIndex || 0, max = arr.length; i < max; i++) {
	        if (arr[i] === search) {
	            return i;
	        }
	    }

	    return -1;
	};

	var isArray = Array.isArray || function (obj) {
	    return toString.call(obj) === '[object Array]';
	};

	var dateNow = Date.now || function () {
	    return new Date().getTime();
	};

	exports.defineProperty = defineProperty, exports.objCreate = objCreate, exports.arrIndexOf = arrIndexOf, exports.isArray = isArray, exports.dateNow = dateNow;

	//# sourceMappingURL=es5.js.map

/***/ }),
/* 844 */
/***/ (function(module, exports) {

	// GENERATED FILE
	"use strict";
	exports["default"] = {"locale":"en","pluralRuleFunction":function (n,ord){var s=String(n).split("."),v0=!s[1],t0=Number(s[0])==n,n10=t0&&s[0].slice(-1),n100=t0&&s[0].slice(-2);if(ord)return n10==1&&n100!=11?"one":n10==2&&n100!=12?"two":n10==3&&n100!=13?"few":"other";return n==1&&v0?"one":"other"},"fields":{"year":{"displayName":"year","relative":{"0":"this year","1":"next year","-1":"last year"},"relativeTime":{"future":{"one":"in {0} year","other":"in {0} years"},"past":{"one":"{0} year ago","other":"{0} years ago"}}},"year-short":{"displayName":"yr.","relative":{"0":"this yr.","1":"next yr.","-1":"last yr."},"relativeTime":{"future":{"one":"in {0} yr.","other":"in {0} yr."},"past":{"one":"{0} yr. ago","other":"{0} yr. ago"}}},"month":{"displayName":"month","relative":{"0":"this month","1":"next month","-1":"last month"},"relativeTime":{"future":{"one":"in {0} month","other":"in {0} months"},"past":{"one":"{0} month ago","other":"{0} months ago"}}},"month-short":{"displayName":"mo.","relative":{"0":"this mo.","1":"next mo.","-1":"last mo."},"relativeTime":{"future":{"one":"in {0} mo.","other":"in {0} mo."},"past":{"one":"{0} mo. ago","other":"{0} mo. ago"}}},"day":{"displayName":"day","relative":{"0":"today","1":"tomorrow","-1":"yesterday"},"relativeTime":{"future":{"one":"in {0} day","other":"in {0} days"},"past":{"one":"{0} day ago","other":"{0} days ago"}}},"day-short":{"displayName":"day","relative":{"0":"today","1":"tomorrow","-1":"yesterday"},"relativeTime":{"future":{"one":"in {0} day","other":"in {0} days"},"past":{"one":"{0} day ago","other":"{0} days ago"}}},"hour":{"displayName":"hour","relative":{"0":"this hour"},"relativeTime":{"future":{"one":"in {0} hour","other":"in {0} hours"},"past":{"one":"{0} hour ago","other":"{0} hours ago"}}},"hour-short":{"displayName":"hr.","relative":{"0":"this hour"},"relativeTime":{"future":{"one":"in {0} hr.","other":"in {0} hr."},"past":{"one":"{0} hr. ago","other":"{0} hr. ago"}}},"minute":{"displayName":"minute","relative":{"0":"this minute"},"relativeTime":{"future":{"one":"in {0} minute","other":"in {0} minutes"},"past":{"one":"{0} minute ago","other":"{0} minutes ago"}}},"minute-short":{"displayName":"min.","relative":{"0":"this minute"},"relativeTime":{"future":{"one":"in {0} min.","other":"in {0} min."},"past":{"one":"{0} min. ago","other":"{0} min. ago"}}},"second":{"displayName":"second","relative":{"0":"now"},"relativeTime":{"future":{"one":"in {0} second","other":"in {0} seconds"},"past":{"one":"{0} second ago","other":"{0} seconds ago"}}},"second-short":{"displayName":"sec.","relative":{"0":"now"},"relativeTime":{"future":{"one":"in {0} sec.","other":"in {0} sec."},"past":{"one":"{0} sec. ago","other":"{0} sec. ago"}}}}};

	//# sourceMappingURL=en.js.map

/***/ }),
/* 845 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 846 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports = module.exports = __webpack_require__(847)['default'];
	exports['default'] = exports;


/***/ }),
/* 847 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jshint esnext: true */

	"use strict";
	var src$es5$$ = __webpack_require__(848);
	exports["default"] = createFormatCache;

	// -----------------------------------------------------------------------------

	function createFormatCache(FormatConstructor) {
	    var cache = src$es5$$.objCreate(null);

	    return function () {
	        var args    = Array.prototype.slice.call(arguments);
	        var cacheId = getCacheId(args);
	        var format  = cacheId && cache[cacheId];

	        if (!format) {
	            format = new (src$es5$$.bind.apply(FormatConstructor, [null].concat(args)))();

	            if (cacheId) {
	                cache[cacheId] = format;
	            }
	        }

	        return format;
	    };
	}

	// -- Utilities ----------------------------------------------------------------

	function getCacheId(inputs) {
	    // When JSON is not available in the runtime, we will not create a cache id.
	    if (typeof JSON === 'undefined') { return; }

	    var cacheId = [];

	    var i, len, input;

	    for (i = 0, len = inputs.length; i < len; i += 1) {
	        input = inputs[i];

	        if (input && typeof input === 'object') {
	            cacheId.push(orderedProps(input));
	        } else {
	            cacheId.push(input);
	        }
	    }

	    return JSON.stringify(cacheId);
	}

	function orderedProps(obj) {
	    var props = [],
	        keys  = [];

	    var key, i, len, prop;

	    for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	            keys.push(key);
	        }
	    }

	    var orderedKeys = keys.sort();

	    for (i = 0, len = orderedKeys.length; i < len; i += 1) {
	        key  = orderedKeys[i];
	        prop = {};

	        prop[key] = obj[key];
	        props[i]  = prop;
	    }

	    return props;
	}

	//# sourceMappingURL=memoizer.js.map

/***/ }),
/* 848 */
/***/ (function(module, exports) {

	/*
	Copyright (c) 2014, Yahoo! Inc. All rights reserved.
	Copyrights licensed under the New BSD License.
	See the accompanying LICENSE file for terms.
	*/

	/* jslint esnext: true */

	// Function.prototype.bind implementation from Mozilla Developer Network:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill

	"use strict";

	var bind = Function.prototype.bind || function (oThis) {
	    if (typeof this !== 'function') {
	      // closest thing possible to the ECMAScript 5
	      // internal IsCallable function
	      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
	    }

	    var aArgs   = Array.prototype.slice.call(arguments, 1),
	        fToBind = this,
	        fNOP    = function() {},
	        fBound  = function() {
	          return fToBind.apply(this instanceof fNOP
	                 ? this
	                 : oThis,
	                 aArgs.concat(Array.prototype.slice.call(arguments)));
	        };

	    if (this.prototype) {
	      // native functions don't have a prototype
	      fNOP.prototype = this.prototype;
	    }
	    fBound.prototype = new fNOP();

	    return fBound;
	};

	// Purposely using the same implementation as the Intl.js `Intl` polyfill.
	// Copyright 2013 Andy Earnshaw, MIT License

	var hop = Object.prototype.hasOwnProperty;

	var realDefineProp = (function () {
	    try { return !!Object.defineProperty({}, 'a', {}); }
	    catch (e) { return false; }
	})();

	var es3 = !realDefineProp && !Object.prototype.__defineGetter__;

	var defineProperty = realDefineProp ? Object.defineProperty :
	        function (obj, name, desc) {

	    if ('get' in desc && obj.__defineGetter__) {
	        obj.__defineGetter__(name, desc.get);
	    } else if (!hop.call(obj, name) || 'value' in desc) {
	        obj[name] = desc.value;
	    }
	};

	var objCreate = Object.create || function (proto, props) {
	    var obj, k;

	    function F() {}
	    F.prototype = proto;
	    obj = new F();

	    for (k in props) {
	        if (hop.call(props, k)) {
	            defineProperty(obj, k, props[k]);
	        }
	    }

	    return obj;
	};

	exports.bind = bind, exports.defineProperty = defineProperty, exports.objCreate = objCreate;

	//# sourceMappingURL=es5.js.map

/***/ }),
/* 849 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactIntl = __webpack_require__(827);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * InputText component
	 */
	var InputText = function InputText(props) {
	    var placeholder = props.placeholder,
	        onInputChange = props.onInputChange,
	        username = props.username,
	        onKeyPress = props.onKeyPress,
	        intl = props.intl;

	    var intlPlaceholder = intl.formatMessage({ id: [placeholder] });

	    return _react2.default.createElement('input', {
	        type: 'text',
	        placeholder: intlPlaceholder,
	        onChange: onInputChange,
	        onKeyPress: onKeyPress,
	        value: username
	    });
	};

	exports.default = (0, _reactIntl.injectIntl)(InputText);

/***/ }),
/* 850 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Message = __webpack_require__(851);

	var _Message2 = _interopRequireDefault(_Message);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Message2.default;

/***/ }),
/* 851 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _styles = __webpack_require__(852);

	var _styles2 = _interopRequireDefault(_styles);

	var _semanticUiReact = __webpack_require__(162);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * User Message component
	 */
	var Message = function Message(_ref) {
	  var message = _ref.message,
	      color = _ref.color,
	      username = _ref.username,
	      userColor = _ref.userColor,
	      avatar = _ref.avatar;
	  return _react2.default.createElement('div', { style: _styles2.default.container(color) }, _react2.default.createElement(_semanticUiReact.Image, { avatar: true, src: '/assets/img/avatars/' + avatar + '.png' }), _react2.default.createElement('span', { style: _styles2.default.username(userColor) }, username), _react2.default.createElement('span', null, ': ', message));
	};

	exports.default = Message;

/***/ }),
/* 852 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var messageStyles = {
	    container: function container(color) {
	        return {
	            color: color,
	            marginBottom: "10px",
	            backgroundColor: "#f6f6f6",
	            borderRadius: "12px",
	            wordWrap: "break-word",
	            padding: ".5rem .5rem"
	        };
	    },
	    userIcon: function userIcon(userColor) {
	        return {
	            width: "35px",
	            height: "35px",
	            borderRadius: "50%",
	            backgroundColor: userColor
	        };
	    },
	    username: function username(color) {
	        return {
	            color: color,
	            border: "none",
	            background: "none",
	            borderRadius: "0",
	            padding: "0"
	        };
	    },
	    message: {
	        marginLeft: "5px",
	        width: "100%"
	    }
	};

	exports.default = messageStyles;

/***/ }),
/* 853 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _styles = __webpack_require__(854);

	var _styles2 = _interopRequireDefault(_styles);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * InfoMessage component
	 */
	var InfoMessage = function InfoMessage(_ref) {
	    var message = _ref.message,
	        color = _ref.color;
	    return _react2.default.createElement('div', { className: 'chatMessage',
	        style: _styles2.default.container(color) }, message);
	};

	exports.default = InfoMessage;

/***/ }),
/* 854 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var infoMessageStyles = {
	    container: function container(color) {
	        return {
	            color: color,
	            display: "flex",
	            alignItems: "center",
	            marginBottom: "10px"
	        };
	    }
	};

	exports.default = infoMessageStyles;

/***/ }),
/* 855 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _AdBlock = __webpack_require__(964);

	var _AdBlock2 = _interopRequireDefault(_AdBlock);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _AdBlock2.default;

/***/ }),
/* 856 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Navbar = __webpack_require__(857);

	var _Navbar2 = _interopRequireDefault(_Navbar);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Navbar2.default;

/***/ }),
/* 857 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Header Component
	 */
	var Navbar = function Navbar(props) {
	  return _react2.default.createElement("div", { className: "header " + props.className }, _react2.default.createElement("a", { href: "/" }, _react2.default.createElement("img", { className: "logo img-responsive", src: "/assets/img/logo.png" })));
	};

	exports.default = Navbar;

/***/ }),
/* 858 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Footer = __webpack_require__(859);

	var _Footer2 = _interopRequireDefault(_Footer);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Footer2.default;

/***/ }),
/* 859 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _styles = __webpack_require__(860);

	var _styles2 = _interopRequireDefault(_styles);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Footer component
	 */
	var Footer = function Footer(props) {

	  function renderActions() {
	    return props.links.map(function (el, id) {
	      if (el.action === 'link') return _react2.default.createElement("a", { key: id, href: el.url }, "| ", el.value, "\xA0 |");else if (el.action === 'mailto') return _react2.default.createElement("a", { key: id, href: "mailto:" + el.value + "?Subject=Hello%20again", target: "_top" }, "Contact Us\xA0|");
	    });
	  }
	  return _react2.default.createElement("div", { style: _styles2.default.container }, renderActions());
	};

	exports.default = Footer;

/***/ }),
/* 860 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var styles = {
	  container: {
	    width: "100%",
	    position: "absolute",
	    bottom: "0"
	  }
	};

	exports.default = styles;

/***/ }),
/* 861 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _DrawThumbnail = __webpack_require__(862);

	var _DrawThumbnail2 = _interopRequireDefault(_DrawThumbnail);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _DrawThumbnail2.default;

/***/ }),
/* 862 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _semanticUiReact = __webpack_require__(162);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var DrawThumbnail = function DrawThumbnail(props) {
	  return _react2.default.createElement(_semanticUiReact.Image, { src: props.src, size: "big", bordered: true });
	};

	exports.default = DrawThumbnail;

/***/ }),
/* 863 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Timer = __webpack_require__(864);

	var _Timer2 = _interopRequireDefault(_Timer);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Timer2.default;

/***/ }),
/* 864 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	var Timer = function Timer(props) {
	    var time = props.time,
	        className = props.className;

	    return _react2.default.createElement('a', { className: className, style: { fontSize: "3em" } }, time);
	};

	exports.default = Timer;

/***/ }),
/* 865 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _semanticUiReact = __webpack_require__(162);

	var _axios = __webpack_require__(866);

	var _axios2 = _interopRequireDefault(_axios);

	var _playerActions = __webpack_require__(159);

	var _components = __webpack_require__(824);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var ROOMS_AVAILABLE_ENDPOINT = "/api/rooms_available";

	/**
	 * SEARCHPAGE COMPONENT VIEW
	 */

	var SearchPage = function (_Component) {
	  _inherits(SearchPage, _Component);

	  function SearchPage(props) {
	    _classCallCheck(this, SearchPage);

	    var _this = _possibleConstructorReturn(this, (SearchPage.__proto__ || Object.getPrototypeOf(SearchPage)).call(this, props));

	    _this.state = {
	      rooms: [],
	      loadingRoom: false
	    };
	    return _this;
	  }

	  /**
	   * 
	   */

	  _createClass(SearchPage, [{
	    key: "componentWillMount",
	    value: function componentWillMount() {
	      var _this2 = this;

	      _axios2.default.get(ROOMS_AVAILABLE_ENDPOINT).then(function (res) {
	        var roomsAvailable = res.data;
	        _this2.setState({
	          rooms: roomsAvailable || _this2.state.rooms,
	          loadingRoom: false
	        });
	      }).catch(function (err) {
	        _this2.setState({
	          loadingRoom: false
	        });
	      });
	    }
	  }, {
	    key: "onInputChange",

	    /**
	     * Detecs user input changes
	     * @param {Object} e
	     */
	    value: function onInputChange(e) {
	      var newUsername = e.target.value;
	      this.setState({
	        username: newUsername
	      });
	    }

	    /**
	     * If enter key button has been pressed it will trigger
	     * the play button
	     * @param {Object} e
	     */

	  }, {
	    key: "onSubmit",
	    value: function onSubmit(e) {
	      if (e.key === "Enter") this.onPlayButtonClick();
	    }

	    /**
	     * 
	     */

	  }, {
	    key: "renderTable",
	    value: function renderTable() {
	      if (!this.state.rooms === 0) return;

	      return this.state.rooms.map(function (room) {
	        return _react2.default.createElement(_semanticUiReact.Table.Row, null, _react2.default.createElement(_semanticUiReact.Table.Cell, null, room.name), _react2.default.createElement(_semanticUiReact.Table.Cell, null, room.players.length), _react2.default.createElement(_semanticUiReact.Table.Cell, null, _react2.default.createElement("a", { href: '/game/' + room.name }, "Enter")));
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement("div", { id: "find-site" }, _react2.default.createElement(_components.Navbar, null), _react2.default.createElement(_semanticUiReact.Grid, null, _react2.default.createElement(_semanticUiReact.Grid.Row, null, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 18 }, _react2.default.createElement(_semanticUiReact.Table, { celled: true, className: "find-content" }, _react2.default.createElement(_semanticUiReact.Table.Header, null, _react2.default.createElement(_semanticUiReact.Table.Row, null, _react2.default.createElement(_semanticUiReact.Table.HeaderCell, null, "Room Name"), _react2.default.createElement(_semanticUiReact.Table.HeaderCell, null, "Number of Players"), _react2.default.createElement(_semanticUiReact.Table.HeaderCell, null, "Actions"))), _react2.default.createElement(_semanticUiReact.Table.Body, null, this.renderTable()), _react2.default.createElement(_semanticUiReact.Table.Footer, null, _react2.default.createElement(_semanticUiReact.Table.Row, null, _react2.default.createElement(_semanticUiReact.Table.HeaderCell, { colSpan: "3" }, _react2.default.createElement(_semanticUiReact.Menu, { floated: "right", pagination: true }, _react2.default.createElement(_semanticUiReact.Menu.Item, { as: "a", icon: true }, _react2.default.createElement(_semanticUiReact.Icon, { name: "chevron left" })), _react2.default.createElement(_semanticUiReact.Menu.Item, { as: "a" }, "1"), _react2.default.createElement(_semanticUiReact.Menu.Item, { as: "a" }, "2"), _react2.default.createElement(_semanticUiReact.Menu.Item, { as: "a" }, "3"), _react2.default.createElement(_semanticUiReact.Menu.Item, { as: "a" }, "4"), _react2.default.createElement(_semanticUiReact.Menu.Item, { as: "a", icon: true }, _react2.default.createElement(_semanticUiReact.Icon, { name: "chevron right" })))))))))));
	    }
	  }]);

	  return SearchPage;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	 * @param {store}
	 */

	function mapStateToProps(state) {
	  return { username: state.playerReducer.username };
	}

	/**
	 * 
	 * @param {*} dispatch 
	 */
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    setUsername: function setUsername(name) {
	      dispatch((0, _playerActions.setUsername)(name));
	    },
	    openPlayerSocketConnection: function openPlayerSocketConnection(data) {
	      dispatch((0, _playerActions.openPlayerSocketConnection)(data));
	    }
	  };
	};

	exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(SearchPage);

/***/ }),
/* 866 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(867);

/***/ }),
/* 867 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(868);
	var bind = __webpack_require__(869);
	var Axios = __webpack_require__(871);
	var defaults = __webpack_require__(872);

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);

	  // Copy context to instance
	  utils.extend(instance, context);

	  return instance;
	}

	// Create the default instance to be exported
	var axios = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;

	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(utils.merge(defaults, instanceConfig));
	};

	// Expose Cancel & CancelToken
	axios.Cancel = __webpack_require__(889);
	axios.CancelToken = __webpack_require__(890);
	axios.isCancel = __webpack_require__(886);

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(891);

	module.exports = axios;

	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;


/***/ }),
/* 868 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(869);
	var isBuffer = __webpack_require__(870);

	/*global toString:true*/

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
	    return false;
	  }
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object' && !isArray(obj)) {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}

	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};


/***/ }),
/* 869 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ }),
/* 870 */
/***/ (function(module, exports) {

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	module.exports = function (obj) {
	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
	}

	function isBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
	}


/***/ }),
/* 871 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var defaults = __webpack_require__(872);
	var utils = __webpack_require__(868);
	var InterceptorManager = __webpack_require__(883);
	var dispatchRequest = __webpack_require__(884);
	var isAbsoluteURL = __webpack_require__(887);
	var combineURLs = __webpack_require__(888);

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }

	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
	  config.method = config.method.toLowerCase();

	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }

	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);

	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }

	  return promise;
	};

	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});

	module.exports = Axios;


/***/ }),
/* 872 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(868);
	var normalizeHeaderName = __webpack_require__(873);

	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(874);
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(874);
	  }
	  return adapter;
	}

	var defaults = {
	  adapter: getDefaultAdapter(),

	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],

	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};

	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};

	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults.headers[method] = {};
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});

	module.exports = defaults;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 873 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(868);

	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ }),
/* 874 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(868);
	var settle = __webpack_require__(875);
	var buildURL = __webpack_require__(878);
	var parseHeaders = __webpack_require__(879);
	var isURLSameOrigin = __webpack_require__(880);
	var createError = __webpack_require__(876);
	var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(881);

	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;

	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest();
	    var loadEvent = 'onreadystatechange';
	    var xDomain = false;

	    // For IE 8/9 CORS support
	    // Only supports POST and GET calls and doesn't returns the response headers.
	    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	    if (process.env.NODE_ENV !== 'test' &&
	        typeof window !== 'undefined' &&
	        window.XDomainRequest && !('withCredentials' in request) &&
	        !isURLSameOrigin(config.url)) {
	      request = new window.XDomainRequest();
	      loadEvent = 'onload';
	      xDomain = true;
	      request.onprogress = function handleProgress() {};
	      request.ontimeout = function handleTimeout() {};
	    }

	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

	    // Set the request timeout in MS
	    request.timeout = config.timeout;

	    // Listen for ready state
	    request[loadEvent] = function handleLoad() {
	      if (!request || (request.readyState !== 4 && !xDomain)) {
	        return;
	      }

	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }

	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
	        status: request.status === 1223 ? 204 : request.status,
	        statusText: request.status === 1223 ? 'No Content' : request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };

	      settle(resolve, reject, response);

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(882);

	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
	          cookies.read(config.xsrfCookieName) :
	          undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }

	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }

	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
	        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
	        if (config.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }

	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }

	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }

	    if (requestData === undefined) {
	      requestData = null;
	    }

	    // Send the request
	    request.send(requestData);
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 875 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var createError = __webpack_require__(876);

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response.request,
	      response
	    ));
	  }
	};


/***/ }),
/* 876 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var enhanceError = __webpack_require__(877);

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, request, response);
	};


/***/ }),
/* 877 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	module.exports = function enhanceError(error, config, code, request, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.request = request;
	  error.response = response;
	  return error;
	};


/***/ }),
/* 878 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(868);

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];

	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }

	      if (!utils.isArray(val)) {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};


/***/ }),
/* 879 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(868);

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });

	  return parsed;
	};


/***/ }),
/* 880 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(868);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;

	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ }),
/* 881 */
/***/ (function(module, exports) {

	'use strict';

	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';

	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}

	module.exports = btoa;


/***/ }),
/* 882 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(868);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));

	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }

	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }

	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }

	        if (secure === true) {
	          cookie.push('secure');
	        }

	        document.cookie = cookie.join('; ');
	      },

	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },

	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ }),
/* 883 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(868);

	function InterceptorManager() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	module.exports = InterceptorManager;


/***/ }),
/* 884 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(868);
	var transformData = __webpack_require__(885);
	var isCancel = __webpack_require__(886);
	var defaults = __webpack_require__(872);

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  // Ensure headers exist
	  config.headers = config.headers || {};

	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );

	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  var adapter = config.adapter || defaults.adapter;

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData(
	      response.data,
	      response.headers,
	      config.transformResponse
	    );

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }

	    return Promise.reject(reason);
	  });
	};


/***/ }),
/* 885 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(868);

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });

	  return data;
	};


/***/ }),
/* 886 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};


/***/ }),
/* 887 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ }),
/* 888 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	};


/***/ }),
/* 889 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}

	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel.prototype.__CANCEL__ = true;

	module.exports = Cancel;


/***/ }),
/* 890 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var Cancel = __webpack_require__(889);

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });

	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};

	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	module.exports = CancelToken;


/***/ }),
/* 891 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ }),
/* 892 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PrivateGame = exports.PublicGame = undefined;

	var _PublicGame = __webpack_require__(893);

	var _PublicGame2 = _interopRequireDefault(_PublicGame);

	var _PrivateGame = __webpack_require__(954);

	var _PrivateGame2 = _interopRequireDefault(_PrivateGame);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.PublicGame = _PublicGame2.default;
	exports.PrivateGame = _PrivateGame2.default;

/***/ }),
/* 893 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _semanticUiReact = __webpack_require__(162);

	var _howler = __webpack_require__(894);

	var _src = __webpack_require__(895);

	var _src2 = _interopRequireDefault(_src);

	var _GeneralModal = __webpack_require__(933);

	var _GeneralModal2 = _interopRequireDefault(_GeneralModal);

	var _CanvasGame = __webpack_require__(934);

	var _CanvasGame2 = _interopRequireDefault(_CanvasGame);

	var _Chat = __webpack_require__(942);

	var _Chat2 = _interopRequireDefault(_Chat);

	var _PlayerList = __webpack_require__(945);

	var _PlayerList2 = _interopRequireDefault(_PlayerList);

	var _ToolPaint = __webpack_require__(947);

	var _ToolPaint2 = _interopRequireDefault(_ToolPaint);

	var _components = __webpack_require__(824);

	var _gameActions = __webpack_require__(158);

	var _utils = __webpack_require__(938);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @class PublicGame
	 * @desc
	 */
	var PublicGame = function (_Component) {
	  _inherits(PublicGame, _Component);

	  function PublicGame(props) {
	    _classCallCheck(this, PublicGame);

	    var _this = _possibleConstructorReturn(this, (PublicGame.__proto__ || Object.getPrototypeOf(PublicGame)).call(this, props));

	    _this.state = {
	      title: "Play Game!",
	      modalOpen: true,
	      username: _this.props.username,
	      isPenDown: false,
	      currentPosition: {
	        prevX: null,
	        prevY: null
	      },
	      drawData: null
	    };

	    _this.deckRef = _react2.default.createRef();

	    // Events
	    _this.handleDisplayMouseMove = _this.handleDisplayMouseMove.bind(_this);
	    _this.handleDisplayMouseUp = _this.handleDisplayMouseUp.bind(_this);
	    _this.handleDisplayMouseDown = _this.handleDisplayMouseDown.bind(_this);
	    _this.setPrevPosition = _this.setPrevPosition.bind(_this);
	    _this.setCurrentPosition = _this.setCurrentPosition.bind(_this);
	    _this.drawCoordinates = _this.drawCoordinates.bind(_this);

	    _this.init();
	    return _this;
	  }

	  _createClass(PublicGame, [{
	    key: "init",
	    value: function init() {
	      // no connection openned, then redirect to home page
	      if (!this.props.connection) return this.props.history.push("/");
	      var sound = new _howler.Howl({
	        src: ["/assets/music/entrance.mp3"]
	      });
	      sound.play();
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var mycanvas = document.getElementById("mycanvas");
	      this.setState({
	        canvas: {
	          width: mycanvas.scrollWidth,
	          height: mycanvas.scrollHeight
	        }
	      });
	    }

	    /**
	     *
	     * @param {*} e
	     */

	  }, {
	    key: "setCurrentPosition",
	    value: function setCurrentPosition(e) {
	      var coordinates = (0, _utils.is_touch_device)() ? e.touches[0] : e;
	      var mycanvas = document.getElementById("mycanvas");

	      var _mycanvas$getBounding = mycanvas.getBoundingClientRect(),
	          top = _mycanvas$getBounding.top,
	          left = _mycanvas$getBounding.left;

	      var draw = Object.assign({}, this.state.currentPosition, {
	        currentX: (coordinates.clientX - left) * (600 / mycanvas.width),
	        currentY: (coordinates.clientY - top) * (400 / mycanvas.height)
	      });

	      return draw;
	    }

	    /**
	     *
	     * @param {*} e
	     */

	  }, {
	    key: "setPrevPosition",
	    value: function setPrevPosition(e) {
	      var coordinates = (0, _utils.is_touch_device)() ? e.touches[0] : e;
	      var mycanvas = document.getElementById("mycanvas");

	      var _mycanvas$getBounding2 = mycanvas.getBoundingClientRect(),
	          top = _mycanvas$getBounding2.top,
	          left = _mycanvas$getBounding2.left;

	      this.setState({
	        currentPosition: Object.assign({}, this.state.currentPosition, {
	          prevX: (coordinates.clientX - left) * (600 / mycanvas.width),
	          prevY: (coordinates.clientY - top) * (400 / mycanvas.height)
	        })
	      });
	    }

	    /**
	     *
	     * @param {*} coordinates
	     */

	  }, {
	    key: "drawCoordinates",
	    value: function drawCoordinates(coordinates) {
	      this.props.playerDrawCanvas({
	        coordinates: coordinates,
	        colorPicked: this.props.colorPicked,
	        toolPicked: this.props.toolPicked
	      });
	    }

	    /**
	     * Keeps track of the mouse moving over the canvas
	     * @param {Object} e
	     */

	  }, {
	    key: "handleDisplayMouseMove",
	    value: function handleDisplayMouseMove(e) {
	      if (!this.state.isPenDown || this.props.toolPicked === "bucket") return;

	      var coordinates = this.setCurrentPosition(e);
	      this.drawCoordinates(coordinates);
	      this.setPrevPosition(e);
	    }

	    /**
	     * The mouse has been pressed down on the canvas
	     * @param {Object} e
	     */

	  }, {
	    key: "handleDisplayMouseDown",
	    value: function handleDisplayMouseDown(e) {
	      window.addEventListener("mouseup", this.handleDisplayMouseUp);
	      this.setPrevPosition(e);
	      this.setState({ isPenDown: true });
	    }

	    /**
	     * The mouse has been stopped from being pressed
	     * @param {*} e
	     */

	  }, {
	    key: "handleDisplayMouseUp",
	    value: function handleDisplayMouseUp(e) {
	      var coordinates = this.setCurrentPosition(e);
	      this.drawCoordinates(coordinates);
	      window.removeEventListener("mouseup", this.handleDisplayMouseUp);
	      this.setState({ isPenDown: false });
	    }

	    /**
	     * Display random draw samples
	     */

	  }, {
	    key: "renderPlayerDraws",
	    value: function renderPlayerDraws() {
	      function onstackendfn(res) {
	        // console.log("onstackedfn", res);
	      }

	      function accept() {
	        var _deckRef$current$stat = this.deckRef.current.state.stack,
	            items = _deckRef$current$stat.items,
	            current = _deckRef$current$stat.current;

	        this.props.voteDraw(items[current].id, 1);
	        this.deckRef.current.state.stack.accept();
	      }

	      function reject() {
	        var _deckRef$current$stat2 = this.deckRef.current.state.stack,
	            items = _deckRef$current$stat2.items,
	            current = _deckRef$current$stat2.current;

	        this.props.voteDraw(items[current].id, 0);
	        this.deckRef.current.state.stack.reject();
	      }

	      if (this.props.playersDraw.length === 0) return _react2.default.createElement("div", null, _react2.default.createElement(_components.Timer, { className: "timer", time: this.props.countDown }), "Not draws!");

	      return _react2.default.createElement("div", null, _react2.default.createElement(_components.Timer, { className: "timer", time: this.props.countDown }), _react2.default.createElement(_src2.default, {
	        ref: this.deckRef,
	        images: this.props.playersDraw,
	        onstackendfn: onstackendfn.bind(this),
	        cancelIcon: "/assets/img/tools/thumbs-down.svg",
	        acceptIcon: "/assets/img/tools/thumbs-up.svg",
	        accept: accept.bind(this),
	        reject: reject.bind(this)
	      }));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var roomUrl = "http://www.localhost:8080/game/" + this.props.gameInfo.roomTag;
	      return _react2.default.createElement("div", { id: "play-site" }, _react2.default.createElement(_components.Navbar, null), _react2.default.createElement(_semanticUiReact.Grid, null, _react2.default.createElement(_PlayerList2.default, null), _react2.default.createElement(_semanticUiReact.Grid.Row, null, this.props.currentWord), _react2.default.createElement(_semanticUiReact.Grid.Row, null, _react2.default.createElement(_semanticUiReact.Grid.Column, { mobile: 16, tablet: 10, computer: 2 }, _react2.default.createElement(_ToolPaint2.default, null)), _react2.default.createElement(_semanticUiReact.Grid.Column, { mobile: 16, tablet: 10, computer: 10 }, this.props.gamePlay === "voting" && _react2.default.createElement("div", { className: "row" }, this.renderPlayerDraws()), this.props.gamePlay === "waitting" && _react2.default.createElement(_CanvasGame2.default, {
	        onMouseMove: this.handleDisplayMouseMove,
	        onMouseDown: this.handleDisplayMouseDown
	      }), this.props.gamePlay === "starting" && _react2.default.createElement(_components.AdBlock, null), this.props.gamePlay === "playing" && _react2.default.createElement("div", null, _react2.default.createElement(_components.Timer, { className: "timer", time: this.props.countDown }), _react2.default.createElement(_CanvasGame2.default, {
	        onMouseMove: this.handleDisplayMouseMove,
	        onMouseDown: this.handleDisplayMouseDown
	      })), this.props.gamePlay === "finished" && _react2.default.createElement("div", null, _react2.default.createElement("h1", null, "finished"))), _react2.default.createElement(_semanticUiReact.Grid.Column, { mobile: 4, tablet: 4, computer: 4 }, _react2.default.createElement(_Chat2.default, null)))), _react2.default.createElement(_GeneralModal2.default, { visibility: this.props.modal }));
	    }
	  }]);

	  return PublicGame;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	 * @param {store}
	 */

	function mapStateToProps(_ref) {
	  var playerReducer = _ref.playerReducer,
	      gameReducer = _ref.gameReducer;
	  var username = playerReducer.username,
	      connection = playerReducer.connection;
	  var colorPicked = gameReducer.colorPicked,
	      toolPicked = gameReducer.toolPicked,
	      countDown = gameReducer.countDown,
	      gamePlay = gameReducer.gamePlay,
	      playersDraw = gameReducer.playersDraw,
	      currentWord = gameReducer.currentWord,
	      gameInfo = gameReducer.gameInfo,
	      modal = gameReducer.modal;

	  return {
	    username: username,
	    connection: connection,
	    colorPicked: colorPicked,
	    toolPicked: toolPicked,
	    countDown: countDown,
	    gamePlay: gamePlay,
	    playersDraw: playersDraw,
	    currentWord: currentWord,
	    gameInfo: gameInfo,
	    modal: modal
	  };
	}

	/**
	 *
	 * @param {*} dispatch
	 */
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    playerDrawCanvas: function playerDrawCanvas(data) {
	      dispatch((0, _gameActions.playerDrawCanvas)(data));
	    },
	    voteDraw: function voteDraw(draw, feedback) {
	      dispatch((0, _gameActions.voteDraw)(draw, feedback));
	    }
	  };
	};

	exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PublicGame);

/***/ }),
/* 894 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {/*!
	 *  howler.js v2.1.1
	 *  howlerjs.com
	 *
	 *  (c) 2013-2018, James Simpson of GoldFire Studios
	 *  goldfirestudios.com
	 *
	 *  MIT License
	 */

	(function() {

	  'use strict';

	  /** Global Methods **/
	  /***************************************************************************/

	  /**
	   * Create the global controller. All contained methods and properties apply
	   * to all sounds that are currently playing or will be in the future.
	   */
	  var HowlerGlobal = function() {
	    this.init();
	  };
	  HowlerGlobal.prototype = {
	    /**
	     * Initialize the global Howler object.
	     * @return {Howler}
	     */
	    init: function() {
	      var self = this || Howler;

	      // Create a global ID counter.
	      self._counter = 1000;

	      // Pool of unlocked HTML5 Audio objects.
	      self._html5AudioPool = [];
	      self.html5PoolSize = 10;

	      // Internal properties.
	      self._codecs = {};
	      self._howls = [];
	      self._muted = false;
	      self._volume = 1;
	      self._canPlayEvent = 'canplaythrough';
	      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;

	      // Public properties.
	      self.masterGain = null;
	      self.noAudio = false;
	      self.usingWebAudio = true;
	      self.autoSuspend = true;
	      self.ctx = null;

	      // Set to false to disable the auto audio unlocker.
	      self.autoUnlock = true;

	      // Setup the various state values for global tracking.
	      self._setup();

	      return self;
	    },

	    /**
	     * Get/set the global volume for all sounds.
	     * @param  {Float} vol Volume from 0.0 to 1.0.
	     * @return {Howler/Float}     Returns self or current volume.
	     */
	    volume: function(vol) {
	      var self = this || Howler;
	      vol = parseFloat(vol);

	      // If we don't have an AudioContext created yet, run the setup.
	      if (!self.ctx) {
	        setupAudioContext();
	      }

	      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
	        self._volume = vol;

	        // Don't update any of the nodes if we are muted.
	        if (self._muted) {
	          return self;
	        }

	        // When using Web Audio, we just need to adjust the master gain.
	        if (self.usingWebAudio) {
	          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
	        }

	        // Loop through and change volume for all HTML5 audio nodes.
	        for (var i=0; i<self._howls.length; i++) {
	          if (!self._howls[i]._webAudio) {
	            // Get all of the sounds in this Howl group.
	            var ids = self._howls[i]._getSoundIds();

	            // Loop through all sounds and change the volumes.
	            for (var j=0; j<ids.length; j++) {
	              var sound = self._howls[i]._soundById(ids[j]);

	              if (sound && sound._node) {
	                sound._node.volume = sound._volume * vol;
	              }
	            }
	          }
	        }

	        return self;
	      }

	      return self._volume;
	    },

	    /**
	     * Handle muting and unmuting globally.
	     * @param  {Boolean} muted Is muted or not.
	     */
	    mute: function(muted) {
	      var self = this || Howler;

	      // If we don't have an AudioContext created yet, run the setup.
	      if (!self.ctx) {
	        setupAudioContext();
	      }

	      self._muted = muted;

	      // With Web Audio, we just need to mute the master gain.
	      if (self.usingWebAudio) {
	        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
	      }

	      // Loop through and mute all HTML5 Audio nodes.
	      for (var i=0; i<self._howls.length; i++) {
	        if (!self._howls[i]._webAudio) {
	          // Get all of the sounds in this Howl group.
	          var ids = self._howls[i]._getSoundIds();

	          // Loop through all sounds and mark the audio node as muted.
	          for (var j=0; j<ids.length; j++) {
	            var sound = self._howls[i]._soundById(ids[j]);

	            if (sound && sound._node) {
	              sound._node.muted = (muted) ? true : sound._muted;
	            }
	          }
	        }
	      }

	      return self;
	    },

	    /**
	     * Unload and destroy all currently loaded Howl objects.
	     * @return {Howler}
	     */
	    unload: function() {
	      var self = this || Howler;

	      for (var i=self._howls.length-1; i>=0; i--) {
	        self._howls[i].unload();
	      }

	      // Create a new AudioContext to make sure it is fully reset.
	      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {
	        self.ctx.close();
	        self.ctx = null;
	        setupAudioContext();
	      }

	      return self;
	    },

	    /**
	     * Check for codec support of specific extension.
	     * @param  {String} ext Audio file extention.
	     * @return {Boolean}
	     */
	    codecs: function(ext) {
	      return (this || Howler)._codecs[ext.replace(/^x-/, '')];
	    },

	    /**
	     * Setup various state values for global tracking.
	     * @return {Howler}
	     */
	    _setup: function() {
	      var self = this || Howler;

	      // Keeps track of the suspend/resume state of the AudioContext.
	      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';

	      // Automatically begin the 30-second suspend process
	      self._autoSuspend();

	      // Check if audio is available.
	      if (!self.usingWebAudio) {
	        // No audio is available on this system if noAudio is set to true.
	        if (typeof Audio !== 'undefined') {
	          try {
	            var test = new Audio();

	            // Check if the canplaythrough event is available.
	            if (typeof test.oncanplaythrough === 'undefined') {
	              self._canPlayEvent = 'canplay';
	            }
	          } catch(e) {
	            self.noAudio = true;
	          }
	        } else {
	          self.noAudio = true;
	        }
	      }

	      // Test to make sure audio isn't disabled in Internet Explorer.
	      try {
	        var test = new Audio();
	        if (test.muted) {
	          self.noAudio = true;
	        }
	      } catch (e) {}

	      // Check for supported codecs.
	      if (!self.noAudio) {
	        self._setupCodecs();
	      }

	      return self;
	    },

	    /**
	     * Check for browser support for various codecs and cache the results.
	     * @return {Howler}
	     */
	    _setupCodecs: function() {
	      var self = this || Howler;
	      var audioTest = null;

	      // Must wrap in a try/catch because IE11 in server mode throws an error.
	      try {
	        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
	      } catch (err) {
	        return self;
	      }

	      if (!audioTest || typeof audioTest.canPlayType !== 'function') {
	        return self;
	      }

	      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');

	      // Opera version <33 has mixed MP3 support, so we need to check for and block it.
	      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\/([0-6].)/g);
	      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);

	      self._codecs = {
	        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
	        mpeg: !!mpegTest,
	        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
	        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
	        oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
	        wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
	        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
	        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
	        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
	        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
	        weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
	        webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
	        dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
	        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
	      };

	      return self;
	    },

	    /**
	     * Some browsers/devices will only allow audio to be played after a user interaction.
	     * Attempt to automatically unlock audio on the first user interaction.
	     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
	     * @return {Howler}
	     */
	    _unlockAudio: function() {
	      var self = this || Howler;

	      // Only run this on certain browsers/devices.
	      var shouldUnlock = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome|Safari/i.test(self._navigator && self._navigator.userAgent);
	      if (self._audioUnlocked || !self.ctx || !shouldUnlock) {
	        return;
	      }

	      self._audioUnlocked = false;
	      self.autoUnlock = false;

	      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
	      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
	      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
	      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
	        self._mobileUnloaded = true;
	        self.unload();
	      }

	      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
	      // http://stackoverflow.com/questions/24119684
	      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);

	      // Call this method on touch start to create and play a buffer,
	      // then check if the audio actually played to determine if
	      // audio has now been unlocked on iOS, Android, etc.
	      var unlock = function(e) {
	        // Create a pool of unlocked HTML5 Audio objects that can
	        // be used for playing sounds without user interaction. HTML5
	        // Audio objects must be individually unlocked, as opposed
	        // to the WebAudio API which only needs a single activation.
	        // This must occur before WebAudio setup or the source.onended
	        // event will not fire.
	        for (var i=0; i<self.html5PoolSize; i++) {
	          var audioNode = new Audio();

	          // Mark this Audio object as unlocked to ensure it can get returned
	          // to the unlocked pool when released.
	          audioNode._unlocked = true;

	          // Add the audio node to the pool.
	          self._releaseHtml5Audio(audioNode);
	        }

	        // Loop through any assigned audio nodes and unlock them.
	        for (var i=0; i<self._howls.length; i++) {
	          if (!self._howls[i]._webAudio) {
	            // Get all of the sounds in this Howl group.
	            var ids = self._howls[i]._getSoundIds();

	            // Loop through all sounds and unlock the audio nodes.
	            for (var j=0; j<ids.length; j++) {
	              var sound = self._howls[i]._soundById(ids[j]);

	              if (sound && sound._node && !sound._node._unlocked) {
	                sound._node._unlocked = true;
	                sound._node.load();
	              }
	            }
	          }
	        }

	        // Fix Android can not play in suspend state.
	        self._autoResume();

	        // Create an empty buffer.
	        var source = self.ctx.createBufferSource();
	        source.buffer = self._scratchBuffer;
	        source.connect(self.ctx.destination);

	        // Play the empty buffer.
	        if (typeof source.start === 'undefined') {
	          source.noteOn(0);
	        } else {
	          source.start(0);
	        }

	        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.
	        if (typeof self.ctx.resume === 'function') {
	          self.ctx.resume();
	        }

	        // Setup a timeout to check that we are unlocked on the next event loop.
	        source.onended = function() {
	          source.disconnect(0);

	          // Update the unlocked state and prevent this check from happening again.
	          self._audioUnlocked = true;

	          // Remove the touch start listener.
	          document.removeEventListener('touchstart', unlock, true);
	          document.removeEventListener('touchend', unlock, true);
	          document.removeEventListener('click', unlock, true);

	          // Let all sounds know that audio has been unlocked.
	          for (var i=0; i<self._howls.length; i++) {
	            self._howls[i]._emit('unlock');
	          }
	        };
	      };

	      // Setup a touch start listener to attempt an unlock in.
	      document.addEventListener('touchstart', unlock, true);
	      document.addEventListener('touchend', unlock, true);
	      document.addEventListener('click', unlock, true);

	      return self;
	    },

	    /**
	     * Get an unlocked HTML5 Audio object from the pool. If none are left,
	     * return a new Audio object and throw a warning.
	     * @return {Audio} HTML5 Audio object.
	     */
	    _obtainHtml5Audio: function() {
	      var self = this || Howler;

	      // Return the next object from the pool if one exists.
	      if (self._html5AudioPool.length) {
	        return self._html5AudioPool.pop();
	      }

	      //.Check if the audio is locked and throw a warning.
	      var testPlay = new Audio().play();
	      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {
	        testPlay.catch(function() {
	          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');
	        });
	      }

	      return new Audio();
	    },

	    /**
	     * Return an activated HTML5 Audio object to the pool.
	     * @return {Howler}
	     */
	    _releaseHtml5Audio: function(audio) {
	      var self = this || Howler;

	      // Don't add audio to the pool if we don't know if it has been unlocked.
	      if (audio._unlocked) {
	        self._html5AudioPool.push(audio);
	      }

	      return self;
	    },

	    /**
	     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
	     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
	     * @return {Howler}
	     */
	    _autoSuspend: function() {
	      var self = this;

	      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
	        return;
	      }

	      // Check if any sounds are playing.
	      for (var i=0; i<self._howls.length; i++) {
	        if (self._howls[i]._webAudio) {
	          for (var j=0; j<self._howls[i]._sounds.length; j++) {
	            if (!self._howls[i]._sounds[j]._paused) {
	              return self;
	            }
	          }
	        }
	      }

	      if (self._suspendTimer) {
	        clearTimeout(self._suspendTimer);
	      }

	      // If no sound has played after 30 seconds, suspend the context.
	      self._suspendTimer = setTimeout(function() {
	        if (!self.autoSuspend) {
	          return;
	        }

	        self._suspendTimer = null;
	        self.state = 'suspending';
	        self.ctx.suspend().then(function() {
	          self.state = 'suspended';

	          if (self._resumeAfterSuspend) {
	            delete self._resumeAfterSuspend;
	            self._autoResume();
	          }
	        });
	      }, 30000);

	      return self;
	    },

	    /**
	     * Automatically resume the Web Audio AudioContext when a new sound is played.
	     * @return {Howler}
	     */
	    _autoResume: function() {
	      var self = this;

	      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
	        return;
	      }

	      if (self.state === 'running' && self._suspendTimer) {
	        clearTimeout(self._suspendTimer);
	        self._suspendTimer = null;
	      } else if (self.state === 'suspended') {
	        self.ctx.resume().then(function() {
	          self.state = 'running';

	          // Emit to all Howls that the audio has resumed.
	          for (var i=0; i<self._howls.length; i++) {
	            self._howls[i]._emit('resume');
	          }
	        });

	        if (self._suspendTimer) {
	          clearTimeout(self._suspendTimer);
	          self._suspendTimer = null;
	        }
	      } else if (self.state === 'suspending') {
	        self._resumeAfterSuspend = true;
	      }

	      return self;
	    }
	  };

	  // Setup the global audio controller.
	  var Howler = new HowlerGlobal();

	  /** Group Methods **/
	  /***************************************************************************/

	  /**
	   * Create an audio group controller.
	   * @param {Object} o Passed in properties for this group.
	   */
	  var Howl = function(o) {
	    var self = this;

	    // Throw an error if no source is provided.
	    if (!o.src || o.src.length === 0) {
	      console.error('An array of source files must be passed with any new Howl.');
	      return;
	    }

	    self.init(o);
	  };
	  Howl.prototype = {
	    /**
	     * Initialize a new Howl group object.
	     * @param  {Object} o Passed in properties for this group.
	     * @return {Howl}
	     */
	    init: function(o) {
	      var self = this;

	      // If we don't have an AudioContext created yet, run the setup.
	      if (!Howler.ctx) {
	        setupAudioContext();
	      }

	      // Setup user-defined default properties.
	      self._autoplay = o.autoplay || false;
	      self._format = (typeof o.format !== 'string') ? o.format : [o.format];
	      self._html5 = o.html5 || false;
	      self._muted = o.mute || false;
	      self._loop = o.loop || false;
	      self._pool = o.pool || 5;
	      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;
	      self._rate = o.rate || 1;
	      self._sprite = o.sprite || {};
	      self._src = (typeof o.src !== 'string') ? o.src : [o.src];
	      self._volume = o.volume !== undefined ? o.volume : 1;
	      self._xhrWithCredentials = o.xhrWithCredentials || false;

	      // Setup all other default properties.
	      self._duration = 0;
	      self._state = 'unloaded';
	      self._sounds = [];
	      self._endTimers = {};
	      self._queue = [];
	      self._playLock = false;

	      // Setup event listeners.
	      self._onend = o.onend ? [{fn: o.onend}] : [];
	      self._onfade = o.onfade ? [{fn: o.onfade}] : [];
	      self._onload = o.onload ? [{fn: o.onload}] : [];
	      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
	      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];
	      self._onpause = o.onpause ? [{fn: o.onpause}] : [];
	      self._onplay = o.onplay ? [{fn: o.onplay}] : [];
	      self._onstop = o.onstop ? [{fn: o.onstop}] : [];
	      self._onmute = o.onmute ? [{fn: o.onmute}] : [];
	      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];
	      self._onrate = o.onrate ? [{fn: o.onrate}] : [];
	      self._onseek = o.onseek ? [{fn: o.onseek}] : [];
	      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];
	      self._onresume = [];

	      // Web Audio or HTML5 Audio?
	      self._webAudio = Howler.usingWebAudio && !self._html5;

	      // Automatically try to enable audio.
	      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {
	        Howler._unlockAudio();
	      }

	      // Keep track of this Howl group in the global controller.
	      Howler._howls.push(self);

	      // If they selected autoplay, add a play event to the load queue.
	      if (self._autoplay) {
	        self._queue.push({
	          event: 'play',
	          action: function() {
	            self.play();
	          }
	        });
	      }

	      // Load the source file unless otherwise specified.
	      if (self._preload) {
	        self.load();
	      }

	      return self;
	    },

	    /**
	     * Load the audio file.
	     * @return {Howler}
	     */
	    load: function() {
	      var self = this;
	      var url = null;

	      // If no audio is available, quit immediately.
	      if (Howler.noAudio) {
	        self._emit('loaderror', null, 'No audio support.');
	        return;
	      }

	      // Make sure our source is in an array.
	      if (typeof self._src === 'string') {
	        self._src = [self._src];
	      }

	      // Loop through the sources and pick the first one that is compatible.
	      for (var i=0; i<self._src.length; i++) {
	        var ext, str;

	        if (self._format && self._format[i]) {
	          // If an extension was specified, use that instead.
	          ext = self._format[i];
	        } else {
	          // Make sure the source is a string.
	          str = self._src[i];
	          if (typeof str !== 'string') {
	            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');
	            continue;
	          }

	          // Extract the file extension from the URL or base64 data URI.
	          ext = /^data:audio\/([^;,]+);/i.exec(str);
	          if (!ext) {
	            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
	          }

	          if (ext) {
	            ext = ext[1].toLowerCase();
	          }
	        }

	        // Log a warning if no extension was found.
	        if (!ext) {
	          console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
	        }

	        // Check if this extension is available.
	        if (ext && Howler.codecs(ext)) {
	          url = self._src[i];
	          break;
	        }
	      }

	      if (!url) {
	        self._emit('loaderror', null, 'No codec support for selected audio sources.');
	        return;
	      }

	      self._src = url;
	      self._state = 'loading';

	      // If the hosting page is HTTPS and the source isn't,
	      // drop down to HTML5 Audio to avoid Mixed Content errors.
	      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
	        self._html5 = true;
	        self._webAudio = false;
	      }

	      // Create a new sound object and add it to the pool.
	      new Sound(self);

	      // Load and decode the audio data for playback.
	      if (self._webAudio) {
	        loadBuffer(self);
	      }

	      return self;
	    },

	    /**
	     * Play a sound or resume previous playback.
	     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
	     * @param  {Boolean} internal Internal Use: true prevents event firing.
	     * @return {Number}          Sound ID.
	     */
	    play: function(sprite, internal) {
	      var self = this;
	      var id = null;

	      // Determine if a sprite, sound id or nothing was passed
	      if (typeof sprite === 'number') {
	        id = sprite;
	        sprite = null;
	      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
	        // If the passed sprite doesn't exist, do nothing.
	        return null;
	      } else if (typeof sprite === 'undefined') {
	        // Use the default sound sprite (plays the full audio length).
	        sprite = '__default';

	        // Check if there is a single paused sound that isn't ended. 
	        // If there is, play that sound. If not, continue as usual.  
	        if (!self._playLock) {
	          var num = 0;
	          for (var i=0; i<self._sounds.length; i++) {
	            if (self._sounds[i]._paused && !self._sounds[i]._ended) {
	              num++;
	              id = self._sounds[i]._id;
	            }
	          }

	          if (num === 1) {
	            sprite = null;
	          } else {
	            id = null;
	          }
	        }
	      }

	      // Get the selected node, or get one from the pool.
	      var sound = id ? self._soundById(id) : self._inactiveSound();

	      // If the sound doesn't exist, do nothing.
	      if (!sound) {
	        return null;
	      }

	      // Select the sprite definition.
	      if (id && !sprite) {
	        sprite = sound._sprite || '__default';
	      }

	      // If the sound hasn't loaded, we must wait to get the audio's duration.
	      // We also need to wait to make sure we don't run into race conditions with
	      // the order of function calls.
	      if (self._state !== 'loaded') {
	        // Set the sprite value on this sound.
	        sound._sprite = sprite;

	        // Mark this sound as not ended in case another sound is played before this one loads.
	        sound._ended = false;

	        // Add the sound to the queue to be played on load.
	        var soundId = sound._id;
	        self._queue.push({
	          event: 'play',
	          action: function() {
	            self.play(soundId);
	          }
	        });

	        return soundId;
	      }

	      // Don't play the sound if an id was passed and it is already playing.
	      if (id && !sound._paused) {
	        // Trigger the play event, in order to keep iterating through queue.
	        if (!internal) {
	          self._loadQueue('play');
	        }

	        return sound._id;
	      }

	      // Make sure the AudioContext isn't suspended, and resume it if it is.
	      if (self._webAudio) {
	        Howler._autoResume();
	      }

	      // Determine how long to play for and where to start playing.
	      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
	      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);
	      var timeout = (duration * 1000) / Math.abs(sound._rate);
	      var start = self._sprite[sprite][0] / 1000;
	      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
	      var loop = !!(sound._loop || self._sprite[sprite][2]);
	      sound._sprite = sprite;

	      // Mark the sound as ended instantly so that this async playback
	      // doesn't get grabbed by another call to play while this one waits to start.
	      sound._ended = false;

	      // Update the parameters of the sound.
	      var setParams = function() {
	        sound._paused = false;
	        sound._seek = seek;
	        sound._start = start;
	        sound._stop = stop;
	        sound._loop = loop;
	      };

	      // End the sound instantly if seek is at the end.
	      if (seek >= stop) {
	        self._ended(sound);
	        return;
	      }

	      // Begin the actual playback.
	      var node = sound._node;
	      if (self._webAudio) {
	        // Fire this when the sound is ready to play to begin Web Audio playback.
	        var playWebAudio = function() {
	          self._playLock = false;
	          setParams();
	          self._refreshBuffer(sound);

	          // Setup the playback params.
	          var vol = (sound._muted || self._muted) ? 0 : sound._volume;
	          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
	          sound._playStart = Howler.ctx.currentTime;

	          // Play the sound using the supported method.
	          if (typeof node.bufferSource.start === 'undefined') {
	            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
	          } else {
	            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
	          }

	          // Start a new timer if none is present.
	          if (timeout !== Infinity) {
	            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
	          }

	          if (!internal) {
	            setTimeout(function() {
	              self._emit('play', sound._id);
	              self._loadQueue();
	            }, 0);
	          }
	        };

	        if (Howler.state === 'running') {
	          playWebAudio();
	        } else {
	          self._playLock = true;

	          // Wait for the audio context to resume before playing.
	          self.once('resume', playWebAudio);

	          // Cancel the end timer.
	          self._clearTimer(sound._id);
	        }
	      } else {
	        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
	        var playHtml5 = function() {
	          node.currentTime = seek;
	          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
	          node.volume = sound._volume * Howler.volume();
	          node.playbackRate = sound._rate;

	          // Some browsers will throw an error if this is called without user interaction.
	          try {
	            var play = node.play();

	            // Support older browsers that don't support promises, and thus don't have this issue.
	            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {
	              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().
	              self._playLock = true;

	              // Set param values immediately.
	              setParams();

	              // Releases the lock and executes queued actions.
	              play
	                .then(function() {
	                  self._playLock = false;
	                  node._unlocked = true;
	                  if (!internal) {
	                    self._emit('play', sound._id);
	                    self._loadQueue();
	                  }
	                })
	                .catch(function() {
	                  self._playLock = false;
	                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
	                    'on mobile devices and Chrome where playback was not within a user interaction.');

	                  // Reset the ended and paused values.
	                  sound._ended = true;
	                  sound._paused = true;
	                });
	            } else if (!internal) {
	              self._playLock = false;
	              setParams();
	              self._emit('play', sound._id);
	              self._loadQueue();
	            }

	            // Setting rate before playing won't work in IE, so we set it again here.
	            node.playbackRate = sound._rate;

	            // If the node is still paused, then we can assume there was a playback issue.
	            if (node.paused) {
	              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
	                'on mobile devices and Chrome where playback was not within a user interaction.');
	              return;
	            }

	            // Setup the end timer on sprites or listen for the ended event.
	            if (sprite !== '__default' || sound._loop) {
	              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
	            } else {
	              self._endTimers[sound._id] = function() {
	                // Fire ended on this audio node.
	                self._ended(sound);

	                // Clear this listener.
	                node.removeEventListener('ended', self._endTimers[sound._id], false);
	              };
	              node.addEventListener('ended', self._endTimers[sound._id], false);
	            }
	          } catch (err) {
	            self._emit('playerror', sound._id, err);
	          }
	        };

	        // Play immediately if ready, or wait for the 'canplaythrough'e vent.
	        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);
	        if (node.readyState >= 3 || loadedNoReadyState) {
	          playHtml5();
	        } else {
	          self._playLock = true;

	          var listener = function() {
	            // Begin playback.
	            playHtml5();

	            // Clear this listener.
	            node.removeEventListener(Howler._canPlayEvent, listener, false);
	          };
	          node.addEventListener(Howler._canPlayEvent, listener, false);

	          // Cancel the end timer.
	          self._clearTimer(sound._id);
	        }
	      }

	      return sound._id;
	    },

	    /**
	     * Pause playback and save current position.
	     * @param  {Number} id The sound ID (empty to pause all in group).
	     * @return {Howl}
	     */
	    pause: function(id) {
	      var self = this;

	      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.
	      if (self._state !== 'loaded' || self._playLock) {
	        self._queue.push({
	          event: 'pause',
	          action: function() {
	            self.pause(id);
	          }
	        });

	        return self;
	      }

	      // If no id is passed, get all ID's to be paused.
	      var ids = self._getSoundIds(id);

	      for (var i=0; i<ids.length; i++) {
	        // Clear the end timer.
	        self._clearTimer(ids[i]);

	        // Get the sound.
	        var sound = self._soundById(ids[i]);

	        if (sound && !sound._paused) {
	          // Reset the seek position.
	          sound._seek = self.seek(ids[i]);
	          sound._rateSeek = 0;
	          sound._paused = true;

	          // Stop currently running fades.
	          self._stopFade(ids[i]);

	          if (sound._node) {
	            if (self._webAudio) {
	              // Make sure the sound has been created.
	              if (!sound._node.bufferSource) {
	                continue;
	              }

	              if (typeof sound._node.bufferSource.stop === 'undefined') {
	                sound._node.bufferSource.noteOff(0);
	              } else {
	                sound._node.bufferSource.stop(0);
	              }

	              // Clean up the buffer source.
	              self._cleanBuffer(sound._node);
	            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
	              sound._node.pause();
	            }
	          }
	        }

	        // Fire the pause event, unless `true` is passed as the 2nd argument.
	        if (!arguments[1]) {
	          self._emit('pause', sound ? sound._id : null);
	        }
	      }

	      return self;
	    },

	    /**
	     * Stop playback and reset to start.
	     * @param  {Number} id The sound ID (empty to stop all in group).
	     * @param  {Boolean} internal Internal Use: true prevents event firing.
	     * @return {Howl}
	     */
	    stop: function(id, internal) {
	      var self = this;

	      // If the sound hasn't loaded, add it to the load queue to stop when capable.
	      if (self._state !== 'loaded' || self._playLock) {
	        self._queue.push({
	          event: 'stop',
	          action: function() {
	            self.stop(id);
	          }
	        });

	        return self;
	      }

	      // If no id is passed, get all ID's to be stopped.
	      var ids = self._getSoundIds(id);

	      for (var i=0; i<ids.length; i++) {
	        // Clear the end timer.
	        self._clearTimer(ids[i]);

	        // Get the sound.
	        var sound = self._soundById(ids[i]);

	        if (sound) {
	          // Reset the seek position.
	          sound._seek = sound._start || 0;
	          sound._rateSeek = 0;
	          sound._paused = true;
	          sound._ended = true;

	          // Stop currently running fades.
	          self._stopFade(ids[i]);

	          if (sound._node) {
	            if (self._webAudio) {
	              // Make sure the sound's AudioBufferSourceNode has been created.
	              if (sound._node.bufferSource) {
	                if (typeof sound._node.bufferSource.stop === 'undefined') {
	                  sound._node.bufferSource.noteOff(0);
	                } else {
	                  sound._node.bufferSource.stop(0);
	                }

	                // Clean up the buffer source.
	                self._cleanBuffer(sound._node);
	              }
	            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
	              sound._node.currentTime = sound._start || 0;
	              sound._node.pause();
	            }
	          }

	          if (!internal) {
	            self._emit('stop', sound._id);
	          }
	        }
	      }

	      return self;
	    },

	    /**
	     * Mute/unmute a single sound or all sounds in this Howl group.
	     * @param  {Boolean} muted Set to true to mute and false to unmute.
	     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
	     * @return {Howl}
	     */
	    mute: function(muted, id) {
	      var self = this;

	      // If the sound hasn't loaded, add it to the load queue to mute when capable.
	      if (self._state !== 'loaded'|| self._playLock) {
	        self._queue.push({
	          event: 'mute',
	          action: function() {
	            self.mute(muted, id);
	          }
	        });

	        return self;
	      }

	      // If applying mute/unmute to all sounds, update the group's value.
	      if (typeof id === 'undefined') {
	        if (typeof muted === 'boolean') {
	          self._muted = muted;
	        } else {
	          return self._muted;
	        }
	      }

	      // If no id is passed, get all ID's to be muted.
	      var ids = self._getSoundIds(id);

	      for (var i=0; i<ids.length; i++) {
	        // Get the sound.
	        var sound = self._soundById(ids[i]);

	        if (sound) {
	          sound._muted = muted;

	          // Cancel active fade and set the volume to the end value.
	          if (sound._interval) {
	            self._stopFade(sound._id);
	          }

	          if (self._webAudio && sound._node) {
	            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
	          } else if (sound._node) {
	            sound._node.muted = Howler._muted ? true : muted;
	          }

	          self._emit('mute', sound._id);
	        }
	      }

	      return self;
	    },

	    /**
	     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
	     *   volume() -> Returns the group's volume value.
	     *   volume(id) -> Returns the sound id's current volume.
	     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
	     *   volume(vol, id) -> Sets the volume of passed sound id.
	     * @return {Howl/Number} Returns self or current volume.
	     */
	    volume: function() {
	      var self = this;
	      var args = arguments;
	      var vol, id;

	      // Determine the values based on arguments.
	      if (args.length === 0) {
	        // Return the value of the groups' volume.
	        return self._volume;
	      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
	        // First check if this is an ID, and if not, assume it is a new volume.
	        var ids = self._getSoundIds();
	        var index = ids.indexOf(args[0]);
	        if (index >= 0) {
	          id = parseInt(args[0], 10);
	        } else {
	          vol = parseFloat(args[0]);
	        }
	      } else if (args.length >= 2) {
	        vol = parseFloat(args[0]);
	        id = parseInt(args[1], 10);
	      }

	      // Update the volume or return the current volume.
	      var sound;
	      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
	        // If the sound hasn't loaded, add it to the load queue to change volume when capable.
	        if (self._state !== 'loaded'|| self._playLock) {
	          self._queue.push({
	            event: 'volume',
	            action: function() {
	              self.volume.apply(self, args);
	            }
	          });

	          return self;
	        }

	        // Set the group volume.
	        if (typeof id === 'undefined') {
	          self._volume = vol;
	        }

	        // Update one or all volumes.
	        id = self._getSoundIds(id);
	        for (var i=0; i<id.length; i++) {
	          // Get the sound.
	          sound = self._soundById(id[i]);

	          if (sound) {
	            sound._volume = vol;

	            // Stop currently running fades.
	            if (!args[2]) {
	              self._stopFade(id[i]);
	            }

	            if (self._webAudio && sound._node && !sound._muted) {
	              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
	            } else if (sound._node && !sound._muted) {
	              sound._node.volume = vol * Howler.volume();
	            }

	            self._emit('volume', sound._id);
	          }
	        }
	      } else {
	        sound = id ? self._soundById(id) : self._sounds[0];
	        return sound ? sound._volume : 0;
	      }

	      return self;
	    },

	    /**
	     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).
	     * @param  {Number} from The value to fade from (0.0 to 1.0).
	     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
	     * @param  {Number} len  Time in milliseconds to fade.
	     * @param  {Number} id   The sound id (omit to fade all sounds).
	     * @return {Howl}
	     */
	    fade: function(from, to, len, id) {
	      var self = this;

	      // If the sound hasn't loaded, add it to the load queue to fade when capable.
	      if (self._state !== 'loaded' || self._playLock) {
	        self._queue.push({
	          event: 'fade',
	          action: function() {
	            self.fade(from, to, len, id);
	          }
	        });

	        return self;
	      }

	      // Make sure the to/from/len values are numbers.
	      from = parseFloat(from);
	      to = parseFloat(to);
	      len = parseFloat(len);

	      // Set the volume to the start position.
	      self.volume(from, id);

	      // Fade the volume of one or all sounds.
	      var ids = self._getSoundIds(id);
	      for (var i=0; i<ids.length; i++) {
	        // Get the sound.
	        var sound = self._soundById(ids[i]);

	        // Create a linear fade or fall back to timeouts with HTML5 Audio.
	        if (sound) {
	          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
	          if (!id) {
	            self._stopFade(ids[i]);
	          }

	          // If we are using Web Audio, let the native methods do the actual fade.
	          if (self._webAudio && !sound._muted) {
	            var currentTime = Howler.ctx.currentTime;
	            var end = currentTime + (len / 1000);
	            sound._volume = from;
	            sound._node.gain.setValueAtTime(from, currentTime);
	            sound._node.gain.linearRampToValueAtTime(to, end);
	          }

	          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');
	        }
	      }

	      return self;
	    },

	    /**
	     * Starts the internal interval to fade a sound.
	     * @param  {Object} sound Reference to sound to fade.
	     * @param  {Number} from The value to fade from (0.0 to 1.0).
	     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
	     * @param  {Number} len  Time in milliseconds to fade.
	     * @param  {Number} id   The sound id to fade.
	     * @param  {Boolean} isGroup   If true, set the volume on the group.
	     */
	    _startFadeInterval: function(sound, from, to, len, id, isGroup) {
	      var self = this;
	      var vol = from;
	      var diff = to - from;
	      var steps = Math.abs(diff / 0.01);
	      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);
	      var lastTick = Date.now();

	      // Store the value being faded to.
	      sound._fadeTo = to;

	      // Update the volume value on each interval tick.
	      sound._interval = setInterval(function() {
	        // Update the volume based on the time since the last tick.
	        var tick = (Date.now() - lastTick) / len;
	        lastTick = Date.now();
	        vol += diff * tick;

	        // Make sure the volume is in the right bounds.
	        vol = Math.max(0, vol);
	        vol = Math.min(1, vol);

	        // Round to within 2 decimal points.
	        vol = Math.round(vol * 100) / 100;

	        // Change the volume.
	        if (self._webAudio) {
	          sound._volume = vol;
	        } else {
	          self.volume(vol, sound._id, true);
	        }

	        // Set the group's volume.
	        if (isGroup) {
	          self._volume = vol;
	        }

	        // When the fade is complete, stop it and fire event.
	        if ((to < from && vol <= to) || (to > from && vol >= to)) {
	          clearInterval(sound._interval);
	          sound._interval = null;
	          sound._fadeTo = null;
	          self.volume(to, sound._id);
	          self._emit('fade', sound._id);
	        }
	      }, stepLen);
	    },

	    /**
	     * Internal method that stops the currently playing fade when
	     * a new fade starts, volume is changed or the sound is stopped.
	     * @param  {Number} id The sound id.
	     * @return {Howl}
	     */
	    _stopFade: function(id) {
	      var self = this;
	      var sound = self._soundById(id);

	      if (sound && sound._interval) {
	        if (self._webAudio) {
	          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
	        }

	        clearInterval(sound._interval);
	        sound._interval = null;
	        self.volume(sound._fadeTo, id);
	        sound._fadeTo = null;
	        self._emit('fade', id);
	      }

	      return self;
	    },

	    /**
	     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
	     *   loop() -> Returns the group's loop value.
	     *   loop(id) -> Returns the sound id's loop value.
	     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
	     *   loop(loop, id) -> Sets the loop value of passed sound id.
	     * @return {Howl/Boolean} Returns self or current loop value.
	     */
	    loop: function() {
	      var self = this;
	      var args = arguments;
	      var loop, id, sound;

	      // Determine the values for loop and id.
	      if (args.length === 0) {
	        // Return the grou's loop value.
	        return self._loop;
	      } else if (args.length === 1) {
	        if (typeof args[0] === 'boolean') {
	          loop = args[0];
	          self._loop = loop;
	        } else {
	          // Return this sound's loop value.
	          sound = self._soundById(parseInt(args[0], 10));
	          return sound ? sound._loop : false;
	        }
	      } else if (args.length === 2) {
	        loop = args[0];
	        id = parseInt(args[1], 10);
	      }

	      // If no id is passed, get all ID's to be looped.
	      var ids = self._getSoundIds(id);
	      for (var i=0; i<ids.length; i++) {
	        sound = self._soundById(ids[i]);

	        if (sound) {
	          sound._loop = loop;
	          if (self._webAudio && sound._node && sound._node.bufferSource) {
	            sound._node.bufferSource.loop = loop;
	            if (loop) {
	              sound._node.bufferSource.loopStart = sound._start || 0;
	              sound._node.bufferSource.loopEnd = sound._stop;
	            }
	          }
	        }
	      }

	      return self;
	    },

	    /**
	     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
	     *   rate() -> Returns the first sound node's current playback rate.
	     *   rate(id) -> Returns the sound id's current playback rate.
	     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
	     *   rate(rate, id) -> Sets the playback rate of passed sound id.
	     * @return {Howl/Number} Returns self or the current playback rate.
	     */
	    rate: function() {
	      var self = this;
	      var args = arguments;
	      var rate, id;

	      // Determine the values based on arguments.
	      if (args.length === 0) {
	        // We will simply return the current rate of the first node.
	        id = self._sounds[0]._id;
	      } else if (args.length === 1) {
	        // First check if this is an ID, and if not, assume it is a new rate value.
	        var ids = self._getSoundIds();
	        var index = ids.indexOf(args[0]);
	        if (index >= 0) {
	          id = parseInt(args[0], 10);
	        } else {
	          rate = parseFloat(args[0]);
	        }
	      } else if (args.length === 2) {
	        rate = parseFloat(args[0]);
	        id = parseInt(args[1], 10);
	      }

	      // Update the playback rate or return the current value.
	      var sound;
	      if (typeof rate === 'number') {
	        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
	        if (self._state !== 'loaded' || self._playLock) {
	          self._queue.push({
	            event: 'rate',
	            action: function() {
	              self.rate.apply(self, args);
	            }
	          });

	          return self;
	        }

	        // Set the group rate.
	        if (typeof id === 'undefined') {
	          self._rate = rate;
	        }

	        // Update one or all volumes.
	        id = self._getSoundIds(id);
	        for (var i=0; i<id.length; i++) {
	          // Get the sound.
	          sound = self._soundById(id[i]);

	          if (sound) {
	            // Keep track of our position when the rate changed and update the playback
	            // start position so we can properly adjust the seek position for time elapsed.
	            if (self.playing(id[i])) {
	              sound._rateSeek = self.seek(id[i]);
	              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
	            }
	            sound._rate = rate;

	            // Change the playback rate.
	            if (self._webAudio && sound._node && sound._node.bufferSource) {
	              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);
	            } else if (sound._node) {
	              sound._node.playbackRate = rate;
	            }

	            // Reset the timers.
	            var seek = self.seek(id[i]);
	            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;
	            var timeout = (duration * 1000) / Math.abs(sound._rate);

	            // Start a new end timer if sound is already playing.
	            if (self._endTimers[id[i]] || !sound._paused) {
	              self._clearTimer(id[i]);
	              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
	            }

	            self._emit('rate', sound._id);
	          }
	        }
	      } else {
	        sound = self._soundById(id);
	        return sound ? sound._rate : self._rate;
	      }

	      return self;
	    },

	    /**
	     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
	     *   seek() -> Returns the first sound node's current seek position.
	     *   seek(id) -> Returns the sound id's current seek position.
	     *   seek(seek) -> Sets the seek position of the first sound node.
	     *   seek(seek, id) -> Sets the seek position of passed sound id.
	     * @return {Howl/Number} Returns self or the current seek position.
	     */
	    seek: function() {
	      var self = this;
	      var args = arguments;
	      var seek, id;

	      // Determine the values based on arguments.
	      if (args.length === 0) {
	        // We will simply return the current position of the first node.
	        id = self._sounds[0]._id;
	      } else if (args.length === 1) {
	        // First check if this is an ID, and if not, assume it is a new seek position.
	        var ids = self._getSoundIds();
	        var index = ids.indexOf(args[0]);
	        if (index >= 0) {
	          id = parseInt(args[0], 10);
	        } else if (self._sounds.length) {
	          id = self._sounds[0]._id;
	          seek = parseFloat(args[0]);
	        }
	      } else if (args.length === 2) {
	        seek = parseFloat(args[0]);
	        id = parseInt(args[1], 10);
	      }

	      // If there is no ID, bail out.
	      if (typeof id === 'undefined') {
	        return self;
	      }

	      // If the sound hasn't loaded, add it to the load queue to seek when capable.
	      if (self._state !== 'loaded' || self._playLock) {
	        self._queue.push({
	          event: 'seek',
	          action: function() {
	            self.seek.apply(self, args);
	          }
	        });

	        return self;
	      }

	      // Get the sound.
	      var sound = self._soundById(id);

	      if (sound) {
	        if (typeof seek === 'number' && seek >= 0) {
	          // Pause the sound and update position for restarting playback.
	          var playing = self.playing(id);
	          if (playing) {
	            self.pause(id, true);
	          }

	          // Move the position of the track and cancel timer.
	          sound._seek = seek;
	          sound._ended = false;
	          self._clearTimer(id);

	          // Update the seek position for HTML5 Audio.
	          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {
	            sound._node.currentTime = seek;
	          }

	          // Seek and emit when ready.
	          var seekAndEmit = function() {
	            self._emit('seek', id);

	            // Restart the playback if the sound was playing.
	            if (playing) {
	              self.play(id, true);
	            }
	          };

	          // Wait for the play lock to be unset before emitting (HTML5 Audio).
	          if (playing && !self._webAudio) {
	            var emitSeek = function() {
	              if (!self._playLock) {
	                seekAndEmit();
	              } else {
	                setTimeout(emitSeek, 0);
	              }
	            };
	            setTimeout(emitSeek, 0);
	          } else {
	            seekAndEmit();
	          }
	        } else {
	          if (self._webAudio) {
	            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
	            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
	            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
	          } else {
	            return sound._node.currentTime;
	          }
	        }
	      }

	      return self;
	    },

	    /**
	     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
	     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
	     * @return {Boolean} True if playing and false if not.
	     */
	    playing: function(id) {
	      var self = this;

	      // Check the passed sound ID (if any).
	      if (typeof id === 'number') {
	        var sound = self._soundById(id);
	        return sound ? !sound._paused : false;
	      }

	      // Otherwise, loop through all sounds and check if any are playing.
	      for (var i=0; i<self._sounds.length; i++) {
	        if (!self._sounds[i]._paused) {
	          return true;
	        }
	      }

	      return false;
	    },

	    /**
	     * Get the duration of this sound. Passing a sound id will return the sprite duration.
	     * @param  {Number} id The sound id to check. If none is passed, return full source duration.
	     * @return {Number} Audio duration in seconds.
	     */
	    duration: function(id) {
	      var self = this;
	      var duration = self._duration;

	      // If we pass an ID, get the sound and return the sprite length.
	      var sound = self._soundById(id);
	      if (sound) {
	        duration = self._sprite[sound._sprite][1] / 1000;
	      }

	      return duration;
	    },

	    /**
	     * Returns the current loaded state of this Howl.
	     * @return {String} 'unloaded', 'loading', 'loaded'
	     */
	    state: function() {
	      return this._state;
	    },

	    /**
	     * Unload and destroy the current Howl object.
	     * This will immediately stop all sound instances attached to this group.
	     */
	    unload: function() {
	      var self = this;

	      // Stop playing any active sounds.
	      var sounds = self._sounds;
	      for (var i=0; i<sounds.length; i++) {
	        // Stop the sound if it is currently playing.
	        if (!sounds[i]._paused) {
	          self.stop(sounds[i]._id);
	        }

	        // Remove the source or disconnect.
	        if (!self._webAudio) {
	          // Set the source to 0-second silence to stop any downloading (except in IE).
	          var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);
	          if (!checkIE) {
	            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';
	          }

	          // Remove any event listeners.
	          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
	          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);

	          // Release the Audio object back to the pool.
	          Howler._releaseHtml5Audio(sounds[i]._node);
	        }

	        // Empty out all of the nodes.
	        delete sounds[i]._node;

	        // Make sure all timers are cleared out.
	        self._clearTimer(sounds[i]._id);
	      }

	      // Remove the references in the global Howler object.
	      var index = Howler._howls.indexOf(self);
	      if (index >= 0) {
	        Howler._howls.splice(index, 1);
	      }

	      // Delete this sound from the cache (if no other Howl is using it).
	      var remCache = true;
	      for (i=0; i<Howler._howls.length; i++) {
	        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {
	          remCache = false;
	          break;
	        }
	      }

	      if (cache && remCache) {
	        delete cache[self._src];
	      }

	      // Clear global errors.
	      Howler.noAudio = false;

	      // Clear out `self`.
	      self._state = 'unloaded';
	      self._sounds = [];
	      self = null;

	      return null;
	    },

	    /**
	     * Listen to a custom event.
	     * @param  {String}   event Event name.
	     * @param  {Function} fn    Listener to call.
	     * @param  {Number}   id    (optional) Only listen to events for this sound.
	     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
	     * @return {Howl}
	     */
	    on: function(event, fn, id, once) {
	      var self = this;
	      var events = self['_on' + event];

	      if (typeof fn === 'function') {
	        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});
	      }

	      return self;
	    },

	    /**
	     * Remove a custom event. Call without parameters to remove all events.
	     * @param  {String}   event Event name.
	     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
	     * @param  {Number}   id    (optional) Only remove events for this sound.
	     * @return {Howl}
	     */
	    off: function(event, fn, id) {
	      var self = this;
	      var events = self['_on' + event];
	      var i = 0;

	      // Allow passing just an event and ID.
	      if (typeof fn === 'number') {
	        id = fn;
	        fn = null;
	      }

	      if (fn || id) {
	        // Loop through event store and remove the passed function.
	        for (i=0; i<events.length; i++) {
	          var isId = (id === events[i].id);
	          if (fn === events[i].fn && isId || !fn && isId) {
	            events.splice(i, 1);
	            break;
	          }
	        }
	      } else if (event) {
	        // Clear out all events of this type.
	        self['_on' + event] = [];
	      } else {
	        // Clear out all events of every type.
	        var keys = Object.keys(self);
	        for (i=0; i<keys.length; i++) {
	          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {
	            self[keys[i]] = [];
	          }
	        }
	      }

	      return self;
	    },

	    /**
	     * Listen to a custom event and remove it once fired.
	     * @param  {String}   event Event name.
	     * @param  {Function} fn    Listener to call.
	     * @param  {Number}   id    (optional) Only listen to events for this sound.
	     * @return {Howl}
	     */
	    once: function(event, fn, id) {
	      var self = this;

	      // Setup the event listener.
	      self.on(event, fn, id, 1);

	      return self;
	    },

	    /**
	     * Emit all events of a specific type and pass the sound id.
	     * @param  {String} event Event name.
	     * @param  {Number} id    Sound ID.
	     * @param  {Number} msg   Message to go with event.
	     * @return {Howl}
	     */
	    _emit: function(event, id, msg) {
	      var self = this;
	      var events = self['_on' + event];

	      // Loop through event store and fire all functions.
	      for (var i=events.length-1; i>=0; i--) {
	        // Only fire the listener if the correct ID is used.
	        if (!events[i].id || events[i].id === id || event === 'load') {
	          setTimeout(function(fn) {
	            fn.call(this, id, msg);
	          }.bind(self, events[i].fn), 0);

	          // If this event was setup with `once`, remove it.
	          if (events[i].once) {
	            self.off(event, events[i].fn, events[i].id);
	          }
	        }
	      }

	      // Pass the event type into load queue so that it can continue stepping.
	      self._loadQueue(event);

	      return self;
	    },

	    /**
	     * Queue of actions initiated before the sound has loaded.
	     * These will be called in sequence, with the next only firing
	     * after the previous has finished executing (even if async like play).
	     * @return {Howl}
	     */
	    _loadQueue: function(event) {
	      var self = this;

	      if (self._queue.length > 0) {
	        var task = self._queue[0];

	        // Remove this task if a matching event was passed.
	        if (task.event === event) {
	          self._queue.shift();
	          self._loadQueue();
	        }

	        // Run the task if no event type is passed.
	        if (!event) {
	          task.action();
	        }
	      }

	      return self;
	    },

	    /**
	     * Fired when playback ends at the end of the duration.
	     * @param  {Sound} sound The sound object to work with.
	     * @return {Howl}
	     */
	    _ended: function(sound) {
	      var self = this;
	      var sprite = sound._sprite;

	      // If we are using IE and there was network latency we may be clipping
	      // audio before it completes playing. Lets check the node to make sure it
	      // believes it has completed, before ending the playback.
	      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
	        setTimeout(self._ended.bind(self, sound), 100);
	        return self;
	      }

	      // Should this sound loop?
	      var loop = !!(sound._loop || self._sprite[sprite][2]);

	      // Fire the ended event.
	      self._emit('end', sound._id);

	      // Restart the playback for HTML5 Audio loop.
	      if (!self._webAudio && loop) {
	        self.stop(sound._id, true).play(sound._id);
	      }

	      // Restart this timer if on a Web Audio loop.
	      if (self._webAudio && loop) {
	        self._emit('play', sound._id);
	        sound._seek = sound._start || 0;
	        sound._rateSeek = 0;
	        sound._playStart = Howler.ctx.currentTime;

	        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
	        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
	      }

	      // Mark the node as paused.
	      if (self._webAudio && !loop) {
	        sound._paused = true;
	        sound._ended = true;
	        sound._seek = sound._start || 0;
	        sound._rateSeek = 0;
	        self._clearTimer(sound._id);

	        // Clean up the buffer source.
	        self._cleanBuffer(sound._node);

	        // Attempt to auto-suspend AudioContext if no sounds are still playing.
	        Howler._autoSuspend();
	      }

	      // When using a sprite, end the track.
	      if (!self._webAudio && !loop) {
	        self.stop(sound._id, true);
	      }

	      return self;
	    },

	    /**
	     * Clear the end timer for a sound playback.
	     * @param  {Number} id The sound ID.
	     * @return {Howl}
	     */
	    _clearTimer: function(id) {
	      var self = this;

	      if (self._endTimers[id]) {
	        // Clear the timeout or remove the ended listener.
	        if (typeof self._endTimers[id] !== 'function') {
	          clearTimeout(self._endTimers[id]);
	        } else {
	          var sound = self._soundById(id);
	          if (sound && sound._node) {
	            sound._node.removeEventListener('ended', self._endTimers[id], false);
	          }
	        }

	        delete self._endTimers[id];
	      }

	      return self;
	    },

	    /**
	     * Return the sound identified by this ID, or return null.
	     * @param  {Number} id Sound ID
	     * @return {Object}    Sound object or null.
	     */
	    _soundById: function(id) {
	      var self = this;

	      // Loop through all sounds and find the one with this ID.
	      for (var i=0; i<self._sounds.length; i++) {
	        if (id === self._sounds[i]._id) {
	          return self._sounds[i];
	        }
	      }

	      return null;
	    },

	    /**
	     * Return an inactive sound from the pool or create a new one.
	     * @return {Sound} Sound playback object.
	     */
	    _inactiveSound: function() {
	      var self = this;

	      self._drain();

	      // Find the first inactive node to recycle.
	      for (var i=0; i<self._sounds.length; i++) {
	        if (self._sounds[i]._ended) {
	          return self._sounds[i].reset();
	        }
	      }

	      // If no inactive node was found, create a new one.
	      return new Sound(self);
	    },

	    /**
	     * Drain excess inactive sounds from the pool.
	     */
	    _drain: function() {
	      var self = this;
	      var limit = self._pool;
	      var cnt = 0;
	      var i = 0;

	      // If there are less sounds than the max pool size, we are done.
	      if (self._sounds.length < limit) {
	        return;
	      }

	      // Count the number of inactive sounds.
	      for (i=0; i<self._sounds.length; i++) {
	        if (self._sounds[i]._ended) {
	          cnt++;
	        }
	      }

	      // Remove excess inactive sounds, going in reverse order.
	      for (i=self._sounds.length - 1; i>=0; i--) {
	        if (cnt <= limit) {
	          return;
	        }

	        if (self._sounds[i]._ended) {
	          // Disconnect the audio source when using Web Audio.
	          if (self._webAudio && self._sounds[i]._node) {
	            self._sounds[i]._node.disconnect(0);
	          }

	          // Remove sounds until we have the pool size.
	          self._sounds.splice(i, 1);
	          cnt--;
	        }
	      }
	    },

	    /**
	     * Get all ID's from the sounds pool.
	     * @param  {Number} id Only return one ID if one is passed.
	     * @return {Array}    Array of IDs.
	     */
	    _getSoundIds: function(id) {
	      var self = this;

	      if (typeof id === 'undefined') {
	        var ids = [];
	        for (var i=0; i<self._sounds.length; i++) {
	          ids.push(self._sounds[i]._id);
	        }

	        return ids;
	      } else {
	        return [id];
	      }
	    },

	    /**
	     * Load the sound back into the buffer source.
	     * @param  {Sound} sound The sound object to work with.
	     * @return {Howl}
	     */
	    _refreshBuffer: function(sound) {
	      var self = this;

	      // Setup the buffer source for playback.
	      sound._node.bufferSource = Howler.ctx.createBufferSource();
	      sound._node.bufferSource.buffer = cache[self._src];

	      // Connect to the correct node.
	      if (sound._panner) {
	        sound._node.bufferSource.connect(sound._panner);
	      } else {
	        sound._node.bufferSource.connect(sound._node);
	      }

	      // Setup looping and playback rate.
	      sound._node.bufferSource.loop = sound._loop;
	      if (sound._loop) {
	        sound._node.bufferSource.loopStart = sound._start || 0;
	        sound._node.bufferSource.loopEnd = sound._stop || 0;
	      }
	      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);

	      return self;
	    },

	    /**
	     * Prevent memory leaks by cleaning up the buffer source after playback.
	     * @param  {Object} node Sound's audio node containing the buffer source.
	     * @return {Howl}
	     */
	    _cleanBuffer: function(node) {
	      var self = this;
	      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;

	      if (Howler._scratchBuffer && node.bufferSource) {
	        node.bufferSource.onended = null;
	        node.bufferSource.disconnect(0);
	        if (isIOS) {
	          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}
	        }
	      }
	      node.bufferSource = null;

	      return self;
	    }
	  };

	  /** Single Sound Methods **/
	  /***************************************************************************/

	  /**
	   * Setup the sound object, which each node attached to a Howl group is contained in.
	   * @param {Object} howl The Howl parent group.
	   */
	  var Sound = function(howl) {
	    this._parent = howl;
	    this.init();
	  };
	  Sound.prototype = {
	    /**
	     * Initialize a new Sound object.
	     * @return {Sound}
	     */
	    init: function() {
	      var self = this;
	      var parent = self._parent;

	      // Setup the default parameters.
	      self._muted = parent._muted;
	      self._loop = parent._loop;
	      self._volume = parent._volume;
	      self._rate = parent._rate;
	      self._seek = 0;
	      self._paused = true;
	      self._ended = true;
	      self._sprite = '__default';

	      // Generate a unique ID for this sound.
	      self._id = ++Howler._counter;

	      // Add itself to the parent's pool.
	      parent._sounds.push(self);

	      // Create the new node.
	      self.create();

	      return self;
	    },

	    /**
	     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
	     * @return {Sound}
	     */
	    create: function() {
	      var self = this;
	      var parent = self._parent;
	      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;

	      if (parent._webAudio) {
	        // Create the gain node for controlling volume (the source will connect to this).
	        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
	        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
	        self._node.paused = true;
	        self._node.connect(Howler.masterGain);
	      } else {
	        // Get an unlocked Audio object from the pool.
	        self._node = Howler._obtainHtml5Audio();

	        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
	        self._errorFn = self._errorListener.bind(self);
	        self._node.addEventListener('error', self._errorFn, false);

	        // Listen for 'canplaythrough' event to let us know the sound is ready.
	        self._loadFn = self._loadListener.bind(self);
	        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);

	        // Setup the new audio node.
	        self._node.src = parent._src;
	        self._node.preload = 'auto';
	        self._node.volume = volume * Howler.volume();

	        // Begin loading the source.
	        self._node.load();
	      }

	      return self;
	    },

	    /**
	     * Reset the parameters of this sound to the original state (for recycle).
	     * @return {Sound}
	     */
	    reset: function() {
	      var self = this;
	      var parent = self._parent;

	      // Reset all of the parameters of this sound.
	      self._muted = parent._muted;
	      self._loop = parent._loop;
	      self._volume = parent._volume;
	      self._rate = parent._rate;
	      self._seek = 0;
	      self._rateSeek = 0;
	      self._paused = true;
	      self._ended = true;
	      self._sprite = '__default';

	      // Generate a new ID so that it isn't confused with the previous sound.
	      self._id = ++Howler._counter;

	      return self;
	    },

	    /**
	     * HTML5 Audio error listener callback.
	     */
	    _errorListener: function() {
	      var self = this;

	      // Fire an error event and pass back the code.
	      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);

	      // Clear the event listener.
	      self._node.removeEventListener('error', self._errorFn, false);
	    },

	    /**
	     * HTML5 Audio canplaythrough listener callback.
	     */
	    _loadListener: function() {
	      var self = this;
	      var parent = self._parent;

	      // Round up the duration to account for the lower precision in HTML5 Audio.
	      parent._duration = Math.ceil(self._node.duration * 10) / 10;

	      // Setup a sprite if none is defined.
	      if (Object.keys(parent._sprite).length === 0) {
	        parent._sprite = {__default: [0, parent._duration * 1000]};
	      }

	      if (parent._state !== 'loaded') {
	        parent._state = 'loaded';
	        parent._emit('load');
	        parent._loadQueue();
	      }

	      // Clear the event listener.
	      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
	    }
	  };

	  /** Helper Methods **/
	  /***************************************************************************/

	  var cache = {};

	  /**
	   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
	   * @param  {Howl} self
	   */
	  var loadBuffer = function(self) {
	    var url = self._src;

	    // Check if the buffer has already been cached and use it instead.
	    if (cache[url]) {
	      // Set the duration from the cache.
	      self._duration = cache[url].duration;

	      // Load the sound into this Howl.
	      loadSound(self);

	      return;
	    }

	    if (/^data:[^;]+;base64,/.test(url)) {
	      // Decode the base64 data URI without XHR, since some browsers don't support it.
	      var data = atob(url.split(',')[1]);
	      var dataView = new Uint8Array(data.length);
	      for (var i=0; i<data.length; ++i) {
	        dataView[i] = data.charCodeAt(i);
	      }

	      decodeAudioData(dataView.buffer, self);
	    } else {
	      // Load the buffer from the URL.
	      var xhr = new XMLHttpRequest();
	      xhr.open('GET', url, true);
	      xhr.withCredentials = self._xhrWithCredentials;
	      xhr.responseType = 'arraybuffer';
	      xhr.onload = function() {
	        // Make sure we get a successful response back.
	        var code = (xhr.status + '')[0];
	        if (code !== '0' && code !== '2' && code !== '3') {
	          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');
	          return;
	        }

	        decodeAudioData(xhr.response, self);
	      };
	      xhr.onerror = function() {
	        // If there is an error, switch to HTML5 Audio.
	        if (self._webAudio) {
	          self._html5 = true;
	          self._webAudio = false;
	          self._sounds = [];
	          delete cache[url];
	          self.load();
	        }
	      };
	      safeXhrSend(xhr);
	    }
	  };

	  /**
	   * Send the XHR request wrapped in a try/catch.
	   * @param  {Object} xhr XHR to send.
	   */
	  var safeXhrSend = function(xhr) {
	    try {
	      xhr.send();
	    } catch (e) {
	      xhr.onerror();
	    }
	  };

	  /**
	   * Decode audio data from an array buffer.
	   * @param  {ArrayBuffer} arraybuffer The audio data.
	   * @param  {Howl}        self
	   */
	  var decodeAudioData = function(arraybuffer, self) {
	    // Fire a load error if something broke.
	    var error = function() {
	      self._emit('loaderror', null, 'Decoding audio data failed.');
	    };

	    // Load the sound on success.
	    var success = function(buffer) {
	      if (buffer && self._sounds.length > 0) {
	        cache[self._src] = buffer;
	        loadSound(self, buffer);
	      } else {
	        error();
	      }
	    };

	    // Decode the buffer into an audio source.
	    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {
	      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);
	    } else {
	      Howler.ctx.decodeAudioData(arraybuffer, success, error);
	    }
	  }

	  /**
	   * Sound is now loaded, so finish setting everything up and fire the loaded event.
	   * @param  {Howl} self
	   * @param  {Object} buffer The decoded buffer sound source.
	   */
	  var loadSound = function(self, buffer) {
	    // Set the duration.
	    if (buffer && !self._duration) {
	      self._duration = buffer.duration;
	    }

	    // Setup a sprite if none is defined.
	    if (Object.keys(self._sprite).length === 0) {
	      self._sprite = {__default: [0, self._duration * 1000]};
	    }

	    // Fire the loaded event.
	    if (self._state !== 'loaded') {
	      self._state = 'loaded';
	      self._emit('load');
	      self._loadQueue();
	    }
	  };

	  /**
	   * Setup the audio context when available, or switch to HTML5 Audio mode.
	   */
	  var setupAudioContext = function() {
	    // If we have already detected that Web Audio isn't supported, don't run this step again.
	    if (!Howler.usingWebAudio) {
	      return;
	    }

	    // Check if we are using Web Audio and setup the AudioContext if we are.
	    try {
	      if (typeof AudioContext !== 'undefined') {
	        Howler.ctx = new AudioContext();
	      } else if (typeof webkitAudioContext !== 'undefined') {
	        Howler.ctx = new webkitAudioContext();
	      } else {
	        Howler.usingWebAudio = false;
	      }
	    } catch(e) {
	      Howler.usingWebAudio = false;
	    }

	    // If the audio context creation still failed, set using web audio to false.
	    if (!Howler.ctx) {
	      Howler.usingWebAudio = false;
	    }

	    // Check if a webview is being used on iOS8 or earlier (rather than the browser).
	    // If it is, disable Web Audio as it causes crashing.
	    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));
	    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
	    var version = appVersion ? parseInt(appVersion[1], 10) : null;
	    if (iOS && version && version < 9) {
	      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
	      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {
	        Howler.usingWebAudio = false;
	      }
	    }

	    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
	    if (Howler.usingWebAudio) {
	      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
	      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);
	      Howler.masterGain.connect(Howler.ctx.destination);
	    }

	    // Re-run the setup on Howler.
	    Howler._setup();
	  };

	  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return {
	        Howler: Howler,
	        Howl: Howl
	      };
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }

	  // Add support for CommonJS libraries such as browserify.
	  if (true) {
	    exports.Howler = Howler;
	    exports.Howl = Howl;
	  }

	  // Define globally in case AMD is not available or unused.
	  if (typeof window !== 'undefined') {
	    window.HowlerGlobal = HowlerGlobal;
	    window.Howler = Howler;
	    window.Howl = Howl;
	    window.Sound = Sound;
	  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).
	    global.HowlerGlobal = HowlerGlobal;
	    global.Howler = Howler;
	    global.Howl = Howl;
	    global.Sound = Sound;
	  }
	})();


	/*!
	 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
	 *  
	 *  howler.js v2.1.1
	 *  howlerjs.com
	 *
	 *  (c) 2013-2018, James Simpson of GoldFire Studios
	 *  goldfirestudios.com
	 *
	 *  MIT License
	 */

	(function() {

	  'use strict';

	  // Setup default properties.
	  HowlerGlobal.prototype._pos = [0, 0, 0];
	  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];

	  /** Global Methods **/
	  /***************************************************************************/

	  /**
	   * Helper method to update the stereo panning position of all current Howls.
	   * Future Howls will not use this value unless explicitly set.
	   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
	   * @return {Howler/Number}     Self or current stereo panning value.
	   */
	  HowlerGlobal.prototype.stereo = function(pan) {
	    var self = this;

	    // Stop right here if not using Web Audio.
	    if (!self.ctx || !self.ctx.listener) {
	      return self;
	    }

	    // Loop through all Howls and update their stereo panning.
	    for (var i=self._howls.length-1; i>=0; i--) {
	      self._howls[i].stereo(pan);
	    }

	    return self;
	  };

	  /**
	   * Get/set the position of the listener in 3D cartesian space. Sounds using
	   * 3D position will be relative to the listener's position.
	   * @param  {Number} x The x-position of the listener.
	   * @param  {Number} y The y-position of the listener.
	   * @param  {Number} z The z-position of the listener.
	   * @return {Howler/Array}   Self or current listener position.
	   */
	  HowlerGlobal.prototype.pos = function(x, y, z) {
	    var self = this;

	    // Stop right here if not using Web Audio.
	    if (!self.ctx || !self.ctx.listener) {
	      return self;
	    }

	    // Set the defaults for optional 'y' & 'z'.
	    y = (typeof y !== 'number') ? self._pos[1] : y;
	    z = (typeof z !== 'number') ? self._pos[2] : z;

	    if (typeof x === 'number') {
	      self._pos = [x, y, z];

	      if (typeof self.ctx.listener.positionX !== 'undefined') {
	        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);
	        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);
	        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);
	      } else {
	        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
	      }
	    } else {
	      return self._pos;
	    }

	    return self;
	  };

	  /**
	   * Get/set the direction the listener is pointing in the 3D cartesian space.
	   * A front and up vector must be provided. The front is the direction the
	   * face of the listener is pointing, and up is the direction the top of the
	   * listener is pointing. Thus, these values are expected to be at right angles
	   * from each other.
	   * @param  {Number} x   The x-orientation of the listener.
	   * @param  {Number} y   The y-orientation of the listener.
	   * @param  {Number} z   The z-orientation of the listener.
	   * @param  {Number} xUp The x-orientation of the top of the listener.
	   * @param  {Number} yUp The y-orientation of the top of the listener.
	   * @param  {Number} zUp The z-orientation of the top of the listener.
	   * @return {Howler/Array}     Returns self or the current orientation vectors.
	   */
	  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
	    var self = this;

	    // Stop right here if not using Web Audio.
	    if (!self.ctx || !self.ctx.listener) {
	      return self;
	    }

	    // Set the defaults for optional 'y' & 'z'.
	    var or = self._orientation;
	    y = (typeof y !== 'number') ? or[1] : y;
	    z = (typeof z !== 'number') ? or[2] : z;
	    xUp = (typeof xUp !== 'number') ? or[3] : xUp;
	    yUp = (typeof yUp !== 'number') ? or[4] : yUp;
	    zUp = (typeof zUp !== 'number') ? or[5] : zUp;

	    if (typeof x === 'number') {
	      self._orientation = [x, y, z, xUp, yUp, zUp];

	      if (typeof self.ctx.listener.forwardX !== 'undefined') {
	        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
	        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
	        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
	        self.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
	        self.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
	        self.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
	      } else {
	        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
	      }
	    } else {
	      return or;
	    }

	    return self;
	  };

	  /** Group Methods **/
	  /***************************************************************************/

	  /**
	   * Add new properties to the core init.
	   * @param  {Function} _super Core init method.
	   * @return {Howl}
	   */
	  Howl.prototype.init = (function(_super) {
	    return function(o) {
	      var self = this;

	      // Setup user-defined default properties.
	      self._orientation = o.orientation || [1, 0, 0];
	      self._stereo = o.stereo || null;
	      self._pos = o.pos || null;
	      self._pannerAttr = {
	        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
	        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
	        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
	        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
	        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
	        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
	        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
	        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
	      };

	      // Setup event listeners.
	      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];
	      self._onpos = o.onpos ? [{fn: o.onpos}] : [];
	      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];

	      // Complete initilization with howler.js core's init function.
	      return _super.call(this, o);
	    };
	  })(Howl.prototype.init);

	  /**
	   * Get/set the stereo panning of the audio source for this sound or all in the group.
	   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
	   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
	   * @return {Howl/Number}    Returns self or the current stereo panning value.
	   */
	  Howl.prototype.stereo = function(pan, id) {
	    var self = this;

	    // Stop right here if not using Web Audio.
	    if (!self._webAudio) {
	      return self;
	    }

	    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
	    if (self._state !== 'loaded') {
	      self._queue.push({
	        event: 'stereo',
	        action: function() {
	          self.stereo(pan, id);
	        }
	      });

	      return self;
	    }

	    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
	    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';

	    // Setup the group's stereo panning if no ID is passed.
	    if (typeof id === 'undefined') {
	      // Return the group's stereo panning if no parameters are passed.
	      if (typeof pan === 'number') {
	        self._stereo = pan;
	        self._pos = [pan, 0, 0];
	      } else {
	        return self._stereo;
	      }
	    }

	    // Change the streo panning of one or all sounds in group.
	    var ids = self._getSoundIds(id);
	    for (var i=0; i<ids.length; i++) {
	      // Get the sound.
	      var sound = self._soundById(ids[i]);

	      if (sound) {
	        if (typeof pan === 'number') {
	          sound._stereo = pan;
	          sound._pos = [pan, 0, 0];

	          if (sound._node) {
	            // If we are falling back, make sure the panningModel is equalpower.
	            sound._pannerAttr.panningModel = 'equalpower';

	            // Check if there is a panner setup and create a new one if not.
	            if (!sound._panner || !sound._panner.pan) {
	              setupPanner(sound, pannerType);
	            }

	            if (pannerType === 'spatial') {
	              if (typeof sound._panner.positionX !== 'undefined') {
	                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
	                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
	                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
	              } else {
	                sound._panner.setPosition(pan, 0, 0);
	              }
	            } else {
	              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
	            }
	          }

	          self._emit('stereo', sound._id);
	        } else {
	          return sound._stereo;
	        }
	      }
	    }

	    return self;
	  };

	  /**
	   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
	   * @param  {Number} x  The x-position of the audio source.
	   * @param  {Number} y  The y-position of the audio source.
	   * @param  {Number} z  The z-position of the audio source.
	   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
	   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
	   */
	  Howl.prototype.pos = function(x, y, z, id) {
	    var self = this;

	    // Stop right here if not using Web Audio.
	    if (!self._webAudio) {
	      return self;
	    }

	    // If the sound hasn't loaded, add it to the load queue to change position when capable.
	    if (self._state !== 'loaded') {
	      self._queue.push({
	        event: 'pos',
	        action: function() {
	          self.pos(x, y, z, id);
	        }
	      });

	      return self;
	    }

	    // Set the defaults for optional 'y' & 'z'.
	    y = (typeof y !== 'number') ? 0 : y;
	    z = (typeof z !== 'number') ? -0.5 : z;

	    // Setup the group's spatial position if no ID is passed.
	    if (typeof id === 'undefined') {
	      // Return the group's spatial position if no parameters are passed.
	      if (typeof x === 'number') {
	        self._pos = [x, y, z];
	      } else {
	        return self._pos;
	      }
	    }

	    // Change the spatial position of one or all sounds in group.
	    var ids = self._getSoundIds(id);
	    for (var i=0; i<ids.length; i++) {
	      // Get the sound.
	      var sound = self._soundById(ids[i]);

	      if (sound) {
	        if (typeof x === 'number') {
	          sound._pos = [x, y, z];

	          if (sound._node) {
	            // Check if there is a panner setup and create a new one if not.
	            if (!sound._panner || sound._panner.pan) {
	              setupPanner(sound, 'spatial');
	            }

	            if (typeof sound._panner.positionX !== 'undefined') {
	              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
	              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
	              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
	            } else {
	              sound._panner.setPosition(x, y, z);
	            }
	          }

	          self._emit('pos', sound._id);
	        } else {
	          return sound._pos;
	        }
	      }
	    }

	    return self;
	  };

	  /**
	   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
	   * space. Depending on how direction the sound is, based on the `cone` attributes,
	   * a sound pointing away from the listener can be quiet or silent.
	   * @param  {Number} x  The x-orientation of the source.
	   * @param  {Number} y  The y-orientation of the source.
	   * @param  {Number} z  The z-orientation of the source.
	   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
	   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
	   */
	  Howl.prototype.orientation = function(x, y, z, id) {
	    var self = this;

	    // Stop right here if not using Web Audio.
	    if (!self._webAudio) {
	      return self;
	    }

	    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
	    if (self._state !== 'loaded') {
	      self._queue.push({
	        event: 'orientation',
	        action: function() {
	          self.orientation(x, y, z, id);
	        }
	      });

	      return self;
	    }

	    // Set the defaults for optional 'y' & 'z'.
	    y = (typeof y !== 'number') ? self._orientation[1] : y;
	    z = (typeof z !== 'number') ? self._orientation[2] : z;

	    // Setup the group's spatial orientation if no ID is passed.
	    if (typeof id === 'undefined') {
	      // Return the group's spatial orientation if no parameters are passed.
	      if (typeof x === 'number') {
	        self._orientation = [x, y, z];
	      } else {
	        return self._orientation;
	      }
	    }

	    // Change the spatial orientation of one or all sounds in group.
	    var ids = self._getSoundIds(id);
	    for (var i=0; i<ids.length; i++) {
	      // Get the sound.
	      var sound = self._soundById(ids[i]);

	      if (sound) {
	        if (typeof x === 'number') {
	          sound._orientation = [x, y, z];

	          if (sound._node) {
	            // Check if there is a panner setup and create a new one if not.
	            if (!sound._panner) {
	              // Make sure we have a position to setup the node with.
	              if (!sound._pos) {
	                sound._pos = self._pos || [0, 0, -0.5];
	              }

	              setupPanner(sound, 'spatial');
	            }

	            if (typeof sound._panner.orientationX !== 'undefined') {
	              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
	              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
	              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
	            } else {
	              sound._panner.setOrientation(x, y, z);
	            }
	          }

	          self._emit('orientation', sound._id);
	        } else {
	          return sound._orientation;
	        }
	      }
	    }

	    return self;
	  };

	  /**
	   * Get/set the panner node's attributes for a sound or group of sounds.
	   * This method can optionall take 0, 1 or 2 arguments.
	   *   pannerAttr() -> Returns the group's values.
	   *   pannerAttr(id) -> Returns the sound id's values.
	   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
	   *   pannerAttr(o, id) -> Set's the values of passed sound id.
	   *
	   *   Attributes:
	   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
	   *                      inside of which there will be no volume reduction.
	   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
	   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
	   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
	   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
	   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
	   *                     listener. Can be `linear`, `inverse` or `exponential.
	   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
	   *                   will not be reduced any further.
	   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
	   *                   This is simply a variable of the distance model and has a different effect depending on which model
	   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
	   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
	   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
	   *                     with `inverse` and `exponential`.
	   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
	   *                     Can be `HRTF` or `equalpower`.
	   *
	   * @return {Howl/Object} Returns self or current panner attributes.
	   */
	  Howl.prototype.pannerAttr = function() {
	    var self = this;
	    var args = arguments;
	    var o, id, sound;

	    // Stop right here if not using Web Audio.
	    if (!self._webAudio) {
	      return self;
	    }

	    // Determine the values based on arguments.
	    if (args.length === 0) {
	      // Return the group's panner attribute values.
	      return self._pannerAttr;
	    } else if (args.length === 1) {
	      if (typeof args[0] === 'object') {
	        o = args[0];

	        // Set the grou's panner attribute values.
	        if (typeof id === 'undefined') {
	          if (!o.pannerAttr) {
	            o.pannerAttr = {
	              coneInnerAngle: o.coneInnerAngle,
	              coneOuterAngle: o.coneOuterAngle,
	              coneOuterGain: o.coneOuterGain,
	              distanceModel: o.distanceModel,
	              maxDistance: o.maxDistance,
	              refDistance: o.refDistance,
	              rolloffFactor: o.rolloffFactor,
	              panningModel: o.panningModel
	            };
	          }

	          self._pannerAttr = {
	            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
	            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
	            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
	            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,
	            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,
	            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,
	            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
	            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel
	          };
	        }
	      } else {
	        // Return this sound's panner attribute values.
	        sound = self._soundById(parseInt(args[0], 10));
	        return sound ? sound._pannerAttr : self._pannerAttr;
	      }
	    } else if (args.length === 2) {
	      o = args[0];
	      id = parseInt(args[1], 10);
	    }

	    // Update the values of the specified sounds.
	    var ids = self._getSoundIds(id);
	    for (var i=0; i<ids.length; i++) {
	      sound = self._soundById(ids[i]);

	      if (sound) {
	        // Merge the new values into the sound.
	        var pa = sound._pannerAttr;
	        pa = {
	          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
	          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
	          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
	          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
	          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
	          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
	          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,
	          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel
	        };

	        // Update the panner values or create a new panner if none exists.
	        var panner = sound._panner;
	        if (panner) {
	          panner.coneInnerAngle = pa.coneInnerAngle;
	          panner.coneOuterAngle = pa.coneOuterAngle;
	          panner.coneOuterGain = pa.coneOuterGain;
	          panner.distanceModel = pa.distanceModel;
	          panner.maxDistance = pa.maxDistance;
	          panner.refDistance = pa.refDistance;
	          panner.rolloffFactor = pa.rolloffFactor;
	          panner.panningModel = pa.panningModel;
	        } else {
	          // Make sure we have a position to setup the node with.
	          if (!sound._pos) {
	            sound._pos = self._pos || [0, 0, -0.5];
	          }

	          // Create a new panner node.
	          setupPanner(sound, 'spatial');
	        }
	      }
	    }

	    return self;
	  };

	  /** Single Sound Methods **/
	  /***************************************************************************/

	  /**
	   * Add new properties to the core Sound init.
	   * @param  {Function} _super Core Sound init method.
	   * @return {Sound}
	   */
	  Sound.prototype.init = (function(_super) {
	    return function() {
	      var self = this;
	      var parent = self._parent;

	      // Setup user-defined default properties.
	      self._orientation = parent._orientation;
	      self._stereo = parent._stereo;
	      self._pos = parent._pos;
	      self._pannerAttr = parent._pannerAttr;

	      // Complete initilization with howler.js core Sound's init function.
	      _super.call(this);

	      // If a stereo or position was specified, set it up.
	      if (self._stereo) {
	        parent.stereo(self._stereo);
	      } else if (self._pos) {
	        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
	      }
	    };
	  })(Sound.prototype.init);

	  /**
	   * Override the Sound.reset method to clean up properties from the spatial plugin.
	   * @param  {Function} _super Sound reset method.
	   * @return {Sound}
	   */
	  Sound.prototype.reset = (function(_super) {
	    return function() {
	      var self = this;
	      var parent = self._parent;

	      // Reset all spatial plugin properties on this sound.
	      self._orientation = parent._orientation;
	      self._stereo = parent._stereo;
	      self._pos = parent._pos;
	      self._pannerAttr = parent._pannerAttr;

	      // If a stereo or position was specified, set it up.
	      if (self._stereo) {
	        parent.stereo(self._stereo);
	      } else if (self._pos) {
	        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
	      } else if (self._panner) {
	        // Disconnect the panner.
	        self._panner.disconnect(0);
	        self._panner = undefined;
	        parent._refreshBuffer(self);
	      }

	      // Complete resetting of the sound.
	      return _super.call(this);
	    };
	  })(Sound.prototype.reset);

	  /** Helper Methods **/
	  /***************************************************************************/

	  /**
	   * Create a new panner node and save it on the sound.
	   * @param  {Sound} sound Specific sound to setup panning on.
	   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
	   */
	  var setupPanner = function(sound, type) {
	    type = type || 'spatial';

	    // Create the new panner node.
	    if (type === 'spatial') {
	      sound._panner = Howler.ctx.createPanner();
	      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
	      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
	      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
	      sound._panner.distanceModel = sound._pannerAttr.distanceModel;
	      sound._panner.maxDistance = sound._pannerAttr.maxDistance;
	      sound._panner.refDistance = sound._pannerAttr.refDistance;
	      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
	      sound._panner.panningModel = sound._pannerAttr.panningModel;

	      if (typeof sound._panner.positionX !== 'undefined') {
	        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
	        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
	        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
	      } else {
	        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
	      }

	      if (typeof sound._panner.orientationX !== 'undefined') {
	        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
	        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
	        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
	      } else {
	        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
	      }
	    } else {
	      sound._panner = Howler.ctx.createStereoPanner();
	      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
	    }

	    sound._panner.connect(sound._node);

	    // Update the connections.
	    if (!sound._paused) {
	      sound._parent.pause(sound._id, true).play(sound._id, true);
	    }
	  };
	})();

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 895 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(896);

	var _react2 = _interopRequireDefault(_react);

	__webpack_require__(927);

	__webpack_require__(928);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Fancy = function (_React$Component) {
	  _inherits(Fancy, _React$Component);

	  function Fancy() {
	    _classCallCheck(this, Fancy);

	    var _this = _possibleConstructorReturn(this, (Fancy.__proto__ || Object.getPrototypeOf(Fancy)).call(this));

	    _this.state = {
	      stack: undefined,
	      imgs: undefined,
	      postivebtnlabel: undefined,
	      negativebtnlabel: undefined,
	      postivebtnclass: undefined,
	      negativebtnclass: undefined
	    };
	    _this.onEndStack = _this.onEndStack.bind(_this);
	    return _this;
	  }

	  _createClass(Fancy, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var stack = new Stack(document.getElementById('stack'));
	      stack.options.infinite = this.state.infinite;
	      stack.options.onEndStack = this.onEndStack;
	      this.setState({ stack: stack });
	    }
	  }, {
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.setState({
	        imgs: this.props.images,
	        postivebtnlabel: this.props.postivebtnlabel || 'Yes',
	        negativebtnlabel: this.props.negativebtnlabel || 'No',
	        postivebtnclass: this.props.postivebtnclass || '',
	        negativebtnclass: this.props.negativebtnclass || '',
	        query: this.props.query || undefined,
	        queryclass: this.props.queryclass || '',
	        imgclass: this.props.imgclass || '',
	        effect: this.props.effect || 'krisna',
	        infinite: this.props.infinite || false
	      });
	    }
	  }, {
	    key: 'onEndStack',
	    value: function onEndStack() {
	      this.props.onstackendfn();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('div', { className: 'stack-container' }, _react2.default.createElement('ul', { id: 'stack', className: 'stack stack--' + this.state.effect }, this.state.imgs && this.state.imgs.map(function (img, i) {
	        return _react2.default.createElement('li', { id: img.id, key: img.id, className: 'stack__item' }, _react2.default.createElement('img', { src: img.imageData }));
	      })), _react2.default.createElement('div', { className: 'controls' }, _react2.default.createElement('div', null, _react2.default.createElement('p', { className: this.state.queryclass }, this.state.query), _react2.default.createElement('img', { className: 'icon-tool', src: this.props.cancelIcon, onClick: this.props.reject }), _react2.default.createElement('img', { className: 'icon-tool', src: this.props.acceptIcon, onClick: this.props.accept }))));
	    }
	  }]);

	  return Fancy;
	}(_react2.default.Component);

	exports.default = Fancy;

/***/ }),
/* 896 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(897);


/***/ }),
/* 897 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(6);

	var ReactBaseClasses = __webpack_require__(898);
	var ReactChildren = __webpack_require__(907);
	var ReactDOMFactories = __webpack_require__(915);
	var ReactElement = __webpack_require__(909);
	var ReactPropTypes = __webpack_require__(921);
	var ReactVersion = __webpack_require__(923);

	var createReactClass = __webpack_require__(924);
	var onlyChild = __webpack_require__(926);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var lowPriorityWarning = __webpack_require__(906);
	  var canDefineProperty = __webpack_require__(903);
	  var ReactElementValidator = __webpack_require__(916);
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;
	var createMixin = function (mixin) {
	  return mixin;
	};

	if (process.env.NODE_ENV !== 'production') {
	  var warnedForSpread = false;
	  var warnedForCreateMixin = false;
	  __spread = function () {
	    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
	    warnedForSpread = true;
	    return _assign.apply(null, arguments);
	  };

	  createMixin = function (mixin) {
	    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
	    warnedForCreateMixin = true;
	    return mixin;
	  };
	}

	var React = {
	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactBaseClasses.Component,
	  PureComponent: ReactBaseClasses.PureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: createReactClass,
	  createFactory: createFactory,
	  createMixin: createMixin,

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	if (process.env.NODE_ENV !== 'production') {
	  var warnedForCreateClass = false;
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function () {
	        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });

	    Object.defineProperty(React, 'createClass', {
	      get: function () {
	        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
	        warnedForCreateClass = true;
	        return createReactClass;
	      }
	    });
	  }

	  // React.DOM factories are deprecated. Wrap these methods so that
	  // invocations of the React.DOM namespace and alert users to switch
	  // to the `react-dom-factories` package.
	  React.DOM = {};
	  var warnedForFactories = false;
	  Object.keys(ReactDOMFactories).forEach(function (factory) {
	    React.DOM[factory] = function () {
	      if (!warnedForFactories) {
	        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
	        warnedForFactories = true;
	      }
	      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
	    };
	  });
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 898 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(899),
	    _assign = __webpack_require__(6);

	var ReactNoopUpdateQueue = __webpack_require__(900);

	var canDefineProperty = __webpack_require__(903);
	var emptyObject = __webpack_require__(904);
	var invariant = __webpack_require__(905);
	var lowPriorityWarning = __webpack_require__(906);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = {
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 899 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ }),
/* 900 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(901);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 901 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(902);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 902 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ }),
/* 903 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 904 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 905 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 906 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	if (process.env.NODE_ENV !== 'production') {
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = lowPriorityWarning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 907 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(908);
	var ReactElement = __webpack_require__(909);

	var emptyFunction = __webpack_require__(902);
	var traverseAllChildren = __webpack_require__(912);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ }),
/* 908 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(899);

	var invariant = __webpack_require__(905);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 909 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(6);

	var ReactCurrentOwner = __webpack_require__(910);

	var warning = __webpack_require__(901);
	var canDefineProperty = __webpack_require__(903);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(911);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 910 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	module.exports = ReactCurrentOwner;

/***/ }),
/* 911 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 912 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(899);

	var ReactCurrentOwner = __webpack_require__(910);
	var REACT_ELEMENT_TYPE = __webpack_require__(911);

	var getIteratorFn = __webpack_require__(913);
	var invariant = __webpack_require__(905);
	var KeyEscapeUtils = __webpack_require__(914);
	var warning = __webpack_require__(901);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 913 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ }),
/* 914 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ }),
/* 915 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(909);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(916);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 916 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(910);
	var ReactComponentTreeHook = __webpack_require__(917);
	var ReactElement = __webpack_require__(909);

	var checkReactTypeSpec = __webpack_require__(918);

	var canDefineProperty = __webpack_require__(903);
	var getIteratorFn = __webpack_require__(913);
	var warning = __webpack_require__(901);
	var lowPriorityWarning = __webpack_require__(906);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
	        }

	        var sourceInfo = getSourceInfoErrorAddendum(props);
	        if (sourceInfo) {
	          info += sourceInfo;
	        } else {
	          info += getDeclarationErrorAddendum();
	        }

	        info += ReactComponentTreeHook.getCurrentStackAddendum();

	        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
	        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	        ReactComponentTreeHook.popNonStandardWarningStack();
	      }
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 917 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(899);

	var ReactCurrentOwner = __webpack_require__(910);

	var invariant = __webpack_require__(905);
	var warning = __webpack_require__(901);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty
	  // Strip regex characters so we can use it for regex
	  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
	  // Remove hasOwnProperty from the template to make it generic
	  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs,

	  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
	    if (typeof console.reactStack !== 'function') {
	      return;
	    }

	    var stack = [];
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    try {
	      if (isCreatingElement) {
	        stack.push({
	          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
	          fileName: currentSource ? currentSource.fileName : null,
	          lineNumber: currentSource ? currentSource.lineNumber : null
	        });
	      }

	      while (id) {
	        var element = ReactComponentTreeHook.getElement(id);
	        var parentID = ReactComponentTreeHook.getParentID(id);
	        var ownerID = ReactComponentTreeHook.getOwnerID(id);
	        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
	        var source = element && element._source;
	        stack.push({
	          name: ownerName,
	          fileName: source ? source.fileName : null,
	          lineNumber: source ? source.lineNumber : null
	        });
	        id = parentID;
	      }
	    } catch (err) {
	      // Internal state is messed up.
	      // Stop building the stack (it's just a nice to have).
	    }

	    console.reactStack(stack);
	  },
	  popNonStandardWarningStack: function () {
	    if (typeof console.reactStackEnd !== 'function') {
	      return;
	    }
	    console.reactStackEnd();
	  }
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 918 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(899);

	var ReactPropTypeLocationNames = __webpack_require__(919);
	var ReactPropTypesSecret = __webpack_require__(920);

	var invariant = __webpack_require__(905);
	var warning = __webpack_require__(901);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(917);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(917);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 919 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 920 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ }),
/* 921 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(909),
	    isValidElement = _require.isValidElement;

	var factory = __webpack_require__(922);

	module.exports = factory(isValidElement);

/***/ }),
/* 922 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	var factory = __webpack_require__(24);
	module.exports = function(isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};


/***/ }),
/* 923 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	module.exports = '15.6.2';

/***/ }),
/* 924 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(898),
	    Component = _require.Component;

	var _require2 = __webpack_require__(909),
	    isValidElement = _require2.isValidElement;

	var ReactNoopUpdateQueue = __webpack_require__(900);
	var factory = __webpack_require__(925);

	module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 925 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(6);

	var emptyObject = __webpack_require__(904);
	var _invariant = __webpack_require__(905);

	if (process.env.NODE_ENV !== 'production') {
	  var warning = __webpack_require__(901);
	}

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	var ReactPropTypeLocationNames;
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	} else {
	  ReactPropTypeLocationNames = {};
	}

	function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
	  /**
	   * Policies that describe methods in `ReactClassInterface`.
	   */

	  var injectedMixins = [];

	  /**
	   * Composite components are higher-level components that compose other composite
	   * or host components.
	   *
	   * To create a new type of `ReactClass`, pass a specification of
	   * your new class to `React.createClass`. The only requirement of your class
	   * specification is that you implement a `render` method.
	   *
	   *   var MyComponent = React.createClass({
	   *     render: function() {
	   *       return <div>Hello World</div>;
	   *     }
	   *   });
	   *
	   * The class specification supports a specific protocol of methods that have
	   * special meaning (e.g. `render`). See `ReactClassInterface` for
	   * more the comprehensive protocol. Any other properties and methods in the
	   * class specification will be available on the prototype.
	   *
	   * @interface ReactClassInterface
	   * @internal
	   */
	  var ReactClassInterface = {
	    /**
	     * An array of Mixin objects to include when defining your component.
	     *
	     * @type {array}
	     * @optional
	     */
	    mixins: 'DEFINE_MANY',

	    /**
	     * An object containing properties and methods that should be defined on
	     * the component's constructor instead of its prototype (static methods).
	     *
	     * @type {object}
	     * @optional
	     */
	    statics: 'DEFINE_MANY',

	    /**
	     * Definition of prop types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    propTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    contextTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types this component sets for its children.
	     *
	     * @type {object}
	     * @optional
	     */
	    childContextTypes: 'DEFINE_MANY',

	    // ==== Definition methods ====

	    /**
	     * Invoked when the component is mounted. Values in the mapping will be set on
	     * `this.props` if that prop is not specified (i.e. using an `in` check).
	     *
	     * This method is invoked before `getInitialState` and therefore cannot rely
	     * on `this.state` or use `this.setState`.
	     *
	     * @return {object}
	     * @optional
	     */
	    getDefaultProps: 'DEFINE_MANY_MERGED',

	    /**
	     * Invoked once before the component is mounted. The return value will be used
	     * as the initial value of `this.state`.
	     *
	     *   getInitialState: function() {
	     *     return {
	     *       isOn: false,
	     *       fooBaz: new BazFoo()
	     *     }
	     *   }
	     *
	     * @return {object}
	     * @optional
	     */
	    getInitialState: 'DEFINE_MANY_MERGED',

	    /**
	     * @return {object}
	     * @optional
	     */
	    getChildContext: 'DEFINE_MANY_MERGED',

	    /**
	     * Uses props from `this.props` and state from `this.state` to render the
	     * structure of the component.
	     *
	     * No guarantees are made about when or how often this method is invoked, so
	     * it must not have side effects.
	     *
	     *   render: function() {
	     *     var name = this.props.name;
	     *     return <div>Hello, {name}!</div>;
	     *   }
	     *
	     * @return {ReactComponent}
	     * @required
	     */
	    render: 'DEFINE_ONCE',

	    // ==== Delegate methods ====

	    /**
	     * Invoked when the component is initially created and about to be mounted.
	     * This may have side effects, but any external subscriptions or data created
	     * by this method must be cleaned up in `componentWillUnmount`.
	     *
	     * @optional
	     */
	    componentWillMount: 'DEFINE_MANY',

	    /**
	     * Invoked when the component has been mounted and has a DOM representation.
	     * However, there is no guarantee that the DOM node is in the document.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been mounted (initialized and rendered) for the first time.
	     *
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidMount: 'DEFINE_MANY',

	    /**
	     * Invoked before the component receives new props.
	     *
	     * Use this as an opportunity to react to a prop transition by updating the
	     * state using `this.setState`. Current props are accessed via `this.props`.
	     *
	     *   componentWillReceiveProps: function(nextProps, nextContext) {
	     *     this.setState({
	     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	     *     });
	     *   }
	     *
	     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	     * transition may cause a state change, but the opposite is not true. If you
	     * need it, you are probably looking for `componentWillUpdate`.
	     *
	     * @param {object} nextProps
	     * @optional
	     */
	    componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Invoked while deciding if the component should be updated as a result of
	     * receiving new props, state and/or context.
	     *
	     * Use this as an opportunity to `return false` when you're certain that the
	     * transition to the new props/state/context will not require a component
	     * update.
	     *
	     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	     *     return !equal(nextProps, this.props) ||
	     *       !equal(nextState, this.state) ||
	     *       !equal(nextContext, this.context);
	     *   }
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @return {boolean} True if the component should update.
	     * @optional
	     */
	    shouldComponentUpdate: 'DEFINE_ONCE',

	    /**
	     * Invoked when the component is about to update due to a transition from
	     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	     * and `nextContext`.
	     *
	     * Use this as an opportunity to perform preparation before an update occurs.
	     *
	     * NOTE: You **cannot** use `this.setState()` in this method.
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @param {ReactReconcileTransaction} transaction
	     * @optional
	     */
	    componentWillUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component's DOM representation has been updated.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been updated.
	     *
	     * @param {object} prevProps
	     * @param {?object} prevState
	     * @param {?object} prevContext
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component is about to be removed from its parent and have
	     * its DOM representation destroyed.
	     *
	     * Use this as an opportunity to deallocate any external resources.
	     *
	     * NOTE: There is no `componentDidUnmount` since your component will have been
	     * destroyed by that point.
	     *
	     * @optional
	     */
	    componentWillUnmount: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillMount`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillMount: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillReceiveProps`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillUpdate`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillUpdate: 'DEFINE_MANY',

	    // ==== Advanced methods ====

	    /**
	     * Updates the component's currently mounted DOM representation.
	     *
	     * By default, this implements React's rendering and reconciliation algorithm.
	     * Sophisticated clients may wish to override this.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     * @overridable
	     */
	    updateComponent: 'OVERRIDE_BASE'
	  };

	  /**
	   * Similar to ReactClassInterface but for static methods.
	   */
	  var ReactClassStaticInterface = {
	    /**
	     * This method is invoked after a component is instantiated and when it
	     * receives new props. Return an object to update state in response to
	     * prop changes. Return null to indicate no change to state.
	     *
	     * If an object is returned, its keys will be merged into the existing state.
	     *
	     * @return {object || null}
	     * @optional
	     */
	    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
	  };

	  /**
	   * Mapping from class specification keys to special processing functions.
	   *
	   * Although these are declared like instance properties in the specification
	   * when defining classes using `React.createClass`, they are actually static
	   * and are accessible on the constructor instead of the prototype. Despite
	   * being static, they must be defined outside of the "statics" key under
	   * which all other static methods are defined.
	   */
	  var RESERVED_SPEC_KEYS = {
	    displayName: function(Constructor, displayName) {
	      Constructor.displayName = displayName;
	    },
	    mixins: function(Constructor, mixins) {
	      if (mixins) {
	        for (var i = 0; i < mixins.length; i++) {
	          mixSpecIntoComponent(Constructor, mixins[i]);
	        }
	      }
	    },
	    childContextTypes: function(Constructor, childContextTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, childContextTypes, 'childContext');
	      }
	      Constructor.childContextTypes = _assign(
	        {},
	        Constructor.childContextTypes,
	        childContextTypes
	      );
	    },
	    contextTypes: function(Constructor, contextTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, contextTypes, 'context');
	      }
	      Constructor.contextTypes = _assign(
	        {},
	        Constructor.contextTypes,
	        contextTypes
	      );
	    },
	    /**
	     * Special case getDefaultProps which should move into statics but requires
	     * automatic merging.
	     */
	    getDefaultProps: function(Constructor, getDefaultProps) {
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps = createMergedResultFunction(
	          Constructor.getDefaultProps,
	          getDefaultProps
	        );
	      } else {
	        Constructor.getDefaultProps = getDefaultProps;
	      }
	    },
	    propTypes: function(Constructor, propTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, propTypes, 'prop');
	      }
	      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	    },
	    statics: function(Constructor, statics) {
	      mixStaticSpecIntoComponent(Constructor, statics);
	    },
	    autobind: function() {}
	  };

	  function validateTypeDef(Constructor, typeDef, location) {
	    for (var propName in typeDef) {
	      if (typeDef.hasOwnProperty(propName)) {
	        // use a warning instead of an _invariant so components
	        // don't show up in prod but only in __DEV__
	        if (process.env.NODE_ENV !== 'production') {
	          warning(
	            typeof typeDef[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	              'React.PropTypes.',
	            Constructor.displayName || 'ReactClass',
	            ReactPropTypeLocationNames[location],
	            propName
	          );
	        }
	      }
	    }
	  }

	  function validateMethodOverride(isAlreadyDefined, name) {
	    var specPolicy = ReactClassInterface.hasOwnProperty(name)
	      ? ReactClassInterface[name]
	      : null;

	    // Disallow overriding of base class methods unless explicitly allowed.
	    if (ReactClassMixin.hasOwnProperty(name)) {
	      _invariant(
	        specPolicy === 'OVERRIDE_BASE',
	        'ReactClassInterface: You are attempting to override ' +
	          '`%s` from your class specification. Ensure that your method names ' +
	          'do not overlap with React methods.',
	        name
	      );
	    }

	    // Disallow defining methods more than once unless explicitly allowed.
	    if (isAlreadyDefined) {
	      _invariant(
	        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
	        'ReactClassInterface: You are attempting to define ' +
	          '`%s` on your component more than once. This conflict may be due ' +
	          'to a mixin.',
	        name
	      );
	    }
	  }

	  /**
	   * Mixin helper which handles policy validation and reserved
	   * specification keys when building React classes.
	   */
	  function mixSpecIntoComponent(Constructor, spec) {
	    if (!spec) {
	      if (process.env.NODE_ENV !== 'production') {
	        var typeofSpec = typeof spec;
	        var isMixinValid = typeofSpec === 'object' && spec !== null;

	        if (process.env.NODE_ENV !== 'production') {
	          warning(
	            isMixinValid,
	            "%s: You're attempting to include a mixin that is either null " +
	              'or not an object. Check the mixins included by the component, ' +
	              'as well as any mixins they include themselves. ' +
	              'Expected object but got %s.',
	            Constructor.displayName || 'ReactClass',
	            spec === null ? null : typeofSpec
	          );
	        }
	      }

	      return;
	    }

	    _invariant(
	      typeof spec !== 'function',
	      "ReactClass: You're attempting to " +
	        'use a component class or function as a mixin. Instead, just use a ' +
	        'regular object.'
	    );
	    _invariant(
	      !isValidElement(spec),
	      "ReactClass: You're attempting to " +
	        'use a component as a mixin. Instead, just use a regular object.'
	    );

	    var proto = Constructor.prototype;
	    var autoBindPairs = proto.__reactAutoBindPairs;

	    // By handling mixins before any other properties, we ensure the same
	    // chaining order is applied to methods with DEFINE_MANY policy, whether
	    // mixins are listed before or after these methods in the spec.
	    if (spec.hasOwnProperty(MIXINS_KEY)) {
	      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	    }

	    for (var name in spec) {
	      if (!spec.hasOwnProperty(name)) {
	        continue;
	      }

	      if (name === MIXINS_KEY) {
	        // We have already handled mixins in a special case above.
	        continue;
	      }

	      var property = spec[name];
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      validateMethodOverride(isAlreadyDefined, name);

	      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	        RESERVED_SPEC_KEYS[name](Constructor, property);
	      } else {
	        // Setup methods on prototype:
	        // The following member methods should not be automatically bound:
	        // 1. Expected ReactClass methods (in the "interface").
	        // 2. Overridden methods (that were mixed in).
	        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	        var isFunction = typeof property === 'function';
	        var shouldAutoBind =
	          isFunction &&
	          !isReactClassMethod &&
	          !isAlreadyDefined &&
	          spec.autobind !== false;

	        if (shouldAutoBind) {
	          autoBindPairs.push(name, property);
	          proto[name] = property;
	        } else {
	          if (isAlreadyDefined) {
	            var specPolicy = ReactClassInterface[name];

	            // These cases should already be caught by validateMethodOverride.
	            _invariant(
	              isReactClassMethod &&
	                (specPolicy === 'DEFINE_MANY_MERGED' ||
	                  specPolicy === 'DEFINE_MANY'),
	              'ReactClass: Unexpected spec policy %s for key %s ' +
	                'when mixing in component specs.',
	              specPolicy,
	              name
	            );

	            // For methods which are defined more than once, call the existing
	            // methods before calling the new property, merging if appropriate.
	            if (specPolicy === 'DEFINE_MANY_MERGED') {
	              proto[name] = createMergedResultFunction(proto[name], property);
	            } else if (specPolicy === 'DEFINE_MANY') {
	              proto[name] = createChainedFunction(proto[name], property);
	            }
	          } else {
	            proto[name] = property;
	            if (process.env.NODE_ENV !== 'production') {
	              // Add verbose displayName to the function, which helps when looking
	              // at profiling tools.
	              if (typeof property === 'function' && spec.displayName) {
	                proto[name].displayName = spec.displayName + '_' + name;
	              }
	            }
	          }
	        }
	      }
	    }
	  }

	  function mixStaticSpecIntoComponent(Constructor, statics) {
	    if (!statics) {
	      return;
	    }

	    for (var name in statics) {
	      var property = statics[name];
	      if (!statics.hasOwnProperty(name)) {
	        continue;
	      }

	      var isReserved = name in RESERVED_SPEC_KEYS;
	      _invariant(
	        !isReserved,
	        'ReactClass: You are attempting to define a reserved ' +
	          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	          'as an instance property instead; it will still be accessible on the ' +
	          'constructor.',
	        name
	      );

	      var isAlreadyDefined = name in Constructor;
	      if (isAlreadyDefined) {
	        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)
	          ? ReactClassStaticInterface[name]
	          : null;

	        _invariant(
	          specPolicy === 'DEFINE_MANY_MERGED',
	          'ReactClass: You are attempting to define ' +
	            '`%s` on your component more than once. This conflict may be ' +
	            'due to a mixin.',
	          name
	        );

	        Constructor[name] = createMergedResultFunction(Constructor[name], property);

	        return;
	      }

	      Constructor[name] = property;
	    }
	  }

	  /**
	   * Merge two objects, but throw if both contain the same key.
	   *
	   * @param {object} one The first object, which is mutated.
	   * @param {object} two The second object
	   * @return {object} one after it has been mutated to contain everything in two.
	   */
	  function mergeIntoWithNoDuplicateKeys(one, two) {
	    _invariant(
	      one && two && typeof one === 'object' && typeof two === 'object',
	      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	    );

	    for (var key in two) {
	      if (two.hasOwnProperty(key)) {
	        _invariant(
	          one[key] === undefined,
	          'mergeIntoWithNoDuplicateKeys(): ' +
	            'Tried to merge two objects with the same key: `%s`. This conflict ' +
	            'may be due to a mixin; in particular, this may be caused by two ' +
	            'getInitialState() or getDefaultProps() methods returning objects ' +
	            'with clashing keys.',
	          key
	        );
	        one[key] = two[key];
	      }
	    }
	    return one;
	  }

	  /**
	   * Creates a function that invokes two functions and merges their return values.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createMergedResultFunction(one, two) {
	    return function mergedResult() {
	      var a = one.apply(this, arguments);
	      var b = two.apply(this, arguments);
	      if (a == null) {
	        return b;
	      } else if (b == null) {
	        return a;
	      }
	      var c = {};
	      mergeIntoWithNoDuplicateKeys(c, a);
	      mergeIntoWithNoDuplicateKeys(c, b);
	      return c;
	    };
	  }

	  /**
	   * Creates a function that invokes two functions and ignores their return vales.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createChainedFunction(one, two) {
	    return function chainedFunction() {
	      one.apply(this, arguments);
	      two.apply(this, arguments);
	    };
	  }

	  /**
	   * Binds a method to the component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   * @param {function} method Method to be bound.
	   * @return {function} The bound method.
	   */
	  function bindAutoBindMethod(component, method) {
	    var boundMethod = method.bind(component);
	    if (process.env.NODE_ENV !== 'production') {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;
	      boundMethod.bind = function(newThis) {
	        for (
	          var _len = arguments.length,
	            args = Array(_len > 1 ? _len - 1 : 0),
	            _key = 1;
	          _key < _len;
	          _key++
	        ) {
	          args[_key - 1] = arguments[_key];
	        }

	        // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.
	        if (newThis !== component && newThis !== null) {
	          if (process.env.NODE_ENV !== 'production') {
	            warning(
	              false,
	              'bind(): React component methods may only be bound to the ' +
	                'component instance. See %s',
	              componentName
	            );
	          }
	        } else if (!args.length) {
	          if (process.env.NODE_ENV !== 'production') {
	            warning(
	              false,
	              'bind(): You are binding a component method to the component. ' +
	                'React does this for you automatically in a high-performance ' +
	                'way, so you can safely remove this call. See %s',
	              componentName
	            );
	          }
	          return boundMethod;
	        }
	        var reboundMethod = _bind.apply(boundMethod, arguments);
	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }
	    return boundMethod;
	  }

	  /**
	   * Binds all auto-bound methods in a component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   */
	  function bindAutoBindMethods(component) {
	    var pairs = component.__reactAutoBindPairs;
	    for (var i = 0; i < pairs.length; i += 2) {
	      var autoBindKey = pairs[i];
	      var method = pairs[i + 1];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }

	  var IsMountedPreMixin = {
	    componentDidMount: function() {
	      this.__isMounted = true;
	    }
	  };

	  var IsMountedPostMixin = {
	    componentWillUnmount: function() {
	      this.__isMounted = false;
	    }
	  };

	  /**
	   * Add more to the ReactClass base class. These are all legacy features and
	   * therefore not already part of the modern ReactComponent.
	   */
	  var ReactClassMixin = {
	    /**
	     * TODO: This will be deprecated because state should always keep a consistent
	     * type signature and the only use case for this, is to avoid that.
	     */
	    replaceState: function(newState, callback) {
	      this.updater.enqueueReplaceState(this, newState, callback);
	    },

	    /**
	     * Checks whether or not this composite component is mounted.
	     * @return {boolean} True if mounted, false otherwise.
	     * @protected
	     * @final
	     */
	    isMounted: function() {
	      if (process.env.NODE_ENV !== 'production') {
	        warning(
	          this.__didWarnIsMounted,
	          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
	            'subscriptions and pending requests in componentWillUnmount to ' +
	            'prevent memory leaks.',
	          (this.constructor && this.constructor.displayName) ||
	            this.name ||
	            'Component'
	        );
	        this.__didWarnIsMounted = true;
	      }
	      return !!this.__isMounted;
	    }
	  };

	  var ReactClassComponent = function() {};
	  _assign(
	    ReactClassComponent.prototype,
	    ReactComponent.prototype,
	    ReactClassMixin
	  );

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  function createClass(spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function(props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	            'JSX instead. See: https://fb.me/react-legacyfactory'
	        );
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (
	          initialState === undefined &&
	          this.getInitialState._isMockFunction
	        ) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      _invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      );

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
	    mixSpecIntoComponent(Constructor, spec);
	    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    _invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    );

	    if (process.env.NODE_ENV !== 'production') {
	      warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	          'The name is phrased as a question because the function is ' +
	          'expected to return a value.',
	        spec.displayName || 'A component'
	      );
	      warning(
	        !Constructor.prototype.componentWillRecieveProps,
	        '%s has a method called ' +
	          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	      warning(
	        !Constructor.prototype.UNSAFE_componentWillRecieveProps,
	        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +
	          'Did you mean UNSAFE_componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  }

	  return createClass;
	}

	module.exports = factory;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 926 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(899);

	var ReactElement = __webpack_require__(909);

	var invariant = __webpack_require__(905);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 927 */
/***/ (function(module, exports) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/*! modernizr 3.1.0 (Custom Build) | MIT *
	 * http://modernizr.com/download/?-cssanimations-prefixed !*/
	!function (e, n, t) {
	  function r(e, n) {
	    return (typeof e === "undefined" ? "undefined" : _typeof(e)) === n;
	  }function o() {
	    var e, n, t, o, i, s, a;for (var f in C) {
	      if (e = [], n = C[f], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (t = 0; t < n.options.aliases.length; t++) {
	        e.push(n.options.aliases[t].toLowerCase());
	      }for (o = r(n.fn, "function") ? n.fn() : n.fn, i = 0; i < e.length; i++) {
	        s = e[i], a = s.split("."), 1 === a.length ? Modernizr[a[0]] = o : (!Modernizr[a[0]] || Modernizr[a[0]] instanceof Boolean || (Modernizr[a[0]] = new Boolean(Modernizr[a[0]])), Modernizr[a[0]][a[1]] = o), g.push((o ? "" : "no-") + a.join("-"));
	      }
	    }
	  }function i(e) {
	    var n = x.className,
	        t = Modernizr._config.classPrefix || "";if (w && (n = n.baseVal), Modernizr._config.enableJSClass) {
	      var r = new RegExp("(^|\\s)" + t + "no-js(\\s|$)");n = n.replace(r, "$1" + t + "js$2");
	    }Modernizr._config.enableClasses && (n += " " + t + e.join(" " + t), w ? x.className.baseVal = n : x.className = n);
	  }function s(e) {
	    return e.replace(/([a-z])-([a-z])/g, function (e, n, t) {
	      return n + t.toUpperCase();
	    }).replace(/^-/, "");
	  }function a(e, n) {
	    return !!~("" + e).indexOf(n);
	  }function f() {
	    return "function" != typeof n.createElement ? n.createElement(arguments[0]) : w ? n.createElementNS.call(n, "http://www.w3.org/2000/svg", arguments[0]) : n.createElement.apply(n, arguments);
	  }function l(e, n) {
	    return function () {
	      return e.apply(n, arguments);
	    };
	  }function u(e, n, t) {
	    var o;for (var i in e) {
	      if (e[i] in n) return t === !1 ? e[i] : (o = n[e[i]], r(o, "function") ? l(o, t || n) : o);
	    }return !1;
	  }function p(e) {
	    return e.replace(/([A-Z])/g, function (e, n) {
	      return "-" + n.toLowerCase();
	    }).replace(/^ms-/, "-ms-");
	  }function d() {
	    var e = n.body;return e || (e = f(w ? "svg" : "body"), e.fake = !0), e;
	  }function c(e, t, r, o) {
	    var i,
	        s,
	        a,
	        l,
	        u = "modernizr",
	        p = f("div"),
	        c = d();if (parseInt(r, 10)) for (; r--;) {
	      a = f("div"), a.id = o ? o[r] : u + (r + 1), p.appendChild(a);
	    }return i = f("style"), i.type = "text/css", i.id = "s" + u, (c.fake ? c : p).appendChild(i), c.appendChild(p), i.styleSheet ? i.styleSheet.cssText = e : i.appendChild(n.createTextNode(e)), p.id = u, c.fake && (c.style.background = "", c.style.overflow = "hidden", l = x.style.overflow, x.style.overflow = "hidden", x.appendChild(c)), s = t(p, e), c.fake ? (c.parentNode.removeChild(c), x.style.overflow = l, x.offsetHeight) : p.parentNode.removeChild(p), !!s;
	  }function m(n, r) {
	    var o = n.length;if ("CSS" in e && "supports" in e.CSS) {
	      for (; o--;) {
	        if (e.CSS.supports(p(n[o]), r)) return !0;
	      }return !1;
	    }if ("CSSSupportsRule" in e) {
	      for (var i = []; o--;) {
	        i.push("(" + p(n[o]) + ":" + r + ")");
	      }return i = i.join(" or "), c("@supports (" + i + ") { #modernizr { position: absolute; } }", function (e) {
	        return "absolute" == getComputedStyle(e, null).position;
	      });
	    }return t;
	  }function v(e, n, o, i) {
	    function l() {
	      p && (delete P.style, delete P.modElem);
	    }if (i = r(i, "undefined") ? !1 : i, !r(o, "undefined")) {
	      var u = m(e, o);if (!r(u, "undefined")) return u;
	    }for (var p, d, c, v, h, y = ["modernizr", "tspan"]; !P.style;) {
	      p = !0, P.modElem = f(y.shift()), P.style = P.modElem.style;
	    }for (c = e.length, d = 0; c > d; d++) {
	      if (v = e[d], h = P.style[v], a(v, "-") && (v = s(v)), P.style[v] !== t) {
	        if (i || r(o, "undefined")) return l(), "pfx" == n ? v : !0;try {
	          P.style[v] = o;
	        } catch (g) {}if (P.style[v] != h) return l(), "pfx" == n ? v : !0;
	      }
	    }return l(), !1;
	  }function h(e, n, t, o, i) {
	    var s = e.charAt(0).toUpperCase() + e.slice(1),
	        a = (e + " " + b.join(s + " ") + s).split(" ");return r(n, "string") || r(n, "undefined") ? v(a, n, o, i) : (a = (e + " " + N.join(s + " ") + s).split(" "), u(a, n, t));
	  }function y(e, n, r) {
	    return h(e, t, t, n, r);
	  }var g = [],
	      C = [],
	      _ = { _version: "3.1.0", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function on(e, n) {
	      var t = this;setTimeout(function () {
	        n(t[e]);
	      }, 0);
	    }, addTest: function addTest(e, n, t) {
	      C.push({ name: e, fn: n, options: t });
	    }, addAsyncTest: function addAsyncTest(e) {
	      C.push({ name: null, fn: e });
	    } },
	      Modernizr = function Modernizr() {};Modernizr.prototype = _, Modernizr = new Modernizr();var x = n.documentElement,
	      w = "svg" === x.nodeName.toLowerCase(),
	      S = "Moz O ms Webkit",
	      b = _._config.usePrefixes ? S.split(" ") : [];_._cssomPrefixes = b;var E = function E(n) {
	    var r,
	        o = prefixes.length,
	        i = e.CSSRule;if ("undefined" == typeof i) return t;if (!n) return !1;if (n = n.replace(/^@/, ""), r = n.replace(/-/g, "_").toUpperCase() + "_RULE", r in i) return "@" + n;for (var s = 0; o > s; s++) {
	      var a = prefixes[s],
	          f = a.toUpperCase() + "_" + r;if (f in i) return "@-" + a.toLowerCase() + "-" + n;
	    }return !1;
	  };_.atRule = E;var N = _._config.usePrefixes ? S.toLowerCase().split(" ") : [];_._domPrefixes = N;var z = { elem: f("modernizr") };Modernizr._q.push(function () {
	    delete z.elem;
	  });var P = { style: z.elem.style };Modernizr._q.unshift(function () {
	    delete P.style;
	  }), _.testAllProps = h;_.prefixed = function (e, n, t) {
	    return 0 === e.indexOf("@") ? E(e) : (-1 != e.indexOf("-") && (e = s(e)), n ? h(e, n, t) : h(e, "pfx"));
	  };_.testAllProps = y, Modernizr.addTest("cssanimations", y("animationName", "a", !0)), o(), i(g), delete _.addTest, delete _.addAsyncTest;for (var T = 0; T < Modernizr._q.length; T++) {
	    Modernizr._q[T]();
	  }e.Modernizr = Modernizr;
	}(window, document);

/***/ }),
/* 928 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * stack.js
	 * http://www.imabhi.in
	 *
	 * Licensed under the MIT license.
	 * http://www.opensource.org/licenses/mit-license.php
	 *
	 * Copyright 2015, Codrops
	 * http://www.codrops.com
	 */

	;(function (window) {

		'use strict';

		var dynamics = __webpack_require__(929);
		var classie = __webpack_require__(930);
		var support = { animations: Modernizr.cssanimations },
		    animEndEventNames = { 'WebkitAnimation': 'webkitAnimationEnd', 'OAnimation': 'oAnimationEnd', 'msAnimation': 'MSAnimationEnd', 'animation': 'animationend' },
		    animEndEventName = animEndEventNames[Modernizr.prefixed('animation')],
		    onEndAnimation = function onEndAnimation(el, callback) {
			var onEndCallbackFn = function onEndCallbackFn(ev) {
				if (support.animations) {
					if (ev.target != this) return;
					this.removeEventListener(animEndEventName, onEndCallbackFn);
				}
				if (callback && typeof callback === 'function') {
					callback.call();
				}
			};
			if (support.animations) {
				el.addEventListener(animEndEventName, onEndCallbackFn);
			} else {
				onEndCallbackFn();
			}
		};

		function extend(a, b) {
			for (var key in b) {
				if (b.hasOwnProperty(key)) {
					a[key] = b[key];
				}
			}
			return a;
		}

		function Stack(el, options) {
			this.el = el;
			this.options = extend({}, this.options);
			extend(this.options, options);
			this.items = [].slice.call(this.el.children);
			this.itemsTotal = this.items.length;
			if (this.options.infinite && this.options.visible >= this.itemsTotal || !this.options.infinite && this.options.visible > this.itemsTotal || this.options.visible <= 0) {
				this.options.visible = 1;
			}
			this.current = 0;
			this._init();
		}

		Stack.prototype.options = {
			// stack's perspective value
			perspective: 1000,
			// stack's perspective origin
			perspectiveOrigin: '50% -50%',
			// number of visible items in the stack
			visible: 3,
			// infinite navigation
			infinite: true,
			// callback: when reaching the end of the stack
			onEndStack: function onEndStack() {
				return false;
			},
			// animation settings for the items' movements in the stack when the items rearrange
			// object that is passed to the dynamicsjs animate function (see more at http://dynamicsjs.com/)
			// example:
			// {type: dynamics.spring,duration: 1641,frequency: 557,friction: 459,anticipationSize: 206,anticipationStrength: 392}
			stackItemsAnimation: {
				duration: 500,
				type: dynamics.bezier,
				points: [{ 'x': 0, 'y': 0, 'cp': [{ 'x': 0.25, 'y': 0.1 }] }, { 'x': 1, 'y': 1, 'cp': [{ 'x': 0.25, 'y': 1 }] }]
			},
			// delay for the items' rearrangement / delay before stackItemsAnimation is applied
			stackItemsAnimationDelay: 0
			// animation settings for the items' movements in the stack before the rearrangement
			// we can set up different settings depending on whether we are approving or rejecting an item
			/*
	  stackItemsPreAnimation : {
	  	reject : {
	  		// if true, then the settings.properties parameter will be distributed through the items in a non equal fashion
	  		// for instance, if we set settings.properties = {translateX:100} and we have options.visible = 4,
	  		// then the second item in the stack will translate 100px, the second one 75px and the third 50px
	  		elastic : true,
	  		// object that is passed into the dynamicsjs animate function - second parameter -  (see more at http://dynamicsjs.com/)
	  		animationProperties : {},
	  		// object that is passed into the dynamicsjs animate function - third parameter - (see more at http://dynamicsjs.com/)
	  		animationSettings : {}
	  	},
	  	accept : {
	  		// if true, then the settings.properties parameter will be distributed through the items in a non equal fashion
	  		// for instance, if we set settings.properties = {translateX:100} and we have options.visible = 4,
	  		// then the second item on the stack will translate 100px, the second one 75px and the third 50px
	  		elastic : true,
	  		// object that is passed into the dynamicsjs animate function - second parameter -  (see more at http://dynamicsjs.com/)
	  		animationProperties : {},
	  		// object that is passed into the dynamicsjs animate function (see more at http://dynamicsjs.com/)
	  		animationSettings : {}
	  	}
	  }
	  */
		};

		// set the initial styles for the visible items
		Stack.prototype._init = function () {
			// set default styles
			// first, the stack
			this.el.style.WebkitPerspective = this.el.style.perspective = this.options.perspective + 'px';
			this.el.style.WebkitPerspectiveOrigin = this.el.style.perspectiveOrigin = this.options.perspectiveOrigin;

			var self = this;

			// the items
			for (var i = 0; i < this.itemsTotal; ++i) {
				var item = this.items[i];
				if (i < this.options.visible) {
					item.style.opacity = 1;
					item.style.pointerEvents = 'auto';
					item.style.zIndex = i === 0 ? parseInt(this.options.visible + 1) : parseInt(this.options.visible - i);
					item.style.WebkitTransform = item.style.transform = 'translate3d(0px, 0px, ' + parseInt(-1 * 50 * i) + 'px)';
				} else {
					item.style.WebkitTransform = item.style.transform = 'translate3d(0,0,-' + parseInt(this.options.visible * 50) + 'px)';
				}
			}

			classie.add(this.items[this.current], 'stack__item--current');
		};

		Stack.prototype.reject = function (callback) {
			this._next('reject', callback);
		};

		Stack.prototype.accept = function (callback) {
			this._next('accept', callback);
		};

		Stack.prototype.restart = function () {
			this.hasEnded = false;
			this._init();
		};

		Stack.prototype._next = function (action, callback) {
			if (this.isAnimating || !this.options.infinite && this.hasEnded) return;
			this.isAnimating = true;

			// current item
			var currentItem = this.items[this.current];
			classie.remove(currentItem, 'stack__item--current');

			// add animation class
			classie.add(currentItem, action === 'accept' ? 'stack__item--accept' : 'stack__item--reject');

			var self = this;
			onEndAnimation(currentItem, function () {
				// reset current item
				currentItem.style.opacity = 0;
				currentItem.style.pointerEvents = 'none';
				currentItem.style.zIndex = -1;
				currentItem.style.WebkitTransform = currentItem.style.transform = 'translate3d(0px, 0px, -' + parseInt(self.options.visible * 50) + 'px)';

				classie.remove(currentItem, action === 'accept' ? 'stack__item--accept' : 'stack__item--reject');

				self.items[self.current].style.zIndex = self.options.visible + 1;
				self.isAnimating = false;

				if (callback) callback();

				if (!self.options.infinite && self.current === 0) {
					self.hasEnded = true;
					// callback
					self.options.onEndStack(self);
				}
			});

			// set style for the other items
			for (var i = 0; i < this.itemsTotal; ++i) {
				if (i >= this.options.visible) break;

				if (!this.options.infinite) {
					if (this.current + i >= this.itemsTotal - 1) break;
					var pos = this.current + i + 1;
				} else {
					var pos = this.current + i < this.itemsTotal - 1 ? this.current + i + 1 : i - (this.itemsTotal - this.current - 1);
				}

				var item = this.items[pos],


				// stack items animation
				animateStackItems = function animateStackItems(item, i) {
					item.style.pointerEvents = 'auto';
					item.style.opacity = 1;
					item.style.zIndex = parseInt(self.options.visible - i);

					dynamics.animate(item, {
						translateZ: parseInt(-1 * 50 * i)
					}, self.options.stackItemsAnimation);
				};

				setTimeout(function (item, i) {
					return function () {
						var preAnimation;

						if (self.options.stackItemsPreAnimation) {
							preAnimation = action === 'accept' ? self.options.stackItemsPreAnimation.accept : self.options.stackItemsPreAnimation.reject;
						}

						if (preAnimation) {
							// items "pre animation" properties
							var animProps = {};

							for (var key in preAnimation.animationProperties) {
								var interval = preAnimation.elastic ? preAnimation.animationProperties[key] / self.options.visible : 0;
								animProps[key] = preAnimation.animationProperties[key] - Number(i * interval);
							}

							// this one remains the same..
							animProps.translateZ = parseInt(-1 * 50 * (i + 1));

							preAnimation.animationSettings.complete = function () {
								animateStackItems(item, i);
							};

							dynamics.animate(item, animProps, preAnimation.animationSettings);
						} else {
							animateStackItems(item, i);
						}
					};
				}(item, i), this.options.stackItemsAnimationDelay);
			}

			// update current
			this.current = this.current < this.itemsTotal - 1 ? this.current + 1 : 0;
			classie.add(this.items[this.current], 'stack__item--current');
		};

		window.Stack = Stack;
	})(window);

/***/ }),
/* 929 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;// Generated by CoffeeScript 1.7.1
	(function() {
	  var Color, DecomposedMatrix, DecomposedMatrix2D, InterpolableArray, InterpolableColor, InterpolableNumber, InterpolableObject, InterpolableString, Matrix, Matrix2D, Set, Vector, addTimeout, addUnitsToNumberInterpolables, animationTick, animations, animationsTimeouts, applyDefaults, applyFrame, applyProperties, baseSVG, cacheFn, cancelTimeout, clone, createInterpolable, defaultValueForKey, degProperties, dynamics, getCurrentProperties, interpolate, isDocumentVisible, isSVGElement, lastTime, leftDelayForTimeout, makeArrayFn, observeVisibilityChange, parseProperties, prefixFor, propertyWithPrefix, pxProperties, rAF, roundf, runLoopPaused, runLoopRunning, runLoopTick, setRealTimeout, slow, slowRatio, startAnimation, startRunLoop, svgProperties, timeBeforeVisibilityChange, timeoutLastId, timeouts, toDashed, transformProperties, transformValueForProperty, unitForProperty,
	    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  isDocumentVisible = function() {
	    return document.visibilityState === "visible" || (dynamics.tests != null);
	  };

	  observeVisibilityChange = (function() {
	    var fns;
	    fns = [];
	    if (typeof document !== "undefined" && document !== null) {
	      document.addEventListener("visibilitychange", function() {
	        var fn, _i, _len, _results;
	        _results = [];
	        for (_i = 0, _len = fns.length; _i < _len; _i++) {
	          fn = fns[_i];
	          _results.push(fn(isDocumentVisible()));
	        }
	        return _results;
	      });
	    }
	    return function(fn) {
	      return fns.push(fn);
	    };
	  })();

	  clone = function(o) {
	    var k, newO, v;
	    newO = {};
	    for (k in o) {
	      v = o[k];
	      newO[k] = v;
	    }
	    return newO;
	  };

	  cacheFn = function(func) {
	    var data;
	    data = {};
	    return function() {
	      var k, key, result, _i, _len;
	      key = "";
	      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
	        k = arguments[_i];
	        key += k.toString() + ",";
	      }
	      result = data[key];
	      if (!result) {
	        data[key] = result = func.apply(this, arguments);
	      }
	      return result;
	    };
	  };

	  makeArrayFn = function(fn) {
	    return function(el) {
	      var args, i, res;
	      if (el instanceof Array || el instanceof NodeList || el instanceof HTMLCollection) {
	        res = (function() {
	          var _i, _ref, _results;
	          _results = [];
	          for (i = _i = 0, _ref = el.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	            args = Array.prototype.slice.call(arguments, 1);
	            args.splice(0, 0, el[i]);
	            _results.push(fn.apply(this, args));
	          }
	          return _results;
	        }).apply(this, arguments);
	        return res;
	      }
	      return fn.apply(this, arguments);
	    };
	  };

	  applyDefaults = function(options, defaults) {
	    var k, v, _results;
	    _results = [];
	    for (k in defaults) {
	      v = defaults[k];
	      _results.push(options[k] != null ? options[k] : options[k] = v);
	    }
	    return _results;
	  };

	  applyFrame = function(el, properties) {
	    var k, v, _results;
	    if ((el.style != null)) {
	      return applyProperties(el, properties);
	    } else {
	      _results = [];
	      for (k in properties) {
	        v = properties[k];
	        _results.push(el[k] = v.format());
	      }
	      return _results;
	    }
	  };

	  applyProperties = function(el, properties) {
	    var isSVG, k, matrix, transforms, v;
	    properties = parseProperties(properties);
	    transforms = [];
	    isSVG = isSVGElement(el);
	    for (k in properties) {
	      v = properties[k];
	      if (transformProperties.contains(k)) {
	        transforms.push([k, v]);
	      } else {
	        if (v.format != null) {
	          v = v.format();
	        }
	        if (typeof v === 'number') {
	          v = "" + v + (unitForProperty(k, v));
	        }
	        if ((el.hasAttribute != null) && el.hasAttribute(k)) {
	          el.setAttribute(k, v);
	        } else if (el.style != null) {
	          el.style[propertyWithPrefix(k)] = v;
	        }
	        if (k in el) {
	          el[k] = v;
	        }
	      }
	    }
	    if (transforms.length > 0) {
	      if (isSVG) {
	        matrix = new Matrix2D();
	        matrix.applyProperties(transforms);
	        return el.setAttribute("transform", matrix.decompose().format());
	      } else {
	        v = (transforms.map(function(transform) {
	          return transformValueForProperty(transform[0], transform[1]);
	        })).join(" ");
	        return el.style[propertyWithPrefix("transform")] = v;
	      }
	    }
	  };

	  isSVGElement = function(el) {
	    var _ref, _ref1;
	    if ((typeof SVGElement !== "undefined" && SVGElement !== null) && (typeof SVGSVGElement !== "undefined" && SVGSVGElement !== null)) {
	      return el instanceof SVGElement && !(el instanceof SVGSVGElement);
	    } else {
	      return (_ref = (_ref1 = dynamics.tests) != null ? typeof _ref1.isSVG === "function" ? _ref1.isSVG(el) : void 0 : void 0) != null ? _ref : false;
	    }
	  };

	  roundf = function(v, decimal) {
	    var d;
	    d = Math.pow(10, decimal);
	    return Math.round(v * d) / d;
	  };

	  Set = (function() {
	    function Set(array) {
	      var v, _i, _len;
	      this.obj = {};
	      for (_i = 0, _len = array.length; _i < _len; _i++) {
	        v = array[_i];
	        this.obj[v] = 1;
	      }
	    }

	    Set.prototype.contains = function(v) {
	      return this.obj[v] === 1;
	    };

	    return Set;

	  })();

	  toDashed = function(str) {
	    return str.replace(/([A-Z])/g, function($1) {
	      return "-" + $1.toLowerCase();
	    });
	  };

	  pxProperties = new Set('marginTop,marginLeft,marginBottom,marginRight,paddingTop,paddingLeft,paddingBottom,paddingRight,top,left,bottom,right,translateX,translateY,translateZ,perspectiveX,perspectiveY,perspectiveZ,width,height,maxWidth,maxHeight,minWidth,minHeight,borderRadius'.split(','));

	  degProperties = new Set('rotate,rotateX,rotateY,rotateZ,skew,skewX,skewY,skewZ'.split(','));

	  transformProperties = new Set('translate,translateX,translateY,translateZ,scale,scaleX,scaleY,scaleZ,rotate,rotateX,rotateY,rotateZ,rotateC,rotateCX,rotateCY,skew,skewX,skewY,skewZ,perspective'.split(','));

	  svgProperties = new Set('accent-height,ascent,azimuth,baseFrequency,baseline-shift,bias,cx,cy,d,diffuseConstant,divisor,dx,dy,elevation,filterRes,fx,fy,gradientTransform,height,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,letter-spacing,limitingConeAngle,markerHeight,markerWidth,numOctaves,order,overline-position,overline-thickness,pathLength,points,pointsAtX,pointsAtY,pointsAtZ,r,radius,rx,ry,seed,specularConstant,specularExponent,stdDeviation,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,surfaceScale,target,targetX,targetY,transform,underline-position,underline-thickness,viewBox,width,x,x1,x2,y,y1,y2,z'.split(','));

	  unitForProperty = function(k, v) {
	    if (typeof v !== 'number') {
	      return '';
	    }
	    if (pxProperties.contains(k)) {
	      return 'px';
	    } else if (degProperties.contains(k)) {
	      return 'deg';
	    }
	    return '';
	  };

	  transformValueForProperty = function(k, v) {
	    var match, unit;
	    match = ("" + v).match(/^([0-9.-]*)([^0-9]*)$/);
	    if (match != null) {
	      v = match[1];
	      unit = match[2];
	    } else {
	      v = parseFloat(v);
	    }
	    v = roundf(parseFloat(v), 10);
	    if ((unit == null) || unit === "") {
	      unit = unitForProperty(k, v);
	    }
	    return "" + k + "(" + v + unit + ")";
	  };

	  parseProperties = function(properties) {
	    var axis, match, parsed, property, value, _i, _len, _ref;
	    parsed = {};
	    for (property in properties) {
	      value = properties[property];
	      if (transformProperties.contains(property)) {
	        match = property.match(/(translate|rotateC|rotate|skew|scale|perspective)(X|Y|Z|)/);
	        if (match && match[2].length > 0) {
	          parsed[property] = value;
	        } else {
	          _ref = ['X', 'Y', 'Z'];
	          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	            axis = _ref[_i];
	            parsed[match[1] + axis] = value;
	          }
	        }
	      } else {
	        parsed[property] = value;
	      }
	    }
	    return parsed;
	  };

	  defaultValueForKey = function(key) {
	    var v;
	    v = key === 'opacity' ? 1 : 0;
	    return "" + v + (unitForProperty(key, v));
	  };

	  getCurrentProperties = function(el, keys) {
	    var isSVG, key, matrix, properties, style, v, _i, _j, _len, _len1, _ref;
	    properties = {};
	    isSVG = isSVGElement(el);
	    if (el.style != null) {
	      style = window.getComputedStyle(el, null);
	      for (_i = 0, _len = keys.length; _i < _len; _i++) {
	        key = keys[_i];
	        if (transformProperties.contains(key)) {
	          if (properties['transform'] == null) {
	            if (isSVG) {
	              matrix = new Matrix2D((_ref = el.transform.baseVal.consolidate()) != null ? _ref.matrix : void 0);
	            } else {
	              matrix = Matrix.fromTransform(style[propertyWithPrefix('transform')]);
	            }
	            properties['transform'] = matrix.decompose();
	          }
	        } else {
	          if ((el.hasAttribute != null) && el.hasAttribute(key)) {
	            v = el.getAttribute(key);
	          } else if (key in el) {
	            v = el[key];
	          } else {
	            v = style[key];
	          }
	          if (((v == null) || key === 'd') && svgProperties.contains(key)) {
	            v = el.getAttribute(key);
	          }
	          if (v === "" || (v == null)) {
	            v = defaultValueForKey(key);
	          }
	          properties[key] = createInterpolable(v);
	        }
	      }
	    } else {
	      for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
	        key = keys[_j];
	        properties[key] = createInterpolable(el[key]);
	      }
	    }
	    addUnitsToNumberInterpolables(el, properties);
	    return properties;
	  };

	  addUnitsToNumberInterpolables = function(el, properties) {
	    var interpolable, k;
	    for (k in properties) {
	      interpolable = properties[k];
	      if (interpolable instanceof InterpolableNumber && (el.style != null) && k in el.style) {
	        interpolable = new InterpolableString([interpolable, unitForProperty(k, 0)]);
	      }
	      properties[k] = interpolable;
	    }
	    return properties;
	  };

	  createInterpolable = function(value) {
	    var interpolable, klass, klasses, _i, _len;
	    klasses = [InterpolableArray, InterpolableObject, InterpolableNumber, InterpolableString];
	    for (_i = 0, _len = klasses.length; _i < _len; _i++) {
	      klass = klasses[_i];
	      interpolable = klass.create(value);
	      if (interpolable != null) {
	        return interpolable;
	      }
	    }
	    return null;
	  };

	  InterpolableString = (function() {
	    function InterpolableString(parts) {
	      this.parts = parts;
	      this.format = __bind(this.format, this);
	      this.interpolate = __bind(this.interpolate, this);
	    }

	    InterpolableString.prototype.interpolate = function(endInterpolable, t) {
	      var end, i, newParts, start, _i, _ref;
	      start = this.parts;
	      end = endInterpolable.parts;
	      newParts = [];
	      for (i = _i = 0, _ref = Math.min(start.length, end.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	        if (start[i].interpolate != null) {
	          newParts.push(start[i].interpolate(end[i], t));
	        } else {
	          newParts.push(start[i]);
	        }
	      }
	      return new InterpolableString(newParts);
	    };

	    InterpolableString.prototype.format = function() {
	      var parts;
	      parts = this.parts.map(function(val) {
	        if (val.format != null) {
	          return val.format();
	        } else {
	          return val;
	        }
	      });
	      return parts.join('');
	    };

	    InterpolableString.create = function(value) {
	      var index, match, matches, parts, re, type, types, _i, _j, _len, _len1;
	      value = "" + value;
	      matches = [];
	      types = [
	        {
	          re: /(#[a-f\d]{3,6})/ig,
	          klass: InterpolableColor,
	          parse: function(v) {
	            return v;
	          }
	        }, {
	          re: /(rgba?\([0-9.]*, ?[0-9.]*, ?[0-9.]*(?:, ?[0-9.]*)?\))/ig,
	          klass: InterpolableColor,
	          parse: function(v) {
	            return v;
	          }
	        }, {
	          re: /([-+]?[\d.]+)/ig,
	          klass: InterpolableNumber,
	          parse: parseFloat
	        }
	      ];
	      for (_i = 0, _len = types.length; _i < _len; _i++) {
	        type = types[_i];
	        re = type.re;
	        while (match = re.exec(value)) {
	          matches.push({
	            index: match.index,
	            length: match[1].length,
	            interpolable: type.klass.create(type.parse(match[1]))
	          });
	        }
	      }
	      matches = matches.sort(function(a, b) {
	        if (a.index > b.index) {
	          return 1;
	        } else {
	          return -1;
	        }
	      });
	      parts = [];
	      index = 0;
	      for (_j = 0, _len1 = matches.length; _j < _len1; _j++) {
	        match = matches[_j];
	        if (match.index < index) {
	          continue;
	        }
	        if (match.index > index) {
	          parts.push(value.substring(index, match.index));
	        }
	        parts.push(match.interpolable);
	        index = match.index + match.length;
	      }
	      if (index < value.length) {
	        parts.push(value.substring(index));
	      }
	      return new InterpolableString(parts);
	    };

	    return InterpolableString;

	  })();

	  InterpolableObject = (function() {
	    function InterpolableObject(obj) {
	      this.format = __bind(this.format, this);
	      this.interpolate = __bind(this.interpolate, this);
	      this.obj = obj;
	    }

	    InterpolableObject.prototype.interpolate = function(endInterpolable, t) {
	      var end, k, newObj, start, v;
	      start = this.obj;
	      end = endInterpolable.obj;
	      newObj = {};
	      for (k in start) {
	        v = start[k];
	        if (v.interpolate != null) {
	          newObj[k] = v.interpolate(end[k], t);
	        } else {
	          newObj[k] = v;
	        }
	      }
	      return new InterpolableObject(newObj);
	    };

	    InterpolableObject.prototype.format = function() {
	      return this.obj;
	    };

	    InterpolableObject.create = function(value) {
	      var k, obj, v;
	      if (value instanceof Object) {
	        obj = {};
	        for (k in value) {
	          v = value[k];
	          obj[k] = createInterpolable(v);
	        }
	        return new InterpolableObject(obj);
	      }
	      return null;
	    };

	    return InterpolableObject;

	  })();

	  InterpolableNumber = (function() {
	    function InterpolableNumber(value) {
	      this.format = __bind(this.format, this);
	      this.interpolate = __bind(this.interpolate, this);
	      this.value = parseFloat(value);
	    }

	    InterpolableNumber.prototype.interpolate = function(endInterpolable, t) {
	      var end, start;
	      start = this.value;
	      end = endInterpolable.value;
	      return new InterpolableNumber((end - start) * t + start);
	    };

	    InterpolableNumber.prototype.format = function() {
	      return roundf(this.value, 5);
	    };

	    InterpolableNumber.create = function(value) {
	      if (typeof value === 'number') {
	        return new InterpolableNumber(value);
	      }
	      return null;
	    };

	    return InterpolableNumber;

	  })();

	  InterpolableArray = (function() {
	    function InterpolableArray(values) {
	      this.values = values;
	      this.format = __bind(this.format, this);
	      this.interpolate = __bind(this.interpolate, this);
	    }

	    InterpolableArray.prototype.interpolate = function(endInterpolable, t) {
	      var end, i, newValues, start, _i, _ref;
	      start = this.values;
	      end = endInterpolable.values;
	      newValues = [];
	      for (i = _i = 0, _ref = Math.min(start.length, end.length); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	        if (start[i].interpolate != null) {
	          newValues.push(start[i].interpolate(end[i], t));
	        } else {
	          newValues.push(start[i]);
	        }
	      }
	      return new InterpolableArray(newValues);
	    };

	    InterpolableArray.prototype.format = function() {
	      return this.values.map(function(val) {
	        if (val.format != null) {
	          return val.format();
	        } else {
	          return val;
	        }
	      });
	    };

	    InterpolableArray.createFromArray = function(arr) {
	      var values;
	      values = arr.map(function(val) {
	        return createInterpolable(val) || val;
	      });
	      values = values.filter(function(val) {
	        return val != null;
	      });
	      return new InterpolableArray(values);
	    };

	    InterpolableArray.create = function(value) {
	      if (value instanceof Array) {
	        return InterpolableArray.createFromArray(value);
	      }
	      return null;
	    };

	    return InterpolableArray;

	  })();

	  Color = (function() {
	    function Color(rgb, format) {
	      this.rgb = rgb != null ? rgb : {};
	      this.format = format;
	      this.toRgba = __bind(this.toRgba, this);
	      this.toRgb = __bind(this.toRgb, this);
	      this.toHex = __bind(this.toHex, this);
	    }

	    Color.fromHex = function(hex) {
	      var hex3, result;
	      hex3 = hex.match(/^#([a-f\d]{1})([a-f\d]{1})([a-f\d]{1})$/i);
	      if (hex3 != null) {
	        hex = "#" + hex3[1] + hex3[1] + hex3[2] + hex3[2] + hex3[3] + hex3[3];
	      }
	      result = hex.match(/^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i);
	      if (result != null) {
	        return new Color({
	          r: parseInt(result[1], 16),
	          g: parseInt(result[2], 16),
	          b: parseInt(result[3], 16),
	          a: 1
	        }, "hex");
	      }
	      return null;
	    };

	    Color.fromRgb = function(rgb) {
	      var match, _ref;
	      match = rgb.match(/^rgba?\(([0-9.]*), ?([0-9.]*), ?([0-9.]*)(?:, ?([0-9.]*))?\)$/);
	      if (match != null) {
	        return new Color({
	          r: parseFloat(match[1]),
	          g: parseFloat(match[2]),
	          b: parseFloat(match[3]),
	          a: parseFloat((_ref = match[4]) != null ? _ref : 1)
	        }, match[4] != null ? "rgba" : "rgb");
	      }
	      return null;
	    };

	    Color.componentToHex = function(c) {
	      var hex;
	      hex = c.toString(16);
	      if (hex.length === 1) {
	        return "0" + hex;
	      } else {
	        return hex;
	      }
	    };

	    Color.prototype.toHex = function() {
	      return "#" + Color.componentToHex(this.rgb.r) + Color.componentToHex(this.rgb.g) + Color.componentToHex(this.rgb.b);
	    };

	    Color.prototype.toRgb = function() {
	      return "rgb(" + this.rgb.r + ", " + this.rgb.g + ", " + this.rgb.b + ")";
	    };

	    Color.prototype.toRgba = function() {
	      return "rgba(" + this.rgb.r + ", " + this.rgb.g + ", " + this.rgb.b + ", " + this.rgb.a + ")";
	    };

	    return Color;

	  })();

	  InterpolableColor = (function() {
	    function InterpolableColor(color) {
	      this.color = color;
	      this.format = __bind(this.format, this);
	      this.interpolate = __bind(this.interpolate, this);
	    }

	    InterpolableColor.prototype.interpolate = function(endInterpolable, t) {
	      var end, k, rgb, start, v, _i, _len, _ref;
	      start = this.color;
	      end = endInterpolable.color;
	      rgb = {};
	      _ref = ['r', 'g', 'b'];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        k = _ref[_i];
	        v = Math.round((end.rgb[k] - start.rgb[k]) * t + start.rgb[k]);
	        rgb[k] = Math.min(255, Math.max(0, v));
	      }
	      k = "a";
	      v = roundf((end.rgb[k] - start.rgb[k]) * t + start.rgb[k], 5);
	      rgb[k] = Math.min(1, Math.max(0, v));
	      return new InterpolableColor(new Color(rgb, end.format));
	    };

	    InterpolableColor.prototype.format = function() {
	      if (this.color.format === "hex") {
	        return this.color.toHex();
	      } else if (this.color.format === "rgb") {
	        return this.color.toRgb();
	      } else if (this.color.format === "rgba") {
	        return this.color.toRgba();
	      }
	    };

	    InterpolableColor.create = function(value) {
	      var color;
	      if (typeof value !== "string") {
	        return;
	      }
	      color = Color.fromHex(value) || Color.fromRgb(value);
	      if (color != null) {
	        return new InterpolableColor(color);
	      }
	      return null;
	    };

	    return InterpolableColor;

	  })();

	  DecomposedMatrix2D = (function() {
	    function DecomposedMatrix2D(props) {
	      this.props = props;
	      this.applyRotateCenter = __bind(this.applyRotateCenter, this);
	      this.format = __bind(this.format, this);
	      this.interpolate = __bind(this.interpolate, this);
	    }

	    DecomposedMatrix2D.prototype.interpolate = function(endMatrix, t) {
	      var i, k, newProps, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2;
	      newProps = {};
	      _ref = ['translate', 'scale', 'rotate'];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        k = _ref[_i];
	        newProps[k] = [];
	        for (i = _j = 0, _ref1 = this.props[k].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
	          newProps[k][i] = (endMatrix.props[k][i] - this.props[k][i]) * t + this.props[k][i];
	        }
	      }
	      for (i = _k = 1; _k <= 2; i = ++_k) {
	        newProps['rotate'][i] = endMatrix.props['rotate'][i];
	      }
	      _ref2 = ['skew'];
	      for (_l = 0, _len1 = _ref2.length; _l < _len1; _l++) {
	        k = _ref2[_l];
	        newProps[k] = (endMatrix.props[k] - this.props[k]) * t + this.props[k];
	      }
	      return new DecomposedMatrix2D(newProps);
	    };

	    DecomposedMatrix2D.prototype.format = function() {
	      return "translate(" + (this.props.translate.join(',')) + ") rotate(" + (this.props.rotate.join(',')) + ") skewX(" + this.props.skew + ") scale(" + (this.props.scale.join(',')) + ")";
	    };

	    DecomposedMatrix2D.prototype.applyRotateCenter = function(rotateC) {
	      var i, m, m2d, negativeTranslate, _i, _results;
	      m = baseSVG.createSVGMatrix();
	      m = m.translate(rotateC[0], rotateC[1]);
	      m = m.rotate(this.props.rotate[0]);
	      m = m.translate(-rotateC[0], -rotateC[1]);
	      m2d = new Matrix2D(m);
	      negativeTranslate = m2d.decompose().props.translate;
	      _results = [];
	      for (i = _i = 0; _i <= 1; i = ++_i) {
	        _results.push(this.props.translate[i] -= negativeTranslate[i]);
	      }
	      return _results;
	    };

	    return DecomposedMatrix2D;

	  })();

	  baseSVG = typeof document !== "undefined" && document !== null ? document.createElementNS("http://www.w3.org/2000/svg", "svg") : void 0;

	  Matrix2D = (function() {
	    function Matrix2D(m) {
	      this.m = m;
	      this.applyProperties = __bind(this.applyProperties, this);
	      this.decompose = __bind(this.decompose, this);
	      if (!this.m) {
	        this.m = baseSVG.createSVGMatrix();
	      }
	    }

	    Matrix2D.prototype.decompose = function() {
	      var kx, ky, kz, r0, r1;
	      r0 = new Vector([this.m.a, this.m.b]);
	      r1 = new Vector([this.m.c, this.m.d]);
	      kx = r0.length();
	      kz = r0.dot(r1);
	      r0 = r0.normalize();
	      ky = r1.combine(r0, 1, -kz).length();
	      return new DecomposedMatrix2D({
	        translate: [this.m.e, this.m.f],
	        rotate: [Math.atan2(this.m.b, this.m.a) * 180 / Math.PI, this.rotateCX, this.rotateCY],
	        scale: [kx, ky],
	        skew: kz / ky * 180 / Math.PI
	      });
	    };

	    Matrix2D.prototype.applyProperties = function(properties) {
	      var hash, k, props, v, _i, _len, _ref, _ref1;
	      hash = {};
	      for (_i = 0, _len = properties.length; _i < _len; _i++) {
	        props = properties[_i];
	        hash[props[0]] = props[1];
	      }
	      for (k in hash) {
	        v = hash[k];
	        if (k === "translateX") {
	          this.m = this.m.translate(v, 0);
	        } else if (k === "translateY") {
	          this.m = this.m.translate(0, v);
	        } else if (k === "scaleX") {
	          this.m = this.m.scaleNonUniform(v, 1);
	        } else if (k === "scaleY") {
	          this.m = this.m.scaleNonUniform(1, v);
	        } else if (k === "rotateZ") {
	          this.m = this.m.rotate(v);
	        } else if (k === "skewX") {
	          this.m = this.m.skewX(v);
	        } else if (k === "skewY") {
	          this.m = this.m.skewY(v);
	        }
	      }
	      this.rotateCX = (_ref = hash.rotateCX) != null ? _ref : 0;
	      return this.rotateCY = (_ref1 = hash.rotateCY) != null ? _ref1 : 0;
	    };

	    return Matrix2D;

	  })();

	  Vector = (function() {
	    function Vector(els) {
	      this.els = els;
	      this.combine = __bind(this.combine, this);
	      this.normalize = __bind(this.normalize, this);
	      this.length = __bind(this.length, this);
	      this.cross = __bind(this.cross, this);
	      this.dot = __bind(this.dot, this);
	      this.e = __bind(this.e, this);
	    }

	    Vector.prototype.e = function(i) {
	      if (i < 1 || i > this.els.length) {
	        return null;
	      } else {
	        return this.els[i - 1];
	      }
	    };

	    Vector.prototype.dot = function(vector) {
	      var V, n, product;
	      V = vector.els || vector;
	      product = 0;
	      n = this.els.length;
	      if (n !== V.length) {
	        return null;
	      }
	      n += 1;
	      while (--n) {
	        product += this.els[n - 1] * V[n - 1];
	      }
	      return product;
	    };

	    Vector.prototype.cross = function(vector) {
	      var A, B;
	      B = vector.els || vector;
	      if (this.els.length !== 3 || B.length !== 3) {
	        return null;
	      }
	      A = this.els;
	      return new Vector([(A[1] * B[2]) - (A[2] * B[1]), (A[2] * B[0]) - (A[0] * B[2]), (A[0] * B[1]) - (A[1] * B[0])]);
	    };

	    Vector.prototype.length = function() {
	      var a, e, _i, _len, _ref;
	      a = 0;
	      _ref = this.els;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        e = _ref[_i];
	        a += Math.pow(e, 2);
	      }
	      return Math.sqrt(a);
	    };

	    Vector.prototype.normalize = function() {
	      var e, i, length, newElements, _ref;
	      length = this.length();
	      newElements = [];
	      _ref = this.els;
	      for (i in _ref) {
	        e = _ref[i];
	        newElements[i] = e / length;
	      }
	      return new Vector(newElements);
	    };

	    Vector.prototype.combine = function(b, ascl, bscl) {
	      var i, result, _i, _ref;
	      result = [];
	      for (i = _i = 0, _ref = this.els.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	        result[i] = (ascl * this.els[i]) + (bscl * b.els[i]);
	      }
	      return new Vector(result);
	    };

	    return Vector;

	  })();

	  DecomposedMatrix = (function() {
	    function DecomposedMatrix() {
	      this.toMatrix = __bind(this.toMatrix, this);
	      this.format = __bind(this.format, this);
	      this.interpolate = __bind(this.interpolate, this);
	    }

	    DecomposedMatrix.prototype.interpolate = function(decomposedB, t, only) {
	      var angle, decomposed, decomposedA, i, invscale, invth, k, qa, qb, scale, th, _i, _j, _k, _l, _len, _ref, _ref1;
	      if (only == null) {
	        only = null;
	      }
	      decomposedA = this;
	      decomposed = new DecomposedMatrix;
	      _ref = ['translate', 'scale', 'skew', 'perspective'];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        k = _ref[_i];
	        decomposed[k] = [];
	        for (i = _j = 0, _ref1 = decomposedA[k].length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
	          if ((only == null) || only.indexOf(k) > -1 || only.indexOf("" + k + ['x', 'y', 'z'][i]) > -1) {
	            decomposed[k][i] = (decomposedB[k][i] - decomposedA[k][i]) * t + decomposedA[k][i];
	          } else {
	            decomposed[k][i] = decomposedA[k][i];
	          }
	        }
	      }
	      if ((only == null) || only.indexOf('rotate') !== -1) {
	        qa = decomposedA.quaternion;
	        qb = decomposedB.quaternion;
	        angle = qa[0] * qb[0] + qa[1] * qb[1] + qa[2] * qb[2] + qa[3] * qb[3];
	        if (angle < 0.0) {
	          for (i = _k = 0; _k <= 3; i = ++_k) {
	            qa[i] = -qa[i];
	          }
	          angle = -angle;
	        }
	        if (angle + 1.0 > .05) {
	          if (1.0 - angle >= .05) {
	            th = Math.acos(angle);
	            invth = 1.0 / Math.sin(th);
	            scale = Math.sin(th * (1.0 - t)) * invth;
	            invscale = Math.sin(th * t) * invth;
	          } else {
	            scale = 1.0 - t;
	            invscale = t;
	          }
	        } else {
	          qb[0] = -qa[1];
	          qb[1] = qa[0];
	          qb[2] = -qa[3];
	          qb[3] = qa[2];
	          scale = Math.sin(piDouble * (.5 - t));
	          invscale = Math.sin(piDouble * t);
	        }
	        decomposed.quaternion = [];
	        for (i = _l = 0; _l <= 3; i = ++_l) {
	          decomposed.quaternion[i] = qa[i] * scale + qb[i] * invscale;
	        }
	      } else {
	        decomposed.quaternion = decomposedA.quaternion;
	      }
	      return decomposed;
	    };

	    DecomposedMatrix.prototype.format = function() {
	      return this.toMatrix().toString();
	    };

	    DecomposedMatrix.prototype.toMatrix = function() {
	      var decomposedMatrix, i, j, match, matrix, quaternion, skew, temp, w, x, y, z, _i, _j, _k, _l;
	      decomposedMatrix = this;
	      matrix = Matrix.I(4);
	      for (i = _i = 0; _i <= 3; i = ++_i) {
	        matrix.els[i][3] = decomposedMatrix.perspective[i];
	      }
	      quaternion = decomposedMatrix.quaternion;
	      x = quaternion[0];
	      y = quaternion[1];
	      z = quaternion[2];
	      w = quaternion[3];
	      skew = decomposedMatrix.skew;
	      match = [[1, 0], [2, 0], [2, 1]];
	      for (i = _j = 2; _j >= 0; i = --_j) {
	        if (skew[i]) {
	          temp = Matrix.I(4);
	          temp.els[match[i][0]][match[i][1]] = skew[i];
	          matrix = matrix.multiply(temp);
	        }
	      }
	      matrix = matrix.multiply(new Matrix([[1 - 2 * (y * y + z * z), 2 * (x * y - z * w), 2 * (x * z + y * w), 0], [2 * (x * y + z * w), 1 - 2 * (x * x + z * z), 2 * (y * z - x * w), 0], [2 * (x * z - y * w), 2 * (y * z + x * w), 1 - 2 * (x * x + y * y), 0], [0, 0, 0, 1]]));
	      for (i = _k = 0; _k <= 2; i = ++_k) {
	        for (j = _l = 0; _l <= 2; j = ++_l) {
	          matrix.els[i][j] *= decomposedMatrix.scale[i];
	        }
	        matrix.els[3][i] = decomposedMatrix.translate[i];
	      }
	      return matrix;
	    };

	    return DecomposedMatrix;

	  })();

	  Matrix = (function() {
	    function Matrix(els) {
	      this.els = els;
	      this.toString = __bind(this.toString, this);
	      this.decompose = __bind(this.decompose, this);
	      this.inverse = __bind(this.inverse, this);
	      this.augment = __bind(this.augment, this);
	      this.toRightTriangular = __bind(this.toRightTriangular, this);
	      this.transpose = __bind(this.transpose, this);
	      this.multiply = __bind(this.multiply, this);
	      this.dup = __bind(this.dup, this);
	      this.e = __bind(this.e, this);
	    }

	    Matrix.prototype.e = function(i, j) {
	      if (i < 1 || i > this.els.length || j < 1 || j > this.els[0].length) {
	        return null;
	      }
	      return this.els[i - 1][j - 1];
	    };

	    Matrix.prototype.dup = function() {
	      return new Matrix(this.els);
	    };

	    Matrix.prototype.multiply = function(matrix) {
	      var M, c, cols, elements, i, j, ki, kj, nc, ni, nj, returnVector, sum;
	      returnVector = matrix.modulus ? true : false;
	      M = matrix.els || matrix;
	      if (typeof M[0][0] === 'undefined') {
	        M = new Matrix(M).els;
	      }
	      ni = this.els.length;
	      ki = ni;
	      kj = M[0].length;
	      cols = this.els[0].length;
	      elements = [];
	      ni += 1;
	      while (--ni) {
	        i = ki - ni;
	        elements[i] = [];
	        nj = kj;
	        nj += 1;
	        while (--nj) {
	          j = kj - nj;
	          sum = 0;
	          nc = cols;
	          nc += 1;
	          while (--nc) {
	            c = cols - nc;
	            sum += this.els[i][c] * M[c][j];
	          }
	          elements[i][j] = sum;
	        }
	      }
	      M = new Matrix(elements);
	      if (returnVector) {
	        return M.col(1);
	      } else {
	        return M;
	      }
	    };

	    Matrix.prototype.transpose = function() {
	      var cols, elements, i, j, ni, nj, rows;
	      rows = this.els.length;
	      cols = this.els[0].length;
	      elements = [];
	      ni = cols;
	      ni += 1;
	      while (--ni) {
	        i = cols - ni;
	        elements[i] = [];
	        nj = rows;
	        nj += 1;
	        while (--nj) {
	          j = rows - nj;
	          elements[i][j] = this.els[j][i];
	        }
	      }
	      return new Matrix(elements);
	    };

	    Matrix.prototype.toRightTriangular = function() {
	      var M, els, i, j, k, kp, multiplier, n, np, p, _i, _j, _ref, _ref1;
	      M = this.dup();
	      n = this.els.length;
	      k = n;
	      kp = this.els[0].length;
	      while (--n) {
	        i = k - n;
	        if (M.els[i][i] === 0) {
	          for (j = _i = _ref = i + 1; _ref <= k ? _i < k : _i > k; j = _ref <= k ? ++_i : --_i) {
	            if (M.els[j][i] !== 0) {
	              els = [];
	              np = kp;
	              np += 1;
	              while (--np) {
	                p = kp - np;
	                els.push(M.els[i][p] + M.els[j][p]);
	              }
	              M.els[i] = els;
	              break;
	            }
	          }
	        }
	        if (M.els[i][i] !== 0) {
	          for (j = _j = _ref1 = i + 1; _ref1 <= k ? _j < k : _j > k; j = _ref1 <= k ? ++_j : --_j) {
	            multiplier = M.els[j][i] / M.els[i][i];
	            els = [];
	            np = kp;
	            np += 1;
	            while (--np) {
	              p = kp - np;
	              els.push(p <= i ? 0 : M.els[j][p] - M.els[i][p] * multiplier);
	            }
	            M.els[j] = els;
	          }
	        }
	      }
	      return M;
	    };

	    Matrix.prototype.augment = function(matrix) {
	      var M, T, cols, i, j, ki, kj, ni, nj;
	      M = matrix.els || matrix;
	      if (typeof M[0][0] === 'undefined') {
	        M = new Matrix(M).els;
	      }
	      T = this.dup();
	      cols = T.els[0].length;
	      ni = T.els.length;
	      ki = ni;
	      kj = M[0].length;
	      if (ni !== M.length) {
	        return null;
	      }
	      ni += 1;
	      while (--ni) {
	        i = ki - ni;
	        nj = kj;
	        nj += 1;
	        while (--nj) {
	          j = kj - nj;
	          T.els[i][cols + j] = M[i][j];
	        }
	      }
	      return T;
	    };

	    Matrix.prototype.inverse = function() {
	      var M, divisor, els, i, inverse_elements, j, ki, kp, new_element, ni, np, p, _i;
	      ni = this.els.length;
	      ki = ni;
	      M = this.augment(Matrix.I(ni)).toRightTriangular();
	      kp = M.els[0].length;
	      inverse_elements = [];
	      ni += 1;
	      while (--ni) {
	        i = ni - 1;
	        els = [];
	        np = kp;
	        inverse_elements[i] = [];
	        divisor = M.els[i][i];
	        np += 1;
	        while (--np) {
	          p = kp - np;
	          new_element = M.els[i][p] / divisor;
	          els.push(new_element);
	          if (p >= ki) {
	            inverse_elements[i].push(new_element);
	          }
	        }
	        M.els[i] = els;
	        for (j = _i = 0; 0 <= i ? _i < i : _i > i; j = 0 <= i ? ++_i : --_i) {
	          els = [];
	          np = kp;
	          np += 1;
	          while (--np) {
	            p = kp - np;
	            els.push(M.els[j][p] - M.els[i][p] * M.els[j][i]);
	          }
	          M.els[j] = els;
	        }
	      }
	      return new Matrix(inverse_elements);
	    };

	    Matrix.I = function(n) {
	      var els, i, j, k, nj;
	      els = [];
	      k = n;
	      n += 1;
	      while (--n) {
	        i = k - n;
	        els[i] = [];
	        nj = k;
	        nj += 1;
	        while (--nj) {
	          j = k - nj;
	          els[i][j] = i === j ? 1 : 0;
	        }
	      }
	      return new Matrix(els);
	    };

	    Matrix.prototype.decompose = function() {
	      var els, i, inversePerspectiveMatrix, j, k, matrix, pdum3, perspective, perspectiveMatrix, quaternion, result, rightHandSide, rotate, row, rowElement, s, scale, skew, t, translate, transposedInversePerspectiveMatrix, type, typeKey, v, w, x, y, z, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;
	      matrix = this;
	      translate = [];
	      scale = [];
	      skew = [];
	      quaternion = [];
	      perspective = [];
	      els = [];
	      for (i = _i = 0; _i <= 3; i = ++_i) {
	        els[i] = [];
	        for (j = _j = 0; _j <= 3; j = ++_j) {
	          els[i][j] = matrix.els[i][j];
	        }
	      }
	      if (els[3][3] === 0) {
	        return false;
	      }
	      for (i = _k = 0; _k <= 3; i = ++_k) {
	        for (j = _l = 0; _l <= 3; j = ++_l) {
	          els[i][j] /= els[3][3];
	        }
	      }
	      perspectiveMatrix = matrix.dup();
	      for (i = _m = 0; _m <= 2; i = ++_m) {
	        perspectiveMatrix.els[i][3] = 0;
	      }
	      perspectiveMatrix.els[3][3] = 1;
	      if (els[0][3] !== 0 || els[1][3] !== 0 || els[2][3] !== 0) {
	        rightHandSide = new Vector(els.slice(0, 4)[3]);
	        inversePerspectiveMatrix = perspectiveMatrix.inverse();
	        transposedInversePerspectiveMatrix = inversePerspectiveMatrix.transpose();
	        perspective = transposedInversePerspectiveMatrix.multiply(rightHandSide).els;
	        for (i = _n = 0; _n <= 2; i = ++_n) {
	          els[i][3] = 0;
	        }
	        els[3][3] = 1;
	      } else {
	        perspective = [0, 0, 0, 1];
	      }
	      for (i = _o = 0; _o <= 2; i = ++_o) {
	        translate[i] = els[3][i];
	        els[3][i] = 0;
	      }
	      row = [];
	      for (i = _p = 0; _p <= 2; i = ++_p) {
	        row[i] = new Vector(els[i].slice(0, 3));
	      }
	      scale[0] = row[0].length();
	      row[0] = row[0].normalize();
	      skew[0] = row[0].dot(row[1]);
	      row[1] = row[1].combine(row[0], 1.0, -skew[0]);
	      scale[1] = row[1].length();
	      row[1] = row[1].normalize();
	      skew[0] /= scale[1];
	      skew[1] = row[0].dot(row[2]);
	      row[2] = row[2].combine(row[0], 1.0, -skew[1]);
	      skew[2] = row[1].dot(row[2]);
	      row[2] = row[2].combine(row[1], 1.0, -skew[2]);
	      scale[2] = row[2].length();
	      row[2] = row[2].normalize();
	      skew[1] /= scale[2];
	      skew[2] /= scale[2];
	      pdum3 = row[1].cross(row[2]);
	      if (row[0].dot(pdum3) < 0) {
	        for (i = _q = 0; _q <= 2; i = ++_q) {
	          scale[i] *= -1;
	          for (j = _r = 0; _r <= 2; j = ++_r) {
	            row[i].els[j] *= -1;
	          }
	        }
	      }
	      rowElement = function(index, elementIndex) {
	        return row[index].els[elementIndex];
	      };
	      rotate = [];
	      rotate[1] = Math.asin(-rowElement(0, 2));
	      if (Math.cos(rotate[1]) !== 0) {
	        rotate[0] = Math.atan2(rowElement(1, 2), rowElement(2, 2));
	        rotate[2] = Math.atan2(rowElement(0, 1), rowElement(0, 0));
	      } else {
	        rotate[0] = Math.atan2(-rowElement(2, 0), rowElement(1, 1));
	        rotate[1] = 0;
	      }
	      t = rowElement(0, 0) + rowElement(1, 1) + rowElement(2, 2) + 1.0;
	      if (t > 1e-4) {
	        s = 0.5 / Math.sqrt(t);
	        w = 0.25 / s;
	        x = (rowElement(2, 1) - rowElement(1, 2)) * s;
	        y = (rowElement(0, 2) - rowElement(2, 0)) * s;
	        z = (rowElement(1, 0) - rowElement(0, 1)) * s;
	      } else if ((rowElement(0, 0) > rowElement(1, 1)) && (rowElement(0, 0) > rowElement(2, 2))) {
	        s = Math.sqrt(1.0 + rowElement(0, 0) - rowElement(1, 1) - rowElement(2, 2)) * 2.0;
	        x = 0.25 * s;
	        y = (rowElement(0, 1) + rowElement(1, 0)) / s;
	        z = (rowElement(0, 2) + rowElement(2, 0)) / s;
	        w = (rowElement(2, 1) - rowElement(1, 2)) / s;
	      } else if (rowElement(1, 1) > rowElement(2, 2)) {
	        s = Math.sqrt(1.0 + rowElement(1, 1) - rowElement(0, 0) - rowElement(2, 2)) * 2.0;
	        x = (rowElement(0, 1) + rowElement(1, 0)) / s;
	        y = 0.25 * s;
	        z = (rowElement(1, 2) + rowElement(2, 1)) / s;
	        w = (rowElement(0, 2) - rowElement(2, 0)) / s;
	      } else {
	        s = Math.sqrt(1.0 + rowElement(2, 2) - rowElement(0, 0) - rowElement(1, 1)) * 2.0;
	        x = (rowElement(0, 2) + rowElement(2, 0)) / s;
	        y = (rowElement(1, 2) + rowElement(2, 1)) / s;
	        z = 0.25 * s;
	        w = (rowElement(1, 0) - rowElement(0, 1)) / s;
	      }
	      quaternion = [x, y, z, w];
	      result = new DecomposedMatrix;
	      result.translate = translate;
	      result.scale = scale;
	      result.skew = skew;
	      result.quaternion = quaternion;
	      result.perspective = perspective;
	      result.rotate = rotate;
	      for (typeKey in result) {
	        type = result[typeKey];
	        for (k in type) {
	          v = type[k];
	          if (isNaN(v)) {
	            type[k] = 0;
	          }
	        }
	      }
	      return result;
	    };

	    Matrix.prototype.toString = function() {
	      var i, j, str, _i, _j;
	      str = 'matrix3d(';
	      for (i = _i = 0; _i <= 3; i = ++_i) {
	        for (j = _j = 0; _j <= 3; j = ++_j) {
	          str += roundf(this.els[i][j], 10);
	          if (!(i === 3 && j === 3)) {
	            str += ',';
	          }
	        }
	      }
	      str += ')';
	      return str;
	    };

	    Matrix.matrixForTransform = cacheFn(function(transform) {
	      var matrixEl, result, style, _ref, _ref1, _ref2;
	      matrixEl = document.createElement('div');
	      matrixEl.style.position = 'absolute';
	      matrixEl.style.visibility = 'hidden';
	      matrixEl.style[propertyWithPrefix("transform")] = transform;
	      document.body.appendChild(matrixEl);
	      style = window.getComputedStyle(matrixEl, null);
	      result = (_ref = (_ref1 = style.transform) != null ? _ref1 : style[propertyWithPrefix("transform")]) != null ? _ref : (_ref2 = dynamics.tests) != null ? _ref2.matrixForTransform(transform) : void 0;
	      document.body.removeChild(matrixEl);
	      return result;
	    });

	    Matrix.fromTransform = function(transform) {
	      var digits, elements, i, match, matrixElements, _i;
	      match = transform != null ? transform.match(/matrix3?d?\(([-0-9,e \.]*)\)/) : void 0;
	      if (match) {
	        digits = match[1].split(',');
	        digits = digits.map(parseFloat);
	        if (digits.length === 6) {
	          elements = [digits[0], digits[1], 0, 0, digits[2], digits[3], 0, 0, 0, 0, 1, 0, digits[4], digits[5], 0, 1];
	        } else {
	          elements = digits;
	        }
	      } else {
	        elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
	      }
	      matrixElements = [];
	      for (i = _i = 0; _i <= 3; i = ++_i) {
	        matrixElements.push(elements.slice(i * 4, i * 4 + 4));
	      }
	      return new Matrix(matrixElements);
	    };

	    return Matrix;

	  })();

	  prefixFor = cacheFn(function(property) {
	    var k, prefix, prop, propArray, propertyName, _i, _j, _len, _len1, _ref;
	    if (document.body.style[property] !== void 0) {
	      return '';
	    }
	    propArray = property.split('-');
	    propertyName = "";
	    for (_i = 0, _len = propArray.length; _i < _len; _i++) {
	      prop = propArray[_i];
	      propertyName += prop.substring(0, 1).toUpperCase() + prop.substring(1);
	    }
	    _ref = ["Webkit", "Moz", "ms"];
	    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
	      prefix = _ref[_j];
	      k = prefix + propertyName;
	      if (document.body.style[k] !== void 0) {
	        return prefix;
	      }
	    }
	    return '';
	  });

	  propertyWithPrefix = cacheFn(function(property) {
	    var prefix;
	    prefix = prefixFor(property);
	    if (prefix === 'Moz') {
	      return "" + prefix + (property.substring(0, 1).toUpperCase() + property.substring(1));
	    }
	    if (prefix !== '') {
	      return "-" + (prefix.toLowerCase()) + "-" + (toDashed(property));
	    }
	    return toDashed(property);
	  });

	  rAF = typeof window !== "undefined" && window !== null ? window.requestAnimationFrame : void 0;

	  animations = [];

	  animationsTimeouts = [];

	  slow = false;

	  slowRatio = 1;

	  if (typeof window !== "undefined" && window !== null) {
	    window.addEventListener('keyup', function(e) {
	      if (e.keyCode === 68 && e.shiftKey && e.ctrlKey) {
	        return dynamics.toggleSlow();
	      }
	    });
	  }

	  if (rAF == null) {
	    lastTime = 0;
	    rAF = function(callback) {
	      var currTime, id, timeToCall;
	      currTime = Date.now();
	      timeToCall = Math.max(0, 16 - (currTime - lastTime));
	      id = window.setTimeout(function() {
	        return callback(currTime + timeToCall);
	      }, timeToCall);
	      lastTime = currTime + timeToCall;
	      return id;
	    };
	  }

	  runLoopRunning = false;

	  runLoopPaused = false;

	  startRunLoop = function() {
	    if (!runLoopRunning) {
	      runLoopRunning = true;
	      return rAF(runLoopTick);
	    }
	  };

	  runLoopTick = function(t) {
	    var animation, toRemoveAnimations, _i, _len;
	    if (runLoopPaused) {
	      rAF(runLoopTick);
	      return;
	    }
	    toRemoveAnimations = [];
	    for (_i = 0, _len = animations.length; _i < _len; _i++) {
	      animation = animations[_i];
	      if (!animationTick(t, animation)) {
	        toRemoveAnimations.push(animation);
	      }
	    }
	    animations = animations.filter(function(animation) {
	      return toRemoveAnimations.indexOf(animation) === -1;
	    });
	    if (animations.length === 0) {
	      return runLoopRunning = false;
	    } else {
	      return rAF(runLoopTick);
	    }
	  };

	  animationTick = function(t, animation) {
	    var key, properties, property, tt, y, _base, _base1, _ref;
	    if (animation.tStart == null) {
	      animation.tStart = t;
	    }
	    tt = (t - animation.tStart) / animation.options.duration;
	    y = animation.curve(tt);
	    properties = {};
	    if (tt >= 1) {
	      if (animation.curve.returnsToSelf) {
	        properties = animation.properties.start;
	      } else {
	        properties = animation.properties.end;
	      }
	    } else {
	      _ref = animation.properties.start;
	      for (key in _ref) {
	        property = _ref[key];
	        properties[key] = interpolate(property, animation.properties.end[key], y);
	      }
	    }
	    applyFrame(animation.el, properties);
	    if (typeof (_base = animation.options).change === "function") {
	      _base.change(animation.el, Math.min(1, tt));
	    }
	    if (tt >= 1) {
	      if (typeof (_base1 = animation.options).complete === "function") {
	        _base1.complete(animation.el);
	      }
	    }
	    return tt < 1;
	  };

	  interpolate = function(start, end, y) {
	    if ((start != null) && (start.interpolate != null)) {
	      return start.interpolate(end, y);
	    }
	    return null;
	  };

	  startAnimation = function(el, properties, options, timeoutId) {
	    var endProperties, isSVG, k, matrix, startProperties, transforms, v;
	    if (timeoutId != null) {
	      animationsTimeouts = animationsTimeouts.filter(function(timeout) {
	        return timeout.id !== timeoutId;
	      });
	    }
	    dynamics.stop(el, {
	      timeout: false
	    });
	    if (!options.animated) {
	      dynamics.css(el, properties);
	      if (typeof options.complete === "function") {
	        options.complete(this);
	      }
	      return;
	    }
	    startProperties = getCurrentProperties(el, Object.keys(properties));
	    properties = parseProperties(properties);
	    endProperties = {};
	    transforms = [];
	    for (k in properties) {
	      v = properties[k];
	      if ((el.style != null) && transformProperties.contains(k)) {
	        transforms.push([k, v]);
	      } else {
	        endProperties[k] = createInterpolable(v);
	      }
	    }
	    if (transforms.length > 0) {
	      isSVG = isSVGElement(el);
	      if (isSVG) {
	        matrix = new Matrix2D();
	        matrix.applyProperties(transforms);
	      } else {
	        v = (transforms.map(function(transform) {
	          return transformValueForProperty(transform[0], transform[1]);
	        })).join(" ");
	        matrix = Matrix.fromTransform(Matrix.matrixForTransform(v));
	      }
	      endProperties['transform'] = matrix.decompose();
	      if (isSVG) {
	        startProperties.transform.applyRotateCenter([endProperties.transform.props.rotate[1], endProperties.transform.props.rotate[2]]);
	      }
	    }
	    addUnitsToNumberInterpolables(el, endProperties);
	    animations.push({
	      el: el,
	      properties: {
	        start: startProperties,
	        end: endProperties
	      },
	      options: options,
	      curve: options.type.call(options.type, options)
	    });
	    return startRunLoop();
	  };

	  timeouts = [];

	  timeoutLastId = 0;

	  setRealTimeout = function(timeout) {
	    if (!isDocumentVisible()) {
	      return;
	    }
	    return rAF(function() {
	      if (timeouts.indexOf(timeout) === -1) {
	        return;
	      }
	      return timeout.realTimeoutId = setTimeout(function() {
	        timeout.fn();
	        return cancelTimeout(timeout.id);
	      }, timeout.delay);
	    });
	  };

	  addTimeout = function(fn, delay) {
	    var timeout;
	    timeoutLastId += 1;
	    timeout = {
	      id: timeoutLastId,
	      tStart: Date.now(),
	      fn: fn,
	      delay: delay,
	      originalDelay: delay
	    };
	    setRealTimeout(timeout);
	    timeouts.push(timeout);
	    return timeoutLastId;
	  };

	  cancelTimeout = function(id) {
	    return timeouts = timeouts.filter(function(timeout) {
	      if (timeout.id === id && timeout.realTimeoutId) {
	        clearTimeout(timeout.realTimeoutId);
	      }
	      return timeout.id !== id;
	    });
	  };

	  leftDelayForTimeout = function(time, timeout) {
	    var consumedDelay;
	    if (time != null) {
	      consumedDelay = time - timeout.tStart;
	      return timeout.originalDelay - consumedDelay;
	    } else {
	      return timeout.originalDelay;
	    }
	  };

	  if (typeof window !== "undefined" && window !== null) {
	    window.addEventListener('unload', function() {});
	  }

	  timeBeforeVisibilityChange = null;

	  observeVisibilityChange(function(visible) {
	    var animation, difference, timeout, _i, _j, _k, _len, _len1, _len2, _results;
	    runLoopPaused = !visible;
	    if (!visible) {
	      timeBeforeVisibilityChange = Date.now();
	      _results = [];
	      for (_i = 0, _len = timeouts.length; _i < _len; _i++) {
	        timeout = timeouts[_i];
	        _results.push(clearTimeout(timeout.realTimeoutId));
	      }
	      return _results;
	    } else {
	      if (runLoopRunning) {
	        difference = Date.now() - timeBeforeVisibilityChange;
	        for (_j = 0, _len1 = animations.length; _j < _len1; _j++) {
	          animation = animations[_j];
	          if (animation.tStart != null) {
	            animation.tStart += difference;
	          }
	        }
	      }
	      for (_k = 0, _len2 = timeouts.length; _k < _len2; _k++) {
	        timeout = timeouts[_k];
	        timeout.delay = leftDelayForTimeout(timeBeforeVisibilityChange, timeout);
	        setRealTimeout(timeout);
	      }
	      return timeBeforeVisibilityChange = null;
	    }
	  });

	  dynamics = {};

	  dynamics.linear = function() {
	    return function(t) {
	      return t;
	    };
	  };

	  dynamics.spring = function(options) {
	    var A1, A2, decal, frequency, friction, s;
	    if (options == null) {
	      options = {};
	    }
	    applyDefaults(options, dynamics.spring.defaults);
	    frequency = Math.max(1, options.frequency / 20);
	    friction = Math.pow(20, options.friction / 100);
	    s = options.anticipationSize / 1000;
	    decal = Math.max(0, s);
	    A1 = function(t) {
	      var M, a, b, x0, x1;
	      M = 0.8;
	      x0 = s / (1 - s);
	      x1 = 0;
	      b = (x0 - (M * x1)) / (x0 - x1);
	      a = (M - b) / x0;
	      return (a * t * options.anticipationStrength / 100) + b;
	    };
	    A2 = function(t) {
	      return Math.pow(friction / 10, -t) * (1 - t);
	    };
	    return function(t) {
	      var A, At, a, angle, b, frictionT, y0, yS;
	      frictionT = (t / (1 - s)) - (s / (1 - s));
	      if (t < s) {
	        yS = (s / (1 - s)) - (s / (1 - s));
	        y0 = (0 / (1 - s)) - (s / (1 - s));
	        b = Math.acos(1 / A1(yS));
	        a = (Math.acos(1 / A1(y0)) - b) / (frequency * (-s));
	        A = A1;
	      } else {
	        A = A2;
	        b = 0;
	        a = 1;
	      }
	      At = A(frictionT);
	      angle = frequency * (t - s) * a + b;
	      return 1 - (At * Math.cos(angle));
	    };
	  };

	  dynamics.bounce = function(options) {
	    var A, fn, frequency, friction;
	    if (options == null) {
	      options = {};
	    }
	    applyDefaults(options, dynamics.bounce.defaults);
	    frequency = Math.max(1, options.frequency / 20);
	    friction = Math.pow(20, options.friction / 100);
	    A = function(t) {
	      return Math.pow(friction / 10, -t) * (1 - t);
	    };
	    fn = function(t) {
	      var At, a, angle, b;
	      b = -3.14 / 2;
	      a = 1;
	      At = A(t);
	      angle = frequency * t * a + b;
	      return At * Math.cos(angle);
	    };
	    fn.returnsToSelf = true;
	    return fn;
	  };

	  dynamics.gravity = function(options) {
	    var L, bounciness, curves, elasticity, fn, getPointInCurve, gravity;
	    if (options == null) {
	      options = {};
	    }
	    applyDefaults(options, dynamics.gravity.defaults);
	    bounciness = Math.min(options.bounciness / 1250, 0.8);
	    elasticity = options.elasticity / 1000;
	    gravity = 100;
	    curves = [];
	    L = (function() {
	      var b, curve;
	      b = Math.sqrt(2 / gravity);
	      curve = {
	        a: -b,
	        b: b,
	        H: 1
	      };
	      if (options.returnsToSelf) {
	        curve.a = 0;
	        curve.b = curve.b * 2;
	      }
	      while (curve.H > 0.001) {
	        L = curve.b - curve.a;
	        curve = {
	          a: curve.b,
	          b: curve.b + L * bounciness,
	          H: curve.H * bounciness * bounciness
	        };
	      }
	      return curve.b;
	    })();
	    getPointInCurve = function(a, b, H, t) {
	      var c, t2;
	      L = b - a;
	      t2 = (2 / L) * t - 1 - (a * 2 / L);
	      c = t2 * t2 * H - H + 1;
	      if (options.returnsToSelf) {
	        c = 1 - c;
	      }
	      return c;
	    };
	    (function() {
	      var L2, b, curve, _results;
	      b = Math.sqrt(2 / (gravity * L * L));
	      curve = {
	        a: -b,
	        b: b,
	        H: 1
	      };
	      if (options.returnsToSelf) {
	        curve.a = 0;
	        curve.b = curve.b * 2;
	      }
	      curves.push(curve);
	      L2 = L;
	      _results = [];
	      while (curve.b < 1 && curve.H > 0.001) {
	        L2 = curve.b - curve.a;
	        curve = {
	          a: curve.b,
	          b: curve.b + L2 * bounciness,
	          H: curve.H * elasticity
	        };
	        _results.push(curves.push(curve));
	      }
	      return _results;
	    })();
	    fn = function(t) {
	      var curve, i, v;
	      i = 0;
	      curve = curves[i];
	      while (!(t >= curve.a && t <= curve.b)) {
	        i += 1;
	        curve = curves[i];
	        if (!curve) {
	          break;
	        }
	      }
	      if (!curve) {
	        v = options.returnsToSelf ? 0 : 1;
	      } else {
	        v = getPointInCurve(curve.a, curve.b, curve.H, t);
	      }
	      return v;
	    };
	    fn.returnsToSelf = options.returnsToSelf;
	    return fn;
	  };

	  dynamics.forceWithGravity = function(options) {
	    if (options == null) {
	      options = {};
	    }
	    applyDefaults(options, dynamics.forceWithGravity.defaults);
	    options.returnsToSelf = true;
	    return dynamics.gravity(options);
	  };

	  dynamics.bezier = (function() {
	    var Bezier, Bezier_, yForX;
	    Bezier_ = function(t, p0, p1, p2, p3) {
	      return (Math.pow(1 - t, 3) * p0) + (3 * Math.pow(1 - t, 2) * t * p1) + (3 * (1 - t) * Math.pow(t, 2) * p2) + Math.pow(t, 3) * p3;
	    };
	    Bezier = function(t, p0, p1, p2, p3) {
	      return {
	        x: Bezier_(t, p0.x, p1.x, p2.x, p3.x),
	        y: Bezier_(t, p0.y, p1.y, p2.y, p3.y)
	      };
	    };
	    yForX = function(xTarget, Bs, returnsToSelf) {
	      var B, aB, i, lower, percent, upper, x, xTolerance, _i, _len;
	      B = null;
	      for (_i = 0, _len = Bs.length; _i < _len; _i++) {
	        aB = Bs[_i];
	        if (xTarget >= aB(0).x && xTarget <= aB(1).x) {
	          B = aB;
	        }
	        if (B !== null) {
	          break;
	        }
	      }
	      if (!B) {
	        if (returnsToSelf) {
	          return 0;
	        } else {
	          return 1;
	        }
	      }
	      xTolerance = 0.0001;
	      lower = 0;
	      upper = 1;
	      percent = (upper + lower) / 2;
	      x = B(percent).x;
	      i = 0;
	      while (Math.abs(xTarget - x) > xTolerance && i < 100) {
	        if (xTarget > x) {
	          lower = percent;
	        } else {
	          upper = percent;
	        }
	        percent = (upper + lower) / 2;
	        x = B(percent).x;
	        i += 1;
	      }
	      return B(percent).y;
	    };
	    return function(options) {
	      var Bs, fn, points;
	      if (options == null) {
	        options = {};
	      }
	      points = options.points;
	      Bs = (function() {
	        var i, k, _fn;
	        Bs = [];
	        _fn = function(pointA, pointB) {
	          var B2;
	          B2 = function(t) {
	            return Bezier(t, pointA, pointA.cp[pointA.cp.length - 1], pointB.cp[0], pointB);
	          };
	          return Bs.push(B2);
	        };
	        for (i in points) {
	          k = parseInt(i);
	          if (k >= points.length - 1) {
	            break;
	          }
	          _fn(points[k], points[k + 1]);
	        }
	        return Bs;
	      })();
	      fn = function(t) {
	        if (t === 0) {
	          return 0;
	        } else if (t === 1) {
	          return 1;
	        } else {
	          return yForX(t, Bs, this.returnsToSelf);
	        }
	      };
	      fn.returnsToSelf = points[points.length - 1].y === 0;
	      return fn;
	    };
	  })();

	  dynamics.easeInOut = function(options) {
	    var friction, _ref;
	    if (options == null) {
	      options = {};
	    }
	    friction = (_ref = options.friction) != null ? _ref : dynamics.easeInOut.defaults.friction;
	    return dynamics.bezier({
	      points: [
	        {
	          x: 0,
	          y: 0,
	          cp: [
	            {
	              x: 0.92 - (friction / 1000),
	              y: 0
	            }
	          ]
	        }, {
	          x: 1,
	          y: 1,
	          cp: [
	            {
	              x: 0.08 + (friction / 1000),
	              y: 1
	            }
	          ]
	        }
	      ]
	    });
	  };

	  dynamics.easeIn = function(options) {
	    var friction, _ref;
	    if (options == null) {
	      options = {};
	    }
	    friction = (_ref = options.friction) != null ? _ref : dynamics.easeIn.defaults.friction;
	    return dynamics.bezier({
	      points: [
	        {
	          x: 0,
	          y: 0,
	          cp: [
	            {
	              x: 0.92 - (friction / 1000),
	              y: 0
	            }
	          ]
	        }, {
	          x: 1,
	          y: 1,
	          cp: [
	            {
	              x: 1,
	              y: 1
	            }
	          ]
	        }
	      ]
	    });
	  };

	  dynamics.easeOut = function(options) {
	    var friction, _ref;
	    if (options == null) {
	      options = {};
	    }
	    friction = (_ref = options.friction) != null ? _ref : dynamics.easeOut.defaults.friction;
	    return dynamics.bezier({
	      points: [
	        {
	          x: 0,
	          y: 0,
	          cp: [
	            {
	              x: 0,
	              y: 0
	            }
	          ]
	        }, {
	          x: 1,
	          y: 1,
	          cp: [
	            {
	              x: 0.08 + (friction / 1000),
	              y: 1
	            }
	          ]
	        }
	      ]
	    });
	  };

	  dynamics.spring.defaults = {
	    frequency: 300,
	    friction: 200,
	    anticipationSize: 0,
	    anticipationStrength: 0
	  };

	  dynamics.bounce.defaults = {
	    frequency: 300,
	    friction: 200
	  };

	  dynamics.forceWithGravity.defaults = dynamics.gravity.defaults = {
	    bounciness: 400,
	    elasticity: 200
	  };

	  dynamics.easeInOut.defaults = dynamics.easeIn.defaults = dynamics.easeOut.defaults = {
	    friction: 500
	  };

	  dynamics.css = makeArrayFn(function(el, properties) {
	    return applyProperties(el, properties, true);
	  });

	  dynamics.animate = makeArrayFn(function(el, properties, options) {
	    var id;
	    if (options == null) {
	      options = {};
	    }
	    options = clone(options);
	    applyDefaults(options, {
	      type: dynamics.easeInOut,
	      duration: 1000,
	      delay: 0,
	      animated: true
	    });
	    options.duration = Math.max(0, options.duration * slowRatio);
	    options.delay = Math.max(0, options.delay);
	    if (options.delay === 0) {
	      return startAnimation(el, properties, options);
	    } else {
	      id = dynamics.setTimeout(function() {
	        return startAnimation(el, properties, options, id);
	      }, options.delay);
	      return animationsTimeouts.push({
	        id: id,
	        el: el
	      });
	    }
	  });

	  dynamics.stop = makeArrayFn(function(el, options) {
	    if (options == null) {
	      options = {};
	    }
	    if (options.timeout == null) {
	      options.timeout = true;
	    }
	    if (options.timeout) {
	      animationsTimeouts = animationsTimeouts.filter(function(timeout) {
	        if (timeout.el === el && ((options.filter == null) || options.filter(timeout))) {
	          dynamics.clearTimeout(timeout.id);
	          return false;
	        }
	        return true;
	      });
	    }
	    return animations = animations.filter(function(animation) {
	      return animation.el !== el;
	    });
	  });

	  dynamics.setTimeout = function(fn, delay) {
	    return addTimeout(fn, delay * slowRatio);
	  };

	  dynamics.clearTimeout = function(id) {
	    return cancelTimeout(id);
	  };

	  dynamics.toggleSlow = function() {
	    slow = !slow;
	    if (slow) {
	      slowRatio = 3;
	    } else {
	      slowRatio = 1;
	    }
	    return typeof console !== "undefined" && console !== null ? typeof console.log === "function" ? console.log("dynamics.js: slow animations " + (slow ? "enabled" : "disabled")) : void 0 : void 0;
	  };

	  if (typeof module === "object" && typeof module.exports === "object") {
	    module.exports = dynamics;
	  } else if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return dynamics;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    window.dynamics = dynamics;
	  }

	}).call(this);


/***/ }),
/* 930 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 * classie
	 * http://github.amexpub.com/modules/classie
	 *
	 * Copyright (c) 2013 AmexPub. All rights reserved.
	 */

	module.exports = __webpack_require__(931);


/***/ }),
/* 931 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*!
	 * classie - class helper functions
	 * from bonzo https://github.com/ded/bonzo
	 * 
	 * classie.has( elem, 'my-class' ) -> true/false
	 * classie.add( elem, 'my-new-class' )
	 * classie.remove( elem, 'my-unwanted-class' )
	 * classie.toggle( elem, 'my-class' )
	 */

	/*jshint browser: true, strict: true, undef: true */
	/*global define: false */
	'use strict';

	// class helper functions from bonzo https://github.com/ded/bonzo
	var classList = __webpack_require__(932),
	    classie;

	function classReg(className) {
	    return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
	}

	function noop() {}

	function isArr(classes) {
	    if (Array.isArray(classes)) {
	        return true;
	    } else if (Object.prototype.toString.call(classes) === '[object Array]') {
	        return true;
	    } else {
	        return false;
	    }
	}

	function removeMultiple() {
	    var c = arguments[1],
	        elem = arguments[0];
	    c.forEach(function(value) {
	        if (classie.has(elem, value)) {
	            noop();
	        }
	        classie.removeClass(elem, value);
	    });
	}


	function addMultiple() {
	    var c = arguments[1],
	        elem = arguments[0];
	    c.forEach(function(value) {
	        if (classie.has(elem, value)) {
	            noop();
	        }
	        classie.addClass(elem, value);
	    });
	}

	function hasClass(elem, c) {
	    return elem.classList.contains(c);
	}

	function addClass(elem, c) {
	    if (isArr(c)) {
	        addMultiple.apply(this, arguments);
	    } else {
	        elem.classList.add(c);
	    }
	}

	function removeClass(elem, c) {
	    if (isArr(c)) {
	        removeMultiple.apply(this, arguments);
	    } else {
	        elem.classList.remove(c);
	    }
	}

	function toggleClass(elem, c) {
	    var fn = hasClass(elem, c) ? removeClass : addClass;
	    fn(elem, c);
	}

	var classie = {
	    // full names
	    hasClass: hasClass,
	    addClass: addClass,
	    removeClass: removeClass,
	    toggleClass: toggleClass,
	    // short names
	    has: hasClass,
	    add: addClass,
	    remove: removeClass,
	    toggle: toggleClass
	};

	// transport

	if (typeof module === "object" && module && typeof module.exports === "object") {
	    // commonjs / browserify
	    module.exports = classie;
	} else {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (classie), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(44)(module)))

/***/ }),
/* 932 */
/***/ (function(module, exports) {

	/* 
	 * classList.js: Cross-browser full element.classList implementation.
	 * 2014-07-23
	 *
	 * By Eli Grey, http://eligrey.com
	 * Public Domain.
	 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
	 */

	/*global self, document, DOMException, DOMTokenList */

	/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js*/

	if ("document" in self) {

	    // Full polyfill for browsers with no classList support
	    if (!("classList" in document.createElement("_")) || document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg", "g"))) {

	        (function(view) {

	            "use strict";

	            if (!('Element' in view)) {
	                return;
	            }

	            var classListProp = "classList",
	                protoProp = "prototype",
	                elemCtrProto = view.Element[protoProp],
	                objCtr = Object,
	                strTrim = String[protoProp].trim || function() {
	                    return this.replace(/^\s+|\s+$/g, "");
	                }, arrIndexOf = Array[protoProp].indexOf || function(item) {
	                    var
	                    i = 0,
	                        len = this.length;
	                    for (; i < len; i++) {
	                        if (i in this && this[i] === item) {
	                            return i;
	                        }
	                    }
	                    return -1;
	                },
	                // Vendors: please allow content code to instantiate DOMExceptions
	                DOMEx = function(type, message) {
	                    this.name = type;
	                    this.code = DOMException[type];
	                    this.message = message;
	                }, checkTokenAndGetIndex = function(classList, token) {
	                    if (token === "") {
	                        throw new DOMEx(
	                            "SYNTAX_ERR", "An invalid or illegal string was specified");
	                    }
	                    if (/\s/.test(token)) {
	                        throw new DOMEx(
	                            "INVALID_CHARACTER_ERR", "String contains an invalid character");
	                    }
	                    return arrIndexOf.call(classList, token);
	                }, ClassList = function(elem) {
	                    var
	                    trimmedClasses = strTrim.call(elem.getAttribute("class") || ""),
	                        classes = trimmedClasses ? trimmedClasses.split(/\s+/) : [],
	                        i = 0,
	                        len = classes.length;
	                    for (; i < len; i++) {
	                        this.push(classes[i]);
	                    }
	                    this._updateClassName = function() {
	                        elem.setAttribute("class", this.toString());
	                    };
	                }, classListProto = ClassList[protoProp] = [],
	                classListGetter = function() {
	                    return new ClassList(this);
	                };
	            // Most DOMException implementations don't allow calling DOMException's toString()
	            // on non-DOMExceptions. Error's toString() is sufficient here.
	            DOMEx[protoProp] = Error[protoProp];
	            classListProto.item = function(i) {
	                return this[i] || null;
	            };
	            classListProto.contains = function(token) {
	                token += "";
	                return checkTokenAndGetIndex(this, token) !== -1;
	            };
	            classListProto.add = function() {
	                var
	                tokens = arguments,
	                    i = 0,
	                    l = tokens.length,
	                    token, updated = false;
	                do {
	                    token = tokens[i] + "";
	                    if (checkTokenAndGetIndex(this, token) === -1) {
	                        this.push(token);
	                        updated = true;
	                    }
	                }
	                while (++i < l);

	                if (updated) {
	                    this._updateClassName();
	                }
	            };
	            classListProto.remove = function() {
	                var
	                tokens = arguments,
	                    i = 0,
	                    l = tokens.length,
	                    token, updated = false,
	                    index;
	                do {
	                    token = tokens[i] + "";
	                    index = checkTokenAndGetIndex(this, token);
	                    while (index !== -1) {
	                        this.splice(index, 1);
	                        updated = true;
	                        index = checkTokenAndGetIndex(this, token);
	                    }
	                }
	                while (++i < l);

	                if (updated) {
	                    this._updateClassName();
	                }
	            };
	            classListProto.toggle = function(token, force) {
	                token += "";

	                var
	                result = this.contains(token),
	                    method = result ?
	                        force !== true && "remove" :
	                        force !== false && "add";

	                if (method) {
	                    this[method](token);
	                }

	                if (force === true || force === false) {
	                    return force;
	                } else {
	                    return !result;
	                }
	            };
	            classListProto.toString = function() {
	                return this.join(" ");
	            };

	            if (objCtr.defineProperty) {
	                var classListPropDesc = {
	                    get: classListGetter,
	                    enumerable: true,
	                    configurable: true
	                };
	                try {
	                    objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	                } catch (ex) { // IE 8 doesn't support enumerable:true
	                    if (ex.number === -0x7FF5EC54) {
	                        classListPropDesc.enumerable = false;
	                        objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
	                    }
	                }
	            } else if (objCtr[protoProp].__defineGetter__) {
	                elemCtrProto.__defineGetter__(classListProp, classListGetter);
	            }

	        }(self));

	    } else {
	        // There is full or partial native classList support, so just check if we need
	        // to normalize the add/remove and toggle APIs.

	        (function() {
	            "use strict";

	            var testElement = document.createElement("_");

	            testElement.classList.add("c1", "c2");

	            // Polyfill for IE 10/11 and Firefox <26, where classList.add and
	            // classList.remove exist but support only one argument at a time.
	            if (!testElement.classList.contains("c2")) {
	                var createMethod = function(method) {
	                    var original = DOMTokenList.prototype[method];

	                    DOMTokenList.prototype[method] = function(token) {
	                        var i, len = arguments.length;

	                        for (i = 0; i < len; i++) {
	                            token = arguments[i];
	                            original.call(this, token);
	                        }
	                    };
	                };
	                createMethod('add');
	                createMethod('remove');
	            }

	            testElement.classList.toggle("c3", false);

	            // Polyfill for IE 10 and Firefox <24, where classList.toggle does not
	            // support the second argument.
	            if (testElement.classList.contains("c3")) {
	                var _toggle = DOMTokenList.prototype.toggle;

	                DOMTokenList.prototype.toggle = function(token, force) {
	                    if (1 in arguments && !this.contains(token) === !force) {
	                        return force;
	                    } else {
	                        return _toggle.call(this, token);
	                    }
	                };

	            }

	            testElement = null;
	        }());
	    }

	}


/***/ }),
/* 933 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _semanticUiReact = __webpack_require__(162);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	var GeneralModal = function GeneralModal(props) {
	  return _react2.default.createElement(_semanticUiReact.Modal, { basic: true, open: props.visibility }, _react2.default.createElement(_semanticUiReact.Header, { icon: "archive", content: "Archive Old Messages" }), _react2.default.createElement(_semanticUiReact.Modal.Content, null, _react2.default.createElement("p", null, "Your inbox is getting full, would you like us to enable automatic archiving of old messages?")), _react2.default.createElement(_semanticUiReact.Modal.Actions, null, _react2.default.createElement(_semanticUiReact.Button, { basic: true, color: "red", inverted: true }, _react2.default.createElement(_semanticUiReact.Icon, { name: "remove" }), " No"), _react2.default.createElement(_semanticUiReact.Button, { color: "green", inverted: true }, _react2.default.createElement(_semanticUiReact.Icon, { name: "checkmark" }), " Yes")));
	};

	exports.default = GeneralModal;

/***/ }),
/* 934 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _CanvasGame = __webpack_require__(935);

	var _CanvasGame2 = _interopRequireDefault(_CanvasGame);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _CanvasGame2.default;

/***/ }),
/* 935 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _tools = __webpack_require__(936);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @class Canvas 🎨
	 * @desc Canvas HTML5 element where all the magic happens!
	 */
	var Canvas = function (_Component) {
	  _inherits(Canvas, _Component);

	  function Canvas(props) {
	    _classCallCheck(this, Canvas);

	    var _this = _possibleConstructorReturn(this, (Canvas.__proto__ || Object.getPrototypeOf(Canvas)).call(this, props));

	    _this.state = {
	      canvasUri: null
	    };

	    // bind functions
	    _this.clearCanvas = _this.clearCanvas.bind(_this);
	    _this.resize = _this.resize.bind(_this);
	    return _this;
	  }

	  _createClass(Canvas, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(props) {
	      var canvas = this.refs.canvas;
	      if (!canvas) return;

	      var url = canvas.toDataURL();

	      this.setState({
	        canvasUri: url
	      });
	    }

	    /**
	     * Clears canvas to blank
	     */

	  }, {
	    key: "clearCanvas",
	    value: function clearCanvas() {
	      var canvas = this.refs.canvas;
	      var context = canvas.getContext("2d");
	      context.clearRect(0, 0, canvas.width, canvas.height);
	    }

	    /**
	     * Resizes canvas dimensions
	     * @TODO fix the resizing so it adjust to the canva's size
	     */

	  }, {
	    key: "resize",
	    value: function resize() {
	      var canvas = this.refs.canvas;
	      if (!canvas) return;

	      var offsetWidth = canvas.offsetWidth,
	          offsetHeight = canvas.offsetHeight;

	      canvas.width = offsetWidth ? offsetWidth : canvas.width;
	      canvas.height = offsetHeight ? offsetHeight : canvas.height;

	      // var image = new Image();
	      // image.src =  this.state.canvasUri
	      // //
	      // image.onload = function() {
	      //   ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
	      // };
	    }
	  }, {
	    key: "redraw",
	    value: function redraw() {
	      var canvas = this.refs.canvas;
	      if (!canvas) return;

	      this.resize();
	      var ctx = canvas.getContext("2d");

	      var image = new Image();
	      image.src = this.state.canvasUri;
	      //
	      image.onload = function () {
	        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
	      };
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.resize();
	      window.addEventListener("resize", this.redraw.bind(this));
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      window.removeEventListener("resize", this.redraw.bind(this));
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      if (!this.props.lastDraw) return;

	      var canvas = this.refs.canvas;
	      var ctx = canvas.getContext("2d");

	      var tool = this.props.lastDraw.toolPicked;

	      if (tool === "pencil") _tools.PencilTool.classic(this.props.lastDraw, canvas);else if (tool === "eraser") (0, _tools.EraserTool)(this.props.lastDraw, ctx);else if (tool === "bucket") (0, _tools.Bucket)(this.props.lastDraw, canvas);else if (tool === "bin") (0, _tools.BinRecycler)(canvas);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement("canvas", {
	        id: "mycanvas",
	        className: this.props.fullscreen ? "fullscreen" : "",
	        ref: "canvas",
	        width: "600",
	        height: "400",
	        onMouseMove: this.props.onMouseMove,
	        onMouseDown: this.props.onMouseDown,
	        onTouchStart: this.props.onMouseDown,
	        onTouchMove: this.props.onMouseMove
	      });
	    }
	  }]);

	  return Canvas;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	 * @param {store}
	 */

	function mapStateToProps(store) {
	  var _store$gameReducer = store.gameReducer,
	      lastDraw = _store$gameReducer.lastDraw,
	      fullscreen = _store$gameReducer.fullscreen;

	  return { lastDraw: lastDraw, fullscreen: fullscreen };
	}

	exports.default = (0, _reactRedux.connect)(mapStateToProps, null)(Canvas);

/***/ }),
/* 936 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Bucket = exports.BinRecycler = exports.EraserTool = exports.PencilTool = undefined;

	var _Pencil = __webpack_require__(937);

	var _Pencil2 = _interopRequireDefault(_Pencil);

	var _Eraser = __webpack_require__(939);

	var _Eraser2 = _interopRequireDefault(_Eraser);

	var _BinRecycler = __webpack_require__(940);

	var _BinRecycler2 = _interopRequireDefault(_BinRecycler);

	var _Bucket = __webpack_require__(941);

	var _Bucket2 = _interopRequireDefault(_Bucket);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.PencilTool = _Pencil2.default;
	exports.EraserTool = _Eraser2.default;
	exports.BinRecycler = _BinRecycler2.default;
	exports.Bucket = _Bucket2.default;

/***/ }),
/* 937 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _utils = __webpack_require__(938);

	var Pencil = {
	  classic: function classic(data, canvas) {
	    var ctx = canvas.getContext("2d");
	    var coordinates = data.coordinates,
	        colorPicked = data.colorPicked;

	    if (!coordinates) return;

	    var currentX = coordinates.currentX,
	        currentY = coordinates.currentY,
	        prevX = coordinates.prevX,
	        prevY = coordinates.prevY;

	    currentX = !currentX ? prevX + 1 : currentX;
	    currentY = !currentY ? prevY + 1 : currentY;

	    currentX = (0, _utils.scalePositionX)(currentX, canvas.width);
	    currentY = (0, _utils.scalePositionHeight)(currentY, canvas.height);
	    prevX = (0, _utils.scalePositionX)(prevX, canvas.width);
	    prevY = (0, _utils.scalePositionHeight)(prevY, canvas.height);

	    ctx.beginPath();
	    ctx.moveTo(prevX, prevY);
	    ctx.lineTo(currentX, currentY);
	    ctx.strokeStyle = colorPicked;
	    ctx.lineWidth = 2;

	    ctx.stroke();
	    ctx.closePath();
	  }
	};

	exports.default = Pencil;

/***/ }),
/* 938 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.is_touch_device = is_touch_device;
	exports.scalePositionX = scalePositionX;
	exports.scalePositionHeight = scalePositionHeight;
	function is_touch_device() {
	  var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');
	  var mq = function mq(query) {
	    return window.matchMedia(query).matches;
	  };

	  if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {
	    return true;
	  }

	  // include the 'heartz' as a way to have a non matching MQ to help terminate the join
	  // https://git.io/vznFH
	  var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');
	  return mq(query);
	}

	function scalePositionX(x, width) {
	  return x / (600 / width);
	}

	function scalePositionHeight(y, height) {
	  return y / (400 / height);
	}

/***/ }),
/* 939 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var Eraser = function Eraser(data, ctx) {
	  var drawPosition = data.drawPosition;

	  if (!drawPosition) return;

	  var currentX = drawPosition.currentX,
	      currentY = drawPosition.currentY,
	      x = drawPosition.x,
	      y = drawPosition.y;

	  ctx.beginPath();
	  ctx.moveTo(x, y);
	  ctx.lineTo(currentX, currentY);
	  ctx.strokeStyle = "white";
	  ctx.lineWidth = 5;

	  ctx.stroke();
	  ctx.closePath();
	};

	exports.default = Eraser;

/***/ }),
/* 940 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var BinRecycler = function BinRecycler(canvas) {
	    var width = canvas.width,
	        height = canvas.height;

	    var ctx = canvas.getContext("2d");

	    ctx.clearRect(0, 0, width, height);
	};

	exports.default = BinRecycler;

/***/ }),
/* 941 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _utils = __webpack_require__(938);

	/**
	 * 
	 * @param {*} data 
	 * @param {*} canvas 
	 */
	var Bucket = function Bucket(data, canvas) {
	  var ctx = canvas.getContext("2d");

	  var colorPicked = data.colorPicked,
	      coordinates = data.coordinates;
	  var prevX = coordinates.prevX,
	      prevY = coordinates.prevY;

	  prevX = (0, _utils.scalePositionX)(prevX, canvas.width);
	  prevY = (0, _utils.scalePositionHeight)(prevY, canvas.height);

	  ctx.fillStyle = colorPicked;
	  ctx.floodFill(prevX, prevY, 0);
	};

	exports.default = Bucket;

/***/ }),
/* 942 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Chat = __webpack_require__(943);

	var _Chat2 = _interopRequireDefault(_Chat);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Chat2.default;

/***/ }),
/* 943 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Chat = undefined;

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _components = __webpack_require__(824);

	var _gameActions = __webpack_require__(158);

	var _styles = __webpack_require__(944);

	var _styles2 = _interopRequireDefault(_styles);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @class Chart
	 * @desc
	 */
	var Chat = exports.Chat = function (_Component) {
	  _inherits(Chat, _Component);

	  function Chat(props) {
	    _classCallCheck(this, Chat);

	    var _this = _possibleConstructorReturn(this, (Chat.__proto__ || Object.getPrototypeOf(Chat)).call(this, props));

	    _this.state = {
	      text: "",
	      placeholder: "write your message"
	    };

	    // Event Listeners
	    _this.sendMessage = _this.sendMessage.bind(_this);
	    _this.updateText = _this.updateText.bind(_this);
	    _this.scrollChatToBot = _this.scrollChatToBot.bind(_this);
	    return _this;
	  }

	  _createClass(Chat, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(props) {
	      if (props.messages) this.scrollChatToBot();
	    }
	  }, {
	    key: "scrollChatToBot",
	    value: function scrollChatToBot() {
	      var messages = this.refs.messagesRef;
	      setTimeout(function () {
	        messages.scrollTop = messages.scrollHeight;
	      }, 0);
	    }
	  }, {
	    key: "renderMessages",
	    value: function renderMessages() {
	      return this.props.messages.map(function (message, key) {
	        // Receives message from player
	        if (message.type === "player") {
	          var msg = message.msg,
	              userColor = message.userColor,
	              username = message.username,
	              avatar = message.avatar;

	          return _react2.default.createElement(_components.Message, { key: key, avatar: avatar, message: msg, username: username, userColor: userColor });
	        }
	        // Receives message from general chat
	        else if (message.type === "general") {
	            var data = message.data,
	                color = message.color;

	            return _react2.default.createElement(_components.InfoMessage, { key: key, message: data, color: color });
	          }
	      });
	    }

	    /**
	     * Submit message if enter key is pressed
	     */

	  }, {
	    key: "sendMessage",
	    value: function sendMessage(e) {
	      // if enter key is pressed
	      if (e.key === "Enter") {
	        // the msg is not blank at all
	        if (!/^\s*$/.test(this.state.text)) this.props.playerSendMessage(this.state.text);

	        this.setState({
	          text: ""
	        });
	      }
	    }

	    /**
	     * If the textfield detects changes it will automaticly change its state value
	     * @param {Object} e
	     */

	  }, {
	    key: "updateText",
	    value: function updateText(e) {
	      this.setState({
	        text: e.target.value
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement("div", { style: _styles2.default.container }, _react2.default.createElement("div", { ref: "messagesRef", style: _styles2.default.messagesBlock }, this.renderMessages()), _react2.default.createElement("textarea", {
	        style: _styles2.default.inputMessage,
	        placeholder: this.state.placeholder,
	        onChange: this.updateText,
	        value: this.state.text,
	        onKeyUp: this.sendMessage
	      }));
	    }
	  }]);

	  return Chat;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	 * @param {store}
	 */

	function mapStateToProps(state) {
	  return { messages: state.gameReducer.messages };
	}

	/**
	 * 
	 * @param {*} dispatch 
	 */
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    playerSendMessage: function playerSendMessage(message) {
	      dispatch((0, _gameActions.playerSendMessage)(message));
	    }
	  };
	};

	exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Chat);

/***/ }),
/* 944 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var chatListStyles = {
	    container: {
	        width: "100%",
	        height: "100%",
	        marginLeft: "10px"
	    },
	    inputMessage: {
	        display: "block",
	        width: "inherit",
	        resize: "none",
	        minHeight: "0"
	    },
	    messagesBlock: {
	        display: "block",
	        marginBottom: "8px",
	        boxShadow: "0 2px 3px 0 rgba(0,0,0,0.2)",
	        backgroundColor: "white",
	        borderRadius: "4px",
	        height: "65vh",
	        padding: "10px",
	        fontSize: "14px",
	        boxSizing: "border-box",
	        resize: "none",
	        outline: "none",
	        overflowY: "scroll"
	    }
	};

	exports.default = chatListStyles;

/***/ }),
/* 945 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _PlayerList = __webpack_require__(946);

	var _PlayerList2 = _interopRequireDefault(_PlayerList);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _PlayerList2.default;

/***/ }),
/* 946 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _semanticUiReact = __webpack_require__(162);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @class UserList
	 * @desc List of players that is currently playing in a specific game
	 */
	var PlayerList = function (_Component) {
	  _inherits(PlayerList, _Component);

	  function PlayerList(props) {
	    _classCallCheck(this, PlayerList);

	    return _possibleConstructorReturn(this, (PlayerList.__proto__ || Object.getPrototypeOf(PlayerList)).call(this, props));
	  }

	  /**
	   * Draws the playerlist
	   */

	  _createClass(PlayerList, [{
	    key: "drawPlayerList",
	    value: function drawPlayerList() {
	      return this.props.playerList.map(function (player, key) {
	        return _react2.default.createElement(_semanticUiReact.List.Item, { key: key }, _react2.default.createElement(_semanticUiReact.Image, { avatar: true, src: '/assets/img/avatars/' + player.avatar + '.png' }), _react2.default.createElement(_semanticUiReact.List.Content, null, _react2.default.createElement(_semanticUiReact.List.Header, null, player.name), player.points, " points"));
	      });
	    }
	    //

	  }, {
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement(_semanticUiReact.List, { horizontal: true, ordered: true, size: "big" }, this.drawPlayerList());
	    }
	  }]);

	  return PlayerList;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	 * @param {store}
	 */

	function mapStateToProps(state) {
	  return { playerList: state.gameReducer.playerList };
	}

	exports.default = (0, _reactRedux.connect)(mapStateToProps, null)(PlayerList);

/***/ }),
/* 947 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _ToolPaint = __webpack_require__(948);

	var _ToolPaint2 = _interopRequireDefault(_ToolPaint);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _ToolPaint2.default;

/***/ }),
/* 948 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _gameActions = __webpack_require__(158);

	var _Palete = __webpack_require__(949);

	var _Palete2 = _interopRequireDefault(_Palete);

	var _Tool = __webpack_require__(952);

	var _Tool2 = _interopRequireDefault(_Tool);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @class ToolPaint
	 * @desc
	 */
	var ToolPaint = function (_Component) {
	  _inherits(ToolPaint, _Component);

	  function ToolPaint(props) {
	    _classCallCheck(this, ToolPaint);

	    // Event listeners
	    var _this = _possibleConstructorReturn(this, (ToolPaint.__proto__ || Object.getPrototypeOf(ToolPaint)).call(this, props));

	    _this._toggleExpand = _this._toggleExpand.bind(_this);
	    _this._onEraserClick = _this._onEraserClick.bind(_this);
	    _this._onPaleteClick = _this._onPaleteClick.bind(_this);
	    _this._onBinClick = _this._onBinClick.bind(_this);
	    _this._onBucketClick = _this._onBucketClick.bind(_this);
	    return _this;
	  }

	  _createClass(ToolPaint, [{
	    key: '_toggleExpand',
	    value: function _toggleExpand() {
	      this.props.toggleExpand();
	    }

	    /**
	     *
	     */

	  }, {
	    key: '_onEraserClick',
	    value: function _onEraserClick() {
	      document.getElementById('mycanvas').style.cursor = "url('/assets/img/tools/eraser.png') 0 30, auto";
	      this.props.selectTool('eraser');
	    }

	    /**
	     * If a color from the palette has been click, it will set as the color seleted
	     * @param {NodeElement} element
	     */

	  }, {
	    key: '_onPaleteClick',
	    value: function _onPaleteClick(element) {
	      document.getElementById('mycanvas').style.cursor = "url('/assets/img/tools/pencil.svg') 5 40, auto";
	      document.querySelector('[data-color=\'' + this.props.colorPicked + '\']').classList.remove('active-color');

	      var color = element.target.dataset.color;
	      element.target.className = 'active-color';
	      this.props.setColorPicked(color);
	      this.props.selectTool('pencil');
	    }

	    /**
	     *
	     * @param {*} e
	     */

	  }, {
	    key: '_onBinClick',
	    value: function _onBinClick() {
	      this.props.clearCanvas();
	    }

	    /**
	     * 
	     */

	  }, {
	    key: '_onBucketClick',
	    value: function _onBucketClick() {
	      document.getElementById('mycanvas').style.cursor = "url('/assets/img/tools/bucket.png') 0 30, auto";
	      this.props.selectTool('bucket');
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('div', { className: 'toolpaint' }, _react2.default.createElement(_Palete2.default, { onClick: this._onPaleteClick }), _react2.default.createElement(_Tool2.default, {
	        type: 'expand',
	        onClick: this._toggleExpand,
	        src: '/assets/img/tools/expand.svg'
	      }), _react2.default.createElement(_Tool2.default, {
	        type: 'eraser',
	        onClick: this._onEraserClick,
	        src: '/assets/img/tools/eraser.png'
	      }), _react2.default.createElement(_Tool2.default, {
	        type: 'bin',
	        onClick: this._onBinClick,
	        src: '/assets/img/tools/bin.svg'
	      }), _react2.default.createElement(_Tool2.default, {
	        type: 'bucket',
	        onClick: this._onBucketClick,
	        src: '/assets/img/tools/water-glass.svg'
	      }));
	    }
	  }]);

	  return ToolPaint;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	 * @param {store}
	 */

	function mapStateToProps(_ref) {
	  var gameReducer = _ref.gameReducer,
	      playerReducer = _ref.playerReducer;
	  var colorPicked = gameReducer.colorPicked,
	      myCanvas = gameReducer.myCanvas;
	  var socket = playerReducer.socket;

	  return { colorPicked: colorPicked, myCanvas: myCanvas, socket: socket };
	}

	/**
	 * 
	 * @param {*} dispatch 
	 */
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    selectTool: function selectTool(tool) {
	      dispatch((0, _gameActions.selectTool)(tool));
	    },
	    setColorPicked: function setColorPicked(color) {
	      dispatch((0, _gameActions.setColorPicked)(color));
	    },
	    clearCanvas: function clearCanvas() {
	      dispatch((0, _gameActions.clearCanvas)());
	    },
	    toggleExpand: function toggleExpand() {
	      dispatch((0, _gameActions.toggleExpand)());
	    }
	  };
	};

	exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ToolPaint);

/***/ }),
/* 949 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Palete = __webpack_require__(950);

	var _Palete2 = _interopRequireDefault(_Palete);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Palete2.default;

/***/ }),
/* 950 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Palete = undefined;

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _gameActions = __webpack_require__(158);

	var _colors = __webpack_require__(951);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @class Palete
	 * @desc Set of drawing tools to make your life easier!
	 */
	var Palete = exports.Palete = function (_Component) {
	  _inherits(Palete, _Component);

	  function Palete(props) {
	    _classCallCheck(this, Palete);

	    var _this = _possibleConstructorReturn(this, (Palete.__proto__ || Object.getPrototypeOf(Palete)).call(this, props));

	    _this.state = {
	      colorPicked: _this.props.colorPicked
	    };

	    // Events listeners
	    _this._drawColors = _this._drawColors.bind(_this);
	    return _this;
	  }

	  /**
	   * Renders the list of colors on the palette
	   */

	  _createClass(Palete, [{
	    key: '_drawColors',
	    value: function _drawColors() {
	      var _this2 = this;

	      return _colors.colors.map(function (color, key) {
	        return _react2.default.createElement('li', {
	          key: key,
	          'data-color': color,
	          onClick: _this2.props.onClick,
	          style: { backgroundColor: color }
	        });
	      }, this);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      document.querySelector('[data-color=\'' + this.state.colorPicked + '\']').className = 'active-color';
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement('ul', { className: 'colors' }, this._drawColors());
	    }
	  }]);

	  return Palete;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	 * @param {store}
	 */

	function mapStateToProps(_ref) {
	  var gameReducer = _ref.gameReducer;
	  var colorPicked = gameReducer.colorPicked;

	  return { colorPicked: colorPicked };
	}

	exports.default = (0, _reactRedux.connect)(mapStateToProps, { setColorPicked: _gameActions.setColorPicked })(Palete);

/***/ }),
/* 951 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var colors = exports.colors = ['#E74C3C', '#3498DB', '#58D68D', '#F7DC6F', '#E67E22', '#CACFD2', '#000', '#ffffff'];

/***/ }),
/* 952 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Tool = __webpack_require__(953);

	var _Tool2 = _interopRequireDefault(_Tool);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Tool2.default;

/***/ }),
/* 953 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * @class Tool
	 * @desc Drawing Tool
	 */
	var Tool = function Tool(props) {
	  return _react2.default.createElement('img', { id: props.type, className: 'icon-tool', onClick: props.onClick, src: props.src });
	};

	exports.default = Tool;

/***/ }),
/* 954 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _PublicGame = __webpack_require__(893);

	var _PublicGame2 = _interopRequireDefault(_PublicGame);

	var _playerActions = __webpack_require__(159);

	var _components = __webpack_require__(824);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * HOMEPAGE COMPONENT VIEW
	 */
	var PrivateGame = function (_Component) {
	  _inherits(PrivateGame, _Component);

	  function PrivateGame(props) {
	    _classCallCheck(this, PrivateGame);

	    var _this = _possibleConstructorReturn(this, (PrivateGame.__proto__ || Object.getPrototypeOf(PrivateGame)).call(this, props));

	    _this.state = {
	      title: "Home",
	      placeholder: "Introduce a nickname",
	      username: _this.props.username,
	      buttonTxt: "Play!",
	      privateTxt: "Create Private room"
	    };

	    // Events listeners
	    _this.onInputChange = _this.onInputChange.bind(_this);
	    _this.onPlayButtonClick = _this.onPlayButtonClick.bind(_this);
	    _this.onSubmit = _this.onSubmit.bind(_this);
	    _this.renderContent = _this.renderContent.bind(_this);
	    return _this;
	  }

	  /**
	   * Detecs user input changes
	   * @param {Object} e
	   */

	  _createClass(PrivateGame, [{
	    key: "onInputChange",
	    value: function onInputChange(e) {
	      var newUsername = e.target.value;
	      this.setState({
	        username: newUsername
	      });
	    }

	    /**
	     * If play button is clicked it will take you
	     * to a random room to play!
	     */

	  }, {
	    key: "onPlayButtonClick",
	    value: function onPlayButtonClick() {
	      var roomId = this.props.match.params.roomId;

	      this.props.setUsername(this.state.username);
	      this.props.joinPrivateGame(roomId);
	    }

	    /**
	     * If enter key button has been pressed it will trigger
	     * the play button
	     * @param {Object} e
	     */

	  }, {
	    key: "onSubmit",
	    value: function onSubmit(e) {
	      if (e.key === "Enter") this.onPlayButtonClick();
	    }

	    /**
	     *
	     */

	  }, {
	    key: "renderContent",
	    value: function renderContent() {
	      var content = void 0;
	      if (this.props.connection) {
	        content = _react2.default.createElement(_PublicGame2.default, null);
	      } else if (this.props.connection === false) {
	        return this.props.history.push("/");
	      } else {
	        content = _react2.default.createElement("div", { className: "home-menu" }, _react2.default.createElement("img", { className: "img-responsive", src: "/assets/img/logo.png" }), _react2.default.createElement(_components.InputText, {
	          "class": "input",
	          placeholder: this.state.placeholder,
	          onInputChange: this.onInputChange,
	          username: this.state.username,
	          onKeyPress: this.onSubmit
	        }), _react2.default.createElement("br", null), _react2.default.createElement(_components.PrimaryButton, {
	          "class": "play-btn",
	          value: this.state.buttonTxt,
	          onClick: this.onPlayButtonClick
	        }));
	      }
	      return content;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement("div", null, this.renderContent());
	    }
	  }]);

	  return PrivateGame;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	 * @param {store}
	 */

	function mapStateToProps(state) {
	  return {
	    username: state.playerReducer.username,
	    connection: state.playerReducer.connection
	  };
	}

	/**
	 *
	 * @param {*} dispatch
	 */
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    setUsername: function setUsername(username) {
	      dispatch((0, _playerActions.setUsername)(username));
	    },
	    openPlayerSocketConnection: function openPlayerSocketConnection() {
	      dispatch((0, _playerActions.openPlayerSocketConnection)());
	    },
	    joinPrivateGame: function joinPrivateGame(roomId) {
	      dispatch((0, _playerActions.joinPrivateGame)(roomId));
	    }
	  };
	};

	exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PrivateGame);

/***/ }),
/* 955 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _semanticUiReact = __webpack_require__(162);

	var _gameActions = __webpack_require__(158);

	var _components = __webpack_require__(824);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * CREATEPAGE COMPONENT VIEW
	 */
	var CreatePage = function (_Component) {
	  _inherits(CreatePage, _Component);

	  function CreatePage(props) {
	    _classCallCheck(this, CreatePage);

	    var _this = _possibleConstructorReturn(this, (CreatePage.__proto__ || Object.getPrototypeOf(CreatePage)).call(this, props));

	    _this.state = {
	      form: {
	        nickname: '',
	        roomName: '',
	        numberOfRounds: 3,
	        private: false,
	        pass: null
	      }
	    };

	    //
	    _this.handleCreateRoom = _this.handleCreateRoom.bind(_this);
	    _this.handleNicknameChange = _this.handleNicknameChange.bind(_this);
	    _this.handleRoomNameChange = _this.handleRoomNameChange.bind(_this);
	    _this.handleNumberOfRoundsChange = _this.handleNumberOfRoundsChange.bind(_this);
	    _this.handlePrivateChange = _this.handlePrivateChange.bind(_this);
	    _this.handlePassChange = _this.handlePassChange.bind(_this);
	    return _this;
	  }

	  /**
	   * 
	   * @param {*} e 
	   */

	  _createClass(CreatePage, [{
	    key: "handleNicknameChange",
	    value: function handleNicknameChange(e) {
	      var newValue = e.target.value;
	      this.setState(function (prevState) {
	        return {
	          form: _extends({}, prevState.form, {
	            nickname: newValue
	          })
	        };
	      });
	    }

	    /**
	     * 
	     * @param {*} e 
	     */

	  }, {
	    key: "handleRoomNameChange",
	    value: function handleRoomNameChange(e) {
	      var newValue = e.target.value;
	      this.setState(function (prevState) {
	        return {
	          form: _extends({}, prevState.form, {
	            roomName: newValue
	          })
	        };
	      });
	    }

	    /**
	     * 
	     * @param {*} e 
	     */

	  }, {
	    key: "handleNumberOfRoundsChange",
	    value: function handleNumberOfRoundsChange(e) {
	      var newValue = e.target.value;
	      this.setState(function (prevState) {
	        return {
	          form: _extends({}, prevState.form, {
	            numberOfRounds: newValue
	          })
	        };
	      });
	    }

	    /**
	     * 
	     * @param {*} e 
	     */

	  }, {
	    key: "handlePrivateChange",
	    value: function handlePrivateChange(e) {
	      this.setState(function (prevState) {
	        return {
	          form: _extends({}, prevState.form, {
	            private: !prevState.form.private
	          })
	        };
	      });
	    }

	    /**
	     * 
	     * @param {*} e 
	     */

	  }, {
	    key: "handlePassChange",
	    value: function handlePassChange(e) {
	      var newValue = e.target.value;

	      this.setState(function (prevState) {
	        return {
	          form: _extends({}, prevState.form, {
	            pass: newValue
	          })
	        };
	      });
	    }

	    /**
	     * 
	     */

	  }, {
	    key: "handleCreateRoom",
	    value: function handleCreateRoom(e) {
	      event.preventDefault();

	      var settings = this.state.form;
	      this.props.createRoom(settings);
	      this.props.history.push("/play");
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement("div", { id: "create-site" }, _react2.default.createElement(_components.Navbar, null), _react2.default.createElement("div", { className: "create-menu" }, _react2.default.createElement(_semanticUiReact.Grid, null, _react2.default.createElement(_semanticUiReact.Grid.Row, null, _react2.default.createElement(_semanticUiReact.Grid.Column, null, _react2.default.createElement(_semanticUiReact.Input, { name: "nickname",
	        fluid: true,
	        icon: "user",
	        iconPosition: "left",
	        placeholder: "Introduce a nickname",
	        defaultValue: this.state.form.nickname,
	        onChange: this.handleNicknameChange
	      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, null, _react2.default.createElement(_semanticUiReact.Grid.Column, null, _react2.default.createElement(_semanticUiReact.Input, { name: "room",
	        fluid: true,
	        icon: "users",
	        iconPosition: "left",
	        placeholder: "Room name...",
	        defaultValue: this.state.form.roomName,
	        onChange: this.handleRoomNameChange
	      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, null, _react2.default.createElement(_semanticUiReact.Grid.Column, null, _react2.default.createElement(_semanticUiReact.Select, { name: "rounds",
	        fluid: true,
	        placeholder: "Select number of rounds",
	        options: [{ key: '1', value: '1', text: '1' }, { key: '3', value: '3', text: '3' }, { key: '5', value: '5', text: '5' }, { key: '7', value: '7', text: '7' }],
	        onChange: this.handleNumberOfRoundsChange
	      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, null, _react2.default.createElement(_semanticUiReact.Grid.Column, null, _react2.default.createElement(_semanticUiReact.Checkbox, { name: "private",
	        label: "Check to make it private",
	        defaultValue: this.state.form.private,
	        onChange: this.handlePrivateChange
	      }), "\xA0", "\xA0", _react2.default.createElement(_semanticUiReact.Input, { name: "password",
	        size: "mini",
	        icon: "lock",
	        iconPosition: "left",
	        placeholder: "Search users...",
	        defaultValue: this.state.form.pass,
	        onChange: this.handlePassChange
	      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, null, _react2.default.createElement(_semanticUiReact.Grid.Column, null, _react2.default.createElement(_components.PrimaryButton, {
	        className: "button-primary",
	        value: "create",
	        onClick: this.handleCreateRoom
	      }))))));
	    }
	  }]);

	  return CreatePage;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	* @param {store}
	    */

	function mapStateToProps(state) {
	  return {};
	}

	/**
	 * 
	 * @param {*} dispatch 
	 */
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    createRoom: function createRoom(settings) {
	      dispatch((0, _gameActions.createRoom)(settings));
	    }
	  };
	};

	exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(CreatePage);

/***/ }),
/* 956 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRedux = __webpack_require__(18);

	var _semanticUiReact = __webpack_require__(162);

	var _components = __webpack_require__(824);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * SEARCHPAGE COMPONENT VIEW
	 */
	var SettingsPage = function (_Component) {
	  _inherits(SettingsPage, _Component);

	  function SettingsPage(props) {
	    _classCallCheck(this, SettingsPage);

	    return _possibleConstructorReturn(this, (SettingsPage.__proto__ || Object.getPrototypeOf(SettingsPage)).call(this, props));
	  }

	  _createClass(SettingsPage, [{
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement("div", { id: "settings-site" }, _react2.default.createElement(_components.Navbar, null), _react2.default.createElement(_semanticUiReact.Grid, null, _react2.default.createElement(_semanticUiReact.Grid.Row, null, _react2.default.createElement(_semanticUiReact.Grid.Column, { mobile: 16, tablet: 16, computer: 16 }, "Sound ", _react2.default.createElement(_semanticUiReact.Checkbox, { toggle: true })), _react2.default.createElement(_semanticUiReact.Grid.Column, { mobile: 16, tablet: 16, computer: 16 }, "Swearing ", _react2.default.createElement(_semanticUiReact.Checkbox, { toggle: true })))), _react2.default.createElement(_components.Footer, { links: ["contact us", "policy", "download"] }));
	    }
	  }]);

	  return SettingsPage;
	}(_react.Component);

	/**
	 * The component will subscribe to Redux store updates.
	 * @param {store}
	 */

	function mapStateToProps(state) {
	  return { sound: state.gameReducer.sound };
	}

	/**
	 * 
	 * @param {*} dispatch 
	 */
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {};
	};

	exports.default = (0, _reactRedux.connect)(mapStateToProps, null)(SettingsPage);

/***/ }),
/* 957 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * HowToPlay COMPONENT VIEW
	 */
	var Policy = function (_Component) {
	  _inherits(Policy, _Component);

	  function Policy(props) {
	    _classCallCheck(this, Policy);

	    return _possibleConstructorReturn(this, (Policy.__proto__ || Object.getPrototypeOf(Policy)).call(this, props));
	  }

	  _createClass(Policy, [{
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement("div", null, "How to play");
	    }
	  }]);

	  return Policy;
	}(_react.Component);

	exports.default = Policy;

/***/ }),
/* 958 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * HowToPlay COMPONENT VIEW
	 */
	var HowToPlay = function (_Component) {
	  _inherits(HowToPlay, _Component);

	  function HowToPlay(props) {
	    _classCallCheck(this, HowToPlay);

	    return _possibleConstructorReturn(this, (HowToPlay.__proto__ || Object.getPrototypeOf(HowToPlay)).call(this, props));
	  }

	  _createClass(HowToPlay, [{
	    key: "render",
	    value: function render() {
	      return _react2.default.createElement("div", null, "How to play");
	    }
	  }]);

	  return HowToPlay;
	}(_react.Component);

	exports.default = HowToPlay;

/***/ }),
/* 959 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var routes = {
	    HOME: '/',
	    SEARCH: '/search',
	    PLAY: "/play",
	    CREATE: "/create",
	    GAME: "/game/:roomId",
	    SETTINGS: "/settings",
	    HOW_TO_PLAY: "/howtoplay",
	    POLICY: "/policy"
	};

	exports.default = routes;

/***/ }),
/* 960 */
/***/ (function(module, exports, __webpack_require__) {

	!function(e,a){ true?module.exports=a():"function"==typeof define&&define.amd?define(a):(e.ReactIntlLocaleData=e.ReactIntlLocaleData||{},e.ReactIntlLocaleData.en=a())}(this,function(){"use strict";return[{locale:"en",pluralRuleFunction:function(e,a){var t=String(e).split("."),o=!t[1],n=Number(t[0])==e,r=n&&t[0].slice(-1),i=n&&t[0].slice(-2);return a?1==r&&11!=i?"one":2==r&&12!=i?"two":3==r&&13!=i?"few":"other":1==e&&o?"one":"other"},fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr.",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr.",other:"in {0} yr."},past:{one:"{0} yr. ago",other:"{0} yr. ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mo."},past:{one:"{0} mo. ago",other:"{0} mo. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr.",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr.",other:"in {0} hr."},past:{one:"{0} hr. ago",other:"{0} hr. ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} min."},past:{one:"{0} min. ago",other:"{0} min. ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} sec."},past:{one:"{0} sec. ago",other:"{0} sec. ago"}}}}},{locale:"en-001",parentLocale:"en",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr",other:"in {0} yr"},past:{one:"{0} yr ago",other:"{0} yr ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo",other:"in {0} mo"},past:{one:"{0} mo ago",other:"{0} mo ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr",other:"in {0} hr"},past:{one:"{0} hr ago",other:"{0} hr ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min",other:"in {0} min"},past:{one:"{0} min ago",other:"{0} min ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec",other:"in {0} sec"},past:{one:"{0} sec ago",other:"{0} sec ago"}}}}},{locale:"en-150",parentLocale:"en-001"},{locale:"en-AG",parentLocale:"en-001"},{locale:"en-AI",parentLocale:"en-001"},{locale:"en-AS",parentLocale:"en"},{locale:"en-AT",parentLocale:"en-150"},{locale:"en-AU",parentLocale:"en-001",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr",other:"in {0} yrs"},past:{one:"{0} yr ago",other:"{0} yrs ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mo."},past:{one:"{0} mo. ago",other:"{0} mo. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"h",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr",other:"in {0} hrs"},past:{one:"{0} hr ago",other:"{0} hrs ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} mins"},past:{one:"{0} min. ago",other:"{0} mins ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} secs"},past:{one:"{0} sec. ago",other:"{0} secs ago"}}}}},{locale:"en-BB",parentLocale:"en-001"},{locale:"en-BE",parentLocale:"en-001"},{locale:"en-BI",parentLocale:"en"},{locale:"en-BM",parentLocale:"en-001"},{locale:"en-BS",parentLocale:"en-001"},{locale:"en-BW",parentLocale:"en-001"},{locale:"en-BZ",parentLocale:"en-001"},{locale:"en-CA",parentLocale:"en-001",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr.",relative:{0:"this yr.",1:"next yr.","-1":"last yr."},relativeTime:{future:{one:"in {0} yr.",other:"in {0} yrs."},past:{one:"{0} yr. ago",other:"{0} yrs. ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mo.",relative:{0:"this mo.",1:"next mo.","-1":"last mo."},relativeTime:{future:{one:"in {0} mo.",other:"in {0} mos."},past:{one:"{0} mo. ago",other:"{0} mos. ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr.",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr.",other:"in {0} hrs."},past:{one:"{0} hr. ago",other:"{0} hrs. ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min.",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min.",other:"in {0} mins."},past:{one:"{0} min. ago",other:"{0} mins. ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec.",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec.",other:"in {0} secs."},past:{one:"{0} sec. ago",other:"{0} secs. ago"}}}}},{locale:"en-CC",parentLocale:"en-001"},{locale:"en-CH",parentLocale:"en-150"},{locale:"en-CK",parentLocale:"en-001"},{locale:"en-CM",parentLocale:"en-001"},{locale:"en-CX",parentLocale:"en-001"},{locale:"en-CY",parentLocale:"en-001"},{locale:"en-DE",parentLocale:"en-150"},{locale:"en-DG",parentLocale:"en-001"},{locale:"en-DK",parentLocale:"en-150"},{locale:"en-DM",parentLocale:"en-001"},{locale:"en-Dsrt",pluralRuleFunction:function(e,a){return"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"en-ER",parentLocale:"en-001"},{locale:"en-FI",parentLocale:"en-150"},{locale:"en-FJ",parentLocale:"en-001"},{locale:"en-FK",parentLocale:"en-001"},{locale:"en-FM",parentLocale:"en-001"},{locale:"en-GB",parentLocale:"en-001"},{locale:"en-GD",parentLocale:"en-001"},{locale:"en-GG",parentLocale:"en-001"},{locale:"en-GH",parentLocale:"en-001"},{locale:"en-GI",parentLocale:"en-001"},{locale:"en-GM",parentLocale:"en-001"},{locale:"en-GU",parentLocale:"en"},{locale:"en-GY",parentLocale:"en-001"},{locale:"en-HK",parentLocale:"en-001"},{locale:"en-IE",parentLocale:"en-001"},{locale:"en-IL",parentLocale:"en-001"},{locale:"en-IM",parentLocale:"en-001"},{locale:"en-IN",parentLocale:"en-001"},{locale:"en-IO",parentLocale:"en-001"},{locale:"en-JE",parentLocale:"en-001"},{locale:"en-JM",parentLocale:"en-001"},{locale:"en-KE",parentLocale:"en-001"},{locale:"en-KI",parentLocale:"en-001"},{locale:"en-KN",parentLocale:"en-001"},{locale:"en-KY",parentLocale:"en-001"},{locale:"en-LC",parentLocale:"en-001"},{locale:"en-LR",parentLocale:"en-001"},{locale:"en-LS",parentLocale:"en-001"},{locale:"en-MG",parentLocale:"en-001"},{locale:"en-MH",parentLocale:"en"},{locale:"en-MO",parentLocale:"en-001"},{locale:"en-MP",parentLocale:"en"},{locale:"en-MS",parentLocale:"en-001"},{locale:"en-MT",parentLocale:"en-001"},{locale:"en-MU",parentLocale:"en-001"},{locale:"en-MW",parentLocale:"en-001"},{locale:"en-MY",parentLocale:"en-001"},{locale:"en-NA",parentLocale:"en-001"},{locale:"en-NF",parentLocale:"en-001"},{locale:"en-NG",parentLocale:"en-001"},{locale:"en-NL",parentLocale:"en-150"},{locale:"en-NR",parentLocale:"en-001"},{locale:"en-NU",parentLocale:"en-001"},{locale:"en-NZ",parentLocale:"en-001"},{locale:"en-PG",parentLocale:"en-001"},{locale:"en-PH",parentLocale:"en-001"},{locale:"en-PK",parentLocale:"en-001"},{locale:"en-PN",parentLocale:"en-001"},{locale:"en-PR",parentLocale:"en"},{locale:"en-PW",parentLocale:"en-001"},{locale:"en-RW",parentLocale:"en-001"},{locale:"en-SB",parentLocale:"en-001"},{locale:"en-SC",parentLocale:"en-001"},{locale:"en-SD",parentLocale:"en-001"},{locale:"en-SE",parentLocale:"en-150"},{locale:"en-SG",parentLocale:"en-001",fields:{year:{displayName:"year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{one:"in {0} year",other:"in {0} years"},past:{one:"{0} year ago",other:"{0} years ago"}}},"year-short":{displayName:"yr",relative:{0:"this yr",1:"next yr","-1":"last yr"},relativeTime:{future:{one:"in {0} yr",other:"in {0} yr"},past:{one:"{0} yr ago",other:"{0} yr ago"}}},month:{displayName:"month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{one:"in {0} month",other:"in {0} months"},past:{one:"{0} month ago",other:"{0} months ago"}}},"month-short":{displayName:"mth",relative:{0:"this mth",1:"next mth","-1":"last mth"},relativeTime:{future:{one:"in {0} mth",other:"in {0} mth"},past:{one:"{0} mth ago",other:"{0} mth ago"}}},day:{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},"day-short":{displayName:"day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{one:"in {0} day",other:"in {0} days"},past:{one:"{0} day ago",other:"{0} days ago"}}},hour:{displayName:"hour",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hour",other:"in {0} hours"},past:{one:"{0} hour ago",other:"{0} hours ago"}}},"hour-short":{displayName:"hr",relative:{0:"this hour"},relativeTime:{future:{one:"in {0} hr",other:"in {0} hr"},past:{one:"{0} hr ago",other:"{0} hr ago"}}},minute:{displayName:"minute",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} minute",other:"in {0} minutes"},past:{one:"{0} minute ago",other:"{0} minutes ago"}}},"minute-short":{displayName:"min",relative:{0:"this minute"},relativeTime:{future:{one:"in {0} min",other:"in {0} min"},past:{one:"{0} min ago",other:"{0} min ago"}}},second:{displayName:"second",relative:{0:"now"},relativeTime:{future:{one:"in {0} second",other:"in {0} seconds"},past:{one:"{0} second ago",other:"{0} seconds ago"}}},"second-short":{displayName:"sec",relative:{0:"now"},relativeTime:{future:{one:"in {0} sec",other:"in {0} sec"},past:{one:"{0} sec ago",other:"{0} sec ago"}}}}},{locale:"en-SH",parentLocale:"en-001"},{locale:"en-SI",parentLocale:"en-150"},{locale:"en-SL",parentLocale:"en-001"},{locale:"en-SS",parentLocale:"en-001"},{locale:"en-SX",parentLocale:"en-001"},{locale:"en-SZ",parentLocale:"en-001"},{locale:"en-Shaw",pluralRuleFunction:function(e,a){return"other"},fields:{year:{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},"year-short":{displayName:"Year",relative:{0:"this year",1:"next year","-1":"last year"},relativeTime:{future:{other:"+{0} y"},past:{other:"-{0} y"}}},month:{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},"month-short":{displayName:"Month",relative:{0:"this month",1:"next month","-1":"last month"},relativeTime:{future:{other:"+{0} m"},past:{other:"-{0} m"}}},day:{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},"day-short":{displayName:"Day",relative:{0:"today",1:"tomorrow","-1":"yesterday"},relativeTime:{future:{other:"+{0} d"},past:{other:"-{0} d"}}},hour:{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},"hour-short":{displayName:"Hour",relative:{0:"this hour"},relativeTime:{future:{other:"+{0} h"},past:{other:"-{0} h"}}},minute:{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},"minute-short":{displayName:"Minute",relative:{0:"this minute"},relativeTime:{future:{other:"+{0} min"},past:{other:"-{0} min"}}},second:{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}},"second-short":{displayName:"Second",relative:{0:"now"},relativeTime:{future:{other:"+{0} s"},past:{other:"-{0} s"}}}}},{locale:"en-TC",parentLocale:"en-001"},{locale:"en-TK",parentLocale:"en-001"},{locale:"en-TO",parentLocale:"en-001"},{locale:"en-TT",parentLocale:"en-001"},{locale:"en-TV",parentLocale:"en-001"},{locale:"en-TZ",parentLocale:"en-001"},{locale:"en-UG",parentLocale:"en-001"},{locale:"en-UM",parentLocale:"en"},{locale:"en-US",parentLocale:"en"},{locale:"en-VC",parentLocale:"en-001"},{locale:"en-VG",parentLocale:"en-001"},{locale:"en-VI",parentLocale:"en"},{locale:"en-VU",parentLocale:"en-001"},{locale:"en-WS",parentLocale:"en-001"},{locale:"en-ZA",parentLocale:"en-001"},{locale:"en-ZM",parentLocale:"en-001"},{locale:"en-ZW",parentLocale:"en-001"}]});


/***/ }),
/* 961 */
/***/ (function(module, exports, __webpack_require__) {

	!function(e,a){ true?module.exports=a():"function"==typeof define&&define.amd?define(a):(e.ReactIntlLocaleData=e.ReactIntlLocaleData||{},e.ReactIntlLocaleData.es=a())}(this,function(){"use strict";return[{locale:"es",pluralRuleFunction:function(e,a){return a?"other":1==e?"one":"other"},fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-419",parentLocale:"es"},{locale:"es-AR",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} días",other:"dentro de {0} días"},past:{one:"hace {0} días",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"seg.",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} seg.",other:"dentro de {0} seg."},past:{one:"hace {0} seg.",other:"hace {0} seg."}}}}},{locale:"es-BO",parentLocale:"es-419"},{locale:"es-BR",parentLocale:"es-419"},{locale:"es-BZ",parentLocale:"es-419"},{locale:"es-CL",parentLocale:"es-419"},{locale:"es-CO",parentLocale:"es-419"},{locale:"es-CR",parentLocale:"es-419"},{locale:"es-CU",parentLocale:"es-419"},{locale:"es-DO",parentLocale:"es-419",fields:{year:{displayName:"Año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"Mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"Día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"Minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"Segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-EA",parentLocale:"es"},{locale:"es-EC",parentLocale:"es-419"},{locale:"es-GQ",parentLocale:"es"},{locale:"es-GT",parentLocale:"es-419"},{locale:"es-HN",parentLocale:"es-419"},{locale:"es-IC",parentLocale:"es"},{locale:"es-MX",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el año próximo","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"en {0} a",other:"en {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el mes próximo","-1":"el mes pasado"},relativeTime:{future:{one:"en {0} mes",other:"en {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"en {0} m",other:"en {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"en {0} día",other:"en {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"en {0} h",other:"en {0} n"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"en {0} min",other:"en {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"en {0} s",other:"en {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-NI",parentLocale:"es-419"},{locale:"es-PA",parentLocale:"es-419"},{locale:"es-PE",parentLocale:"es-419"},{locale:"es-PH",parentLocale:"es"},{locale:"es-PR",parentLocale:"es-419"},{locale:"es-PY",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"seg.",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} seg.",other:"dentro de {0} seg."},past:{one:"hace {0} seg.",other:"hace {0} seg."}}}}},{locale:"es-SV",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"antier","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-US",parentLocale:"es-419",fields:{year:{displayName:"año",relative:{0:"este año",1:"el año próximo","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} año",other:"dentro de {0} años"},past:{one:"hace {0} año",other:"hace {0} años"}}},"year-short":{displayName:"a",relative:{0:"este año",1:"el próximo año","-1":"el año pasado"},relativeTime:{future:{one:"dentro de {0} a",other:"dentro de {0} a"},past:{one:"hace {0} a",other:"hace {0} a"}}},month:{displayName:"mes",relative:{0:"este mes",1:"el mes próximo","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} mes",other:"dentro de {0} meses"},past:{one:"hace {0} mes",other:"hace {0} meses"}}},"month-short":{displayName:"m",relative:{0:"este mes",1:"el próximo mes","-1":"el mes pasado"},relativeTime:{future:{one:"dentro de {0} m",other:"dentro de {0} m"},past:{one:"hace {0} m",other:"hace {0} m"}}},day:{displayName:"día",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},"day-short":{displayName:"d",relative:{0:"hoy",1:"mañana",2:"pasado mañana","-2":"anteayer","-1":"ayer"},relativeTime:{future:{one:"dentro de {0} día",other:"dentro de {0} días"},past:{one:"hace {0} día",other:"hace {0} días"}}},hour:{displayName:"hora",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} hora",other:"dentro de {0} horas"},past:{one:"hace {0} hora",other:"hace {0} horas"}}},"hour-short":{displayName:"h",relative:{0:"esta hora"},relativeTime:{future:{one:"dentro de {0} h",other:"dentro de {0} h"},past:{one:"hace {0} h",other:"hace {0} h"}}},minute:{displayName:"minuto",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} minuto",other:"dentro de {0} minutos"},past:{one:"hace {0} minuto",other:"hace {0} minutos"}}},"minute-short":{displayName:"min",relative:{0:"este minuto"},relativeTime:{future:{one:"dentro de {0} min",other:"dentro de {0} min"},past:{one:"hace {0} min",other:"hace {0} min"}}},second:{displayName:"segundo",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} segundo",other:"dentro de {0} segundos"},past:{one:"hace {0} segundo",other:"hace {0} segundos"}}},"second-short":{displayName:"s",relative:{0:"ahora"},relativeTime:{future:{one:"dentro de {0} s",other:"dentro de {0} s"},past:{one:"hace {0} s",other:"hace {0} s"}}}}},{locale:"es-UY",parentLocale:"es-419"},{locale:"es-VE",parentLocale:"es-419"}]});


/***/ }),
/* 962 */
/***/ (function(module, exports) {

	module.exports = {"home.input":"Introduce apodo","home.btn1":"Jugar ahora!","home.btn2":"Buscar partida","home.btn3":"Crear partida","home.btn4":"Configuracion"}

/***/ }),
/* 963 */
/***/ (function(module, exports) {

	module.exports = {"home.input":"Introduce nickname","home.btn1":"Play now!","home.btn2":"Find Game","home.btn3":"Create game","home.btn4":"Settings"}

/***/ }),
/* 964 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * AdBlock Component
	 */
	var AdBlock = function AdBlock(props) {
	  return _react2.default.createElement('div', { id: 'afscontainer1' });
	};

	exports.default = AdBlock;

/***/ })
/******/ ]);