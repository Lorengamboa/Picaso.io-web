import React from 'react';
import { createStore } from 'redux';
import { Provider } from 'react-redux';
import { reducer as formReducer } from 'redux-form';
import TranslationProvider from '../i18n/TranslationProvider';
import merge from 'lodash/merge';
import { createMemoryHistory } from 'history';
import createAdminStore from '../createAdminStore';
export var defaultStore = {
    admin: {
        resources: {},
        references: { possibleValues: {} },
        ui: { viewVersion: 1 },
    },
    form: formReducer({}, { type: '@@FOO' }),
    i18n: { locale: 'en', messages: {} },
};
/**
 * Simulate a react-admin context in unit tests
 *
 * Pass custom store values as store prop
 *
 * @example
 * // in an enzyme test
 * const wrapper = render(
 *     <AdminContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>
 *         <Show {...defaultShowProps} />
 *     </AdminContext>
 * );
 *
 * @example
 * // in an enzyme test, using jest.
 * const wrapper = render(
 *     <AdminContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>
 *         {({ store }) => {
 *              dispatchSpy = jest.spyOn(store, 'dispatch');
 *              return <Show {...defaultShowProps} />
 *         }}
 *     </AdminContext>
 * );
 */
var TestContext = function (_a) {
    var _b = _a.store, store = _b === void 0 ? {} : _b, _c = _a.enableReducers, enableReducers = _c === void 0 ? false : _c, children = _a.children;
    var storeWithDefault = enableReducers
        ? createAdminStore({
            initialState: merge(defaultStore, store),
            dataProvider: function () { return Promise.resolve({}); },
            history: createMemoryHistory(),
        })
        : createStore(function () { return merge(defaultStore, store); });
    var renderChildren = function () {
        return typeof children === 'function'
            ? children({ store: storeWithDefault })
            : children;
    };
    return (React.createElement(Provider, { store: storeWithDefault },
        React.createElement(TranslationProvider, null, renderChildren())));
};
export default TestContext;
