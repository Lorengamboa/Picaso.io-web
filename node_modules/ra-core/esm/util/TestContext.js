import React from 'react';
import PropTypes from 'prop-types';
import { createStore } from 'redux';
import { Provider } from 'react-redux';
import { reducer as formReducer } from 'redux-form';
import { TranslationProvider } from 'ra-core';
import merge from 'lodash/merge';
import createAdminStore from '../createAdminStore';
export var defaultStore = {
    admin: {
        resources: {},
        references: { possibleValues: {} },
        ui: { viewVersion: 1 },
    },
    form: formReducer(),
    i18n: { locale: 'en', messages: {} },
};
/**
 * Simulate a react-admin context in unit tests
 *
 * Pass custom store values as store prop
 *
 * @example
 * // in an enzyme test
 * const wrapper = render(
 *     <AdminContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>
 *         <Show {...defaultShowProps} />
 *     </AdminContext>
 * );
 *
 * @example
 * // in an enzyme test, using jest.
 * const wrapper = render(
 *     <AdminContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>
 *         {({ store }) => {
 *              dispatchSpy = jest.spyOn(store, 'dispatch');
 *              return <Show {...defaultShowProps} />
 *         }}
 *     </AdminContext>
 * );
 */
var TestContext = function (_a) {
    var store = _a.store, enableReducers = _a.enableReducers, children = _a.children;
    var storeWithDefault = enableReducers
        ? createAdminStore({ initialState: merge(defaultStore, store) })
        : createStore(function () { return merge(defaultStore, store); });
    var renderChildren = function () { return (typeof children === 'function' ? children({ store: storeWithDefault }) : children); };
    return (React.createElement(Provider, { store: storeWithDefault },
        React.createElement(TranslationProvider, null, renderChildren())));
};
TestContext.propTypes = {
    store: PropTypes.object.isRequired,
    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
    enableReducers: PropTypes.bool,
};
TestContext.defaultProps = {
    store: {},
    enableReducers: false,
};
export default TestContext;
