"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var getFetchedAt_1 = __importDefault(require("./getFetchedAt"));
describe('getFetchedAt', function () {
    it('should return now date for every newRecordsId', function () {
        var cacheDuration = 10 * 60 * 1000;
        var now = new Date();
        var newRecordIds = [1, 2, 3];
        assert_1.default.deepEqual(getFetchedAt_1.default(newRecordIds, {}, now, cacheDuration), {
            1: now,
            2: now,
            3: now,
        });
    });
    it('should keep old date if it is still valid', function () {
        var cacheDuration = 10 * 60 * 1000;
        var now = new Date();
        var newRecordIds = [1, 2, 3];
        var validDate = new Date();
        validDate.setTime(now.getTime() - cacheDuration / 2);
        var oldFetchedData = {
            4: validDate,
        };
        assert_1.default.deepEqual(getFetchedAt_1.default(newRecordIds, oldFetchedData, now, cacheDuration), {
            1: now,
            2: now,
            3: now,
            4: validDate,
        });
    });
    it('should discard old date if it is not valid anymore', function () {
        var cacheDuration = 10 * 60 * 1000;
        var now = new Date();
        var newRecordIds = [1, 2, 3];
        var invalidDate = new Date();
        invalidDate.setTime(now.getTime() - cacheDuration);
        var oldFetchedData = {
            4: invalidDate,
        };
        assert_1.default.deepEqual(getFetchedAt_1.default(newRecordIds, oldFetchedData, now, cacheDuration), {
            1: now,
            2: now,
            3: now,
        });
    });
    it('should update old date if id present in newRecordsId even if not valid anymore', function () {
        var cacheDuration = 10 * 60 * 1000;
        var now = new Date();
        var newRecordIds = [1, 2, 3];
        var validDate = new Date();
        validDate.setTime(now.getTime() - cacheDuration / 2);
        var invalidDate = new Date();
        invalidDate.setTime(now.getTime() - cacheDuration);
        var oldFetchedData = {
            1: validDate,
            2: invalidDate,
        };
        assert_1.default.deepEqual(getFetchedAt_1.default(newRecordIds, oldFetchedData, now, cacheDuration), {
            1: now,
            2: now,
            3: now,
        });
    });
});
