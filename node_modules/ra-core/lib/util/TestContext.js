"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var redux_1 = require("redux");
var react_redux_1 = require("react-redux");
var redux_form_1 = require("redux-form");
var ra_core_1 = require("ra-core");
var merge_1 = __importDefault(require("lodash/merge"));
var createAdminStore_1 = __importDefault(require("../createAdminStore"));
exports.defaultStore = {
    admin: {
        resources: {},
        references: { possibleValues: {} },
        ui: { viewVersion: 1 },
    },
    form: redux_form_1.reducer(),
    i18n: { locale: 'en', messages: {} },
};
/**
 * Simulate a react-admin context in unit tests
 *
 * Pass custom store values as store prop
 *
 * @example
 * // in an enzyme test
 * const wrapper = render(
 *     <AdminContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>
 *         <Show {...defaultShowProps} />
 *     </AdminContext>
 * );
 *
 * @example
 * // in an enzyme test, using jest.
 * const wrapper = render(
 *     <AdminContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>
 *         {({ store }) => {
 *              dispatchSpy = jest.spyOn(store, 'dispatch');
 *              return <Show {...defaultShowProps} />
 *         }}
 *     </AdminContext>
 * );
 */
var TestContext = function (_a) {
    var store = _a.store, enableReducers = _a.enableReducers, children = _a.children;
    var storeWithDefault = enableReducers
        ? createAdminStore_1.default({ initialState: merge_1.default(exports.defaultStore, store) })
        : redux_1.createStore(function () { return merge_1.default(exports.defaultStore, store); });
    var renderChildren = function () { return (typeof children === 'function' ? children({ store: storeWithDefault }) : children); };
    return (react_1.default.createElement(react_redux_1.Provider, { store: storeWithDefault },
        react_1.default.createElement(ra_core_1.TranslationProvider, null, renderChildren())));
};
TestContext.propTypes = {
    store: prop_types_1.default.object.isRequired,
    children: prop_types_1.default.oneOfType([prop_types_1.default.node, prop_types_1.default.func]),
    enableReducers: prop_types_1.default.bool,
};
TestContext.defaultProps = {
    store: {},
    enableReducers: false,
};
exports.default = TestContext;
